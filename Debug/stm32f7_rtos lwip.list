
stm32f7_rtos lwip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011af4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002378  08011cc4  08011cc4  00021cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801403c  0801403c  0002403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014044  08014044  00024044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014048  08014048  00024048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801404c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000fa38  20000098  080140e4  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000fad0  080140e4  0003fad0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   000844d5  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ed22  00000000  00000000  000b459d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002ba09  00000000  00000000  000c32bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003058  00000000  00000000  000eecc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004378  00000000  00000000  000f1d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00020c35  00000000  00000000  000f6098  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000119cc  00000000  00000000  00116ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00128699  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a5c  00000000  00000000  00128718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011cac 	.word	0x08011cac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08011cac 	.word	0x08011cac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f970 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f010 f9a9 	bl	8010920 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005ce:	f00f fd83 	bl	80100d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005d2:	2000      	movs	r0, #0
 80005d4:	bd08      	pop	{r3, pc}
	...

080005d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x10>)
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_IncTick+0x14>)
 80005dc:	6811      	ldr	r1, [r2, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	440b      	add	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200083c0 	.word	0x200083c0
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200083c0 	.word	0x200083c0

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
 8000604:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000608:	bf1e      	ittt	ne
 800060a:	4b04      	ldrne	r3, [pc, #16]	; (800061c <HAL_Delay+0x20>)
 800060c:	781b      	ldrbne	r3, [r3, #0]
 800060e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000610:	f7ff ffee 	bl	80005f0 <HAL_GetTick>
 8000614:	1b40      	subs	r0, r0, r5
 8000616:	4284      	cmp	r4, r0
 8000618:	d8fa      	bhi.n	8000610 <HAL_Delay+0x14>
  {
  }
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000620:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000622:	4604      	mov	r4, r0
 8000624:	2800      	cmp	r0, #0
 8000626:	f000 8099 	beq.w	800075c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800062a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800062c:	b923      	cbnz	r3, 8000638 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800062e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000630:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000634:	f00f fd96 	bl	8010164 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800063a:	06db      	lsls	r3, r3, #27
 800063c:	f100 808c 	bmi.w	8000758 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000646:	f023 0302 	bic.w	r3, r3, #2
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000650:	4b43      	ldr	r3, [pc, #268]	; (8000760 <HAL_ADC_Init+0x140>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000658:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	6861      	ldr	r1, [r4, #4]
 800065e:	430a      	orrs	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000662:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000664:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800066c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000674:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000676:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800067e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000684:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000686:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800068e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000694:	4933      	ldr	r1, [pc, #204]	; (8000764 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000696:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000698:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800069a:	428a      	cmp	r2, r1
 800069c:	d050      	beq.n	8000740 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800069e:	6899      	ldr	r1, [r3, #8]
 80006a0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006a4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ba:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006bc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006be:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c0:	f022 0202 	bic.w	r2, r2, #2
 80006c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006ce:	6a22      	ldr	r2, [r4, #32]
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d03d      	beq.n	8000750 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006d4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006dc:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006ee:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80006f0:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006f4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006fa:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000700:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000704:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800070e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000716:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000728:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800072a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800072c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800072e:	f023 0303 	bic.w	r3, r3, #3
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000738:	2300      	movs	r3, #0
 800073a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800073e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800074e:	e7b4      	b.n	80006ba <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000756:	e7ca      	b.n	80006ee <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000758:	2001      	movs	r0, #1
 800075a:	e7ed      	b.n	8000738 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800075c:	2001      	movs	r0, #1
}
 800075e:	bd10      	pop	{r4, pc}
 8000760:	40012300 	.word	0x40012300
 8000764:	0f000001 	.word	0x0f000001

08000768 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8000768:	2300      	movs	r3, #0
{
 800076a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800076c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800076e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000772:	2b01      	cmp	r3, #1
 8000774:	d071      	beq.n	800085a <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000776:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000778:	2301      	movs	r3, #1
 800077a:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800077c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800077e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000782:	b2ae      	uxth	r6, r5
 8000784:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000786:	d931      	bls.n	80007ec <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000788:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800078c:	f04f 0e07 	mov.w	lr, #7
 8000790:	68e7      	ldr	r7, [r4, #12]
 8000792:	3b1e      	subs	r3, #30
 8000794:	fa0e fe03 	lsl.w	lr, lr, r3
 8000798:	ea27 070e 	bic.w	r7, r7, lr
 800079c:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800079e:	4f3d      	ldr	r7, [pc, #244]	; (8000894 <HAL_ADC_ConfigChannel+0x12c>)
 80007a0:	42bd      	cmp	r5, r7
 80007a2:	d11e      	bne.n	80007e2 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80007a4:	68e3      	ldr	r3, [r4, #12]
 80007a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007aa:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 80007ac:	684a      	ldr	r2, [r1, #4]
 80007ae:	2a06      	cmp	r2, #6
 80007b0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80007b4:	d82a      	bhi.n	800080c <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007b6:	4413      	add	r3, r2
 80007b8:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80007ba:	1f59      	subs	r1, r3, #5
 80007bc:	231f      	movs	r3, #31
 80007be:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007c0:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007c4:	ea27 0303 	bic.w	r3, r7, r3
 80007c8:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007cc:	4311      	orrs	r1, r2
 80007ce:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <HAL_ADC_ConfigChannel+0x130>)
 80007d2:	429c      	cmp	r4, r3
 80007d4:	d039      	beq.n	800084a <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 80007d6:	2300      	movs	r3, #0
 80007d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007dc:	4618      	mov	r0, r3
}
 80007de:	b003      	add	sp, #12
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007e2:	68e7      	ldr	r7, [r4, #12]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	433b      	orrs	r3, r7
 80007ea:	e7de      	b.n	80007aa <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007ec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80007f0:	f04f 0e07 	mov.w	lr, #7
 80007f4:	6927      	ldr	r7, [r4, #16]
 80007f6:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007fe:	ea27 070e 	bic.w	r7, r7, lr
 8000802:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000804:	6927      	ldr	r7, [r4, #16]
 8000806:	433b      	orrs	r3, r7
 8000808:	6123      	str	r3, [r4, #16]
 800080a:	e7cf      	b.n	80007ac <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 800080c:	2a0c      	cmp	r2, #12
 800080e:	d80e      	bhi.n	800082e <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000810:	4413      	add	r3, r2
 8000812:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000814:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000818:	231f      	movs	r3, #31
 800081a:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800081c:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000820:	ea21 0303 	bic.w	r3, r1, r3
 8000824:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000828:	431a      	orrs	r2, r3
 800082a:	6322      	str	r2, [r4, #48]	; 0x30
 800082c:	e7d0      	b.n	80007d0 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800082e:	4413      	add	r3, r2
 8000830:	221f      	movs	r2, #31
 8000832:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000834:	3b41      	subs	r3, #65	; 0x41
 8000836:	409a      	lsls	r2, r3
 8000838:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800083c:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000840:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000842:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000844:	4311      	orrs	r1, r2
 8000846:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000848:	e7c2      	b.n	80007d0 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800084a:	2d12      	cmp	r5, #18
 800084c:	d107      	bne.n	800085e <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_ADC_ConfigChannel+0x134>)
 8000850:	6853      	ldr	r3, [r2, #4]
 8000852:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000856:	6053      	str	r3, [r2, #4]
 8000858:	e7bd      	b.n	80007d6 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 800085a:	2002      	movs	r0, #2
 800085c:	e7bf      	b.n	80007de <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_ADC_ConfigChannel+0x12c>)
 8000860:	429d      	cmp	r5, r3
 8000862:	d001      	beq.n	8000868 <HAL_ADC_ConfigChannel+0x100>
 8000864:	2d11      	cmp	r5, #17
 8000866:	d1b6      	bne.n	80007d6 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800086a:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 800086c:	684a      	ldr	r2, [r1, #4]
 800086e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000872:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000874:	d1af      	bne.n	80007d6 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_ADC_ConfigChannel+0x138>)
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_ADC_ConfigChannel+0x13c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000880:	230a      	movs	r3, #10
 8000882:	4353      	muls	r3, r2
        counter--;
 8000884:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000886:	9b01      	ldr	r3, [sp, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0a4      	beq.n	80007d6 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 800088c:	9b01      	ldr	r3, [sp, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	e7f8      	b.n	8000884 <HAL_ADC_ConfigChannel+0x11c>
 8000892:	bf00      	nop
 8000894:	10000012 	.word	0x10000012
 8000898:	40012000 	.word	0x40012000
 800089c:	40012300 	.word	0x40012300
 80008a0:	20000030 	.word	0x20000030
 80008a4:	000f4240 	.word	0x000f4240

080008a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008b6:	041b      	lsls	r3, r3, #16
 80008b8:	0c1b      	lsrs	r3, r3, #16
 80008ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80008c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008c4:	60d3      	str	r3, [r2, #12]
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b530      	push	{r4, r5, lr}
 80008d0:	68dc      	ldr	r4, [r3, #12]
 80008d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	2b04      	cmp	r3, #4
 80008de:	bf28      	it	cs
 80008e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e8:	bf8c      	ite	hi
 80008ea:	3c03      	subhi	r4, #3
 80008ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80008f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80008f8:	ea01 0103 	and.w	r1, r1, r3
 80008fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	fa05 f404 	lsl.w	r4, r5, r4
 8000904:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000908:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	ea42 0201 	orr.w	r2, r2, r1
 8000910:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000914:	da05      	bge.n	8000922 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	f000 000f 	and.w	r0, r0, #15
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_NVIC_SetPriority+0x6c>)
 800091e:	541a      	strb	r2, [r3, r0]
 8000920:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800092c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000930:	bd30      	pop	{r4, r5, pc}
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	e000ed14 	.word	0xe000ed14

0800093c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800093c:	0942      	lsrs	r2, r0, #5
 800093e:	2301      	movs	r3, #1
 8000940:	f000 001f 	and.w	r0, r0, #31
 8000944:	fa03 f000 	lsl.w	r0, r3, r0
 8000948:	4b01      	ldr	r3, [pc, #4]	; (8000950 <HAL_NVIC_EnableIRQ+0x14>)
 800094a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100

08000954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	3801      	subs	r0, #1
 8000956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095a:	d20a      	bcs.n	8000972 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	21f0      	movs	r1, #240	; 0xf0
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000982:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	bf0c      	ite	eq
 8000988:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800098c:	f022 0204 	bicne.w	r2, r2, #4
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	4770      	bx	lr
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000998:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800099a:	4604      	mov	r4, r0
 800099c:	b908      	cbnz	r0, 80009a2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
 80009a0:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80009a2:	7f43      	ldrb	r3, [r0, #29]
 80009a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009a8:	b913      	cbnz	r3, 80009b0 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80009aa:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009ac:	f00f fc06 	bl	80101bc <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80009b0:	2302      	movs	r3, #2
 80009b2:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80009b4:	7923      	ldrb	r3, [r4, #4]
 80009b6:	b9e3      	cbnz	r3, 80009f2 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <HAL_CRC_Init+0x70>)
 80009bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	f022 0218 	bic.w	r2, r2, #24
 80009c4:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80009c6:	7962      	ldrb	r2, [r4, #5]
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	b9d2      	cbnz	r2, 8000a02 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80009d0:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 80009d2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	6961      	ldr	r1, [r4, #20]
 80009d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80009dc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80009de:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80009e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009e8:	430a      	orrs	r2, r1
 80009ea:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80009ec:	2301      	movs	r3, #1
 80009ee:	7763      	strb	r3, [r4, #29]
}
 80009f0:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80009f2:	68e2      	ldr	r2, [r4, #12]
 80009f4:	4620      	mov	r0, r4
 80009f6:	68a1      	ldr	r1, [r4, #8]
 80009f8:	f000 f808 	bl	8000a0c <HAL_CRCEx_Polynomial_Set>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d0e2      	beq.n	80009c6 <HAL_CRC_Init+0x2e>
 8000a00:	e7cd      	b.n	800099e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a02:	6922      	ldr	r2, [r4, #16]
 8000a04:	e7e4      	b.n	80009d0 <HAL_CRC_Init+0x38>
 8000a06:	bf00      	nop
 8000a08:	04c11db7 	.word	0x04c11db7

08000a0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a0c:	231f      	movs	r3, #31
{
 8000a0e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000a10:	fa21 f403 	lsr.w	r4, r1, r3
 8000a14:	07e4      	lsls	r4, r4, #31
 8000a16:	d40a      	bmi.n	8000a2e <HAL_CRCEx_Polynomial_Set+0x22>
 8000a18:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000a1c:	d2f8      	bcs.n	8000a10 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000a1e:	2a10      	cmp	r2, #16
 8000a20:	d003      	beq.n	8000a2a <HAL_CRCEx_Polynomial_Set+0x1e>
 8000a22:	2a18      	cmp	r2, #24
 8000a24:	d001      	beq.n	8000a2a <HAL_CRCEx_Polynomial_Set+0x1e>
 8000a26:	2a08      	cmp	r2, #8
 8000a28:	d10b      	bne.n	8000a42 <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 8000a2e:	2a10      	cmp	r2, #16
 8000a30:	d010      	beq.n	8000a54 <HAL_CRCEx_Polynomial_Set+0x48>
 8000a32:	2a18      	cmp	r2, #24
 8000a34:	d003      	beq.n	8000a3e <HAL_CRCEx_Polynomial_Set+0x32>
 8000a36:	2a08      	cmp	r2, #8
 8000a38:	d103      	bne.n	8000a42 <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	e000      	b.n	8000a40 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000a3e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000a40:	d8f3      	bhi.n	8000a2a <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8000a42:	6800      	ldr	r0, [r0, #0]
 8000a44:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8000a46:	6883      	ldr	r3, [r0, #8]
 8000a48:	f023 0318 	bic.w	r3, r3, #24
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8000a50:	2000      	movs	r0, #0
 8000a52:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	e7f3      	b.n	8000a40 <HAL_CRCEx_Polynomial_Set+0x34>

08000a58 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000a58:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d03d      	beq.n	8000adc <HAL_DCMI_Init+0x84>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000a60:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a64:	b90b      	cbnz	r3, 8000a6a <HAL_DCMI_Init+0x12>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8000a66:	f00f fbbf 	bl	80101e8 <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a6a:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000a6c:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a6e:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000a70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_DCMI_Init+0x88>)
 8000a76:	6811      	ldr	r1, [r2, #0]
 8000a78:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a7a:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a7c:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000a7e:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a80:	6963      	ldr	r3, [r4, #20]
 8000a82:	6810      	ldr	r0, [r2, #0]
 8000a84:	ea43 0301 	orr.w	r3, r3, r1
 8000a88:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000a8c:	6925      	ldr	r5, [r4, #16]
 8000a8e:	ea43 0305 	orr.w	r3, r3, r5
 8000a92:	68a5      	ldr	r5, [r4, #8]
 8000a94:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000a98:	69a5      	ldr	r5, [r4, #24]
 8000a9a:	ea43 0305 	orr.w	r3, r3, r5
 8000a9e:	6a25      	ldr	r5, [r4, #32]
 8000aa0:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000aa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000aa6:	ea43 0305 	orr.w	r3, r3, r5
 8000aaa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000aac:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ab0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000ab2:	ea43 0305 	orr.w	r3, r3, r5
 8000ab6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000ab8:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000abc:	ea43 0300 	orr.w	r3, r3, r0
 8000ac0:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000ac2:	d101      	bne.n	8000ac8 <HAL_DCMI_Init+0x70>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ac4:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ac6:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000ac8:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000aca:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000acc:	f043 031e 	orr.w	r3, r3, #30
 8000ad0:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ad2:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ad4:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ad6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000ada:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000adc:	2001      	movs	r0, #1
}
 8000ade:	bd38      	pop	{r3, r4, r5, pc}
 8000ae0:	ffe0f007 	.word	0xffe0f007

08000ae4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8000ae4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	b330      	cbz	r0, 8000b38 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000aea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000aee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000af2:	b91b      	cbnz	r3, 8000afc <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000af4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000af8:	f00f fbce 	bl	8010298 <HAL_DMA2D_MspInit>
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000afc:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000afe:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000b00:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000b02:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000b04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b0e:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000b10:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000b12:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000b14:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000b16:	f023 0307 	bic.w	r3, r3, #7
 8000b1a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000b1c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000b1e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000b2e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000b30:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000b32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000b36:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
}
 8000b3a:	bd10      	pop	{r4, pc}

08000b3c <HAL_DMA2D_LineEventCallback>:
 8000b3c:	4770      	bx	lr

08000b3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000b3e:	4770      	bx	lr

08000b40 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000b40:	6803      	ldr	r3, [r0, #0]
{
 8000b42:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000b44:	685e      	ldr	r6, [r3, #4]
{
 8000b46:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000b48:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000b4a:	07f2      	lsls	r2, r6, #31
 8000b4c:	d514      	bpl.n	8000b78 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8000b4e:	05e9      	lsls	r1, r5, #23
 8000b50:	d512      	bpl.n	8000b78 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b58:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000b5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000b62:	2201      	movs	r2, #1
 8000b64:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b66:	2304      	movs	r3, #4
 8000b68:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000b72:	6943      	ldr	r3, [r0, #20]
 8000b74:	b103      	cbz	r3, 8000b78 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8000b76:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000b78:	06b2      	lsls	r2, r6, #26
 8000b7a:	d516      	bpl.n	8000baa <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8000b7c:	04ab      	lsls	r3, r5, #18
 8000b7e:	d514      	bpl.n	8000baa <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b88:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8000b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b96:	2304      	movs	r3, #4
 8000b98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000ba2:	6963      	ldr	r3, [r4, #20]
 8000ba4:	b10b      	cbz	r3, 8000baa <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000baa:	0730      	lsls	r0, r6, #28
 8000bac:	d516      	bpl.n	8000bdc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8000bae:	0529      	lsls	r1, r5, #20
 8000bb0:	d514      	bpl.n	8000bdc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8000bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000bd4:	6963      	ldr	r3, [r4, #20]
 8000bd6:	b10b      	cbz	r3, 8000bdc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000bdc:	0772      	lsls	r2, r6, #29
 8000bde:	d50b      	bpl.n	8000bf8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8000be0:	056b      	lsls	r3, r5, #21
 8000be2:	d509      	bpl.n	8000bf8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000be4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000be6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000bf4:	f7ff ffa2 	bl	8000b3c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000bf8:	07b0      	lsls	r0, r6, #30
 8000bfa:	d514      	bpl.n	8000c26 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8000bfc:	05a9      	lsls	r1, r5, #22
 8000bfe:	d512      	bpl.n	8000c26 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c08:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8000c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c10:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8000c1e:	6923      	ldr	r3, [r4, #16]
 8000c20:	b10b      	cbz	r3, 8000c26 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8000c22:	4620      	mov	r0, r4
 8000c24:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000c26:	06f2      	lsls	r2, r6, #27
 8000c28:	d513      	bpl.n	8000c52 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8000c2a:	04eb      	lsls	r3, r5, #19
 8000c2c:	d511      	bpl.n	8000c52 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000c2e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8000c30:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c38:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8000c3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c40:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8000c4e:	f7ff ff76 	bl	8000b3e <HAL_DMA2D_CLUTLoadingCpltCallback>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}

08000c54 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000c54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f04f 0302 	mov.w	r3, #2
{ 
 8000c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8000c60:	d037      	beq.n	8000cd2 <HAL_DMA2D_ConfigLayer+0x7e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c62:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8000c64:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000c66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c6a:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8000c6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8000c70:	4f1c      	ldr	r7, [pc, #112]	; (8000ce4 <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c72:	69dd      	ldr	r5, [r3, #28]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000c78:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000c7c:	3d09      	subs	r5, #9
 8000c7e:	6803      	ldr	r3, [r0, #0]
 8000c80:	2d01      	cmp	r5, #1
 8000c82:	d80f      	bhi.n	8000ca4 <HAL_DMA2D_ConfigLayer+0x50>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000c84:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8000c88:	ea4e 0202 	orr.w	r2, lr, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000c8c:	b969      	cbnz	r1, 8000caa <HAL_DMA2D_ConfigLayer+0x56>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000c8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c90:	4039      	ands	r1, r7
 8000c92:	430a      	orrs	r2, r1
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000c96:	6982      	ldr	r2, [r0, #24]
 8000c98:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000c9a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ca2:	e010      	b.n	8000cc6 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000ca4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 8000ca8:	b1a9      	cbz	r1, 8000cd6 <HAL_DMA2D_ConfigLayer+0x82>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000caa:	69d9      	ldr	r1, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8000cac:	4406      	add	r6, r0
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000cae:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000cb0:	ea01 0107 	and.w	r1, r1, r7
 8000cb4:	ea42 0201 	orr.w	r2, r2, r1
 8000cb8:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8000cba:	69b2      	ldr	r2, [r6, #24]
 8000cbc:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000cbe:	d802      	bhi.n	8000cc6 <HAL_DMA2D_ConfigLayer+0x72>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8000cc0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8000cc4:	621c      	str	r4, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000cd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cd8:	4039      	ands	r1, r7
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000cde:	6982      	ldr	r2, [r0, #24]
 8000ce0:	619a      	str	r2, [r3, #24]
 8000ce2:	e7f0      	b.n	8000cc6 <HAL_DMA2D_ConfigLayer+0x72>
 8000ce4:	00fcfff0 	.word	0x00fcfff0

08000ce8 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8000ce8:	2300      	movs	r3, #0
{
 8000cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000cec:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000cf0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000cf2:	6803      	ldr	r3, [r0, #0]
{
 8000cf4:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000cf6:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000cf8:	591a      	ldr	r2, [r3, r4]
 8000cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cfe:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000d00:	591b      	ldr	r3, [r3, r4]
 8000d02:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d04:	f7ff fc7a 	bl	80005fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	9a01      	ldr	r2, [sp, #4]
 8000d0c:	511a      	str	r2, [r3, r4]
}
 8000d0e:	b003      	add	sp, #12
 8000d10:	bd30      	pop	{r4, r5, pc}
	...

08000d14 <ETH_MACDMAConfig>:
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d18:	b129      	cbz	r1, 8000d26 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d24:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d26:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000d28:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d2a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000d2c:	68e0      	ldr	r0, [r4, #12]
 8000d2e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000d30:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d32:	bf08      	it	eq
 8000d34:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000d38:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000d3c:	482e      	ldr	r0, [pc, #184]	; (8000df8 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d3e:	bf18      	it	ne
 8000d40:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000d42:	4028      	ands	r0, r5
 8000d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d48:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d4a:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000d4c:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000d4e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000d50:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d52:	f7ff fc53 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000d56:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d58:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d5a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000d5c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d5e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000d60:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d62:	f7ff fc4b 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000d66:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d68:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000d6a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000d70:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8000d72:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000d74:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000d78:	0412      	lsls	r2, r2, #16
 8000d7a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000d7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000d80:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000d82:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d84:	f7ff fc3a 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000d88:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d8a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000d8c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000d8e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000d90:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d92:	f7ff fc33 	bl	80005fc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000d96:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d98:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000d9c:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8000d9e:	f241 0518 	movw	r5, #4120	; 0x1018
 8000da2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000da4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000da6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000daa:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000dae:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000db0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000db2:	f7ff fc23 	bl	80005fc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000db6:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000db8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000dbc:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dc2:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000dc4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dc6:	f7ff fc19 	bl	80005fc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000dd0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000dd2:	69a3      	ldr	r3, [r4, #24]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d107      	bne.n	8000de8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000dd8:	f241 011c 	movw	r1, #4124	; 0x101c
 8000ddc:	5853      	ldr	r3, [r2, r1]
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000de8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000dec:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000dee:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000df0:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <ETH_MACDMAConfig+0xf4>)
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	ff20810f 	.word	0xff20810f
 8000dfc:	f8de3f23 	.word	0xf8de3f23
 8000e00:	02c12080 	.word	0x02c12080
 8000e04:	40028040 	.word	0x40028040
 8000e08:	40028044 	.word	0x40028044

08000e0c <HAL_ETH_DMATxDescListInit>:
{
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000e0e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000e12:	2c01      	cmp	r4, #1
 8000e14:	f04f 0402 	mov.w	r4, #2
 8000e18:	d033      	beq.n	8000e82 <HAL_ETH_DMATxDescListInit+0x76>
 8000e1a:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000e1c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000e20:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000e24:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000e28:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000e2c:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000e30:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8000e32:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->TxDesc = DMATxDescTab;
 8000e36:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000e38:	429d      	cmp	r5, r3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000e3c:	6802      	ldr	r2, [r0, #0]
 8000e3e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000e42:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000e50:	4618      	mov	r0, r3
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000e54:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000e58:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000e5c:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000e60:	69c6      	ldr	r6, [r0, #28]
 8000e62:	b92e      	cbnz	r6, 8000e70 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000e64:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000e68:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000e6c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000e70:	4565      	cmp	r5, ip
 8000e72:	bf2c      	ite	cs
 8000e74:	460e      	movcs	r6, r1
 8000e76:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8000e78:	3501      	adds	r5, #1
 8000e7a:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000e7c:	f844 6c34 	str.w	r6, [r4, #-52]
 8000e80:	e7da      	b.n	8000e38 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000e82:	4620      	mov	r0, r4
}
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e86 <HAL_ETH_DMARxDescListInit>:
{
 8000e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000e8a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000e8e:	2c01      	cmp	r4, #1
 8000e90:	f04f 0402 	mov.w	r4, #2
 8000e94:	d030      	beq.n	8000ef8 <HAL_ETH_DMARxDescListInit+0x72>
 8000e96:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000e98:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000e9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8000ea0:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000ea4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000ea8:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8000eac:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000eae:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8000eb2:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->RxDesc = DMARxDescTab; 
 8000eb6:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8000eb8:	429d      	cmp	r5, r3
 8000eba:	d10c      	bne.n	8000ed6 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000ebc:	6802      	ldr	r2, [r0, #0]
 8000ebe:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ec2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000ed6:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000eda:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000ede:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000ee2:	4565      	cmp	r5, ip
 8000ee4:	bf2c      	ite	cs
 8000ee6:	4688      	movcs	r8, r1
 8000ee8:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000eea:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8000eee:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000ef0:	f844 8c14 	str.w	r8, [r4, #-20]
 8000ef4:	3420      	adds	r4, #32
 8000ef6:	e7df      	b.n	8000eb8 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000ef8:	4620      	mov	r0, r4
}
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000f00 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000f00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	f04f 0302 	mov.w	r3, #2
{
 8000f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000f0c:	d066      	beq.n	8000fdc <HAL_ETH_TransmitFrame+0xdc>
 8000f0e:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000f10:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8000f14:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000f18:	b929      	cbnz	r1, 8000f26 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000f1a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000f1e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000f22:	4610      	mov	r0, r2
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	da06      	bge.n	8000f3c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000f34:	2300      	movs	r3, #0
 8000f36:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000f3a:	e7f2      	b.n	8000f22 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000f3c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000f40:	42a1      	cmp	r1, r4
 8000f42:	d92c      	bls.n	8000f9e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000f44:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000f48:	fb04 1412 	mls	r4, r4, r2, r1
 8000f4c:	b32c      	cbz	r4, 8000f9a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000f4e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000f50:	4c23      	ldr	r4, [pc, #140]	; (8000fe0 <HAL_ETH_TransmitFrame+0xe0>)
 8000f52:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000f56:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000f5a:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000f5c:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f60:	2400      	movs	r4, #0
 8000f62:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000f66:	681d      	ldr	r5, [r3, #0]
 8000f68:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000f6c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000f6e:	b91c      	cbnz	r4, 8000f78 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000f70:	681d      	ldr	r5, [r3, #0]
 8000f72:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000f76:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000f78:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000f7a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000f7c:	d104      	bne.n	8000f88 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f7e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f80:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000f86:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f88:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000f8a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f8c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000f90:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f92:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f94:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8000f96:	d1e6      	bne.n	8000f66 <HAL_ETH_TransmitFrame+0x66>
 8000f98:	e00d      	b.n	8000fb6 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	d1d8      	bne.n	8000f50 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000f9e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000fa0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000fa4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000fa8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000faa:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fb2:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000fb8:	f241 0214 	movw	r2, #4116	; 0x1014
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	5899      	ldr	r1, [r3, r2]
 8000fc0:	0749      	lsls	r1, r1, #29
 8000fc2:	d505      	bpl.n	8000fd0 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f241 0204 	movw	r2, #4100	; 0x1004
 8000fce:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000fdc:	4618      	mov	r0, r3
}
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe0:	fffffa0c 	.word	0xfffffa0c

08000fe4 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000fe4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	f04f 0302 	mov.w	r3, #2
{
 8000fee:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000ff0:	d03b      	beq.n	800106a <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000ff2:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000ff4:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000ff6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000ffa:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000ffc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001000:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2a00      	cmp	r2, #0
 8001006:	db01      	blt.n	800100c <HAL_ETH_GetReceivedFrame_IT+0x28>
 8001008:	3c01      	subs	r4, #1
 800100a:	d106      	bne.n	800101a <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 800100c:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800100e:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8001010:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001014:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001018:	e027      	b.n	800106a <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68dd      	ldr	r5, [r3, #12]
 800101e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001022:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001026:	d103      	bne.n	8001030 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001028:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800102a:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800102c:	6285      	str	r5, [r0, #40]	; 0x28
 800102e:	e7e7      	b.n	8001000 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001036:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001038:	d102      	bne.n	8001040 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 800103a:	3201      	adds	r2, #1
 800103c:	6382      	str	r2, [r0, #56]	; 0x38
 800103e:	e7f5      	b.n	800102c <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8001040:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001042:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001044:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8001046:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001048:	bf08      	it	eq
 800104a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001052:	3b04      	subs	r3, #4
 8001054:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001056:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001058:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800105a:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800105c:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 800105e:	2301      	movs	r3, #1
 8001060:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001064:	2300      	movs	r3, #0
 8001066:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd30      	pop	{r4, r5, pc}

0800106e <HAL_ETH_TxCpltCallback>:
 800106e:	4770      	bx	lr

08001070 <HAL_ETH_ErrorCallback>:
{
 8001070:	4770      	bx	lr

08001072 <HAL_ETH_IRQHandler>:
{
 8001072:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001074:	6802      	ldr	r2, [r0, #0]
 8001076:	f241 0614 	movw	r6, #4116	; 0x1014
{
 800107a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800107c:	5995      	ldr	r5, [r2, r6]
 800107e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001082:	d021      	beq.n	80010c8 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8001084:	f00e f93e 	bl	800f304 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 800108e:	2301      	movs	r3, #1
 8001090:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001094:	2300      	movs	r3, #0
 8001096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f241 0514 	movw	r5, #4116	; 0x1014
 80010a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a4:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80010a6:	595b      	ldr	r3, [r3, r5]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	d50c      	bpl.n	80010c6 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff ffdf 	bl	8001070 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b8:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80010c0:	2300      	movs	r3, #0
 80010c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80010c8:	5993      	ldr	r3, [r2, r6]
 80010ca:	07da      	lsls	r2, r3, #31
 80010cc:	d5e5      	bpl.n	800109a <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80010ce:	f7ff ffce 	bl	800106e <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80010d2:	2301      	movs	r3, #1
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80010d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80010dc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80010e0:	e7db      	b.n	800109a <HAL_ETH_IRQHandler+0x28>

080010e2 <HAL_ETH_ReadPHYRegister>:
{
 80010e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80010e4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80010e8:	4605      	mov	r5, r0
 80010ea:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80010ec:	2b82      	cmp	r3, #130	; 0x82
 80010ee:	d030      	beq.n	8001152 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 80010f0:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80010f2:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80010f4:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80010f6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 80010fa:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80010fc:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001100:	f003 011c 	and.w	r1, r3, #28
 8001104:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001106:	8a04      	ldrh	r4, [r0, #16]
 8001108:	02e4      	lsls	r4, r4, #11
 800110a:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800110c:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800110e:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8001112:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8001114:	f7ff fa6c 	bl	80005f0 <HAL_GetTick>
 8001118:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800111a:	f014 0001 	ands.w	r0, r4, #1
 800111e:	d107      	bne.n	8001130 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	b29b      	uxth	r3, r3
 8001126:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8001128:	2301      	movs	r3, #1
 800112a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001130:	f7ff fa5e 	bl	80005f0 <HAL_GetTick>
 8001134:	1bc0      	subs	r0, r0, r7
 8001136:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800113a:	d307      	bcc.n	800114c <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 800113c:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8001140:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001144:	2300      	movs	r3, #0
 8001146:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800114a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	691c      	ldr	r4, [r3, #16]
 8001150:	e7e3      	b.n	800111a <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8001152:	2002      	movs	r0, #2
}
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001156 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001156:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800115a:	2b42      	cmp	r3, #66	; 0x42
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001160:	d02e      	beq.n	80011c0 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001162:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001164:	018c      	lsls	r4, r1, #6
 8001166:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001168:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800116c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	f044 0403 	orr.w	r4, r4, #3
 8001176:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001178:	f000 001c 	and.w	r0, r0, #28
 800117c:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800117e:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001180:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001182:	02e4      	lsls	r4, r4, #11
 8001184:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001186:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8001188:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800118a:	f7ff fa31 	bl	80005f0 <HAL_GetTick>
 800118e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001190:	f014 0001 	ands.w	r0, r4, #1
 8001194:	d103      	bne.n	800119e <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8001196:	2301      	movs	r3, #1
 8001198:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800119c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800119e:	f7ff fa27 	bl	80005f0 <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80011a8:	d307      	bcc.n	80011ba <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80011aa:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80011ae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80011b2:	2300      	movs	r3, #0
 80011b4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	691c      	ldr	r4, [r3, #16]
 80011be:	e7e7      	b.n	8001190 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80011c0:	2002      	movs	r0, #2
}
 80011c2:	bd70      	pop	{r4, r5, r6, pc}

080011c4 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 80011c4:	2300      	movs	r3, #0
{
 80011c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 80011c8:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 80011ca:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80011cc:	2800      	cmp	r0, #0
 80011ce:	f000 80dd 	beq.w	800138c <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
 80011d2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80011d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011da:	b91b      	cbnz	r3, 80011e4 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80011dc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80011e0:	f00e f838 	bl	800f254 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <HAL_ETH_Init+0x1cc>)
 80011e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_ETH_Init+0x1d0>)
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001200:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	6a21      	ldr	r1, [r4, #32]
 8001206:	430a      	orrs	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001218:	f7ff f9ea 	bl	80005f0 <HAL_GetTick>
 800121c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	07d0      	lsls	r0, r2, #31
 8001228:	d41d      	bmi.n	8001266 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 800122a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800122c:	f001 fb6e 	bl	800290c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_ETH_Init+0x1d4>)
 8001232:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001234:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001238:	4403      	add	r3, r0
 800123a:	4293      	cmp	r3, r2
 800123c:	d822      	bhi.n	8001284 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800123e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001242:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001248:	2100      	movs	r1, #0
 800124a:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800124c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800124e:	f7ff ff82 	bl	8001156 <HAL_ETH_WritePHYRegister>
 8001252:	4605      	mov	r5, r0
 8001254:	b368      	cbz	r0, 80012b2 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8001256:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8001258:	2101      	movs	r1, #1
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fd5a 	bl	8000d14 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001260:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001264:	e00b      	b.n	800127e <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001266:	f7ff f9c3 	bl	80005f0 <HAL_GetTick>
 800126a:	1b40      	subs	r0, r0, r5
 800126c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001270:	d9d5      	bls.n	800121e <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001272:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001274:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001276:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800127a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800127e:	4628      	mov	r0, r5
 8001280:	b003      	add	sp, #12
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_ETH_Init+0x1dc>)
 8001286:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <HAL_ETH_Init+0x1e0>)
 8001288:	4403      	add	r3, r0
 800128a:	4293      	cmp	r3, r2
 800128c:	d802      	bhi.n	8001294 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800128e:	f045 050c 	orr.w	r5, r5, #12
 8001292:	e7d6      	b.n	8001242 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <HAL_ETH_Init+0x1e4>)
 8001296:	4a45      	ldr	r2, [pc, #276]	; (80013ac <HAL_ETH_Init+0x1e8>)
 8001298:	4403      	add	r3, r0
 800129a:	4293      	cmp	r3, r2
 800129c:	d9d1      	bls.n	8001242 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_ETH_Init+0x1ec>)
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_ETH_Init+0x1f0>)
 80012a2:	4403      	add	r3, r0
 80012a4:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012a6:	bf94      	ite	ls
 80012a8:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012ac:	f045 0510 	orrhi.w	r5, r5, #16
 80012b0:	e7c7      	b.n	8001242 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80012b2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80012b6:	f7ff f9a1 	bl	80005fc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d053      	beq.n	8001368 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 80012c0:	f7ff f996 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012c4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80012c8:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012ca:	466a      	mov	r2, sp
 80012cc:	2101      	movs	r1, #1
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff ff07 	bl	80010e2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012d4:	f7ff f98c 	bl	80005f0 <HAL_GetTick>
 80012d8:	1b80      	subs	r0, r0, r6
 80012da:	42b8      	cmp	r0, r7
 80012dc:	d90b      	bls.n	80012f6 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 80012de:	2101      	movs	r1, #1
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff fd17 	bl	8000d14 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80012e6:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80012e8:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 80012ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80012ee:	2300      	movs	r3, #0
 80012f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80012f4:	e7c3      	b.n	800127e <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012f6:	9b00      	ldr	r3, [sp, #0]
 80012f8:	0759      	lsls	r1, r3, #29
 80012fa:	d5e6      	bpl.n	80012ca <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	2100      	movs	r1, #0
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff ff27 	bl	8001156 <HAL_ETH_WritePHYRegister>
 8001308:	2800      	cmp	r0, #0
 800130a:	d1a4      	bne.n	8001256 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 800130c:	f7ff f970 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001310:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001314:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001316:	466a      	mov	r2, sp
 8001318:	2101      	movs	r1, #1
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fee1 	bl	80010e2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001320:	f7ff f966 	bl	80005f0 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	42b8      	cmp	r0, r7
 8001328:	d8d9      	bhi.n	80012de <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800132a:	9b00      	ldr	r3, [sp, #0]
 800132c:	069a      	lsls	r2, r3, #26
 800132e:	d5f2      	bpl.n	8001316 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001330:	466a      	mov	r2, sp
 8001332:	2110      	movs	r1, #16
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fed4 	bl	80010e2 <HAL_ETH_ReadPHYRegister>
 800133a:	2800      	cmp	r0, #0
 800133c:	d18b      	bne.n	8001256 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800133e:	9b00      	ldr	r3, [sp, #0]
 8001340:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001344:	bf18      	it	ne
 8001346:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800134a:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 800134c:	bf4c      	ite	mi
 800134e:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8001350:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001354:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001356:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001358:	2100      	movs	r1, #0
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff fcda 	bl	8000d14 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001360:	2301      	movs	r3, #1
 8001362:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001366:	e78a      	b.n	800127e <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001368:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800136a:	4629      	mov	r1, r5
 800136c:	68e2      	ldr	r2, [r4, #12]
 800136e:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001370:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001372:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001376:	b292      	uxth	r2, r2
 8001378:	f7ff feed 	bl	8001156 <HAL_ETH_WritePHYRegister>
 800137c:	2800      	cmp	r0, #0
 800137e:	f47f af6a 	bne.w	8001256 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001382:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001386:	f7ff f939 	bl	80005fc <HAL_Delay>
 800138a:	e7e5      	b.n	8001358 <HAL_ETH_Init+0x194>
    return HAL_ERROR;
 800138c:	2501      	movs	r5, #1
 800138e:	e776      	b.n	800127e <HAL_ETH_Init+0xba>
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	feced300 	.word	0xfeced300
 800139c:	00e4e1bf 	.word	0x00e4e1bf
 80013a0:	fde9f140 	.word	0xfde9f140
 80013a4:	017d783f 	.word	0x017d783f
 80013a8:	fc6c7900 	.word	0xfc6c7900
 80013ac:	026259ff 	.word	0x026259ff
 80013b0:	fa0a1f00 	.word	0xfa0a1f00
 80013b4:	02faf07f 	.word	0x02faf07f

080013b8 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 80013b8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80013bc:	2b01      	cmp	r3, #1
{  
 80013be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013c0:	4605      	mov	r5, r0
 80013c2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80013c6:	d033      	beq.n	8001430 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 80013c8:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80013ca:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80013cc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 80013d0:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 80013d2:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80013d4:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d6:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 80013d8:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80013dc:	f042 0208 	orr.w	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e6:	f7ff f909 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80013ea:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ec:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 80013ee:	682b      	ldr	r3, [r5, #0]
 80013f0:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 80013f2:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f042 0204 	orr.w	r2, r2, #4
 80013fa:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001400:	f7ff f8fc 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001404:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8001406:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8001408:	9a00      	ldr	r2, [sp, #0]
 800140a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800140c:	f7ff fc6c 	bl	8000ce8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001410:	682a      	ldr	r2, [r5, #0]
 8001412:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8001416:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001418:	58d1      	ldr	r1, [r2, r3]
 800141a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800141e:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001420:	58d1      	ldr	r1, [r2, r3]
 8001422:	f041 0102 	orr.w	r1, r1, #2
 8001426:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001428:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800142c:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8001430:	b002      	add	sp, #8
 8001432:	bd70      	pop	{r4, r5, r6, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001438:	680b      	ldr	r3, [r1, #0]
{
 800143a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001600 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001440:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001442:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4a6c      	ldr	r2, [pc, #432]	; (80015f8 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001446:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001604 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800144a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001450:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001454:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001458:	45b6      	cmp	lr, r6
 800145a:	f040 80b3 	bne.w	80015c4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145e:	684c      	ldr	r4, [r1, #4]
 8001460:	f024 0710 	bic.w	r7, r4, #16
 8001464:	2f02      	cmp	r7, #2
 8001466:	d116      	bne.n	8001496 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001468:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800146c:	f003 0b07 	and.w	fp, r3, #7
 8001470:	f04f 0c0f 	mov.w	ip, #15
 8001474:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001478:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800147c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001480:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001484:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001488:	690d      	ldr	r5, [r1, #16]
 800148a:	fa05 f50b 	lsl.w	r5, r5, fp
 800148e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001492:	f8ca 5020 	str.w	r5, [sl, #32]
 8001496:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800149a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800149c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014a0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014a4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014aa:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014ae:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014b6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80014ba:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014be:	d811      	bhi.n	80014e4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80014c0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014c2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80014c6:	68cf      	ldr	r7, [r1, #12]
 80014c8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80014cc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80014d0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014d2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014d8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80014dc:	409f      	lsls	r7, r3
 80014de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80014e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80014e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014e6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014e8:	688f      	ldr	r7, [r1, #8]
 80014ea:	fa07 f70a 	lsl.w	r7, r7, sl
 80014ee:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014f0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f2:	00e5      	lsls	r5, r4, #3
 80014f4:	d566      	bpl.n	80015c4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80014fa:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014fe:	f003 0e03 	and.w	lr, r3, #3
 8001502:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800150a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800150e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001516:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800151a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800151e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001522:	9503      	str	r5, [sp, #12]
 8001524:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001526:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800152a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800152e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001532:	4d32      	ldr	r5, [pc, #200]	; (80015fc <HAL_GPIO_Init+0x1c8>)
 8001534:	42a8      	cmp	r0, r5
 8001536:	d04c      	beq.n	80015d2 <HAL_GPIO_Init+0x19e>
 8001538:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800153c:	42a8      	cmp	r0, r5
 800153e:	d04a      	beq.n	80015d6 <HAL_GPIO_Init+0x1a2>
 8001540:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001544:	42a8      	cmp	r0, r5
 8001546:	d048      	beq.n	80015da <HAL_GPIO_Init+0x1a6>
 8001548:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800154c:	42a8      	cmp	r0, r5
 800154e:	d046      	beq.n	80015de <HAL_GPIO_Init+0x1aa>
 8001550:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001554:	42a8      	cmp	r0, r5
 8001556:	d044      	beq.n	80015e2 <HAL_GPIO_Init+0x1ae>
 8001558:	4548      	cmp	r0, r9
 800155a:	d044      	beq.n	80015e6 <HAL_GPIO_Init+0x1b2>
 800155c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001560:	42a8      	cmp	r0, r5
 8001562:	d042      	beq.n	80015ea <HAL_GPIO_Init+0x1b6>
 8001564:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001568:	42a8      	cmp	r0, r5
 800156a:	d040      	beq.n	80015ee <HAL_GPIO_Init+0x1ba>
 800156c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001570:	42a8      	cmp	r0, r5
 8001572:	d03e      	beq.n	80015f2 <HAL_GPIO_Init+0x1be>
 8001574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001578:	42a8      	cmp	r0, r5
 800157a:	bf14      	ite	ne
 800157c:	250a      	movne	r5, #10
 800157e:	2509      	moveq	r5, #9
 8001580:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001584:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001588:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800158c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800158e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001592:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001594:	bf0c      	ite	eq
 8001596:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001598:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800159e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80015a0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	bf0c      	ite	eq
 80015a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80015a6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80015ac:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80015ae:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	bf0c      	ite	eq
 80015b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80015b4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80015b8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80015ba:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	bf54      	ite	pl
 80015be:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80015c0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80015c2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015c4:	3301      	adds	r3, #1
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	f47f af3f 	bne.w	800144a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80015cc:	b005      	add	sp, #20
 80015ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015d2:	2500      	movs	r5, #0
 80015d4:	e7d4      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015d6:	2501      	movs	r5, #1
 80015d8:	e7d2      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015da:	2502      	movs	r5, #2
 80015dc:	e7d0      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015de:	2503      	movs	r5, #3
 80015e0:	e7ce      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015e2:	2504      	movs	r5, #4
 80015e4:	e7cc      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015e6:	2505      	movs	r5, #5
 80015e8:	e7ca      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015ea:	2506      	movs	r5, #6
 80015ec:	e7c8      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015ee:	2507      	movs	r5, #7
 80015f0:	e7c6      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015f2:	2508      	movs	r5, #8
 80015f4:	e7c4      	b.n	8001580 <HAL_GPIO_Init+0x14c>
 80015f6:	bf00      	nop
 80015f8:	40013c00 	.word	0x40013c00
 80015fc:	40020000 	.word	0x40020000
 8001600:	40023800 	.word	0x40023800
 8001604:	40021400 	.word	0x40021400

08001608 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	b10a      	cbz	r2, 800160e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800160a:	6181      	str	r1, [r0, #24]
 800160c:	4770      	bx	lr
 800160e:	0409      	lsls	r1, r1, #16
 8001610:	e7fb      	b.n	800160a <HAL_GPIO_WritePin+0x2>

08001612 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001612:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001616:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001618:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800161c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8001620:	2801      	cmp	r0, #1
{
 8001622:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001626:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800162a:	d029      	beq.n	8001680 <HAL_HCD_HC_Init+0x6e>
 800162c:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 800162e:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001630:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 8001634:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 8001638:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800163c:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8001640:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001644:	bf08      	it	eq
 8001646:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001648:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800164c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8001650:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8001654:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001658:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800165c:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001660:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001664:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8001668:	f8cd c008 	str.w	ip, [sp, #8]
 800166c:	6820      	ldr	r0, [r4, #0]
 800166e:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001672:	f003 f883 	bl	800477c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001676:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 800167a:	b004      	add	sp, #16
 800167c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001680:	2002      	movs	r0, #2
 8001682:	e7fa      	b.n	800167a <HAL_HCD_HC_Init+0x68>

08001684 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001684:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001688:	2b01      	cmp	r3, #1
{
 800168a:	b510      	push	{r4, lr}
 800168c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800168e:	d009      	beq.n	80016a4 <HAL_HCD_HC_Halt+0x20>
 8001690:	2301      	movs	r3, #1
 8001692:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	f003 f8fe 	bl	8004898 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800169c:	2000      	movs	r0, #0
 800169e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 80016a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80016a4:	2002      	movs	r0, #2
}
 80016a6:	bd10      	pop	{r4, pc}

080016a8 <HAL_HCD_Init>:
{
 80016a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80016ac:	4607      	mov	r7, r0
{
 80016ae:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d03b      	beq.n	800172c <HAL_HCD_Init+0x84>
  if(hhcd->State == HAL_HCD_STATE_RESET)
 80016b4:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 80016b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016bc:	b91b      	cbnz	r3, 80016c6 <HAL_HCD_Init+0x1e>
    hhcd->Lock = HAL_UNLOCKED;
 80016be:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80016c2:	f00f fa1f 	bl	8010b04 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80016c6:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80016c8:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016ca:	466d      	mov	r5, sp
 80016cc:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 80016d0:	f854 0b10 	ldr.w	r0, [r4], #16
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016d4:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80016d6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 80016da:	f002 ff14 	bl	8004506 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ee:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80016f2:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016f4:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016f6:	f002 fec5 	bl	8004484 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016fa:	f856 0b10 	ldr.w	r0, [r6], #16
 80016fe:	2101      	movs	r1, #1
 8001700:	f002 ff07 	bl	8004512 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001704:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800170a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001710:	e885 0003 	stmia.w	r5, {r0, r1}
 8001714:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f002 ffb9 	bl	8004690 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 800171e:	2301      	movs	r3, #1
  return HAL_OK;
 8001720:	2000      	movs	r0, #0
  hhcd->State= HAL_HCD_STATE_READY;
 8001722:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8001726:	b00a      	add	sp, #40	; 0x28
 8001728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e7fa      	b.n	8001726 <HAL_HCD_Init+0x7e>

08001730 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t* pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001732:	2428      	movs	r4, #40	; 0x28
{
 8001734:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001738:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 800173a:	fb04 0401 	mla	r4, r4, r1, r0
{
 800173e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001742:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001746:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if(token == 0U)
 800174a:	b96f      	cbnz	r7, 8001768 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800174c:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch(ep_type)
 800174e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch(ep_type)
 8001754:	d02b      	beq.n	80017ae <HAL_HCD_HC_SubmitRequest+0x7e>
 8001756:	42bb      	cmp	r3, r7
 8001758:	d029      	beq.n	80017ae <HAL_HCD_HC_SubmitRequest+0x7e>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d131      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x92>
      }
    }
    break;

  case EP_TYPE_ISOC:
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175e:	2328      	movs	r3, #40	; 0x28
 8001760:	2200      	movs	r2, #0
 8001762:	fb03 0301 	mla	r3, r3, r1, r0
 8001766:	e02a      	b.n	80017be <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001768:	f04f 0e02 	mov.w	lr, #2
 800176c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch(ep_type)
 8001770:	2b03      	cmp	r3, #3
 8001772:	d826      	bhi.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x92>
 8001774:	a401      	add	r4, pc, #4	; (adr r4, 800177c <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001776:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	0800178d 	.word	0x0800178d
 8001780:	0800175f 	.word	0x0800175f
 8001784:	080017af 	.word	0x080017af
 8001788:	080017af 	.word	0x080017af
    if((token == 1U) && (direction == 0U)) /*send data */
 800178c:	2f01      	cmp	r7, #1
 800178e:	d118      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x92>
 8001790:	b9ba      	cbnz	r2, 80017c2 <HAL_HCD_HC_SubmitRequest+0x92>
      if (length == 0U)
 8001792:	b925      	cbnz	r5, 800179e <HAL_HCD_HC_SubmitRequest+0x6e>
        hhcd->hc[ch_num].toggle_out = 1U;
 8001794:	2328      	movs	r3, #40	; 0x28
 8001796:	fb03 0301 	mla	r3, r3, r1, r0
 800179a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0U)
 800179e:	2328      	movs	r3, #40	; 0x28
 80017a0:	fb03 0301 	mla	r3, r3, r1, r0
 80017a4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
      if( hhcd->hc[ch_num].toggle_in == 0U)
 80017a8:	b14a      	cbz	r2, 80017be <HAL_HCD_HC_SubmitRequest+0x8e>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	2202      	movs	r2, #2
 80017ac:	e007      	b.n	80017be <HAL_HCD_HC_SubmitRequest+0x8e>
 80017ae:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 80017b0:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0U)
 80017b4:	b9d2      	cbnz	r2, 80017ec <HAL_HCD_HC_SubmitRequest+0xbc>
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 80017b6:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80017ba:	2c00      	cmp	r4, #0
 80017bc:	d1f5      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x7a>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  default:
    break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017c2:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017c4:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017c6:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80017ca:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017ce:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017d0:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80017d2:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017d4:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80017da:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80017dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017e0:	7c02      	ldrb	r2, [r0, #16]
 80017e2:	6800      	ldr	r0, [r0, #0]
}
 80017e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017e8:	f003 b8ba 	b.w	8004960 <USB_HC_StartXfer>
      if( hhcd->hc[ch_num].toggle_in == 0U)
 80017ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80017f0:	e7da      	b.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x78>
 80017f2:	bf00      	nop

080017f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017f8:	6806      	ldr	r6, [r0, #0]
{
 80017fa:	b087      	sub	sp, #28
 80017fc:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017fe:	4630      	mov	r0, r6
 8001800:	f002 fee6 	bl	80045d0 <USB_GetMode>
 8001804:	2801      	cmp	r0, #1
 8001806:	f040 80b0 	bne.w	800196a <HAL_HCD_IRQHandler+0x176>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800180a:	6820      	ldr	r0, [r4, #0]
 800180c:	f002 fedc 	bl	80045c8 <USB_ReadInterrupts>
 8001810:	2800      	cmp	r0, #0
 8001812:	f000 80aa 	beq.w	800196a <HAL_HCD_IRQHandler+0x176>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001816:	6820      	ldr	r0, [r4, #0]
 8001818:	f002 fed6 	bl	80045c8 <USB_ReadInterrupts>
 800181c:	0287      	lsls	r7, r0, #10
 800181e:	d503      	bpl.n	8001828 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001826:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	f002 fecd 	bl	80045c8 <USB_ReadInterrupts>
 800182e:	02c5      	lsls	r5, r0, #11
 8001830:	d503      	bpl.n	800183a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001838:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	f002 fec4 	bl	80045c8 <USB_ReadInterrupts>
 8001840:	0140      	lsls	r0, r0, #5
 8001842:	d503      	bpl.n	800184c <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800184a:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	f002 febb 	bl	80045c8 <USB_ReadInterrupts>
 8001852:	0781      	lsls	r1, r0, #30
 8001854:	d502      	bpl.n	800185c <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	2202      	movs	r2, #2
 800185a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	f002 feb3 	bl	80045c8 <USB_ReadInterrupts>
 8001862:	0082      	lsls	r2, r0, #2
 8001864:	d510      	bpl.n	8001888 <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001866:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 800186a:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800186c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001870:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8001874:	f00f f984 	bl	8010b80 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001878:	2101      	movs	r1, #1
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f002 feac 	bl	80045d8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	f002 fe9d 	bl	80045c8 <USB_ReadInterrupts>
 800188e:	01c3      	lsls	r3, r0, #7
 8001890:	d542      	bpl.n	8001918 <HAL_HCD_IRQHandler+0x124>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001892:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001894:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001898:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 800189a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800189e:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80018a0:	9b05      	ldr	r3, [sp, #20]
 80018a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80018a6:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80018a8:	9b04      	ldr	r3, [sp, #16]
 80018aa:	079f      	lsls	r7, r3, #30
 80018ac:	d50d      	bpl.n	80018ca <HAL_HCD_IRQHandler+0xd6>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80018ae:	9b04      	ldr	r3, [sp, #16]
 80018b0:	07d8      	lsls	r0, r3, #31
 80018b2:	d506      	bpl.n	80018c2 <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80018b4:	69ab      	ldr	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 80018b6:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80018b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80018bc:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 80018be:	f00f f95b 	bl	8010b78 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80018c2:	9b05      	ldr	r3, [sp, #20]
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80018ca:	9b04      	ldr	r3, [sp, #16]
 80018cc:	0719      	lsls	r1, r3, #28
 80018ce:	d519      	bpl.n	8001904 <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80018d0:	9b05      	ldr	r3, [sp, #20]
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	9305      	str	r3, [sp, #20]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80018d8:	9b04      	ldr	r3, [sp, #16]
 80018da:	075a      	lsls	r2, r3, #29
 80018dc:	d550      	bpl.n	8001980 <HAL_HCD_IRQHandler+0x18c>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80018de:	69a1      	ldr	r1, [r4, #24]
 80018e0:	2902      	cmp	r1, #2
 80018e2:	d145      	bne.n	8001970 <HAL_HCD_IRQHandler+0x17c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80018e4:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018e6:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80018e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80018ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018f0:	bf18      	it	ne
 80018f2:	2101      	movne	r1, #1
 80018f4:	f002 fe70 	bl	80045d8 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }

      HAL_HCD_PortEnabled_Callback(hhcd);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f00f f949 	bl	8010b90 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80018fe:	4620      	mov	r0, r4
 8001900:	f00f f93a 	bl	8010b78 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001904:	9b04      	ldr	r3, [sp, #16]
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	d503      	bpl.n	8001912 <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800190a:	9b05      	ldr	r3, [sp, #20]
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001912:	9b05      	ldr	r3, [sp, #20]
 8001914:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001918:	6820      	ldr	r0, [r4, #0]
 800191a:	f002 fe55 	bl	80045c8 <USB_ReadInterrupts>
 800191e:	0707      	lsls	r7, r0, #28
 8001920:	d505      	bpl.n	800192e <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 8001922:	4620      	mov	r0, r4
 8001924:	f00f f924 	bl	8010b70 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	2208      	movs	r2, #8
 800192c:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	f002 fe4a 	bl	80045c8 <USB_ReadInterrupts>
 8001934:	0185      	lsls	r5, r0, #6
 8001936:	d512      	bpl.n	800195e <HAL_HCD_IRQHandler+0x16a>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001938:	f04f 0a00 	mov.w	sl, #0
 800193c:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001940:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001942:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001946:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	f002 ffa0 	bl	800488e <USB_HC_ReadInterrupt>
 800194e:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001950:	68a3      	ldr	r3, [r4, #8]
 8001952:	459a      	cmp	sl, r3
 8001954:	d323      	bcc.n	800199e <HAL_HCD_IRQHandler+0x1aa>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195c:	615a      	str	r2, [r3, #20]
    if((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800195e:	6820      	ldr	r0, [r4, #0]
 8001960:	f002 fe32 	bl	80045c8 <USB_ReadInterrupts>
 8001964:	06c3      	lsls	r3, r0, #27
 8001966:	f100 821d 	bmi.w	8001da4 <HAL_HCD_IRQHandler+0x5b0>
}
 800196a:	b007      	add	sp, #28
 800196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001970:	68e3      	ldr	r3, [r4, #12]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d1c0      	bne.n	80018f8 <HAL_HCD_IRQHandler+0x104>
          USBx_HOST->HFIR = 60000U;
 8001976:	f64e 2260 	movw	r2, #60000	; 0xea60
 800197a:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800197e:	e7bb      	b.n	80018f8 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001980:	4620      	mov	r0, r4
 8001982:	f00f f909 	bl	8010b98 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001986:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800198a:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800198c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001990:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001994:	6993      	ldr	r3, [r2, #24]
 8001996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	e7b2      	b.n	8001904 <HAL_HCD_IRQHandler+0x110>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800199e:	f00a 030f 	and.w	r3, sl, #15
 80019a2:	9a01      	ldr	r2, [sp, #4]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	07d8      	lsls	r0, r3, #31
 80019aa:	f140 808a 	bpl.w	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019ae:	f8d8 3000 	ldr.w	r3, [r8]
 80019b2:	fa5f f58a 	uxtb.w	r5, sl
 80019b6:	6820      	ldr	r0, [r4, #0]
 80019b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80019bc:	f000 8104 	beq.w	8001bc8 <HAL_HCD_IRQHandler+0x3d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019c0:	016a      	lsls	r2, r5, #5
 80019c2:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80019c6:	18d6      	adds	r6, r2, r3
 80019c8:	68b1      	ldr	r1, [r6, #8]
 80019ca:	0749      	lsls	r1, r1, #29
 80019cc:	d513      	bpl.n	80019f6 <HAL_HCD_IRQHandler+0x202>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019ce:	2104      	movs	r1, #4
 80019d0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019d2:	68f1      	ldr	r1, [r6, #12]
 80019d4:	f041 0102 	orr.w	r1, r1, #2
 80019d8:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019da:	68b1      	ldr	r1, [r6, #8]
 80019dc:	0589      	lsls	r1, r1, #22
 80019de:	d542      	bpl.n	8001a66 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019e0:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019e2:	4629      	mov	r1, r5
 80019e4:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ec:	f002 ff54 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80019f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f4:	e0c7      	b.n	8001b86 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019f6:	68b1      	ldr	r1, [r6, #8]
 80019f8:	0689      	lsls	r1, r1, #26
 80019fa:	d502      	bpl.n	8001a02 <HAL_HCD_IRQHandler+0x20e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019fc:	2120      	movs	r1, #32
 80019fe:	60b1      	str	r1, [r6, #8]
 8001a00:	e7eb      	b.n	80019da <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a02:	68b1      	ldr	r1, [r6, #8]
 8001a04:	0709      	lsls	r1, r1, #28
 8001a06:	d515      	bpl.n	8001a34 <HAL_HCD_IRQHandler+0x240>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a08:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a0a:	f04f 0e05 	mov.w	lr, #5
 8001a0e:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a10:	f041 0102 	orr.w	r1, r1, #2
 8001a14:	9202      	str	r2, [sp, #8]
 8001a16:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a18:	fb07 4105 	mla	r1, r7, r5, r4
 8001a1c:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a20:	2110      	movs	r1, #16
 8001a22:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a24:	2108      	movs	r1, #8
 8001a26:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f002 ff35 	bl	8004898 <USB_HC_Halt>
 8001a2e:	9a02      	ldr	r2, [sp, #8]
 8001a30:	9b03      	ldr	r3, [sp, #12]
 8001a32:	e7d2      	b.n	80019da <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a34:	68b1      	ldr	r1, [r6, #8]
 8001a36:	0549      	lsls	r1, r1, #21
 8001a38:	d5cf      	bpl.n	80019da <HAL_HCD_IRQHandler+0x1e6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a3a:	68f1      	ldr	r1, [r6, #12]
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	f041 0102 	orr.w	r1, r1, #2
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a46:	4629      	mov	r1, r5
 8001a48:	f002 ff26 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a4c:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a4e:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a50:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a52:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a54:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a58:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a5a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a62:	60b1      	str	r1, [r6, #8]
 8001a64:	e7b9      	b.n	80019da <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a66:	68b1      	ldr	r1, [r6, #8]
 8001a68:	07c8      	lsls	r0, r1, #31
 8001a6a:	d53d      	bpl.n	8001ae8 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8001a6c:	6921      	ldr	r1, [r4, #16]
 8001a6e:	b149      	cbz	r1, 8001a84 <HAL_HCD_IRQHandler+0x290>
                               (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a70:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a72:	fb07 4e05 	mla	lr, r7, r5, r4
                               (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a76:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a7a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 8001a7e:	1a09      	subs	r1, r1, r0
 8001a80:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a84:	fb07 4e05 	mla	lr, r7, r5, r4
 8001a88:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a8a:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a8e:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a92:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL)||
 8001a94:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8001a98:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001a9c:	d116      	bne.n	8001acc <HAL_HCD_IRQHandler+0x2d8>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a9e:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aaa:	f002 fef5 	bl	8004898 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001aae:	2310      	movs	r3, #16
 8001ab0:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ab2:	fb07 4505 	mla	r5, r7, r5, r4
 8001ab6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001aba:	f083 0301 	eor.w	r3, r3, #1
 8001abe:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ac2:	f10a 0a01 	add.w	sl, sl, #1
 8001ac6:	f108 0820 	add.w	r8, r8, #32
 8001aca:	e741      	b.n	8001950 <HAL_HCD_IRQHandler+0x15c>
    else if(hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001acc:	2903      	cmp	r1, #3
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0x2be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ad0:	58d1      	ldr	r1, [r2, r3]
 8001ad2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001ad6:	50d1      	str	r1, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ad8:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ada:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f00f f851 	bl	8010b88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ae6:	e7e4      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x2be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ae8:	68b1      	ldr	r1, [r6, #8]
 8001aea:	0789      	lsls	r1, r1, #30
 8001aec:	d536      	bpl.n	8001b5c <HAL_HCD_IRQHandler+0x368>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001aee:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[ch_num].state == HC_XFRC)
 8001af0:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001af4:	f021 0102 	bic.w	r1, r1, #2
 8001af8:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[ch_num].state == HC_XFRC)
 8001afa:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001afe:	2901      	cmp	r1, #1
 8001b00:	d10c      	bne.n	8001b1c <HAL_HCD_IRQHandler+0x328>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b02:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b06:	fb07 4305 	mla	r3, r7, r5, r4
 8001b0a:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001b0c:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b10:	4620      	mov	r0, r4
 8001b12:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001b16:	f00f f837 	bl	8010b88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b1a:	e7d2      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b1c:	2905      	cmp	r1, #5
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_HCD_IRQHandler+0x30e>
    else if((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b20:	2906      	cmp	r1, #6
 8001b22:	d001      	beq.n	8001b28 <HAL_HCD_IRQHandler+0x334>
 8001b24:	2908      	cmp	r1, #8
 8001b26:	d114      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x35e>
      hhcd->hc[ch_num].ErrCnt++;
 8001b28:	fb07 4105 	mla	r1, r7, r5, r4
 8001b2c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001b2e:	3001      	adds	r0, #1
      if(hhcd->hc[ch_num].ErrCnt > 3U)
 8001b30:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001b32:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b34:	bf85      	ittet	hi
 8001b36:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b38:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b3c:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b40:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b44:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b46:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b4a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b4e:	50d1      	str	r1, [r2, r3]
 8001b50:	e7d9      	b.n	8001b06 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b52:	2903      	cmp	r1, #3
 8001b54:	d1d7      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b56:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001b5a:	e7f3      	b.n	8001b44 <HAL_HCD_IRQHandler+0x350>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001b62:	d012      	beq.n	8001b8a <HAL_HCD_IRQHandler+0x396>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b64:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b66:	4629      	mov	r1, r5
 8001b68:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001b70:	fb07 4305 	mla	r3, r7, r5, r4
 8001b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b76:	3201      	adds	r2, #1
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b7a:	2206      	movs	r2, #6
 8001b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b80:	f002 fe8a 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	60b3      	str	r3, [r6, #8]
 8001b88:	e79b      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001b8a:	68b3      	ldr	r3, [r6, #8]
 8001b8c:	06da      	lsls	r2, r3, #27
 8001b8e:	d598      	bpl.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
    if(hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b90:	fb07 4205 	mla	r2, r7, r5, r4
 8001b94:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b9c:	6591      	str	r1, [r2, #88]	; 0x58
         __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b9e:	68f3      	ldr	r3, [r6, #12]
         (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	6820      	ldr	r0, [r4, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	60f3      	str	r3, [r6, #12]
         (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001baa:	f002 fe75 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bae:	2310      	movs	r3, #16
 8001bb0:	e7e9      	b.n	8001b86 <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL)||
 8001bb2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001bb6:	d1fa      	bne.n	8001bae <HAL_HCD_IRQHandler+0x3ba>
       hhcd->hc[ch_num].ErrCnt = 0U;
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
       if (hhcd->Init.dma_enable == 0U)
 8001bba:	6923      	ldr	r3, [r4, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f6      	bne.n	8001bae <HAL_HCD_IRQHandler+0x3ba>
         hhcd->hc[ch_num].state = HC_NAK;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8001bc6:	e7ea      	b.n	8001b9e <HAL_HCD_IRQHandler+0x3aa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bc8:	0169      	lsls	r1, r5, #5
 8001bca:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001bce:	188e      	adds	r6, r1, r2
 8001bd0:	68b3      	ldr	r3, [r6, #8]
 8001bd2:	f013 0e04 	ands.w	lr, r3, #4
 8001bd6:	d006      	beq.n	8001be6 <HAL_HCD_IRQHandler+0x3f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bd8:	2304      	movs	r3, #4
 8001bda:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bdc:	68f3      	ldr	r3, [r6, #12]
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	60f3      	str	r3, [r6, #12]
 8001be4:	e76d      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001be6:	68b3      	ldr	r3, [r6, #8]
 8001be8:	f013 0320 	ands.w	r3, r3, #32
 8001bec:	d014      	beq.n	8001c18 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bee:	2320      	movs	r3, #32
 8001bf0:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[ch_num].do_ping == 1U)
 8001bf2:	fb07 4305 	mla	r3, r7, r5, r4
 8001bf6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001bfa:	2a01      	cmp	r2, #1
 8001bfc:	f47f af61 	bne.w	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c00:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c04:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c06:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c0a:	68f3      	ldr	r3, [r6, #12]
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c12:	f002 fe41 	bl	8004898 <USB_HC_Halt>
 8001c16:	e754      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c18:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001c1c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001c20:	d011      	beq.n	8001c46 <HAL_HCD_IRQHandler+0x452>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c22:	fb07 4205 	mla	r2, r7, r5, r4
 8001c26:	2104      	movs	r1, #4
 8001c28:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001c2c:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt= 0U;
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 8001c30:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c34:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c36:	68f3      	ldr	r3, [r6, #12]
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3e:	f002 fe2b 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	e79f      	b.n	8001b86 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c46:	68b3      	ldr	r3, [r6, #8]
 8001c48:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001c4c:	d005      	beq.n	8001c5a <HAL_HCD_IRQHandler+0x466>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c4e:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c50:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60f3      	str	r3, [r6, #12]
 8001c58:	e6c8      	b.n	80019ec <HAL_HCD_IRQHandler+0x1f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c5a:	68b3      	ldr	r3, [r6, #8]
 8001c5c:	07db      	lsls	r3, r3, #31
 8001c5e:	d511      	bpl.n	8001c84 <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c60:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c62:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c66:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c68:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c6c:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 8001c70:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c72:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c74:	f002 fe10 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c78:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c7a:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c7c:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001c82:	e71e      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c84:	68b3      	ldr	r3, [r6, #8]
 8001c86:	071b      	lsls	r3, r3, #28
 8001c88:	d50e      	bpl.n	8001ca8 <HAL_HCD_IRQHandler+0x4b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c8a:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8c:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 8001c8e:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c92:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c94:	68f3      	ldr	r3, [r6, #12]
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c9c:	f002 fdfc 	bl	8004898 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ca0:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ca2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001ca6:	e70c      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ca8:	68b3      	ldr	r3, [r6, #8]
 8001caa:	06db      	lsls	r3, r3, #27
 8001cac:	d515      	bpl.n	8001cda <HAL_HCD_IRQHandler+0x4e6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cae:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001cb8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cbc:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001cc0:	b92a      	cbnz	r2, 8001cce <HAL_HCD_IRQHandler+0x4da>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001cc2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001cc6:	b912      	cbnz	r2, 8001cce <HAL_HCD_IRQHandler+0x4da>
        hhcd->hc[ch_num].do_ping = 1U;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cce:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd0:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	60f3      	str	r3, [r6, #12]
 8001cd8:	e767      	b.n	8001baa <HAL_HCD_IRQHandler+0x3b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001cda:	68b3      	ldr	r3, [r6, #8]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	d50c      	bpl.n	8001cfa <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce0:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ce4:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cee:	f002 fdd3 	bl	8004898 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001cf8:	e744      	b.n	8001b84 <HAL_HCD_IRQHandler+0x390>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cfa:	68b3      	ldr	r3, [r6, #8]
 8001cfc:	055b      	lsls	r3, r3, #21
 8001cfe:	d50f      	bpl.n	8001d20 <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d00:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d04:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0e:	f002 fdc3 	bl	8004898 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d12:	2310      	movs	r3, #16
 8001d14:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1a:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	e7c0      	b.n	8001ca2 <HAL_HCD_IRQHandler+0x4ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d20:	68b3      	ldr	r3, [r6, #8]
 8001d22:	0798      	lsls	r0, r3, #30
 8001d24:	f57f aecd 	bpl.w	8001ac2 <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d28:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d2a:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d2e:	f023 0302 	bic.w	r3, r3, #2
 8001d32:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d34:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10d      	bne.n	8001d58 <HAL_HCD_IRQHandler+0x564>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d3c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK)
 8001d40:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	f47f aede 	bne.w	8001b06 <HAL_HCD_IRQHandler+0x312>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001d4a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8001d56:	e6d6      	b.n	8001b06 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d102      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d5c:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001d60:	e6d1      	b.n	8001b06 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d0fa      	beq.n	8001d5c <HAL_HCD_IRQHandler+0x568>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d102      	bne.n	8001d70 <HAL_HCD_IRQHandler+0x57c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d6a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001d6e:	e6ca      	b.n	8001b06 <HAL_HCD_IRQHandler+0x312>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d70:	2b06      	cmp	r3, #6
 8001d72:	d002      	beq.n	8001d7a <HAL_HCD_IRQHandler+0x586>
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	f47f aec6 	bne.w	8001b06 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].ErrCnt++;
 8001d7a:	fb07 4005 	mla	r0, r7, r5, r4
 8001d7e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d80:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001d82:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001d84:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d86:	bf85      	ittet	hi
 8001d88:	2304      	movhi	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8a:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d8e:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d92:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d96:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001da0:	508b      	str	r3, [r1, r2]
 8001da2:	e6b0      	b.n	8001b06 <HAL_HCD_IRQHandler+0x312>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da4:	6826      	ldr	r6, [r4, #0]
 8001da6:	69b3      	ldr	r3, [r6, #24]
 8001da8:	f023 0310 	bic.w	r3, r3, #16
 8001dac:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001dae:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001db0:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8001db4:	2a02      	cmp	r2, #2
 8001db6:	d129      	bne.n	8001e0c <HAL_HCD_IRQHandler+0x618>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001db8:	f3c5 180a 	ubfx	r8, r5, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void  *)0))
 8001dbc:	f1b8 0f00 	cmp.w	r8, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_HCD_IRQHandler+0x618>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001dc2:	f005 050f 	and.w	r5, r5, #15
    if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void  *)0))
 8001dc6:	2728      	movs	r7, #40	; 0x28
 8001dc8:	fb07 4705 	mla	r7, r7, r5, r4
 8001dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dce:	b1e9      	cbz	r1, 8001e0c <HAL_HCD_IRQHandler+0x618>
      (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f002 fbea 	bl	80045ac <USB_ReadPacket>
      hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
      if((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001dda:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
      hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001dde:	4443      	add	r3, r8
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
      hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	4443      	add	r3, r8
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
      if((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001de8:	016b      	lsls	r3, r5, #5
 8001dea:	199a      	adds	r2, r3, r6
 8001dec:	6911      	ldr	r1, [r2, #16]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_HCD_IRQHandler+0x624>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	b15a      	cbz	r2, 8001e0c <HAL_HCD_IRQHandler+0x618>
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001df4:	599a      	ldr	r2, [r3, r6]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001df6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dfe:	519a      	str	r2, [r3, r6]
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e00:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	6993      	ldr	r3, [r2, #24]
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	e5a8      	b.n	800196a <HAL_HCD_IRQHandler+0x176>
 8001e18:	1ff80000 	.word	0x1ff80000

08001e1c <HAL_HCD_Start>:
{
 8001e1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8001e1e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 8001e22:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d00d      	beq.n	8001e44 <HAL_HCD_Start+0x28>
 8001e28:	2501      	movs	r5, #1
 8001e2a:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e2e:	6800      	ldr	r0, [r0, #0]
 8001e30:	f002 fb63 	bl	80044fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e34:	4629      	mov	r1, r5
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	f002 fc09 	bl	800464e <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001e44:	2002      	movs	r0, #2
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}

08001e48 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001e48:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001e4c:	2b01      	cmp	r3, #1
{
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e52:	d009      	beq.n	8001e68 <HAL_HCD_Stop+0x20>
 8001e54:	2301      	movs	r3, #1
 8001e56:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	f002 fe32 	bl	8004ac4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001e66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001e68:	2002      	movs	r0, #2
}
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	f002 bbd0 	b.w	8004612 <USB_ResetPort>

08001e72 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001e72:	2328      	movs	r3, #40	; 0x28
 8001e74:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001e78:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001e7c:	4770      	bx	lr

08001e7e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001e7e:	2328      	movs	r3, #40	; 0x28
 8001e80:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001e84:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001e86:	4770      	bx	lr

08001e88 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e88:	6800      	ldr	r0, [r0, #0]
 8001e8a:	f002 bc72 	b.w	8004772 <USB_GetCurrentFrame>

08001e8e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e8e:	6800      	ldr	r0, [r0, #0]
 8001e90:	f002 bc64 	b.w	800475c <USB_GetHostSpeed>

08001e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e96:	4604      	mov	r4, r0
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d04a      	beq.n	8001f32 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea4:	b91b      	cbnz	r3, 8001eae <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	f00e fa13 	bl	80102d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eae:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb0:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb6:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec2:	6862      	ldr	r2, [r4, #4]
 8001ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed4:	d124      	bne.n	8001f20 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eda:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001edc:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ee0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ef4:	6922      	ldr	r2, [r4, #16]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	69a1      	ldr	r1, [r4, #24]
 8001efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001efe:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f00:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f02:	69e2      	ldr	r2, [r4, #28]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f12:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f18:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001f1e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f24:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f26:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f28:	d1d8      	bne.n	8001edc <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e7d4      	b.n	8001edc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	bd10      	pop	{r4, pc}

08001f36 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	2a20      	cmp	r2, #32
{
 8001f3e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f40:	d11d      	bne.n	8001f7e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d019      	beq.n	8001f7e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4a:	2324      	movs	r3, #36	; 0x24
 8001f4c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f50:	6803      	ldr	r3, [r0, #0]
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	f024 0401 	bic.w	r4, r4, #1
 8001f58:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001f60:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	4321      	orrs	r1, r4
 8001f66:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	f041 0101 	orr.w	r1, r1, #1
 8001f6e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f70:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2002      	movs	r0, #2
  }
}
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f82:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001f88:	b2e4      	uxtb	r4, r4
 8001f8a:	2c20      	cmp	r4, #32
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d018      	beq.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f96:	2324      	movs	r3, #36	; 0x24
 8001f98:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fa6:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fac:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fc0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2002      	movs	r0, #2
  }
}
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fcc:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001fce:	f04f 0c00 	mov.w	ip, #0
{
 8001fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fd6:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001fd8:	6804      	ldr	r4, [r0, #0]
 8001fda:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fdc:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001fde:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001fe0:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001fe4:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001fe6:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001fea:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001fee:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001ff2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001ff6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001ff8:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001ffa:	68e0      	ldr	r0, [r4, #12]
 8001ffc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002000:	4430      	add	r0, r6
 8002002:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002006:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002008:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800200a:	68e0      	ldr	r0, [r4, #12]
 800200c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002010:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002018:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800201a:	6888      	ldr	r0, [r1, #8]
 800201c:	68e6      	ldr	r6, [r4, #12]
 800201e:	3001      	adds	r0, #1
 8002020:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002024:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002026:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002028:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800202c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800202e:	6918      	ldr	r0, [r3, #16]
 8002030:	f020 0007 	bic.w	r0, r0, #7
 8002034:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002036:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002038:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800203a:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800203e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002042:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002046:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800204a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800204e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002052:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002056:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002058:	6958      	ldr	r0, [r3, #20]
 800205a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800205e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002060:	6948      	ldr	r0, [r1, #20]
 8002062:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002064:	69d8      	ldr	r0, [r3, #28]
 8002066:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800206a:	f020 0007 	bic.w	r0, r0, #7
 800206e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002070:	6a08      	ldr	r0, [r1, #32]
 8002072:	69cd      	ldr	r5, [r1, #28]
 8002074:	4305      	orrs	r5, r0
 8002076:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002078:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800207a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800207c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002080:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002082:	b31e      	cbz	r6, 80020cc <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002084:	2e01      	cmp	r6, #1
 8002086:	d023      	beq.n	80020d0 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002088:	1eb0      	subs	r0, r6, #2
 800208a:	2802      	cmp	r0, #2
 800208c:	d922      	bls.n	80020d4 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800208e:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8002090:	bf0c      	ite	eq
 8002092:	2002      	moveq	r0, #2
 8002094:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002096:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002098:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800209c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80020a0:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80020a2:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80020a6:	4345      	muls	r5, r0
 80020a8:	4378      	muls	r0, r7
 80020aa:	3003      	adds	r0, #3
 80020ac:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80020b0:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80020b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020b4:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80020b8:	f020 0007 	bic.w	r0, r0, #7
 80020bc:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020be:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80020c0:	58a3      	ldr	r3, [r4, r2]
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	50a3      	str	r3, [r4, r2]
 80020c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80020cc:	2004      	movs	r0, #4
 80020ce:	e7e2      	b.n	8002096 <LTDC_SetConfig+0xca>
    tmp = 3;
 80020d0:	2003      	movs	r0, #3
 80020d2:	e7e0      	b.n	8002096 <LTDC_SetConfig+0xca>
    tmp = 2;
 80020d4:	2002      	movs	r0, #2
 80020d6:	e7de      	b.n	8002096 <LTDC_SetConfig+0xca>

080020d8 <HAL_LTDC_Init>:
{
 80020d8:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80020da:	4604      	mov	r4, r0
 80020dc:	2800      	cmp	r0, #0
 80020de:	d067      	beq.n	80021b0 <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80020e0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80020e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020e8:	b91b      	cbnz	r3, 80020f2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80020ea:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80020ee:	f00e f93b 	bl	8010368 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020f2:	2302      	movs	r3, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80020f4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020f6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002102:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002104:	6862      	ldr	r2, [r4, #4]
 8002106:	6999      	ldr	r1, [r3, #24]
 8002108:	4302      	orrs	r2, r0
 800210a:	68e0      	ldr	r0, [r4, #12]
 800210c:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800210e:	6920      	ldr	r0, [r4, #16]
 8002110:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002112:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002114:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002118:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	400a      	ands	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002126:	69a0      	ldr	r0, [r4, #24]
 8002128:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800212a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800212c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	400a      	ands	r2, r1
 8002132:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800213a:	6a20      	ldr	r0, [r4, #32]
 800213c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800213e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002140:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	400a      	ands	r2, r1
 8002146:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800214e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002150:	4302      	orrs	r2, r0
 8002152:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4011      	ands	r1, r2
 8002158:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800215a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002162:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002164:	430a      	orrs	r2, r1
 8002166:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800216a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800216e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002172:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002176:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800217e:	430a      	orrs	r2, r1
 8002180:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002184:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002188:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800218c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218e:	f042 0204 	orr.w	r2, r2, #4
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	f042 0202 	orr.w	r2, r2, #2
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80021a6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80021aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021b0:	2001      	movs	r0, #1
}
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	f000f800 	.word	0xf000f800

080021b8 <HAL_LTDC_ErrorCallback>:
 80021b8:	4770      	bx	lr

080021ba <HAL_LTDC_LineEventCallback>:
 80021ba:	4770      	bx	lr

080021bc <HAL_LTDC_ReloadEventCallback>:
{
 80021bc:	4770      	bx	lr

080021be <HAL_LTDC_IRQHandler>:
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c2:	0751      	lsls	r1, r2, #29
{
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4604      	mov	r4, r0
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80021c8:	d515      	bpl.n	80021f6 <HAL_LTDC_IRQHandler+0x38>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 80021ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021cc:	0752      	lsls	r2, r2, #29
 80021ce:	d512      	bpl.n	80021f6 <HAL_LTDC_IRQHandler+0x38>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	f022 0204 	bic.w	r2, r2, #4
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80021d8:	2204      	movs	r2, #4
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80021dc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
      __HAL_UNLOCK(hltdc);
 80021e8:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80021ea:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 80021ee:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 80021f2:	f7ff ffe1 	bl	80021b8 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fa:	0790      	lsls	r0, r2, #30
 80021fc:	d516      	bpl.n	800222c <HAL_LTDC_IRQHandler+0x6e>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	0791      	lsls	r1, r2, #30
 8002202:	d513      	bpl.n	800222c <HAL_LTDC_IRQHandler+0x6e>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ErrorCallback(hltdc);
 8002206:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800220e:	2202      	movs	r2, #2
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002212:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800221c:	2304      	movs	r3, #4
 800221e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002222:	2300      	movs	r3, #0
 8002224:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 8002228:	f7ff ffc6 	bl	80021b8 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d510      	bpl.n	8002256 <HAL_LTDC_IRQHandler+0x98>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8002234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002236:	07d0      	lsls	r0, r2, #31
 8002238:	d50d      	bpl.n	8002256 <HAL_LTDC_IRQHandler+0x98>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800223a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_LineEventCallback(hltdc);
 800223c:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002244:	2201      	movs	r2, #1
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_UNLOCK(hltdc);
 8002248:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_READY;
 800224a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 800224e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_LineEventCallback(hltdc);
 8002252:	f7ff ffb2 	bl	80021ba <HAL_LTDC_LineEventCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225a:	0711      	lsls	r1, r2, #28
 800225c:	d511      	bpl.n	8002282 <HAL_LTDC_IRQHandler+0xc4>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 800225e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002260:	0712      	lsls	r2, r2, #28
 8002262:	d50e      	bpl.n	8002282 <HAL_LTDC_IRQHandler+0xc4>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002266:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800226e:	2208      	movs	r2, #8
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->State = HAL_LTDC_STATE_READY;
 8002272:	2301      	movs	r3, #1
 8002274:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8002278:	2300      	movs	r3, #0
 800227a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ReloadEventCallback(hltdc);
 800227e:	f7ff ff9d 	bl	80021bc <HAL_LTDC_ReloadEventCallback>
 8002282:	bd10      	pop	{r4, pc}

08002284 <HAL_LTDC_ConfigLayer>:
{   
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002286:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 800228a:	4606      	mov	r6, r0
 800228c:	468e      	mov	lr, r1
 800228e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002290:	2b01      	cmp	r3, #1
 8002292:	f04f 0002 	mov.w	r0, #2
 8002296:	d01d      	beq.n	80022d4 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002298:	2434      	movs	r4, #52	; 0x34
 800229a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800229c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80022a0:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80022a2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80022a6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80022aa:	3438      	adds	r4, #56	; 0x38
 80022ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80022ba:	4630      	mov	r0, r6
 80022bc:	4662      	mov	r2, ip
 80022be:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80022c0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80022c2:	f7ff fe83 	bl	8001fcc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80022c6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80022c8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80022ca:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80022cc:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80022d0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022d8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80022da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022de:	4c19      	ldr	r4, [pc, #100]	; (8002344 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f8:	f7fe f97a 	bl	80005f0 <HAL_GetTick>
 80022fc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	03da      	lsls	r2, r3, #15
 8002302:	d50c      	bpl.n	800231e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800230c:	f7fe f970 	bl	80005f0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002310:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8002312:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	039b      	lsls	r3, r3, #14
 8002318:	d50a      	bpl.n	8002330 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800231a:	2000      	movs	r0, #0
 800231c:	e006      	b.n	800232c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800231e:	f7fe f967 	bl	80005f0 <HAL_GetTick>
 8002322:	1b40      	subs	r0, r0, r5
 8002324:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002328:	d9e9      	bls.n	80022fe <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800232a:	2003      	movs	r0, #3
}
 800232c:	b003      	add	sp, #12
 800232e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002330:	f7fe f95e 	bl	80005f0 <HAL_GetTick>
 8002334:	1b40      	subs	r0, r0, r5
 8002336:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800233a:	d9eb      	bls.n	8002314 <HAL_PWREx_EnableOverDrive+0x3c>
 800233c:	e7f5      	b.n	800232a <HAL_PWREx_EnableOverDrive+0x52>
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000

08002348 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8002348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234c:	9d06      	ldr	r5, [sp, #24]
 800234e:	4604      	mov	r4, r0
 8002350:	460f      	mov	r7, r1
 8002352:	4616      	mov	r6, r2
 8002354:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002356:	6821      	ldr	r1, [r4, #0]
 8002358:	688a      	ldr	r2, [r1, #8]
 800235a:	423a      	tst	r2, r7
 800235c:	bf14      	ite	ne
 800235e:	2201      	movne	r2, #1
 8002360:	2200      	moveq	r2, #0
 8002362:	42b2      	cmp	r2, r6
 8002364:	d102      	bne.n	800236c <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
}
 8002368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800236c:	1c6b      	adds	r3, r5, #1
 800236e:	d0f3      	beq.n	8002358 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8002370:	b94d      	cbnz	r5, 8002386 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002372:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002374:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002376:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800237a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6463      	str	r3, [r4, #68]	; 0x44
 8002382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8002386:	f7fe f933 	bl	80005f0 <HAL_GetTick>
 800238a:	eba0 0008 	sub.w	r0, r0, r8
 800238e:	4285      	cmp	r5, r0
 8002390:	d2e1      	bcs.n	8002356 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8002392:	e7ee      	b.n	8002372 <QSPI_WaitFlagStateUntilTimeout+0x2a>

08002394 <HAL_QSPI_Init>:
{
 8002394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002396:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7fe f92a 	bl	80005f0 <HAL_GetTick>
 800239c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800239e:	2c00      	cmp	r4, #0
 80023a0:	d04d      	beq.n	800243e <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 80023a2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d04b      	beq.n	8002442 <HAL_QSPI_Init+0xae>
 80023aa:	2301      	movs	r3, #1
 80023ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023b0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80023b4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80023b8:	b93a      	cbnz	r2, 80023ca <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 80023ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80023be:	4620      	mov	r0, r4
 80023c0:	f00e f832 	bl	8010428 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80023c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80023c8:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	68a1      	ldr	r1, [r4, #8]
 80023ce:	6802      	ldr	r2, [r0, #0]
 80023d0:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80023d4:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80023d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023dc:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80023de:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023e0:	2200      	movs	r2, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4620      	mov	r0, r4
 80023e6:	462b      	mov	r3, r5
 80023e8:	f7ff ffae 	bl	8002348 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80023ec:	bb10      	cbnz	r0, 8002434 <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	69e5      	ldr	r5, [r4, #28]
 80023f2:	68e3      	ldr	r3, [r4, #12]
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	432b      	orrs	r3, r5
 80023f8:	6a25      	ldr	r5, [r4, #32]
 80023fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80023fe:	432b      	orrs	r3, r5
 8002400:	6865      	ldr	r5, [r4, #4]
 8002402:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8002406:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800240a:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800240c:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800240e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8002410:	6963      	ldr	r3, [r4, #20]
 8002412:	6855      	ldr	r5, [r2, #4]
 8002414:	430b      	orrs	r3, r1
 8002416:	6921      	ldr	r1, [r4, #16]
 8002418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800241c:	490a      	ldr	r1, [pc, #40]	; (8002448 <HAL_QSPI_Init+0xb4>)
 800241e:	4029      	ands	r1, r5
 8002420:	430b      	orrs	r3, r1
 8002422:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002424:	6813      	ldr	r3, [r2, #0]
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800242c:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800242e:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002430:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8002434:	2300      	movs	r3, #0
 8002436:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800243a:	b003      	add	sp, #12
 800243c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
 8002440:	e7fb      	b.n	800243a <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8002442:	2002      	movs	r0, #2
 8002444:	e7f9      	b.n	800243a <HAL_QSPI_Init+0xa6>
 8002446:	bf00      	nop
 8002448:	ffe0f8fe 	.word	0xffe0f8fe

0800244c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	4604      	mov	r4, r0
 8002452:	b918      	cbnz	r0, 800245c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002456:	b002      	add	sp, #8
 8002458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	07d8      	lsls	r0, r3, #31
 8002460:	d410      	bmi.n	8002484 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	0799      	lsls	r1, r3, #30
 8002466:	d45e      	bmi.n	8002526 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	0719      	lsls	r1, r3, #28
 800246c:	f100 80a3 	bmi.w	80025b6 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	075a      	lsls	r2, r3, #29
 8002474:	f100 80c4 	bmi.w	8002600 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002478:	69a2      	ldr	r2, [r4, #24]
 800247a:	2a00      	cmp	r2, #0
 800247c:	f040 812e 	bne.w	80026dc <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
 8002482:	e7e8      	b.n	8002456 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002484:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	f002 020c 	and.w	r2, r2, #12
 800248c:	2a04      	cmp	r2, #4
 800248e:	d007      	beq.n	80024a0 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	f002 020c 	and.w	r2, r2, #12
 8002496:	2a08      	cmp	r2, #8
 8002498:	d10a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x64>
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	025a      	lsls	r2, r3, #9
 800249e:	d507      	bpl.n	80024b0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	4b8c      	ldr	r3, [pc, #560]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	039b      	lsls	r3, r3, #14
 80024a6:	d5dc      	bpl.n	8002462 <HAL_RCC_OscConfig+0x16>
 80024a8:	6863      	ldr	r3, [r4, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1d9      	bne.n	8002462 <HAL_RCC_OscConfig+0x16>
 80024ae:	e7d1      	b.n	8002454 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	4d88      	ldr	r5, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d111      	bne.n	80024de <HAL_RCC_OscConfig+0x92>
 80024ba:	682b      	ldr	r3, [r5, #0]
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024c2:	f7fe f895 	bl	80005f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4d83      	ldr	r5, [pc, #524]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80024c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	682b      	ldr	r3, [r5, #0]
 80024cc:	039f      	lsls	r7, r3, #14
 80024ce:	d4c8      	bmi.n	8002462 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe f88e 	bl	80005f0 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2864      	cmp	r0, #100	; 0x64
 80024d8:	d9f7      	bls.n	80024ca <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80024da:	2003      	movs	r0, #3
 80024dc:	e7bb      	b.n	8002456 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	b99b      	cbnz	r3, 8002508 <HAL_RCC_OscConfig+0xbc>
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	602b      	str	r3, [r5, #0]
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024f0:	f7fe f87e 	bl	80005f0 <HAL_GetTick>
 80024f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	682b      	ldr	r3, [r5, #0]
 80024f8:	0398      	lsls	r0, r3, #14
 80024fa:	d5b2      	bpl.n	8002462 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe f878 	bl	80005f0 <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	2864      	cmp	r0, #100	; 0x64
 8002504:	d9f7      	bls.n	80024f6 <HAL_RCC_OscConfig+0xaa>
 8002506:	e7e8      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	d103      	bne.n	8002518 <HAL_RCC_OscConfig+0xcc>
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	e7d0      	b.n	80024ba <HAL_RCC_OscConfig+0x6e>
 8002518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251c:	602b      	str	r3, [r5, #0]
 800251e:	682b      	ldr	r3, [r5, #0]
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	e7cc      	b.n	80024c0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002526:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	f012 0f0c 	tst.w	r2, #12
 800252e:	d007      	beq.n	8002540 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	f002 020c 	and.w	r2, r2, #12
 8002536:	2a08      	cmp	r2, #8
 8002538:	d111      	bne.n	800255e <HAL_RCC_OscConfig+0x112>
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0259      	lsls	r1, r3, #9
 800253e:	d40e      	bmi.n	800255e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	0792      	lsls	r2, r2, #30
 8002546:	d502      	bpl.n	800254e <HAL_RCC_OscConfig+0x102>
 8002548:	68e2      	ldr	r2, [r4, #12]
 800254a:	2a01      	cmp	r2, #1
 800254c:	d182      	bne.n	8002454 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6921      	ldr	r1, [r4, #16]
 8002552:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002556:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800255a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255c:	e784      	b.n	8002468 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255e:	68e3      	ldr	r3, [r4, #12]
 8002560:	4d5c      	ldr	r5, [pc, #368]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002562:	b1bb      	cbz	r3, 8002594 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800256c:	f7fe f840 	bl	80005f0 <HAL_GetTick>
 8002570:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	682b      	ldr	r3, [r5, #0]
 8002574:	079f      	lsls	r7, r3, #30
 8002576:	d507      	bpl.n	8002588 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	6922      	ldr	r2, [r4, #16]
 800257c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002580:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002584:	602b      	str	r3, [r5, #0]
 8002586:	e76f      	b.n	8002468 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe f832 	bl	80005f0 <HAL_GetTick>
 800258c:	1b80      	subs	r0, r0, r6
 800258e:	2802      	cmp	r0, #2
 8002590:	d9ef      	bls.n	8002572 <HAL_RCC_OscConfig+0x126>
 8002592:	e7a2      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800259c:	f7fe f828 	bl	80005f0 <HAL_GetTick>
 80025a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	0798      	lsls	r0, r3, #30
 80025a6:	f57f af5f 	bpl.w	8002468 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025aa:	f7fe f821 	bl	80005f0 <HAL_GetTick>
 80025ae:	1b80      	subs	r0, r0, r6
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f6      	bls.n	80025a2 <HAL_RCC_OscConfig+0x156>
 80025b4:	e791      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b6:	6963      	ldr	r3, [r4, #20]
 80025b8:	4d46      	ldr	r5, [pc, #280]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025ba:	b183      	cbz	r3, 80025de <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80025bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80025c4:	f7fe f814 	bl	80005f0 <HAL_GetTick>
 80025c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025cc:	079b      	lsls	r3, r3, #30
 80025ce:	f53f af4f 	bmi.w	8002470 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe f80d 	bl	80005f0 <HAL_GetTick>
 80025d6:	1b80      	subs	r0, r0, r6
 80025d8:	2802      	cmp	r0, #2
 80025da:	d9f6      	bls.n	80025ca <HAL_RCC_OscConfig+0x17e>
 80025dc:	e77d      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80025de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80025e6:	f7fe f803 	bl	80005f0 <HAL_GetTick>
 80025ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025ee:	079f      	lsls	r7, r3, #30
 80025f0:	f57f af3e 	bpl.w	8002470 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fd fffc 	bl	80005f0 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	2802      	cmp	r0, #2
 80025fc:	d9f6      	bls.n	80025ec <HAL_RCC_OscConfig+0x1a0>
 80025fe:	e76c      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002600:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002604:	00d0      	lsls	r0, r2, #3
 8002606:	d427      	bmi.n	8002658 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800260a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	4d2e      	ldr	r5, [pc, #184]	; (80026d8 <HAL_RCC_OscConfig+0x28c>)
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	05d9      	lsls	r1, r3, #23
 8002622:	d51b      	bpl.n	800265c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	68a3      	ldr	r3, [r4, #8]
 8002626:	4d2b      	ldr	r5, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002628:	2b01      	cmp	r3, #1
 800262a:	d127      	bne.n	800267c <HAL_RCC_OscConfig+0x230>
 800262c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002638:	f7fd ffda 	bl	80005f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4f25      	ldr	r7, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800263e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002642:	079b      	lsls	r3, r3, #30
 8002644:	d53f      	bpl.n	80026c6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8002646:	2e00      	cmp	r6, #0
 8002648:	f43f af16 	beq.w	8002478 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800264e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	e70f      	b.n	8002478 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8002658:	2600      	movs	r6, #0
 800265a:	e7df      	b.n	800261c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002664:	f7fd ffc4 	bl	80005f0 <HAL_GetTick>
 8002668:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	05da      	lsls	r2, r3, #23
 800266e:	d4d9      	bmi.n	8002624 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fd ffbe 	bl	80005f0 <HAL_GetTick>
 8002674:	1bc0      	subs	r0, r0, r7
 8002676:	2864      	cmp	r0, #100	; 0x64
 8002678:	d9f7      	bls.n	800266a <HAL_RCC_OscConfig+0x21e>
 800267a:	e72e      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	b9ab      	cbnz	r3, 80026aa <HAL_RCC_OscConfig+0x25e>
 800267e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	672b      	str	r3, [r5, #112]	; 0x70
 800268a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002692:	f7fd ffad 	bl	80005f0 <HAL_GetTick>
 8002696:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800269a:	0798      	lsls	r0, r3, #30
 800269c:	d5d3      	bpl.n	8002646 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fd ffa7 	bl	80005f0 <HAL_GetTick>
 80026a2:	1bc0      	subs	r0, r0, r7
 80026a4:	4540      	cmp	r0, r8
 80026a6:	d9f7      	bls.n	8002698 <HAL_RCC_OscConfig+0x24c>
 80026a8:	e717      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026ae:	d103      	bne.n	80026b8 <HAL_RCC_OscConfig+0x26c>
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	672b      	str	r3, [r5, #112]	; 0x70
 80026b6:	e7b9      	b.n	800262c <HAL_RCC_OscConfig+0x1e0>
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	672b      	str	r3, [r5, #112]	; 0x70
 80026be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	e7b5      	b.n	8002632 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fd ff93 	bl	80005f0 <HAL_GetTick>
 80026ca:	eba0 0008 	sub.w	r0, r0, r8
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d9b6      	bls.n	8002640 <HAL_RCC_OscConfig+0x1f4>
 80026d2:	e702      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4d24      	ldr	r5, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x324>)
 80026de:	68ab      	ldr	r3, [r5, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	f43f aeb5 	beq.w	8002454 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80026ea:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80026ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	d12e      	bne.n	8002754 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80026f6:	f7fd ff7b 	bl	80005f0 <HAL_GetTick>
 80026fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	0199      	lsls	r1, r3, #6
 8002700:	d422      	bmi.n	8002748 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002702:	6a22      	ldr	r2, [r4, #32]
 8002704:	69e3      	ldr	r3, [r4, #28]
 8002706:	4313      	orrs	r3, r2
 8002708:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800270a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800270e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002712:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002714:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002718:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4c15      	ldr	r4, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	0852      	lsrs	r2, r2, #1
 800271e:	3a01      	subs	r2, #1
 8002720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002724:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800272e:	f7fd ff5f 	bl	80005f0 <HAL_GetTick>
 8002732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	019a      	lsls	r2, r3, #6
 8002738:	f53f aea2 	bmi.w	8002480 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fd ff58 	bl	80005f0 <HAL_GetTick>
 8002740:	1b40      	subs	r0, r0, r5
 8002742:	2802      	cmp	r0, #2
 8002744:	d9f6      	bls.n	8002734 <HAL_RCC_OscConfig+0x2e8>
 8002746:	e6c8      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fd ff52 	bl	80005f0 <HAL_GetTick>
 800274c:	1b80      	subs	r0, r0, r6
 800274e:	2802      	cmp	r0, #2
 8002750:	d9d4      	bls.n	80026fc <HAL_RCC_OscConfig+0x2b0>
 8002752:	e6c2      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8002754:	f7fd ff4c 	bl	80005f0 <HAL_GetTick>
 8002758:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	f57f ae8f 	bpl.w	8002480 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7fd ff45 	bl	80005f0 <HAL_GetTick>
 8002766:	1b00      	subs	r0, r0, r4
 8002768:	2802      	cmp	r0, #2
 800276a:	d9f6      	bls.n	800275a <HAL_RCC_OscConfig+0x30e>
 800276c:	e6b5      	b.n	80024da <HAL_RCC_OscConfig+0x8e>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002774:	4913      	ldr	r1, [pc, #76]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002776:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002778:	688b      	ldr	r3, [r1, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x16>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002786:	4810      	ldr	r0, [pc, #64]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002788:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <HAL_RCC_GetSysClockFreq+0x58>)
 800278c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002790:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002794:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002798:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80027a0:	bf1a      	itte	ne
 80027a2:	480a      	ldrne	r0, [pc, #40]	; (80027cc <HAL_RCC_GetSysClockFreq+0x58>)
 80027a4:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4808      	ldreq	r0, [pc, #32]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x54>)
 80027a8:	fba1 0100 	umull	r0, r1, r1, r0
 80027ac:	f7fd fd80 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027b8:	3301      	adds	r3, #1
 80027ba:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80027bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80027c0:	bd08      	pop	{r3, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	017d7840 	.word	0x017d7840

080027d0 <HAL_RCC_ClockConfig>:
{
 80027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80027d6:	4604      	mov	r4, r0
 80027d8:	b910      	cbnz	r0, 80027e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4a46      	ldr	r2, [pc, #280]	; (80028fc <HAL_RCC_ClockConfig+0x12c>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d328      	bcc.n	800283e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	6821      	ldr	r1, [r4, #0]
 80027ee:	078f      	lsls	r7, r1, #30
 80027f0:	d430      	bmi.n	8002854 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	07c8      	lsls	r0, r1, #31
 80027f4:	d443      	bmi.n	800287e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f6:	4a41      	ldr	r2, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x12c>)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	429d      	cmp	r5, r3
 8002800:	d367      	bcc.n	80028d2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	0751      	lsls	r1, r2, #29
 8002806:	d470      	bmi.n	80028ea <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	0713      	lsls	r3, r2, #28
 800280a:	d507      	bpl.n	800281c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280c:	4a3c      	ldr	r2, [pc, #240]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
 800280e:	6921      	ldr	r1, [r4, #16]
 8002810:	6893      	ldr	r3, [r2, #8]
 8002812:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002816:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800281a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281c:	f7ff ffaa 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
 8002822:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_RCC_ClockConfig+0x134>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	40d8      	lsrs	r0, r3
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCC_ClockConfig+0x138>)
 8002830:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002832:	2000      	movs	r0, #0
 8002834:	f00e f874 	bl	8010920 <HAL_InitTick>
  return HAL_OK;
 8002838:	2000      	movs	r0, #0
 800283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	f023 030f 	bic.w	r3, r3, #15
 8002844:	430b      	orrs	r3, r1
 8002846:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4299      	cmp	r1, r3
 8002850:	d1c3      	bne.n	80027da <HAL_RCC_ClockConfig+0xa>
 8002852:	e7cb      	b.n	80027ec <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	f011 0f04 	tst.w	r1, #4
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
 800285a:	d003      	beq.n	8002864 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002862:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	070e      	lsls	r6, r1, #28
 8002866:	d503      	bpl.n	8002870 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800286e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	68a0      	ldr	r0, [r4, #8]
 8002874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002878:	4302      	orrs	r2, r0
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e7b9      	b.n	80027f2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	6861      	ldr	r1, [r4, #4]
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
 8002882:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002884:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	d11c      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002888:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	d0a5      	beq.n	80027da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	4e1a      	ldr	r6, [pc, #104]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	f022 0203 	bic.w	r2, r2, #3
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800289e:	f7fd fea7 	bl	80005f0 <HAL_GetTick>
 80028a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a4:	68b3      	ldr	r3, [r6, #8]
 80028a6:	6862      	ldr	r2, [r4, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028b0:	d0a1      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7fd fe9d 	bl	80005f0 <HAL_GetTick>
 80028b6:	1bc0      	subs	r0, r0, r7
 80028b8:	4540      	cmp	r0, r8
 80028ba:	d9f3      	bls.n	80028a4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80028bc:	2003      	movs	r0, #3
}
 80028be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	2902      	cmp	r1, #2
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028ca:	e7df      	b.n	800288c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	f012 0f02 	tst.w	r2, #2
 80028d0:	e7dc      	b.n	800288c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	f023 030f 	bic.w	r3, r3, #15
 80028d8:	432b      	orrs	r3, r5
 80028da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	429d      	cmp	r5, r3
 80028e4:	f47f af79 	bne.w	80027da <HAL_RCC_ClockConfig+0xa>
 80028e8:	e78b      	b.n	8002802 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ea:	4905      	ldr	r1, [pc, #20]	; (8002900 <HAL_RCC_ClockConfig+0x130>)
 80028ec:	68e0      	ldr	r0, [r4, #12]
 80028ee:	688b      	ldr	r3, [r1, #8]
 80028f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028f4:	4303      	orrs	r3, r0
 80028f6:	608b      	str	r3, [r1, #8]
 80028f8:	e786      	b.n	8002808 <HAL_RCC_ClockConfig+0x38>
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08013f72 	.word	0x08013f72
 8002908:	20000030 	.word	0x20000030

0800290c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800290c:	4b01      	ldr	r3, [pc, #4]	; (8002914 <HAL_RCC_GetHCLKFreq+0x8>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000030 	.word	0x20000030

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_RCC_GetPCLK1Freq+0x14>)
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x18>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002926:	6810      	ldr	r0, [r2, #0]
}
 8002928:	40d8      	lsrs	r0, r3
 800292a:	4770      	bx	lr
 800292c:	40023800 	.word	0x40023800
 8002930:	08013f82 	.word	0x08013f82
 8002934:	20000030 	.word	0x20000030

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetPCLK2Freq+0x14>)
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x18>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	4a03      	ldr	r2, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002946:	6810      	ldr	r0, [r2, #0]
}
 8002948:	40d8      	lsrs	r0, r3
 800294a:	4770      	bx	lr
 800294c:	40023800 	.word	0x40023800
 8002950:	08013f82 	.word	0x08013f82
 8002954:	20000030 	.word	0x20000030

08002958 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002958:	230f      	movs	r3, #15
 800295a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_GetClockConfig+0x34>)
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800296c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002974:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800297e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_GetClockConfig+0x38>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	600b      	str	r3, [r1, #0]
 800298a:	4770      	bx	lr
 800298c:	40023800 	.word	0x40023800
 8002990:	40023c00 	.word	0x40023c00

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002998:	6802      	ldr	r2, [r0, #0]
{
 800299a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800299c:	f012 0601 	ands.w	r6, r2, #1
 80029a0:	d00b      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029a2:	4bb8      	ldr	r3, [pc, #736]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80029aa:	6099      	str	r1, [r3, #8]
 80029ac:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029b2:	fab6 f686 	clz	r6, r6
 80029b6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ba:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80029be:	d012      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c0:	49b0      	ldr	r1, [pc, #704]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029c2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80029c4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029c8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80029d0:	bf08      	it	eq
 80029d2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d4:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029d8:	bf16      	itet	ne
 80029da:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80029de:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029e0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029e6:	02d1      	lsls	r1, r2, #11
 80029e8:	d510      	bpl.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ea:	48a6      	ldr	r0, [pc, #664]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80029ee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029f2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029fa:	ea43 0301 	orr.w	r3, r3, r1
 80029fe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a02:	f000 8185 	beq.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002a06:	2900      	cmp	r1, #0
 8002a08:	bf08      	it	eq
 8002a0a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002a0c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002a10:	bf18      	it	ne
 8002a12:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a14:	0692      	lsls	r2, r2, #26
 8002a16:	d531      	bpl.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b9a      	ldr	r3, [pc, #616]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a1a:	4f9b      	ldr	r7, [pc, #620]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a36:	f7fd fddb 	bl	80005f0 <HAL_GetTick>
 8002a3a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	f140 8168 	bpl.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a44:	4f8f      	ldr	r7, [pc, #572]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a4c:	f040 816d 	bne.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a52:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a56:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a5a:	4a8a      	ldr	r2, [pc, #552]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a5c:	f040 818b 	bne.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002a60:	6891      	ldr	r1, [r2, #8]
 8002a62:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002a66:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002a6a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002a6e:	4301      	orrs	r1, r0
 8002a70:	6091      	str	r1, [r2, #8]
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	06da      	lsls	r2, r3, #27
 8002a80:	d50c      	bpl.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a82:	4a80      	ldr	r2, [pc, #512]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a84:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a88:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002a8c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a90:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a96:	4301      	orrs	r1, r0
 8002a98:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9c:	045f      	lsls	r7, r3, #17
 8002a9e:	d508      	bpl.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa0:	4978      	ldr	r1, [pc, #480]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aa2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002aa4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aa8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002aac:	4302      	orrs	r2, r0
 8002aae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab2:	0418      	lsls	r0, r3, #16
 8002ab4:	d508      	bpl.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab6:	4973      	ldr	r1, [pc, #460]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ab8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002aba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002abe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ac2:	4302      	orrs	r2, r0
 8002ac4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac8:	03d9      	lsls	r1, r3, #15
 8002aca:	d508      	bpl.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002acc:	496d      	ldr	r1, [pc, #436]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ace:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ad0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ad4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002ad8:	4302      	orrs	r2, r0
 8002ada:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ade:	039a      	lsls	r2, r3, #14
 8002ae0:	d508      	bpl.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae2:	4968      	ldr	r1, [pc, #416]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ae4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ae6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aea:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002aee:	4302      	orrs	r2, r0
 8002af0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af4:	065f      	lsls	r7, r3, #25
 8002af6:	d508      	bpl.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af8:	4962      	ldr	r1, [pc, #392]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002afa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002afc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b00:	f022 0203 	bic.w	r2, r2, #3
 8002b04:	4302      	orrs	r2, r0
 8002b06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0a:	0618      	lsls	r0, r3, #24
 8002b0c:	d508      	bpl.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0e:	495d      	ldr	r1, [pc, #372]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b16:	f022 020c 	bic.w	r2, r2, #12
 8002b1a:	4302      	orrs	r2, r0
 8002b1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b20:	05d9      	lsls	r1, r3, #23
 8002b22:	d508      	bpl.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b24:	4957      	ldr	r1, [pc, #348]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b2c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002b30:	4302      	orrs	r2, r0
 8002b32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b36:	059a      	lsls	r2, r3, #22
 8002b38:	d508      	bpl.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b3a:	4952      	ldr	r1, [pc, #328]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002b3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002b46:	4302      	orrs	r2, r0
 8002b48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b4c:	055f      	lsls	r7, r3, #21
 8002b4e:	d508      	bpl.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b50:	494c      	ldr	r1, [pc, #304]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b5c:	4302      	orrs	r2, r0
 8002b5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b62:	0518      	lsls	r0, r3, #20
 8002b64:	d508      	bpl.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b66:	4947      	ldr	r1, [pc, #284]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b72:	4302      	orrs	r2, r0
 8002b74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b78:	04d9      	lsls	r1, r3, #19
 8002b7a:	d508      	bpl.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b7c:	4941      	ldr	r1, [pc, #260]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b7e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b88:	4302      	orrs	r2, r0
 8002b8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b8e:	049a      	lsls	r2, r3, #18
 8002b90:	d508      	bpl.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b92:	493c      	ldr	r1, [pc, #240]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b94:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002b96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ba4:	025f      	lsls	r7, r3, #9
 8002ba6:	d508      	bpl.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ba8:	4936      	ldr	r1, [pc, #216]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002baa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002bac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bb0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bba:	0298      	lsls	r0, r3, #10
 8002bbc:	d50c      	bpl.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bbe:	4831      	ldr	r0, [pc, #196]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bc0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002bc2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002bc6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bca:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002bce:	bf08      	it	eq
 8002bd0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002bd8:	f013 0f08 	tst.w	r3, #8
 8002bdc:	bf18      	it	ne
 8002bde:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002be0:	0359      	lsls	r1, r3, #13
 8002be2:	d508      	bpl.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be4:	4927      	ldr	r1, [pc, #156]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002be8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bf0:	4302      	orrs	r2, r0
 8002bf2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bf6:	021a      	lsls	r2, r3, #8
 8002bf8:	d509      	bpl.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bfc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002c00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c04:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c08:	4302      	orrs	r2, r0
 8002c0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c0e:	2e01      	cmp	r6, #1
 8002c10:	f000 80b5 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c18:	f000 80b1 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c1c:	2d01      	cmp	r5, #1
 8002c1e:	d175      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c20:	4d18      	ldr	r5, [pc, #96]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2a:	f7fd fce1 	bl	80005f0 <HAL_GetTick>
 8002c2e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	009f      	lsls	r7, r3, #2
 8002c34:	f100 8127 	bmi.w	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c38:	6821      	ldr	r1, [r4, #0]
 8002c3a:	030e      	lsls	r6, r1, #12
 8002c3c:	d501      	bpl.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8002c3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c40:	b11b      	cbz	r3, 8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8002c42:	02cd      	lsls	r5, r1, #11
 8002c44:	d522      	bpl.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c48:	bb03      	cbnz	r3, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c50:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002c5c:	4303      	orrs	r3, r0
 8002c5e:	6960      	ldr	r0, [r4, #20]
 8002c60:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c64:	69a0      	ldr	r0, [r4, #24]
 8002c66:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002c6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c74:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c78:	3801      	subs	r0, #1
 8002c7a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c82:	e003      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c8c:	0288      	lsls	r0, r1, #10
 8002c8e:	d515      	bpl.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002c90:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c96:	d111      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c98:	4a82      	ldr	r2, [pc, #520]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002c9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c9e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ca2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002ca6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002caa:	4303      	orrs	r3, r0
 8002cac:	6960      	ldr	r0, [r4, #20]
 8002cae:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002cb2:	6a20      	ldr	r0, [r4, #32]
 8002cb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cbc:	070a      	lsls	r2, r1, #28
 8002cbe:	d519      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cc0:	4978      	ldr	r1, [pc, #480]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002cc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cc6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cca:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	6962      	ldr	r2, [r4, #20]
 8002cd6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002cda:	69e2      	ldr	r2, [r4, #28]
 8002cdc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002ce8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf4:	4c6b      	ldr	r4, [pc, #428]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfe:	f7fd fc77 	bl	80005f0 <HAL_GetTick>
 8002d02:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f140 80c4 	bpl.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8002d10:	2601      	movs	r6, #1
 8002d12:	e67b      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fd fc6c 	bl	80005f0 <HAL_GetTick>
 8002d18:	eba0 0008 	sub.w	r0, r0, r8
 8002d1c:	2864      	cmp	r0, #100	; 0x64
 8002d1e:	f67f ae8d 	bls.w	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
}
 8002d24:	b003      	add	sp, #12
 8002d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f43f ae8d 	beq.w	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d42:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d4a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	07d8      	lsls	r0, r3, #31
 8002d52:	f57f ae7d 	bpl.w	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002d56:	f7fd fc4b 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d5e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d62:	0799      	lsls	r1, r3, #30
 8002d64:	f53f ae74 	bmi.w	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fd fc42 	bl	80005f0 <HAL_GetTick>
 8002d6c:	eba0 0008 	sub.w	r0, r0, r8
 8002d70:	4548      	cmp	r0, r9
 8002d72:	d9f5      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d74:	e7d5      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d76:	6891      	ldr	r1, [r2, #8]
 8002d78:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002d7c:	e678      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002d7e:	4e49      	ldr	r6, [pc, #292]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002d80:	6833      	ldr	r3, [r6, #0]
 8002d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d88:	f7fd fc32 	bl	80005f0 <HAL_GetTick>
 8002d8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d8e:	6833      	ldr	r3, [r6, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	d472      	bmi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	07d7      	lsls	r7, r2, #31
 8002d98:	d512      	bpl.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d9c:	b983      	cbnz	r3, 8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002daa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6861      	ldr	r1, [r4, #4]
 8002db2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002db6:	68a1      	ldr	r1, [r4, #8]
 8002db8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002dbc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc0:	0316      	lsls	r6, r2, #12
 8002dc2:	d503      	bpl.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002dcc:	02d0      	lsls	r0, r2, #11
 8002dce:	d51e      	bpl.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d11a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dd8:	4932      	ldr	r1, [pc, #200]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002dda:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dde:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002dea:	4303      	orrs	r3, r0
 8002dec:	6860      	ldr	r0, [r4, #4]
 8002dee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002df2:	68e0      	ldr	r0, [r4, #12]
 8002df4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dfc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e02:	f020 001f 	bic.w	r0, r0, #31
 8002e06:	3b01      	subs	r3, #1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0e:	01d1      	lsls	r1, r2, #7
 8002e10:	d511      	bpl.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e12:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002e14:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e18:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e1c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002e20:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002e24:	4303      	orrs	r3, r0
 8002e26:	6860      	ldr	r0, [r4, #4]
 8002e28:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e2c:	6920      	ldr	r0, [r4, #16]
 8002e2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e36:	0192      	lsls	r2, r2, #6
 8002e38:	d50d      	bpl.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3a:	6923      	ldr	r3, [r4, #16]
 8002e3c:	6862      	ldr	r2, [r4, #4]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e44:	68e2      	ldr	r2, [r4, #12]
 8002e46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e4a:	68a2      	ldr	r2, [r4, #8]
 8002e4c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002e52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002e56:	4e13      	ldr	r6, [pc, #76]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002e58:	6833      	ldr	r3, [r6, #0]
 8002e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e5e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002e60:	f7fd fbc6 	bl	80005f0 <HAL_GetTick>
 8002e64:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e66:	6833      	ldr	r3, [r6, #0]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	f53f aed7 	bmi.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e6e:	f7fd fbbf 	bl	80005f0 <HAL_GetTick>
 8002e72:	1bc0      	subs	r0, r0, r7
 8002e74:	2864      	cmp	r0, #100	; 0x64
 8002e76:	d9f6      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e78:	e753      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7a:	f7fd fbb9 	bl	80005f0 <HAL_GetTick>
 8002e7e:	1bc0      	subs	r0, r0, r7
 8002e80:	2864      	cmp	r0, #100	; 0x64
 8002e82:	d984      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002e84:	e74d      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e86:	f7fd fbb3 	bl	80005f0 <HAL_GetTick>
 8002e8a:	1b80      	subs	r0, r0, r6
 8002e8c:	2864      	cmp	r0, #100	; 0x64
 8002e8e:	f67f aecf 	bls.w	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002e92:	e746      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e94:	f7fd fbac 	bl	80005f0 <HAL_GetTick>
 8002e98:	1b40      	subs	r0, r0, r5
 8002e9a:	2864      	cmp	r0, #100	; 0x64
 8002e9c:	f67f af32 	bls.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002ea0:	e73f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002ea8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002eac:	d12a      	bne.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002eb4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002eb8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ebc:	d032      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002ebe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8002ec2:	d02d      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d148      	bne.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002ec8:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002eca:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002ecc:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002ece:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ed0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002ed4:	bf54      	ite	pl
 8002ed6:	4b23      	ldrpl	r3, [pc, #140]	; (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ed8:	4b23      	ldrmi	r3, [pc, #140]	; (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002eda:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ede:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002ee2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002ee6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002eea:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002eec:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002ef0:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002ef4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ef8:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002efc:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002efe:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002f02:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002f04:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002f08:	d127      	bne.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002f0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002f10:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8002f14:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002f1a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002f1e:	e7d0      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8002f20:	4812      	ldr	r0, [pc, #72]	; (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8002f22:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f24:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f26:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f28:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002f30:	bf54      	ite	pl
 8002f32:	4b0c      	ldrpl	r3, [pc, #48]	; (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002f34:	4b0c      	ldrmi	r3, [pc, #48]	; (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002f36:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002f3a:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002f3e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002f42:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f46:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002f48:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002f4c:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002f50:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	e7d0      	b.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8002f5a:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	017d7840 	.word	0x017d7840
 8002f6c:	00bb8000 	.word	0x00bb8000

08002f70 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f70:	6802      	ldr	r2, [r0, #0]
{
 8002f72:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f74:	68d3      	ldr	r3, [r2, #12]
{
 8002f76:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fb37 	bl	80005f0 <HAL_GetTick>
 8002f82:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	069b      	lsls	r3, r3, #26
 8002f8a:	d501      	bpl.n	8002f90 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f90:	f7fd fb2e 	bl	80005f0 <HAL_GetTick>
 8002f94:	1b40      	subs	r0, r0, r5
 8002f96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f9a:	d9f3      	bls.n	8002f84 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002f9c:	2003      	movs	r0, #3
}
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}

08002fa0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fa0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fa2:	6803      	ldr	r3, [r0, #0]
{
 8002fa4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	0652      	lsls	r2, r2, #25
 8002faa:	d501      	bpl.n	8002fb0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002fac:	2000      	movs	r0, #0
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002fb6:	f7fd fb1b 	bl	80005f0 <HAL_GetTick>
 8002fba:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	065b      	lsls	r3, r3, #25
 8002fc2:	d4f3      	bmi.n	8002fac <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fc4:	f7fd fb14 	bl	80005f0 <HAL_GetTick>
 8002fc8:	1b40      	subs	r0, r0, r5
 8002fca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fce:	d9f5      	bls.n	8002fbc <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002fd0:	2003      	movs	r0, #3
}
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}

08002fd4 <HAL_RTC_Init>:
{
 8002fd4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	b1b0      	cbz	r0, 8003008 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fda:	7f43      	ldrb	r3, [r0, #29]
 8002fdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fe0:	b913      	cbnz	r3, 8002fe8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002fe2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002fe4:	f00d fa72 	bl	80104cc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002fe8:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fea:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fec:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002fee:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff4:	2253      	movs	r2, #83	; 0x53
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ff8:	f7ff ffd2 	bl	8002fa0 <RTC_EnterInitMode>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	b128      	cbz	r0, 800300c <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003004:	2304      	movs	r3, #4
 8003006:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8003008:	2001      	movs	r0, #1
}
 800300a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800300c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800300e:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003010:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003018:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	6899      	ldr	r1, [r3, #8]
 800301e:	432a      	orrs	r2, r5
 8003020:	6965      	ldr	r5, [r4, #20]
 8003022:	432a      	orrs	r2, r5
 8003024:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003026:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003028:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800302a:	68e2      	ldr	r2, [r4, #12]
 800302c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003034:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003036:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003042:	f022 0208 	bic.w	r2, r2, #8
 8003046:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800304a:	430a      	orrs	r2, r1
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003052:	2301      	movs	r3, #1
 8003054:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8003056:	bd38      	pop	{r3, r4, r5, pc}

08003058 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003058:	2300      	movs	r3, #0
  
  while(Value >= 10)
 800305a:	2809      	cmp	r0, #9
 800305c:	d803      	bhi.n	8003066 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800305e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003062:	b2c0      	uxtb	r0, r0
 8003064:	4770      	bx	lr
    Value -= 10;
 8003066:	380a      	subs	r0, #10
    bcdhigh++;
 8003068:	3301      	adds	r3, #1
    Value -= 10;
 800306a:	b2c0      	uxtb	r0, r0
 800306c:	e7f5      	b.n	800305a <RTC_ByteToBcd2+0x2>

0800306e <HAL_RTC_SetDate>:
{
 800306e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003070:	7f03      	ldrb	r3, [r0, #28]
{
 8003072:	4605      	mov	r5, r0
 8003074:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8003076:	2b01      	cmp	r3, #1
 8003078:	d030      	beq.n	80030dc <HAL_RTC_SetDate+0x6e>
 800307a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800307c:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 800307e:	7703      	strb	r3, [r0, #28]
 8003080:	784b      	ldrb	r3, [r1, #1]
 8003082:	78c8      	ldrb	r0, [r1, #3]
 8003084:	788e      	ldrb	r6, [r1, #2]
 8003086:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003088:	2a00      	cmp	r2, #0
 800308a:	d148      	bne.n	800311e <HAL_RTC_SetDate+0xb0>
 800308c:	06da      	lsls	r2, r3, #27
 800308e:	d503      	bpl.n	8003098 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003090:	f023 0310 	bic.w	r3, r3, #16
 8003094:	330a      	adds	r3, #10
 8003096:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003098:	f7ff ffde 	bl	8003058 <RTC_ByteToBcd2>
 800309c:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800309e:	7848      	ldrb	r0, [r1, #1]
 80030a0:	f7ff ffda 	bl	8003058 <RTC_ByteToBcd2>
 80030a4:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80030a6:	4630      	mov	r0, r6
 80030a8:	f7ff ffd6 	bl	8003058 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80030ac:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80030b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80030b4:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030bc:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
 80030c0:	2253      	movs	r2, #83	; 0x53
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030c4:	f7ff ff6c 	bl	8002fa0 <RTC_EnterInitMode>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	4606      	mov	r6, r0
 80030cc:	b140      	cbz	r0, 80030e0 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030d2:	2304      	movs	r3, #4
 80030d4:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80030d6:	2300      	movs	r3, #0
 80030d8:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80030da:	2601      	movs	r6, #1
}
 80030dc:	4630      	mov	r0, r6
 80030de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030e0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80030e4:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80030e8:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	069b      	lsls	r3, r3, #26
 80030f6:	d40a      	bmi.n	800310e <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030f8:	4628      	mov	r0, r5
 80030fa:	f7ff ff39 	bl	8002f70 <HAL_RTC_WaitForSynchro>
 80030fe:	b130      	cbz	r0, 800310e <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003106:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8003108:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800310a:	776b      	strb	r3, [r5, #29]
 800310c:	e7e5      	b.n	80030da <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800310e:	682b      	ldr	r3, [r5, #0]
 8003110:	22ff      	movs	r2, #255	; 0xff
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003114:	2301      	movs	r3, #1
 8003116:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003118:	2300      	movs	r3, #0
 800311a:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 800311c:	e7de      	b.n	80030dc <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 800311e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003120:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003124:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003126:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800312a:	e7c5      	b.n	80030b8 <HAL_RTC_SetDate+0x4a>

0800312c <HAL_RTC_SetTime>:
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800312e:	7f03      	ldrb	r3, [r0, #28]
{
 8003130:	4606      	mov	r6, r0
 8003132:	460f      	mov	r7, r1
 8003134:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8003136:	2b01      	cmp	r3, #1
 8003138:	d02f      	beq.n	800319a <HAL_RTC_SetTime+0x6e>
 800313a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800313c:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 800313e:	7703      	strb	r3, [r0, #28]
 8003140:	6803      	ldr	r3, [r0, #0]
 8003142:	784d      	ldrb	r5, [r1, #1]
 8003144:	7808      	ldrb	r0, [r1, #0]
 8003146:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003148:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800314a:	bb42      	cbnz	r2, 800319e <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800314c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8003150:	bf08      	it	eq
 8003152:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003154:	f7ff ff80 	bl	8003058 <RTC_ByteToBcd2>
 8003158:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800315a:	4628      	mov	r0, r5
 800315c:	f7ff ff7c 	bl	8003058 <RTC_ByteToBcd2>
 8003160:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff ff78 	bl	8003058 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8003168:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800316a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800316e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003172:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003176:	6833      	ldr	r3, [r6, #0]
 8003178:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800317a:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
 800317e:	2253      	movs	r2, #83	; 0x53
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003182:	f7ff ff0d 	bl	8002fa0 <RTC_EnterInitMode>
 8003186:	6833      	ldr	r3, [r6, #0]
 8003188:	4605      	mov	r5, r0
 800318a:	b1a0      	cbz	r0, 80031b6 <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003190:	2304      	movs	r3, #4
 8003192:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8003194:	2300      	movs	r3, #0
 8003196:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8003198:	2501      	movs	r5, #1
}
 800319a:	4628      	mov	r0, r5
 800319c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 800319e:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80031a0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80031a4:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 80031a8:	bf08      	it	eq
 80031aa:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80031ac:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80031ae:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80031b0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80031b4:	e7df      	b.n	8003176 <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031b6:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031ba:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031bc:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80031c0:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	4302      	orrs	r2, r0
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031da:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	d40a      	bmi.n	80031f8 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7ff fec4 	bl	8002f70 <HAL_RTC_WaitForSynchro>
 80031e8:	b130      	cbz	r0, 80031f8 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80031ea:	6833      	ldr	r3, [r6, #0]
 80031ec:	22ff      	movs	r2, #255	; 0xff
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f0:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80031f2:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f4:	7773      	strb	r3, [r6, #29]
 80031f6:	e7cf      	b.n	8003198 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80031fe:	2301      	movs	r3, #1
 8003200:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8003202:	2300      	movs	r3, #0
 8003204:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8003206:	e7c8      	b.n	800319a <HAL_RTC_SetTime+0x6e>

08003208 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8003208:	7f03      	ldrb	r3, [r0, #28]
 800320a:	2b01      	cmp	r3, #1
{
 800320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	4604      	mov	r4, r0
 8003212:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003216:	d056      	beq.n	80032c6 <HAL_RTC_SetAlarm+0xbe>
 8003218:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800321a:	7760      	strb	r0, [r4, #29]
 800321c:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 800321e:	7723      	strb	r3, [r4, #28]
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	7808      	ldrb	r0, [r1, #0]
 8003224:	f891 9001 	ldrb.w	r9, [r1, #1]
 8003228:	788d      	ldrb	r5, [r1, #2]
 800322a:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 800322e:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003230:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8003232:	2a00      	cmp	r2, #0
 8003234:	d149      	bne.n	80032ca <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003236:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800323a:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800323e:	bf08      	it	eq
 8003240:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003242:	f7ff ff09 	bl	8003058 <RTC_ByteToBcd2>
 8003246:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8003248:	4648      	mov	r0, r9
 800324a:	f7ff ff05 	bl	8003058 <RTC_ByteToBcd2>
 800324e:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003250:	4628      	mov	r0, r5
 8003252:	f7ff ff01 	bl	8003058 <RTC_ByteToBcd2>
 8003256:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003258:	4640      	mov	r0, r8
 800325a:	f7ff fefd 	bl	8003058 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800325e:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003260:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8003264:	ea45 0509 	orr.w	r5, r5, r9
 8003268:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800326c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8003270:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003274:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003276:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003278:	684e      	ldr	r6, [r1, #4]
 800327a:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
 8003280:	2253      	movs	r2, #83	; 0x53
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003284:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003286:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800328a:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800328c:	d13d      	bne.n	800330a <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800328e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003292:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800329c:	f7fd f9a8 	bl	80005f0 <HAL_GetTick>
 80032a0:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	68df      	ldr	r7, [r3, #12]
 80032a6:	f017 0701 	ands.w	r7, r7, #1
 80032aa:	d01f      	beq.n	80032ec <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80032ac:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80032ae:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 80032b6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 80032bc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80032c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80032c2:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY; 
 80032c4:	7763      	strb	r3, [r4, #29]
}
 80032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80032ca:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032cc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80032d0:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80032d4:	bf08      	it	eq
 80032d6:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80032d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80032dc:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80032de:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80032e2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80032e6:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 80032ea:	e7c3      	b.n	8003274 <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032ec:	f7fd f980 	bl	80005f0 <HAL_GetTick>
 80032f0:	eba0 0008 	sub.w	r0, r0, r8
 80032f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032f8:	d9d3      	bls.n	80032a2 <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80032fe:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003302:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8003304:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 8003306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800330a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800330e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003316:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003318:	f7fd f96a 	bl	80005f0 <HAL_GetTick>
 800331c:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	68df      	ldr	r7, [r3, #12]
 8003322:	f017 0702 	ands.w	r7, r7, #2
 8003326:	d005      	beq.n	8003334 <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003328:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800332a:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	e7c0      	b.n	80032b6 <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003334:	f7fd f95c 	bl	80005f0 <HAL_GetTick>
 8003338:	eba0 0008 	sub.w	r0, r0, r8
 800333c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003340:	d9ed      	bls.n	800331e <HAL_RTC_SetAlarm+0x116>
 8003342:	e7da      	b.n	80032fa <HAL_RTC_SetAlarm+0xf2>

08003344 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003344:	7f03      	ldrb	r3, [r0, #28]
 8003346:	2b01      	cmp	r3, #1
 8003348:	f04f 0302 	mov.w	r3, #2
{
 800334c:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 800334e:	d01d      	beq.n	800338c <HAL_RTCEx_SetTimeStamp+0x48>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003350:	7743      	strb	r3, [r0, #29]
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003352:	6803      	ldr	r3, [r0, #0]
 8003354:	689c      	ldr	r4, [r3, #8]
 8003356:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800335a:	f024 0408 	bic.w	r4, r4, #8
    
  tmpreg|= TimeStampEdge;
 800335e:	430c      	orrs	r4, r1
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003360:	21ca      	movs	r1, #202	; 0xca
 8003362:	6259      	str	r1, [r3, #36]	; 0x24
 8003364:	2153      	movs	r1, #83	; 0x53
 8003366:	6259      	str	r1, [r3, #36]	; 0x24
  
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8003368:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800336a:	f021 0106 	bic.w	r1, r1, #6
 800336e:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8003370:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003372:	430a      	orrs	r2, r1
 8003374:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003376:	609c      	str	r4, [r3, #8]
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8003384:	2301      	movs	r3, #1
 8003386:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8003388:	2300      	movs	r3, #0
 800338a:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 800338c:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 800338e:	bd10      	pop	{r4, pc}

08003390 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003392:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f641 3358 	movw	r3, #7000	; 0x1b58
 800339a:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800339e:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80033a0:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80033a8:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80033ac:	d207      	bcs.n	80033be <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80033ae:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80033b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
      break;
 80033bc:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80033be:	680b      	ldr	r3, [r1, #0]
 80033c0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80033c4:	d1f0      	bne.n	80033a8 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	4618      	mov	r0, r3

  return status;
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000030 	.word	0x20000030

080033d0 <HAL_SAI_Init>:
{
 80033d0:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 80033d2:	4604      	mov	r4, r0
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f000 80c5 	beq.w	8003564 <HAL_SAI_Init+0x194>
  if(hsai->State == HAL_SAI_STATE_RESET)
 80033da:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80033de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033e2:	b91b      	cbnz	r3, 80033ec <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80033e4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80033e8:	f00d fa48 	bl	801087c <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80033ec:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80033ee:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80033f0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80033f4:	f7ff ffcc 	bl	8003390 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f000 80a1 	beq.w	8003542 <HAL_SAI_Init+0x172>
  uint32_t tmpregisterGCR = 0;
 8003400:	2b02      	cmp	r3, #2
 8003402:	bf0c      	ite	eq
 8003404:	2320      	moveq	r3, #32
 8003406:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8003408:	68a2      	ldr	r2, [r4, #8]
 800340a:	2a02      	cmp	r2, #2
 800340c:	f000 809d 	beq.w	800354a <HAL_SAI_Init+0x17a>
 8003410:	2a03      	cmp	r2, #3
 8003412:	f000 8098 	beq.w	8003546 <HAL_SAI_Init+0x176>
  uint32_t syncen_bits = 0;
 8003416:	2a01      	cmp	r2, #1
 8003418:	bf0c      	ite	eq
 800341a:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 800341e:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003420:	6822      	ldr	r2, [r4, #0]
 8003422:	4951      	ldr	r1, [pc, #324]	; (8003568 <HAL_SAI_Init+0x198>)
 8003424:	428a      	cmp	r2, r1
 8003426:	d003      	beq.n	8003430 <HAL_SAI_Init+0x60>
 8003428:	4850      	ldr	r0, [pc, #320]	; (800356c <HAL_SAI_Init+0x19c>)
 800342a:	4282      	cmp	r2, r0
 800342c:	f040 8090 	bne.w	8003550 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8003430:	484f      	ldr	r0, [pc, #316]	; (8003570 <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 8003432:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003434:	69e3      	ldr	r3, [r4, #28]
 8003436:	b313      	cbz	r3, 800347e <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8003438:	428a      	cmp	r2, r1
 800343a:	d003      	beq.n	8003444 <HAL_SAI_Init+0x74>
 800343c:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_SAI_Init+0x19c>)
 800343e:	429a      	cmp	r2, r3
 8003440:	f040 8088 	bne.w	8003554 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003444:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003448:	f7ff fd2e 	bl	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_SAI_Init+0x1a4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d002      	beq.n	800345a <HAL_SAI_Init+0x8a>
 8003454:	3220      	adds	r2, #32
 8003456:	4293      	cmp	r3, r2
 8003458:	d103      	bne.n	8003462 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800345a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800345e:	f7ff fd23 	bl	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003462:	220a      	movs	r2, #10
 8003464:	69e3      	ldr	r3, [r4, #28]
 8003466:	4350      	muls	r0, r2
 8003468:	025b      	lsls	r3, r3, #9
 800346a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800346e:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8003472:	fb02 0013 	mls	r0, r2, r3, r0
 8003476:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8003478:	bf08      	it	eq
 800347a:	3301      	addeq	r3, #1
 800347c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	f033 0202 	bics.w	r2, r3, #2
 8003484:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003486:	d167      	bne.n	8003558 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003488:	2a01      	cmp	r2, #1
 800348a:	bf14      	ite	ne
 800348c:	f44f 7100 	movne.w	r1, #512	; 0x200
 8003490:	2100      	moveq	r1, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	4838      	ldr	r0, [pc, #224]	; (8003578 <HAL_SAI_Init+0x1a8>)
 8003496:	6816      	ldr	r6, [r2, #0]
 8003498:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800349a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800349c:	4333      	orrs	r3, r6
 800349e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80034a0:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80034a2:	4333      	orrs	r3, r6
 80034a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80034a6:	6810      	ldr	r0, [r2, #0]
 80034a8:	4333      	orrs	r3, r6
 80034aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034ac:	4333      	orrs	r3, r6
 80034ae:	6926      	ldr	r6, [r4, #16]
 80034b0:	4333      	orrs	r3, r6
 80034b2:	6966      	ldr	r6, [r4, #20]
 80034b4:	4333      	orrs	r3, r6
 80034b6:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80034b8:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80034ba:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80034be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80034c0:	432b      	orrs	r3, r5
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80034c6:	6853      	ldr	r3, [r2, #4]
 80034c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80034cc:	f023 030f 	bic.w	r3, r3, #15
 80034d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80034d2:	69a3      	ldr	r3, [r4, #24]
 80034d4:	6851      	ldr	r1, [r2, #4]
 80034d6:	4303      	orrs	r3, r0
 80034d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80034da:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80034dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80034de:	430b      	orrs	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_SAI_Init+0x1ac>)
 80034e4:	6891      	ldr	r1, [r2, #8]
 80034e6:	400b      	ands	r3, r1
 80034e8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80034ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80034ec:	6891      	ldr	r1, [r2, #8]
 80034ee:	4303      	orrs	r3, r0
 80034f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80034f2:	4303      	orrs	r3, r0
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80034f8:	3901      	subs	r1, #1
 80034fa:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80034fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80034fe:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003500:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003504:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003506:	68d3      	ldr	r3, [r2, #12]
 8003508:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800350c:	f023 030f 	bic.w	r3, r3, #15
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003516:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003518:	68d1      	ldr	r1, [r2, #12]
 800351a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351c:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800351e:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003520:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003522:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003524:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003528:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800352a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800352c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003530:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8003532:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003534:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8003538:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 800353c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8003540:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003542:	2310      	movs	r3, #16
 8003544:	e760      	b.n	8003408 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003546:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800354a:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 800354e:	e767      	b.n	8003420 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <HAL_SAI_Init+0x1b0>)
 8003552:	e76e      	b.n	8003432 <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8003554:	2000      	movs	r0, #0
 8003556:	e779      	b.n	800344c <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003558:	2a01      	cmp	r2, #1
 800355a:	bf14      	ite	ne
 800355c:	2100      	movne	r1, #0
 800355e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8003562:	e796      	b.n	8003492 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
}
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	40015804 	.word	0x40015804
 800356c:	40015824 	.word	0x40015824
 8003570:	40015800 	.word	0x40015800
 8003574:	40015c04 	.word	0x40015c04
 8003578:	ff05c010 	.word	0xff05c010
 800357c:	fff88000 	.word	0xfff88000
 8003580:	40015c00 	.word	0x40015c00

08003584 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003588:	4604      	mov	r4, r0
 800358a:	b1c8      	cbz	r0, 80035c0 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800358c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003590:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003594:	b91b      	cbnz	r3, 800359e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003596:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800359a:	f00d f907 	bl	80107ac <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800359e:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80035a0:	1d21      	adds	r1, r4, #4
 80035a2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80035a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80035a8:	f000 fecd 	bl	8004346 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80035ac:	6862      	ldr	r2, [r4, #4]
 80035ae:	4629      	mov	r1, r5
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f000 ff07 	bl	80043c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80035b6:	2301      	movs	r3, #1
  
  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80035ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80035be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80035c0:	2001      	movs	r0, #1
}
 80035c2:	bd38      	pop	{r3, r4, r5, pc}

080035c4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80035c4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0;
  
  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80035c6:	4604      	mov	r4, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d030      	beq.n	800362e <HAL_SPDIFRX_Init+0x6a>
  assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
  assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
  assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
  
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80035cc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80035d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035d4:	b91b      	cbnz	r3, 80035de <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80035d6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80035da:	f00c ff85 	bl	80104e8 <HAL_SPDIFRX_MspInit>
  
  /* SPDIFRX peripheral state is BUSY*/
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
  
  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80035de:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
 80035e0:	2302      	movs	r3, #2
             hspdif->Init.WaitForActivity |
             hspdif->Init.ChannelSelection |
             hspdif->Init.DataFormat |
             hspdif->Init.PreambleTypeMask |
             hspdif->Init.ChannelStatusMask |
             hspdif->Init.ValidityBitMask |
 80035e2:	68a0      	ldr	r0, [r4, #8]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
 80035e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 80035e8:	680b      	ldr	r3, [r1, #0]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	600b      	str	r3, [r1, #0]
             hspdif->Init.ValidityBitMask |
 80035f0:	6863      	ldr	r3, [r4, #4]
  tmpreg = hspdif->Instance->CR;
 80035f2:	680a      	ldr	r2, [r1, #0]
             hspdif->Init.ValidityBitMask |
 80035f4:	4303      	orrs	r3, r0
 80035f6:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80035f8:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.ValidityBitMask |
 80035fc:	4303      	orrs	r3, r0
 80035fe:	6920      	ldr	r0, [r4, #16]
  tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003600:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.ValidityBitMask |
 8003604:	4303      	orrs	r3, r0
 8003606:	6960      	ldr	r0, [r4, #20]
 8003608:	4303      	orrs	r3, r0
 800360a:	69e0      	ldr	r0, [r4, #28]
 800360c:	4303      	orrs	r3, r0
 800360e:	6a20      	ldr	r0, [r4, #32]
 8003610:	4303      	orrs	r3, r0
 8003612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003614:	4303      	orrs	r3, r0
 8003616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003618:	4303      	orrs	r3, r0
 800361a:	8b20      	ldrh	r0, [r4, #24]
 800361c:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask);
  
  hspdif->Instance->CR = tmpreg;  
  
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800361e:	2000      	movs	r0, #0
  tmpreg |= ((uint16_t) hspdif->Init.StereoMode |
 8003620:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;  
 8003622:	600b      	str	r3, [r1, #0]
  
  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003624:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003626:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  
  return HAL_OK;
 800362c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800362e:	2001      	movs	r0, #1
}
 8003630:	bd10      	pop	{r4, pc}

08003632 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003632:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003634:	4604      	mov	r4, r0
 8003636:	2800      	cmp	r0, #0
 8003638:	d04e      	beq.n	80036d8 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800363e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003642:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003646:	b91b      	cbnz	r3, 8003650 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003648:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800364c:	f00c ff6e 	bl	801052c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003650:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003652:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003654:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003656:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800365a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800365c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003664:	600b      	str	r3, [r1, #0]
 8003666:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800366a:	d932      	bls.n	80036d2 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800366c:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800366e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003672:	bf18      	it	ne
 8003674:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003676:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003678:	b92b      	cbnz	r3, 8003686 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800367e:	bf8c      	ite	hi
 8003680:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003682:	2301      	movls	r3, #1
 8003684:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003686:	68a6      	ldr	r6, [r4, #8]
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	69a5      	ldr	r5, [r4, #24]
 800368c:	4333      	orrs	r3, r6
 800368e:	6926      	ldr	r6, [r4, #16]
 8003690:	4333      	orrs	r3, r6
 8003692:	6966      	ldr	r6, [r4, #20]
 8003694:	4333      	orrs	r3, r6
 8003696:	69e6      	ldr	r6, [r4, #28]
 8003698:	4333      	orrs	r3, r6
 800369a:	6a26      	ldr	r6, [r4, #32]
 800369c:	4333      	orrs	r3, r6
 800369e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036a0:	4333      	orrs	r3, r6
 80036a2:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036a6:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80036a8:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036aa:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80036ae:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b2:	431a      	orrs	r2, r3
 80036b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b6:	431a      	orrs	r2, r3
 80036b8:	432a      	orrs	r2, r5
 80036ba:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036bc:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036be:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036c0:	69cb      	ldr	r3, [r1, #28]
 80036c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80036c8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ca:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80036d0:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80036d6:	e7cc      	b.n	8003672 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80036d8:	2001      	movs	r0, #1
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}

080036dc <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036dc:	6a03      	ldr	r3, [r0, #32]
{
 80036de:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e0:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e2:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e6:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 80036ea:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80036ee:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80036f4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80036fa:	6203      	str	r3, [r0, #32]
 80036fc:	bd10      	pop	{r4, pc}

080036fe <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	6a03      	ldr	r3, [r0, #32]
 8003700:	f023 0310 	bic.w	r3, r3, #16
{
 8003704:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003708:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800370a:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003714:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8003718:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800371c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800371e:	6203      	str	r3, [r0, #32]
 8003720:	bd10      	pop	{r4, pc}

08003722 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003722:	6803      	ldr	r3, [r0, #0]
}
 8003724:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_OC_DelayElapsedCallback>:
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_IC_CaptureCallback>:
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_PWM_PulseFinishedCallback>:
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_TriggerCallback>:
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	0791      	lsls	r1, r2, #30
{
 8003746:	b510      	push	{r4, lr}
 8003748:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800374a:	d50f      	bpl.n	800376c <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	0792      	lsls	r2, r2, #30
 8003750:	d50c      	bpl.n	800376c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003752:	f06f 0202 	mvn.w	r2, #2
 8003756:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003758:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800375a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800375e:	0799      	lsls	r1, r3, #30
 8003760:	f000 8085 	beq.w	800386e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003764:	f7ff ffe9 	bl	800373a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003768:	2300      	movs	r3, #0
 800376a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	0752      	lsls	r2, r2, #29
 8003772:	d510      	bpl.n	8003796 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	0750      	lsls	r0, r2, #29
 8003778:	d50d      	bpl.n	8003796 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800377a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003784:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003788:	f413 7f40 	tst.w	r3, #768	; 0x300
 800378c:	d075      	beq.n	800387a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	f7ff ffd4 	bl	800373a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	2300      	movs	r3, #0
 8003794:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	0711      	lsls	r1, r2, #28
 800379c:	d50f      	bpl.n	80037be <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	0712      	lsls	r2, r2, #28
 80037a2:	d50c      	bpl.n	80037be <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a4:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80037a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ac:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037b2:	079b      	lsls	r3, r3, #30
 80037b4:	d067      	beq.n	8003886 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	f7ff ffc0 	bl	800373a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	2300      	movs	r3, #0
 80037bc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	06d0      	lsls	r0, r2, #27
 80037c4:	d510      	bpl.n	80037e8 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	06d1      	lsls	r1, r2, #27
 80037ca:	d50d      	bpl.n	80037e8 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037cc:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80037d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80037d6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80037da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037de:	d058      	beq.n	8003892 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80037e0:	f7ff ffab 	bl	800373a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e4:	2300      	movs	r3, #0
 80037e6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	07d2      	lsls	r2, r2, #31
 80037ee:	d508      	bpl.n	8003802 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	07d0      	lsls	r0, r2, #31
 80037f4:	d505      	bpl.n	8003802 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fe:	f00c fc5f 	bl	80100c0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	0611      	lsls	r1, r2, #24
 8003808:	d508      	bpl.n	800381c <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	0612      	lsls	r2, r2, #24
 800380e:	d505      	bpl.n	800381c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003810:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003814:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003816:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003818:	f000 faeb 	bl	8003df2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	05d0      	lsls	r0, r2, #23
 8003822:	d508      	bpl.n	8003836 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	0611      	lsls	r1, r2, #24
 8003828:	d505      	bpl.n	8003836 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800382a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800382e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003830:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003832:	f000 fade 	bl	8003df2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	0652      	lsls	r2, r2, #25
 800383c:	d508      	bpl.n	8003850 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	0650      	lsls	r0, r2, #25
 8003842:	d505      	bpl.n	8003850 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003844:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003848:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800384c:	f7ff ff77 	bl	800373e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	0691      	lsls	r1, r2, #26
 8003856:	d522      	bpl.n	800389e <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	0692      	lsls	r2, r2, #26
 800385c:	d51f      	bpl.n	800389e <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003862:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003864:	611a      	str	r2, [r3, #16]
}
 8003866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800386a:	f000 bac1 	b.w	8003df0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	f7ff ff63 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff ff62 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
 8003878:	e776      	b.n	8003768 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	f7ff ff5d 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff ff5c 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
 8003884:	e785      	b.n	8003792 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	f7ff ff57 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff ff56 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
 8003890:	e793      	b.n	80037ba <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	f7ff ff51 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff ff50 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
 800389c:	e7a2      	b.n	80037e4 <HAL_TIM_IRQHandler+0xa4>
 800389e:	bd10      	pop	{r4, pc}

080038a0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80038a0:	4a30      	ldr	r2, [pc, #192]	; (8003964 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80038a2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80038a4:	4290      	cmp	r0, r2
 80038a6:	d012      	beq.n	80038ce <TIM_Base_SetConfig+0x2e>
 80038a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038ac:	d00f      	beq.n	80038ce <TIM_Base_SetConfig+0x2e>
 80038ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038b2:	4290      	cmp	r0, r2
 80038b4:	d00b      	beq.n	80038ce <TIM_Base_SetConfig+0x2e>
 80038b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038ba:	4290      	cmp	r0, r2
 80038bc:	d007      	beq.n	80038ce <TIM_Base_SetConfig+0x2e>
 80038be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038c2:	4290      	cmp	r0, r2
 80038c4:	d003      	beq.n	80038ce <TIM_Base_SetConfig+0x2e>
 80038c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038ca:	4290      	cmp	r0, r2
 80038cc:	d11d      	bne.n	800390a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80038ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038d4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038d6:	4a23      	ldr	r2, [pc, #140]	; (8003964 <TIM_Base_SetConfig+0xc4>)
 80038d8:	4290      	cmp	r0, r2
 80038da:	d104      	bne.n	80038e6 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e0:	68ca      	ldr	r2, [r1, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	e028      	b.n	8003938 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80038e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038ea:	d0f7      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 80038ec:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <TIM_Base_SetConfig+0xc8>)
 80038ee:	4290      	cmp	r0, r2
 80038f0:	d0f4      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 80038f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f6:	4290      	cmp	r0, r2
 80038f8:	d0f0      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 80038fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038fe:	4290      	cmp	r0, r2
 8003900:	d0ec      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003902:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003906:	4290      	cmp	r0, r2
 8003908:	d0e8      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <TIM_Base_SetConfig+0xcc>)
 800390c:	4290      	cmp	r0, r2
 800390e:	d0e5      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003914:	4290      	cmp	r0, r2
 8003916:	d0e1      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800391c:	4290      	cmp	r0, r2
 800391e:	d0dd      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003920:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003924:	4290      	cmp	r0, r2
 8003926:	d0d9      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800392c:	4290      	cmp	r0, r2
 800392e:	d0d5      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
 8003930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003934:	4290      	cmp	r0, r2
 8003936:	d0d1      	beq.n	80038dc <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	694a      	ldr	r2, [r1, #20]
 800393a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003940:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003942:	688b      	ldr	r3, [r1, #8]
 8003944:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <TIM_Base_SetConfig+0xc4>)
 800394c:	4298      	cmp	r0, r3
 800394e:	d006      	beq.n	800395e <TIM_Base_SetConfig+0xbe>
 8003950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003954:	4298      	cmp	r0, r3
 8003956:	d002      	beq.n	800395e <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8003958:	2301      	movs	r3, #1
 800395a:	6143      	str	r3, [r0, #20]
}
 800395c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800395e:	690b      	ldr	r3, [r1, #16]
 8003960:	6303      	str	r3, [r0, #48]	; 0x30
 8003962:	e7f9      	b.n	8003958 <TIM_Base_SetConfig+0xb8>
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIM_Base_Init>:
{ 
 8003970:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003972:	4604      	mov	r4, r0
 8003974:	b1a0      	cbz	r0, 80039a0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800397a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800397e:	b91b      	cbnz	r3, 8003988 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003980:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003984:	f00c fe02 	bl	801058c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003988:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800398e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003992:	f7ff ff85 	bl	80038a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003996:	2301      	movs	r3, #1
  return HAL_OK;
 8003998:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800399a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800399e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
}
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <HAL_TIM_PWM_Init>:
{
 80039a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80039a6:	4604      	mov	r4, r0
 80039a8:	b1a0      	cbz	r0, 80039d4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80039aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039b2:	b91b      	cbnz	r3, 80039bc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80039b8:	f00c fe3c 	bl	8010634 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80039bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80039be:	6820      	ldr	r0, [r4, #0]
 80039c0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 80039c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80039c6:	f7ff ff6b 	bl	80038a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80039ca:	2301      	movs	r3, #1
  return HAL_OK;
 80039cc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80039ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
}  
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	6a03      	ldr	r3, [r0, #32]
 80039da:	f023 0301 	bic.w	r3, r3, #1
{
 80039de:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80039e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80039e4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80039e6:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80039e8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80039ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039ee:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80039f2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80039f6:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 80039f8:	688d      	ldr	r5, [r1, #8]
 80039fa:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80039fc:	4d0c      	ldr	r5, [pc, #48]	; (8003a30 <TIM_OC1_SetConfig+0x58>)
 80039fe:	42a8      	cmp	r0, r5
 8003a00:	d009      	beq.n	8003a16 <TIM_OC1_SetConfig+0x3e>
 8003a02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a06:	42a8      	cmp	r0, r5
 8003a08:	d005      	beq.n	8003a16 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8003a0a:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003a0c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a0e:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003a10:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8003a12:	6203      	str	r3, [r0, #32]
} 
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8003a16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a18:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a1c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003a22:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a24:	694d      	ldr	r5, [r1, #20]
 8003a26:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a28:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2c:	432a      	orrs	r2, r5
 8003a2e:	e7ec      	b.n	8003a0a <TIM_OC1_SetConfig+0x32>
 8003a30:	40010000 	.word	0x40010000

08003a34 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a34:	6a03      	ldr	r3, [r0, #32]
 8003a36:	f023 0310 	bic.w	r3, r3, #16
{
 8003a3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003a3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003a40:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a42:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003a44:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003a48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a4a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003a4e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003a52:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003a56:	688d      	ldr	r5, [r1, #8]
 8003a58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003a5c:	4d0d      	ldr	r5, [pc, #52]	; (8003a94 <TIM_OC2_SetConfig+0x60>)
 8003a5e:	42a8      	cmp	r0, r5
 8003a60:	d009      	beq.n	8003a76 <TIM_OC2_SetConfig+0x42>
 8003a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a66:	42a8      	cmp	r0, r5
 8003a68:	d005      	beq.n	8003a76 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003a6a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a6c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a6e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a70:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003a72:	6203      	str	r3, [r0, #32]
}
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003a76:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003a7c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003a82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003a86:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003a88:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003a8e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003a92:	e7ea      	b.n	8003a6a <TIM_OC2_SetConfig+0x36>
 8003a94:	40010000 	.word	0x40010000

08003a98 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a98:	6a03      	ldr	r3, [r0, #32]
 8003a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003a9e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003aa2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003aa4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003aac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003aae:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003ab2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ab6:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003ab8:	688d      	ldr	r5, [r1, #8]
 8003aba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003abe:	4d0e      	ldr	r5, [pc, #56]	; (8003af8 <TIM_OC3_SetConfig+0x60>)
 8003ac0:	42a8      	cmp	r0, r5
 8003ac2:	d009      	beq.n	8003ad8 <TIM_OC3_SetConfig+0x40>
 8003ac4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ac8:	42a8      	cmp	r0, r5
 8003aca:	d005      	beq.n	8003ad8 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003acc:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003ace:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad2:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003ad4:	6203      	str	r3, [r0, #32]
}
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003ad8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003ade:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ae0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003ae4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003ae8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003aea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003af0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003af4:	e7ea      	b.n	8003acc <TIM_OC3_SetConfig+0x34>
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000

08003afc <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afc:	6a03      	ldr	r3, [r0, #32]
 8003afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8003b02:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003b06:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003b08:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b0c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003b10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b16:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003b1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003b1e:	688d      	ldr	r5, [r1, #8]
 8003b20:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003b24:	4d09      	ldr	r5, [pc, #36]	; (8003b4c <TIM_OC4_SetConfig+0x50>)
 8003b26:	42a8      	cmp	r0, r5
 8003b28:	d009      	beq.n	8003b3e <TIM_OC4_SetConfig+0x42>
 8003b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b2e:	42a8      	cmp	r0, r5
 8003b30:	d005      	beq.n	8003b3e <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003b32:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b34:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003b36:	684b      	ldr	r3, [r1, #4]
 8003b38:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003b3a:	6204      	str	r4, [r0, #32]
}
 8003b3c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003b42:	694d      	ldr	r5, [r1, #20]
 8003b44:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003b48:	e7f3      	b.n	8003b32 <TIM_OC4_SetConfig+0x36>
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000

08003b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b50:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003b52:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003b54:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003b56:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003b5e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b60:	6083      	str	r3, [r0, #8]
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003b64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
{
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003b72:	d018      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003b78:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8003b7a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003b7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_TIM_ConfigClockSource+0x118>)
 8003b84:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003b86:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003b88:	680b      	ldr	r3, [r1, #0]
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d059      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xde>
 8003b8e:	d815      	bhi.n	8003bbc <HAL_TIM_ConfigClockSource+0x58>
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d067      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0x100>
 8003b94:	d808      	bhi.n	8003ba8 <HAL_TIM_ConfigClockSource+0x44>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d05e      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8003b9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003b9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ba2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003ba6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d061      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x10c>
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d1f4      	bne.n	8003b9a <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8003bb0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003bb6:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8003bba:	e026      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8003bbc:	2b70      	cmp	r3, #112	; 0x70
 8003bbe:	d026      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xaa>
 8003bc0:	d80e      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x7c>
 8003bc2:	2b50      	cmp	r3, #80	; 0x50
 8003bc4:	d032      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0xc8>
 8003bc6:	2b60      	cmp	r3, #96	; 0x60
 8003bc8:	d1e7      	bne.n	8003b9a <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003bca:	68ca      	ldr	r2, [r1, #12]
 8003bcc:	6849      	ldr	r1, [r1, #4]
 8003bce:	f7ff fd96 	bl	80036fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003bd4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003bda:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003bde:	e023      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d00c      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x9c>
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	d1d6      	bne.n	8003b9a <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003bec:	68cb      	ldr	r3, [r1, #12]
 8003bee:	684a      	ldr	r2, [r1, #4]
 8003bf0:	6889      	ldr	r1, [r1, #8]
 8003bf2:	f7ff ffad 	bl	8003b50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	6893      	ldr	r3, [r2, #8]
 8003bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfe:	e013      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003c00:	6883      	ldr	r3, [r0, #8]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8003c0a:	6083      	str	r3, [r0, #8]
 8003c0c:	e7c5      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8003c0e:	68cb      	ldr	r3, [r1, #12]
 8003c10:	684a      	ldr	r2, [r1, #4]
 8003c12:	6889      	ldr	r1, [r1, #8]
 8003c14:	f7ff ff9c 	bl	8003b50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c28:	6093      	str	r3, [r2, #8]
    break;
 8003c2a:	e7b6      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003c2c:	68ca      	ldr	r2, [r1, #12]
 8003c2e:	6849      	ldr	r1, [r1, #4]
 8003c30:	f7ff fd54 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c34:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003c36:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003c3c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003c40:	e7f2      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003c42:	68ca      	ldr	r2, [r1, #12]
 8003c44:	6849      	ldr	r1, [r1, #4]
 8003c46:	f7ff fd49 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c4a:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003c4c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003c52:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003c56:	e7e7      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8003c58:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003c5e:	f043 0307 	orr.w	r3, r3, #7
 8003c62:	e7d2      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003c64:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003c6a:	f043 0317 	orr.w	r3, r3, #23
 8003c6e:	e7cc      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003c70:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003c76:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8003c7a:	e7c6      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
 8003c7c:	fffe0088 	.word	0xfffe0088

08003c80 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c80:	6a03      	ldr	r3, [r0, #32]
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8003c86:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c88:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003c8c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c90:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003c9e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003ca0:	688d      	ldr	r5, [r1, #8]
 8003ca2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	4d09      	ldr	r5, [pc, #36]	; (8003ccc <TIM_OC5_SetConfig+0x4c>)
 8003ca8:	42a8      	cmp	r0, r5
 8003caa:	d003      	beq.n	8003cb4 <TIM_OC5_SetConfig+0x34>
 8003cac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cb0:	42a8      	cmp	r0, r5
 8003cb2:	d104      	bne.n	8003cbe <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cb4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003cb8:	694d      	ldr	r5, [r1, #20]
 8003cba:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbe:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cc0:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cc2:	684b      	ldr	r3, [r1, #4]
 8003cc4:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003cc6:	6202      	str	r2, [r0, #32]
 8003cc8:	bd30      	pop	{r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cd0:	6a03      	ldr	r3, [r0, #32]
 8003cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8003cd6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cd8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003cdc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cde:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ce0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003ce4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003cee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003cf2:	688d      	ldr	r5, [r1, #8]
 8003cf4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf8:	4d08      	ldr	r5, [pc, #32]	; (8003d1c <TIM_OC6_SetConfig+0x4c>)
 8003cfa:	42a8      	cmp	r0, r5
 8003cfc:	d003      	beq.n	8003d06 <TIM_OC6_SetConfig+0x36>
 8003cfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d02:	42a8      	cmp	r0, r5
 8003d04:	d104      	bne.n	8003d10 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d06:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003d0a:	694d      	ldr	r5, [r1, #20]
 8003d0c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d12:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d14:	684b      	ldr	r3, [r1, #4]
 8003d16:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003d18:	6202      	str	r2, [r0, #32]
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	40010000 	.word	0x40010000

08003d20 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003d20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
{
 8003d26:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003d28:	d01c      	beq.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8003d2a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d2c:	4d0e      	ldr	r5, [pc, #56]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003d2e:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d30:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003d32:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d34:	d003      	beq.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8003d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d3a:	42aa      	cmp	r2, r5
 8003d3c:	d103      	bne.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d42:	684d      	ldr	r5, [r1, #4]
 8003d44:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d46:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4c:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d52:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d54:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8003d56:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8003d58:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8003d5a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003d5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003d64:	2002      	movs	r0, #2
} 
 8003d66:	bd30      	pop	{r4, r5, pc}
 8003d68:	40010000 	.word	0x40010000

08003d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
{
 8003d72:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003d74:	d038      	beq.n	8003de8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d76:	68cb      	ldr	r3, [r1, #12]
 8003d78:	688a      	ldr	r2, [r1, #8]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d7e:	4c1b      	ldr	r4, [pc, #108]	; (8003dec <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d82:	684a      	ldr	r2, [r1, #4]
 8003d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d8a:	680a      	ldr	r2, [r1, #0]
 8003d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d92:	690a      	ldr	r2, [r1, #16]
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d9a:	694a      	ldr	r2, [r1, #20]
 8003d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003da2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003da4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003da8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8003daa:	698a      	ldr	r2, [r1, #24]
 8003dac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003db4:	6802      	ldr	r2, [r0, #0]
 8003db6:	42a2      	cmp	r2, r4
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8003dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003dbe:	42a2      	cmp	r2, r4
 8003dc0:	d10c      	bne.n	8003ddc <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003dc2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003dc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dc8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dcc:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003dce:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003dd6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dda:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003dde:	2300      	movs	r3, #0
 8003de0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003de8:	2002      	movs	r0, #2
}
 8003dea:	bd10      	pop	{r4, pc}
 8003dec:	40010000 	.word	0x40010000

08003df0 <HAL_TIMEx_CommutationCallback>:
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIMEx_BreakCallback>:
{
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_ConfigChannel>:
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003df6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	460d      	mov	r5, r1
 8003dfe:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d010      	beq.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e04:	2301      	movs	r3, #1
  switch (Channel)
 8003e06:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003e0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003e10:	d043      	beq.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0xa6>
 8003e12:	d809      	bhi.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003e14:	b1fa      	cbz	r2, 8003e56 <HAL_TIM_PWM_ConfigChannel+0x62>
 8003e16:	2a04      	cmp	r2, #4
 8003e18:	d02e      	beq.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8003e1a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003e1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e22:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003e28:	2a10      	cmp	r2, #16
 8003e2a:	d047      	beq.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003e2c:	2a14      	cmp	r2, #20
 8003e2e:	d056      	beq.n	8003ede <HAL_TIM_PWM_ConfigChannel+0xea>
 8003e30:	2a0c      	cmp	r2, #12
 8003e32:	d1f2      	bne.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	f7ff fe61 	bl	8003afc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003e3c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e54:	e030      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e56:	6820      	ldr	r0, [r4, #0]
 8003e58:	f7ff fdbe 	bl	80039d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e5e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	f022 0204 	bic.w	r2, r2, #4
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003e74:	619a      	str	r2, [r3, #24]
    break;
 8003e76:	e7d0      	b.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	f7ff fddb 	bl	8003a34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e7e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003e80:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e98:	e7ec      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	f7ff fdfc 	bl	8003a98 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003ea2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003eb8:	61da      	str	r2, [r3, #28]
    break;
 8003eba:	e7ae      	b.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	f7ff fedf 	bl	8003c80 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ec2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003ec4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ec8:	f042 0208 	orr.w	r2, r2, #8
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed0:	f022 0204 	bic.w	r2, r2, #4
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003ed6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed8:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8003edc:	e79d      	b.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	f7ff fef6 	bl	8003cd0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ee4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003ee6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8003ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003efe:	e7ec      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0xe6>

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	9d06      	ldr	r5, [sp, #24]
 8003f06:	4604      	mov	r4, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	6821      	ldr	r1, [r4, #0]
 8003f10:	69ca      	ldr	r2, [r1, #28]
 8003f12:	ea37 0302 	bics.w	r3, r7, r2
 8003f16:	bf0c      	ite	eq
 8003f18:	2201      	moveq	r2, #1
 8003f1a:	2200      	movne	r2, #0
 8003f1c:	42b2      	cmp	r2, r6
 8003f1e:	d002      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003f20:	2000      	movs	r0, #0
}
 8003f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003f26:	1c6b      	adds	r3, r5, #1
 8003f28:	d0f2      	beq.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003f2a:	b99d      	cbnz	r5, 8003f54 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003f2e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003f40:	2320      	movs	r3, #32
 8003f42:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003f46:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8003f54:	f7fc fb4c 	bl	80005f0 <HAL_GetTick>
 8003f58:	eba0 0008 	sub.w	r0, r0, r8
 8003f5c:	4285      	cmp	r5, r0
 8003f5e:	d8d6      	bhi.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xe>
 8003f60:	e7e4      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x2c>
	...

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f68:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f6a:	69c3      	ldr	r3, [r0, #28]
 8003f6c:	6921      	ldr	r1, [r4, #16]
 8003f6e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f70:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f72:	430a      	orrs	r2, r1
 8003f74:	6961      	ldr	r1, [r4, #20]
 8003f76:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f78:	4993      	ldr	r1, [pc, #588]	; (80041c8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f7a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f7c:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f7e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f80:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003f84:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f86:	686a      	ldr	r2, [r5, #4]
 8003f88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f90:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003f92:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003f94:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003f96:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9e:	4a8b      	ldr	r2, [pc, #556]	; (80041cc <UART_SetConfig+0x268>)
 8003fa0:	4295      	cmp	r5, r2
 8003fa2:	d119      	bne.n	8003fd8 <UART_SetConfig+0x74>
 8003fa4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003fa8:	4989      	ldr	r1, [pc, #548]	; (80041d0 <UART_SetConfig+0x26c>)
 8003faa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003fae:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb6:	5c8a      	ldrb	r2, [r1, r2]
 8003fb8:	f040 80b3 	bne.w	8004122 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003fbc:	2a08      	cmp	r2, #8
 8003fbe:	f200 80ad 	bhi.w	800411c <UART_SetConfig+0x1b8>
 8003fc2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003fc6:	0026      	.short	0x0026
 8003fc8:	00e9007b 	.word	0x00e9007b
 8003fcc:	00f500ab 	.word	0x00f500ab
 8003fd0:	00ab00ab 	.word	0x00ab00ab
 8003fd4:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd8:	4a7e      	ldr	r2, [pc, #504]	; (80041d4 <UART_SetConfig+0x270>)
 8003fda:	4295      	cmp	r5, r2
 8003fdc:	d107      	bne.n	8003fee <UART_SetConfig+0x8a>
 8003fde:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003fe2:	497d      	ldr	r1, [pc, #500]	; (80041d8 <UART_SetConfig+0x274>)
 8003fe4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003fe8:	f002 020c 	and.w	r2, r2, #12
 8003fec:	e7e1      	b.n	8003fb2 <UART_SetConfig+0x4e>
 8003fee:	4a7b      	ldr	r2, [pc, #492]	; (80041dc <UART_SetConfig+0x278>)
 8003ff0:	4295      	cmp	r5, r2
 8003ff2:	d12b      	bne.n	800404c <UART_SetConfig+0xe8>
 8003ff4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003ff8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ffc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004000:	2a10      	cmp	r2, #16
 8004002:	f000 80d2 	beq.w	80041aa <UART_SetConfig+0x246>
 8004006:	d816      	bhi.n	8004036 <UART_SetConfig+0xd2>
 8004008:	b9da      	cbnz	r2, 8004042 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400e:	f040 809f 	bne.w	8004150 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004012:	f7fe fc81 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	084a      	lsrs	r2, r1, #1
 800401a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800401e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004022:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004024:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004026:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800402a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
 8004034:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	2a20      	cmp	r2, #32
 8004038:	f000 80ab 	beq.w	8004192 <UART_SetConfig+0x22e>
 800403c:	2a30      	cmp	r2, #48	; 0x30
 800403e:	f000 80ba 	beq.w	80041b6 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d069      	beq.n	800411c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004048:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800404a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404c:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <UART_SetConfig+0x27c>)
 800404e:	4295      	cmp	r5, r2
 8004050:	d10e      	bne.n	8004070 <UART_SetConfig+0x10c>
 8004052:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8004056:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800405a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800405e:	2a40      	cmp	r2, #64	; 0x40
 8004060:	f000 80a3 	beq.w	80041aa <UART_SetConfig+0x246>
 8004064:	d9d0      	bls.n	8004008 <UART_SetConfig+0xa4>
 8004066:	2a80      	cmp	r2, #128	; 0x80
 8004068:	f000 8093 	beq.w	8004192 <UART_SetConfig+0x22e>
 800406c:	2ac0      	cmp	r2, #192	; 0xc0
 800406e:	e7e6      	b.n	800403e <UART_SetConfig+0xda>
 8004070:	4a5c      	ldr	r2, [pc, #368]	; (80041e4 <UART_SetConfig+0x280>)
 8004072:	4295      	cmp	r5, r2
 8004074:	d110      	bne.n	8004098 <UART_SetConfig+0x134>
 8004076:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800407a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800407e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004082:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004086:	f000 8090 	beq.w	80041aa <UART_SetConfig+0x246>
 800408a:	d9bd      	bls.n	8004008 <UART_SetConfig+0xa4>
 800408c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004090:	d07f      	beq.n	8004192 <UART_SetConfig+0x22e>
 8004092:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004096:	e7d2      	b.n	800403e <UART_SetConfig+0xda>
 8004098:	4a53      	ldr	r2, [pc, #332]	; (80041e8 <UART_SetConfig+0x284>)
 800409a:	4295      	cmp	r5, r2
 800409c:	d117      	bne.n	80040ce <UART_SetConfig+0x16a>
 800409e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80040a2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80040a6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80040aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80040ae:	d07c      	beq.n	80041aa <UART_SetConfig+0x246>
 80040b0:	d807      	bhi.n	80040c2 <UART_SetConfig+0x15e>
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	d1c5      	bne.n	8004042 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ba:	d154      	bne.n	8004166 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040bc:	f7fe fc3c 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 80040c0:	e7a9      	b.n	8004016 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80040c6:	d064      	beq.n	8004192 <UART_SetConfig+0x22e>
 80040c8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80040cc:	e7b7      	b.n	800403e <UART_SetConfig+0xda>
 80040ce:	4a47      	ldr	r2, [pc, #284]	; (80041ec <UART_SetConfig+0x288>)
 80040d0:	4295      	cmp	r5, r2
 80040d2:	d10f      	bne.n	80040f4 <UART_SetConfig+0x190>
 80040d4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80040d8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80040dc:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80040e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80040e4:	d061      	beq.n	80041aa <UART_SetConfig+0x246>
 80040e6:	d98f      	bls.n	8004008 <UART_SetConfig+0xa4>
 80040e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80040ec:	d051      	beq.n	8004192 <UART_SetConfig+0x22e>
 80040ee:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80040f2:	e7a4      	b.n	800403e <UART_SetConfig+0xda>
 80040f4:	4a3e      	ldr	r2, [pc, #248]	; (80041f0 <UART_SetConfig+0x28c>)
 80040f6:	4295      	cmp	r5, r2
 80040f8:	d1a3      	bne.n	8004042 <UART_SetConfig+0xde>
 80040fa:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80040fe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004102:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004106:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800410a:	d04e      	beq.n	80041aa <UART_SetConfig+0x246>
 800410c:	f67f af7c 	bls.w	8004008 <UART_SetConfig+0xa4>
 8004110:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004114:	d03d      	beq.n	8004192 <UART_SetConfig+0x22e>
 8004116:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800411a:	e790      	b.n	800403e <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 800411c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800411e:	2300      	movs	r3, #0
 8004120:	e781      	b.n	8004026 <UART_SetConfig+0xc2>
    switch (clocksource)
 8004122:	2a08      	cmp	r2, #8
 8004124:	d890      	bhi.n	8004048 <UART_SetConfig+0xe4>
 8004126:	a301      	add	r3, pc, #4	; (adr r3, 800412c <UART_SetConfig+0x1c8>)
 8004128:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800412c:	08004151 	.word	0x08004151
 8004130:	08004167 	.word	0x08004167
 8004134:	0800416d 	.word	0x0800416d
 8004138:	08004049 	.word	0x08004049
 800413c:	08004183 	.word	0x08004183
 8004140:	08004049 	.word	0x08004049
 8004144:	08004049 	.word	0x08004049
 8004148:	08004049 	.word	0x08004049
 800414c:	08004189 	.word	0x08004189
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004150:	f7fe fbe2 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800415a:	fbb0 f0f3 	udiv	r0, r0, r3
 800415e:	b280      	uxth	r0, r0
 8004160:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004162:	2000      	movs	r0, #0
      break;
 8004164:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004166:	f7fe fbe7 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 800416a:	e7f3      	b.n	8004154 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800416c:	6862      	ldr	r2, [r4, #4]
 800416e:	0853      	lsrs	r3, r2, #1
 8004170:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004174:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004178:	fbb3 f3f2 	udiv	r3, r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	60eb      	str	r3, [r5, #12]
 8004180:	e7ef      	b.n	8004162 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004182:	f7fe faf7 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8004186:	e7e5      	b.n	8004154 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004188:	6862      	ldr	r2, [r4, #4]
 800418a:	0853      	lsrs	r3, r2, #1
 800418c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004190:	e7f2      	b.n	8004178 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d1e9      	bne.n	800416c <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004198:	6860      	ldr	r0, [r4, #4]
 800419a:	0843      	lsrs	r3, r0, #1
 800419c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80041a0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80041a8:	e73b      	b.n	8004022 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d1e8      	bne.n	8004182 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041b0:	f7fe fae0 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 80041b4:	e72f      	b.n	8004016 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d1e5      	bne.n	8004188 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041bc:	6860      	ldr	r0, [r4, #4]
 80041be:	0843      	lsrs	r3, r0, #1
 80041c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80041c4:	e7ee      	b.n	80041a4 <UART_SetConfig+0x240>
 80041c6:	bf00      	nop
 80041c8:	efff69f3 	.word	0xefff69f3
 80041cc:	40011000 	.word	0x40011000
 80041d0:	08011d08 	.word	0x08011d08
 80041d4:	40004400 	.word	0x40004400
 80041d8:	08011d0c 	.word	0x08011d0c
 80041dc:	40004800 	.word	0x40004800
 80041e0:	40004c00 	.word	0x40004c00
 80041e4:	40005000 	.word	0x40005000
 80041e8:	40011400 	.word	0x40011400
 80041ec:	40007800 	.word	0x40007800
 80041f0:	40007c00 	.word	0x40007c00

080041f4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041f6:	07da      	lsls	r2, r3, #31
{
 80041f8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fa:	d506      	bpl.n	800420a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fc:	6801      	ldr	r1, [r0, #0]
 80041fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004200:	684a      	ldr	r2, [r1, #4]
 8004202:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004206:	4322      	orrs	r2, r4
 8004208:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420a:	079c      	lsls	r4, r3, #30
 800420c:	d506      	bpl.n	800421c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420e:	6801      	ldr	r1, [r0, #0]
 8004210:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004212:	684a      	ldr	r2, [r1, #4]
 8004214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004218:	4322      	orrs	r2, r4
 800421a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421c:	0759      	lsls	r1, r3, #29
 800421e:	d506      	bpl.n	800422e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004220:	6801      	ldr	r1, [r0, #0]
 8004222:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004224:	684a      	ldr	r2, [r1, #4]
 8004226:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800422a:	4322      	orrs	r2, r4
 800422c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800422e:	071a      	lsls	r2, r3, #28
 8004230:	d506      	bpl.n	8004240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004232:	6801      	ldr	r1, [r0, #0]
 8004234:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004236:	684a      	ldr	r2, [r1, #4]
 8004238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423c:	4322      	orrs	r2, r4
 800423e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004240:	06dc      	lsls	r4, r3, #27
 8004242:	d506      	bpl.n	8004252 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004244:	6801      	ldr	r1, [r0, #0]
 8004246:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004248:	688a      	ldr	r2, [r1, #8]
 800424a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424e:	4322      	orrs	r2, r4
 8004250:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004252:	0699      	lsls	r1, r3, #26
 8004254:	d506      	bpl.n	8004264 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004256:	6801      	ldr	r1, [r0, #0]
 8004258:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800425a:	688a      	ldr	r2, [r1, #8]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004260:	4322      	orrs	r2, r4
 8004262:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004264:	065a      	lsls	r2, r3, #25
 8004266:	d510      	bpl.n	800428a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004268:	6801      	ldr	r1, [r0, #0]
 800426a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800426c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004272:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004276:	ea42 0204 	orr.w	r2, r2, r4
 800427a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427c:	d105      	bne.n	800428a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427e:	684a      	ldr	r2, [r1, #4]
 8004280:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004282:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004286:	4322      	orrs	r2, r4
 8004288:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	d506      	bpl.n	800429c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428e:	6802      	ldr	r2, [r0, #0]
 8004290:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004292:	6853      	ldr	r3, [r2, #4]
 8004294:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004298:	430b      	orrs	r3, r1
 800429a:	6053      	str	r3, [r2, #4]
 800429c:	bd10      	pop	{r4, pc}

0800429e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	2500      	movs	r5, #0
{
 80042a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042a6:	f7fc f9a3 	bl	80005f0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042aa:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80042ac:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	0712      	lsls	r2, r2, #28
 80042b2:	d409      	bmi.n	80042c8 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80042b4:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b6:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80042b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80042bc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80042c0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80042c4:	b003      	add	sp, #12
 80042c6:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80042cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d0:	4620      	mov	r0, r4
 80042d2:	9200      	str	r2, [sp, #0]
 80042d4:	462a      	mov	r2, r5
 80042d6:	f7ff fe13 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d0ea      	beq.n	80042b4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80042de:	2003      	movs	r0, #3
 80042e0:	e7f0      	b.n	80042c4 <UART_CheckIdleState+0x26>

080042e2 <HAL_UART_Init>:
{
 80042e2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80042e4:	4604      	mov	r4, r0
 80042e6:	b360      	cbz	r0, 8004342 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80042e8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80042ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042f0:	b91b      	cbnz	r3, 80042fa <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80042f2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80042f6:	f00c fa09 	bl	801070c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80042fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004304:	6813      	ldr	r3, [r2, #0]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800430c:	f7ff fe2a 	bl	8003f64 <UART_SetConfig>
 8004310:	2801      	cmp	r0, #1
 8004312:	d016      	beq.n	8004342 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004316:	b113      	cbz	r3, 800431e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff ff6b 	bl	80041f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004320:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004330:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
}
 8004338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800433c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800433e:	f7ff bfae 	b.w	800429e <UART_CheckIdleState>
}
 8004342:	2001      	movs	r0, #1
 8004344:	bd10      	pop	{r4, pc}

08004346 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	684a      	ldr	r2, [r1, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004350:	6803      	ldr	r3, [r0, #0]
{
 8004352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004356:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800435a:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800435e:	694d      	ldr	r5, [r1, #20]
 8004360:	698c      	ldr	r4, [r1, #24]
 8004362:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8004366:	6a0f      	ldr	r7, [r1, #32]
 8004368:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800436a:	d014      	beq.n	8004396 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800436c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004370:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004374:	431a      	orrs	r2, r3
 8004376:	ea42 0209 	orr.w	r2, r2, r9
 800437a:	ea42 0208 	orr.w	r2, r2, r8
 800437e:	ea42 030c 	orr.w	r3, r2, ip
 8004382:	432b      	orrs	r3, r5
 8004384:	4323      	orrs	r3, r4
 8004386:	ea43 030e 	orr.w	r3, r3, lr
 800438a:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800438c:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800438e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004390:	2000      	movs	r0, #0
 8004392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004396:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800439c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80043a0:	ea43 030e 	orr.w	r3, r3, lr
 80043a4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80043a8:	433b      	orrs	r3, r7
 80043aa:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80043ac:	431e      	orrs	r6, r3
 80043ae:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80043b2:	6006      	str	r6, [r0, #0]
 80043b4:	ea42 0208 	orr.w	r2, r2, r8
 80043b8:	ea42 030c 	orr.w	r3, r2, ip
 80043bc:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80043be:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80043c0:	6043      	str	r3, [r0, #4]
 80043c2:	e7e5      	b.n	8004390 <FMC_SDRAM_Init+0x4a>

080043c4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80043c4:	2a01      	cmp	r2, #1
 80043c6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 80043ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043cc:	e891 4008 	ldmia.w	r1, {r3, lr}
 80043d0:	688f      	ldr	r7, [r1, #8]
 80043d2:	690d      	ldr	r5, [r1, #16]
 80043d4:	694e      	ldr	r6, [r1, #20]
 80043d6:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 80043d8:	d01b      	beq.n	8004412 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80043da:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80043dc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80043e0:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80043e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80043e6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80043ea:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 80043ec:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 80043ee:	3901      	subs	r1, #1
 80043f0:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80043f4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80043f6:	1e7b      	subs	r3, r7, #1
 80043f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80043fc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8004400:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004404:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004408:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800440c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800440e:	2000      	movs	r0, #0
 8004410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004412:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004414:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004418:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800441a:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800441c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004420:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004424:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8004428:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800442a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 800442e:	3901      	subs	r1, #1
 8004430:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004434:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8004438:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800443a:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800443c:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8004440:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004444:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004446:	6086      	str	r6, [r0, #8]
 8004448:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800444c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004450:	60c3      	str	r3, [r0, #12]
 8004452:	e7dc      	b.n	800440e <FMC_SDRAM_Timing_Init+0x4a>

08004454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004456:	3b01      	subs	r3, #1
 8004458:	d101      	bne.n	800445e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800445a:	2003      	movs	r0, #3
 800445c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800445e:	6902      	ldr	r2, [r0, #16]
 8004460:	2a00      	cmp	r2, #0
 8004462:	daf8      	bge.n	8004456 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004464:	6903      	ldr	r3, [r0, #16]
 8004466:	4a06      	ldr	r2, [pc, #24]	; (8004480 <USB_CoreReset+0x2c>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800446e:	3a01      	subs	r2, #1
 8004470:	d0f3      	beq.n	800445a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004472:	6903      	ldr	r3, [r0, #16]
 8004474:	f013 0301 	ands.w	r3, r3, #1
 8004478:	d1f9      	bne.n	800446e <USB_CoreReset+0x1a>

  return HAL_OK;
 800447a:	4618      	mov	r0, r3
}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	00030d41 	.word	0x00030d41

08004484 <USB_CoreInit>:
{
 8004484:	b084      	sub	sp, #16
 8004486:	b538      	push	{r3, r4, r5, lr}
 8004488:	ad05      	add	r5, sp, #20
 800448a:	4604      	mov	r4, r0
 800448c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004492:	2b01      	cmp	r3, #1
 8004494:	d127      	bne.n	80044e6 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004496:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800449e:	68c3      	ldr	r3, [r0, #12]
 80044a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044aa:	68c3      	ldr	r3, [r0, #12]
 80044ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044b0:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80044b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d103      	bne.n	80044c0 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044b8:	68c3      	ldr	r3, [r0, #12]
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff ffc7 	bl	8004454 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 80044c6:	9b08      	ldr	r3, [sp, #32]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044cc:	68a3      	ldr	r3, [r4, #8]
 80044ce:	f043 0306 	orr.w	r3, r3, #6
 80044d2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044d4:	68a3      	ldr	r3, [r4, #8]
 80044d6:	f043 0320 	orr.w	r3, r3, #32
 80044da:	60a3      	str	r3, [r4, #8]
}
 80044dc:	2000      	movs	r0, #0
 80044de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044e2:	b004      	add	sp, #16
 80044e4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044e6:	68c3      	ldr	r3, [r0, #12]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80044ee:	f7ff ffb1 	bl	8004454 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80044f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80044f8:	e7e5      	b.n	80044c6 <USB_CoreInit+0x42>

080044fa <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044fa:	6883      	ldr	r3, [r0, #8]
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6083      	str	r3, [r0, #8]
}
 8004502:	2000      	movs	r0, #0
 8004504:	4770      	bx	lr

08004506 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004506:	6883      	ldr	r3, [r0, #8]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6083      	str	r3, [r0, #8]
}
 800450e:	2000      	movs	r0, #0
 8004510:	4770      	bx	lr

08004512 <USB_SetCurrentMode>:
{
 8004512:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004514:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004516:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004518:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800451c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800451e:	d108      	bne.n	8004532 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004520:	68c3      	ldr	r3, [r0, #12]
 8004522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004526:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004528:	2032      	movs	r0, #50	; 0x32
 800452a:	f7fc f867 	bl	80005fc <HAL_Delay>
  return HAL_OK;
 800452e:	2000      	movs	r0, #0
 8004530:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004532:	b919      	cbnz	r1, 800453c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004534:	68c3      	ldr	r3, [r0, #12]
 8004536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800453a:	e7f4      	b.n	8004526 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800453c:	2001      	movs	r0, #1
}
 800453e:	bd08      	pop	{r3, pc}

08004540 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004540:	0189      	lsls	r1, r1, #6
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <USB_FlushTxFifo+0x20>)
 8004544:	f041 0120 	orr.w	r1, r1, #32
 8004548:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800454a:	3a01      	subs	r2, #1
 800454c:	d005      	beq.n	800455a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800454e:	6903      	ldr	r3, [r0, #16]
 8004550:	f013 0320 	ands.w	r3, r3, #32
 8004554:	d1f9      	bne.n	800454a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004556:	4618      	mov	r0, r3
 8004558:	4770      	bx	lr
      return HAL_TIMEOUT;
 800455a:	2003      	movs	r0, #3
}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	00030d41 	.word	0x00030d41

08004564 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004564:	2310      	movs	r3, #16
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <USB_FlushRxFifo+0x1c>)
 8004568:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800456a:	3a01      	subs	r2, #1
 800456c:	d005      	beq.n	800457a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800456e:	6903      	ldr	r3, [r0, #16]
 8004570:	f013 0310 	ands.w	r3, r3, #16
 8004574:	d1f9      	bne.n	800456a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004576:	4618      	mov	r0, r3
 8004578:	4770      	bx	lr
      return HAL_TIMEOUT;
 800457a:	2003      	movs	r0, #3
}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	00030d41 	.word	0x00030d41

08004584 <USB_WritePacket>:
{
 8004584:	b510      	push	{r4, lr}
 8004586:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800458a:	b94c      	cbnz	r4, 80045a0 <USB_WritePacket+0x1c>
    count32b =  ((uint32_t)len + 3U) / 4U;
 800458c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800458e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800459a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800459c:	4299      	cmp	r1, r3
 800459e:	d101      	bne.n	80045a4 <USB_WritePacket+0x20>
}
 80045a0:	2000      	movs	r0, #0
 80045a2:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80045a4:	f851 2b04 	ldr.w	r2, [r1], #4
 80045a8:	6002      	str	r2, [r0, #0]
 80045aa:	e7f7      	b.n	800459c <USB_WritePacket+0x18>

080045ac <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045ac:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80045ae:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80045b2:	f022 0203 	bic.w	r2, r2, #3
 80045b6:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 80045b8:	4291      	cmp	r1, r2
 80045ba:	d101      	bne.n	80045c0 <USB_ReadPacket+0x14>
}
 80045bc:	4608      	mov	r0, r1
 80045be:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80045c0:	6803      	ldr	r3, [r0, #0]
 80045c2:	f841 3b04 	str.w	r3, [r1], #4
 80045c6:	e7f7      	b.n	80045b8 <USB_ReadPacket+0xc>

080045c8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80045c8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80045ca:	6980      	ldr	r0, [r0, #24]
}
 80045cc:	4010      	ands	r0, r2
 80045ce:	4770      	bx	lr

080045d0 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 80045d0:	6940      	ldr	r0, [r0, #20]
}
 80045d2:	f000 0001 	and.w	r0, r0, #1
 80045d6:	4770      	bx	lr

080045d8 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045d8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 80045dc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045de:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80045e2:	f023 0303 	bic.w	r3, r3, #3
{
 80045e6:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045e8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80045ec:	f001 0303 	and.w	r3, r1, #3
 80045f0:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80045f4:	ea43 0304 	orr.w	r3, r3, r4
 80045f8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80045fc:	d104      	bne.n	8004608 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 80045fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8004602:	6053      	str	r3, [r2, #4]
  {
     /* ... */
  }

  return HAL_OK;
}
 8004604:	2000      	movs	r0, #0
 8004606:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8004608:	2902      	cmp	r1, #2
 800460a:	d1fb      	bne.n	8004604 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 800460c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004610:	e7f7      	b.n	8004602 <USB_InitFSLSPClkSel+0x2a>

08004612 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004614:	2500      	movs	r5, #0
{
 8004616:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8004618:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800461a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800461e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004626:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (100U);                                /* See Note #1 */
 8004632:	2064      	movs	r0, #100	; 0x64
 8004634:	f7fb ffe2 	bl	80005fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004638:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay (10U);
 800463a:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800463c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004640:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10U);
 8004644:	f7fb ffda 	bl	80005fc <HAL_Delay>

  return HAL_OK;
}
 8004648:	4628      	mov	r0, r5
 800464a:	b003      	add	sp, #12
 800464c:	bd30      	pop	{r4, r5, pc}

0800464e <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800464e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004654:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004658:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800465a:	9b01      	ldr	r3, [sp, #4]
 800465c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004660:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004662:	9b01      	ldr	r3, [sp, #4]
 8004664:	04da      	lsls	r2, r3, #19
 8004666:	d406      	bmi.n	8004676 <USB_DriveVbus+0x28>
 8004668:	2901      	cmp	r1, #1
 800466a:	d104      	bne.n	8004676 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800466c:	9b01      	ldr	r3, [sp, #4]
 800466e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004672:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	04db      	lsls	r3, r3, #19
 800467a:	d505      	bpl.n	8004688 <USB_DriveVbus+0x3a>
 800467c:	b921      	cbnz	r1, 8004688 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800467e:	9b01      	ldr	r3, [sp, #4]
 8004680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004684:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004688:	2000      	movs	r0, #0
 800468a:	b002      	add	sp, #8
 800468c:	4770      	bx	lr
	...

08004690 <USB_HostInit>:
{
 8004690:	b084      	sub	sp, #16
 8004692:	b538      	push	{r3, r4, r5, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	a805      	add	r0, sp, #20
 8004698:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80046a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046a8:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 80046aa:	9b07      	ldr	r3, [sp, #28]
 80046ac:	2b03      	cmp	r3, #3
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046ae:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 80046b2:	d13c      	bne.n	800472e <USB_HostInit+0x9e>
 80046b4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80046b8:	d039      	beq.n	800472e <USB_HostInit+0x9e>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046ba:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046be:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80046c2:	2110      	movs	r1, #16
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff ff3b 	bl	8004540 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7ff ff4a 	bl	8004564 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	9906      	ldr	r1, [sp, #24]
 80046d4:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 80046dc:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80046de:	428b      	cmp	r3, r1
 80046e0:	d128      	bne.n	8004734 <USB_HostInit+0xa4>
  (void)USB_DriveVbus(USBx, 1U);
 80046e2:	2101      	movs	r1, #1
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7ff ffb2 	bl	800464e <USB_DriveVbus>
  HAL_Delay(200U);
 80046ea:	20c8      	movs	r0, #200	; 0xc8
 80046ec:	f7fb ff86 	bl	80005fc <HAL_Delay>
  USBx->GINTMSK = 0U;
 80046f0:	2300      	movs	r3, #0
  if(USBx == USB_OTG_FS)
 80046f2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTMSK = 0U;
 80046f6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046fc:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 80046fe:	d11e      	bne.n	800473e <USB_HostInit+0xae>
    USBx->GRXFSIZ  = 0x80U;
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004704:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004708:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <USB_HostInit+0xc0>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800470c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8004710:	9b08      	ldr	r3, [sp, #32]
 8004712:	b91b      	cbnz	r3, 800471c <USB_HostInit+0x8c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004714:	69a3      	ldr	r3, [r4, #24]
 8004716:	f043 0310 	orr.w	r3, r3, #16
 800471a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 800471c:	69a2      	ldr	r2, [r4, #24]
}
 800471e:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <USB_HostInit+0xc4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	61a3      	str	r3, [r4, #24]
}
 8004726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800472a:	b004      	add	sp, #16
 800472c:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	e7c4      	b.n	80046be <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004734:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004736:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8004738:	60d5      	str	r5, [r2, #12]
 800473a:	3220      	adds	r2, #32
 800473c:	e7cf      	b.n	80046de <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x200U;
 800473e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004742:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004744:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8004748:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <USB_HostInit+0xc8>)
 800474c:	e7de      	b.n	800470c <USB_HostInit+0x7c>
 800474e:	bf00      	nop
 8004750:	004000e0 	.word	0x004000e0
 8004754:	a3200008 	.word	0xa3200008
 8004758:	00e00300 	.word	0x00e00300

0800475c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 800475c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004762:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004766:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004768:	9801      	ldr	r0, [sp, #4]
}
 800476a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800476e:	b002      	add	sp, #8
 8004770:	4770      	bx	lr

08004772 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004772:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004776:	6880      	ldr	r0, [r0, #8]
}
 8004778:	b280      	uxth	r0, r0
 800477a:	4770      	bx	lr

0800477c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004780:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8004784:	4605      	mov	r5, r0
 8004786:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800478e:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8004792:	fa4f f882 	sxtb.w	r8, r2
 8004796:	60a0      	str	r0, [r4, #8]
 8004798:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 800479c:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80047a0:	2e03      	cmp	r6, #3
 80047a2:	d870      	bhi.n	8004886 <USB_HC_Init+0x10a>
 80047a4:	e8df f006 	tbb	[pc, r6]
 80047a8:	50026502 	.word	0x50026502
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80047ac:	f240 419d 	movw	r1, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |
                                USB_OTG_HCINTMSK_DTERRM |
                                USB_OTG_HCINTMSK_AHBERR |
                                USB_OTG_HCINTMSK_NAKM;

    if ((epnum & 0x80U) == 0x80U)
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80047b4:	60e1      	str	r1, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 80047b6:	da03      	bge.n	80047c0 <USB_HC_Init+0x44>
                                USB_OTG_HCINTMSK_AHBERR |
                                USB_OTG_HCINTMSK_FRMORM;

    if ((epnum & 0x80U) == 0x80U)
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80047b8:	68e1      	ldr	r1, [r4, #12]
 80047ba:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80047be:	e005      	b.n	80047cc <USB_HC_Init+0x50>
      if(USBx != USB_OTG_FS)
 80047c0:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80047c4:	d046      	beq.n	8004854 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80047c6:	68e1      	ldr	r1, [r4, #12]
 80047c8:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 80047cc:	2000      	movs	r0, #0
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80047ce:	60e1      	str	r1, [r4, #12]
    ret = HAL_ERROR;
    break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80047d0:	2101      	movs	r1, #1
 80047d2:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80047d6:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80047da:	fa01 f10e 	lsl.w	r1, r1, lr
 80047de:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 80047e2:	bfb4      	ite	lt
 80047e4:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80047e8:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80047ea:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80047ee:	69a9      	ldr	r1, [r5, #24]
 80047f0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80047f4:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80047f6:	059b      	lsls	r3, r3, #22
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80047f8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80047fc:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 80047fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004802:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004806:	f3c5 050a 	ubfx	r5, r5, #0, #11
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800480a:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 800480e:	2902      	cmp	r1, #2
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004810:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 8004814:	bf0c      	ite	eq
 8004816:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800481a:	2100      	movne	r1, #0
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800481c:	4313      	orrs	r3, r2
 800481e:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 8004820:	2e03      	cmp	r6, #3
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004822:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004826:	ea43 0302 	orr.w	r3, r3, r2
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800482a:	ea43 0304 	orr.w	r3, r3, r4
 800482e:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004832:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8004836:	d128      	bne.n	800488a <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004838:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800483c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004840:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004848:	f240 619d 	movw	r1, #1693	; 0x69d
    if ((epnum & 0x80U) == 0x80U)
 800484c:	f1b8 0f00 	cmp.w	r8, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004850:	60e1      	str	r1, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 8004852:	dbb1      	blt.n	80047b8 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004854:	2101      	movs	r1, #1
 8004856:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800485a:	fa01 f10e 	lsl.w	r1, r1, lr
 800485e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8004860:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004862:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 8004866:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004868:	69a9      	ldr	r1, [r5, #24]
 800486a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800486e:	61a9      	str	r1, [r5, #24]
 8004870:	e7c1      	b.n	80047f6 <USB_HC_Init+0x7a>
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004872:	f240 2125 	movw	r1, #549	; 0x225
    if ((epnum & 0x80U) == 0x80U)
 8004876:	f1b8 0f00 	cmp.w	r8, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800487a:	60e1      	str	r1, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 800487c:	daea      	bge.n	8004854 <USB_HC_Init+0xd8>
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800487e:	68e1      	ldr	r1, [r4, #12]
 8004880:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004884:	e7a2      	b.n	80047cc <USB_HC_Init+0x50>
    ret = HAL_ERROR;
 8004886:	2001      	movs	r0, #1
 8004888:	e7a2      	b.n	80047d0 <USB_HC_Init+0x54>
}
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800488e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800488e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004892:	6940      	ldr	r0, [r0, #20]
}
 8004894:	b280      	uxth	r0, r0
 8004896:	4770      	bx	lr

08004898 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004898:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800489c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80048a0:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80048a4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80048a8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80048ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80048b4:	d11e      	bne.n	80048f4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048b8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048bc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048c0:	d137      	bne.n	8004932 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80048ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80048d6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80048da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048de:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80048e2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 80048e6:	3b01      	subs	r3, #1
 80048e8:	d002      	beq.n	80048f0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048ea:	6811      	ldr	r1, [r2, #0]
 80048ec:	2900      	cmp	r1, #0
 80048ee:	dbfa      	blt.n	80048e6 <USB_HC_Halt+0x4e>
       USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80048f0:	2000      	movs	r0, #0
 80048f2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80048f4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80048f8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048fc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004900:	d117      	bne.n	8004932 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004906:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800490a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800490e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004912:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004916:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800491a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800491e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004922:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8004926:	3b01      	subs	r3, #1
 8004928:	d0e2      	beq.n	80048f0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800492a:	6811      	ldr	r1, [r2, #0]
 800492c:	2900      	cmp	r1, #0
 800492e:	dbfa      	blt.n	8004926 <USB_HC_Halt+0x8e>
 8004930:	e7de      	b.n	80048f0 <USB_HC_Halt+0x58>
       USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004936:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800493a:	e7d9      	b.n	80048f0 <USB_HC_Halt+0x58>

0800493c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800493c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004940:	4a06      	ldr	r2, [pc, #24]	; (800495c <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8004942:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004944:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004948:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800494c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004954:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	80080000 	.word	0x80080000

08004960 <USB_HC_StartXfer>:
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004960:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8004964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004968:	4616      	mov	r6, r2
 800496a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800496c:	784a      	ldrb	r2, [r1, #1]
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 800496e:	d017      	beq.n	80049a0 <USB_HC_StartXfer+0x40>
 8004970:	790d      	ldrb	r5, [r1, #4]
 8004972:	b9ad      	cbnz	r5, 80049a0 <USB_HC_StartXfer+0x40>
    if((dma == 0U) && (hc->do_ping == 1U))
 8004974:	b94e      	cbnz	r6, 800498a <USB_HC_StartXfer+0x2a>
 8004976:	794b      	ldrb	r3, [r1, #5]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d111      	bne.n	80049a0 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 800497c:	4611      	mov	r1, r2
 800497e:	f7ff ffdd 	bl	800493c <USB_DoPing>
}
 8004982:	2000      	movs	r0, #0
 8004984:	b002      	add	sp, #8
 8004986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(dma == 1U)
 800498a:	2e01      	cmp	r6, #1
 800498c:	d108      	bne.n	80049a0 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800498e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8004992:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8004996:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800499a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800499e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 80049a0:	6908      	ldr	r0, [r1, #16]
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d066      	beq.n	8004a74 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80049a6:	890b      	ldrh	r3, [r1, #8]
 80049a8:	3801      	subs	r0, #1
 80049aa:	4418      	add	r0, r3
 80049ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80049b0:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 80049b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80049b6:	d903      	bls.n	80049c0 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80049b8:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 80049ba:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80049be:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 80049c0:	78cf      	ldrb	r7, [r1, #3]
 80049c2:	b117      	cbz	r7, 80049ca <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80049c4:	890b      	ldrh	r3, [r1, #8]
 80049c6:	4343      	muls	r3, r0
 80049c8:	610b      	str	r3, [r1, #16]
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80049ca:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80049ce:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 80049d2:	690b      	ldr	r3, [r1, #16]
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80049d4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80049d8:	f3c3 0812 	ubfx	r8, r3, #0, #19
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80049dc:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                                (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80049e0:	ea4e 0e08 	orr.w	lr, lr, r8
 80049e4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004ac0 <USB_HC_StartXfer+0x160>
 80049e8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 80049ec:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80049f0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 80049f4:	b116      	cbz	r6, 80049fc <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80049f6:	68c8      	ldr	r0, [r1, #12]
 80049f8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80049fc:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8004a00:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a04:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a08:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a0a:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a0e:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a10:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a14:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8004a18:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8004a1c:	ea40 000c 	orr.w	r0, r0, ip
 8004a20:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a24:	4825      	ldr	r0, [pc, #148]	; (8004abc <USB_HC_StartXfer+0x15c>)
 8004a26:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8004a2a:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a2e:	f8d0 c000 	ldr.w	ip, [r0]
 8004a32:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8004a36:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004a3a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8004a3e:	b1df      	cbz	r7, 8004a78 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004a40:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004a44:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a48:	f8d0 c000 	ldr.w	ip, [r0]
 8004a4c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8004a50:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a54:	6800      	ldr	r0, [r0, #0]
 8004a56:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d191      	bne.n	8004982 <USB_HC_StartXfer+0x22>
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d18f      	bne.n	8004982 <USB_HC_StartXfer+0x22>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d08d      	beq.n	8004982 <USB_HC_StartXfer+0x22>
      switch(hc->ep_type)
 8004a66:	79c8      	ldrb	r0, [r1, #7]
 8004a68:	2803      	cmp	r0, #3
 8004a6a:	d813      	bhi.n	8004a94 <USB_HC_StartXfer+0x134>
 8004a6c:	e8df f000 	tbb	[pc, r0]
 8004a70:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8004a74:	2001      	movs	r0, #1
 8004a76:	e7a3      	b.n	80049c0 <USB_HC_StartXfer+0x60>
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004a78:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8004a7c:	e7e2      	b.n	8004a44 <USB_HC_StartXfer+0xe4>
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004a7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004a80:	1cdd      	adds	r5, r3, #3
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004a82:	b280      	uxth	r0, r0
 8004a84:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8004a88:	4285      	cmp	r5, r0
 8004a8a:	d903      	bls.n	8004a94 <USB_HC_StartXfer+0x134>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004a8c:	69a0      	ldr	r0, [r4, #24]
 8004a8e:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004a92:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004a94:	2000      	movs	r0, #0
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	9000      	str	r0, [sp, #0]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	68c9      	ldr	r1, [r1, #12]
 8004a9e:	f7ff fd71 	bl	8004584 <USB_WritePacket>
 8004aa2:	e76e      	b.n	8004982 <USB_HC_StartXfer+0x22>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004aa4:	f8de 0010 	ldr.w	r0, [lr, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004aa8:	1cdd      	adds	r5, r3, #3
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004aaa:	b280      	uxth	r0, r0
 8004aac:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8004ab0:	4285      	cmp	r5, r0
 8004ab2:	d9ef      	bls.n	8004a94 <USB_HC_StartXfer+0x134>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ab4:	69a0      	ldr	r0, [r4, #24]
 8004ab6:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8004aba:	e7ea      	b.n	8004a92 <USB_HC_StartXfer+0x132>
 8004abc:	200000b4 	.word	0x200000b4
 8004ac0:	1ff80000 	.word	0x1ff80000

08004ac4 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ac4:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

    /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ac6:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
{
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ad0:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ad2:	f7ff fd35 	bl	8004540 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff fd44 	bl	8004564 <USB_FlushRxFifo>
 8004adc:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004ae0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8004ae4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004ae6:	6811      	ldr	r1, [r2, #0]
 8004ae8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004aec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8004af0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8004af4:	4290      	cmp	r0, r2
 8004af6:	d1f6      	bne.n	8004ae6 <USB_StopHost+0x22>
 8004af8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b00:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004b04:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8004b06:	3001      	adds	r0, #1
 8004b08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b0c:	d802      	bhi.n	8004b14 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	2900      	cmp	r1, #0
 8004b12:	dbf8      	blt.n	8004b06 <USB_StopHost+0x42>
 8004b14:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d1ef      	bne.n	8004afa <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004b1e:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004b20:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b24:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	60a3      	str	r3, [r4, #8]
}
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr

08004b34 <USBH_CDC_InterfaceDeInit>:
{
 8004b34:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004b36:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004b3a:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004b3c:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8004b3e:	7821      	ldrb	r1, [r4, #0]
 8004b40:	b139      	cbz	r1, 8004b52 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b42:	f000 feaf 	bl	80058a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8004b46:	7821      	ldrb	r1, [r4, #0]
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 fec7 	bl	80058dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8004b52:	7b21      	ldrb	r1, [r4, #12]
 8004b54:	b141      	cbz	r1, 8004b68 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 fea4 	bl	80058a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004b5c:	7b21      	ldrb	r1, [r4, #12]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 febc 	bl	80058dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004b64:	2300      	movs	r3, #0
 8004b66:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8004b68:	7b61      	ldrb	r1, [r4, #13]
 8004b6a:	b141      	cbz	r1, 8004b7e <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fe99 	bl	80058a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8004b72:	7b61      	ldrb	r1, [r4, #13]
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 feb1 	bl	80058dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8004b7e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004b82:	69d8      	ldr	r0, [r3, #28]
 8004b84:	b128      	cbz	r0, 8004b92 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8004b86:	f00c f935 	bl	8010df4 <free>
    phost->pActiveClass->pData = 0U;
 8004b8a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004b8e:	2200      	movs	r2, #0
 8004b90:	61da      	str	r2, [r3, #28]
}
 8004b92:	2000      	movs	r0, #0
 8004b94:	bd38      	pop	{r3, r4, r5, pc}

08004b96 <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost,
 8004b96:	2202      	movs	r2, #2
 8004b98:	2301      	movs	r3, #1
{
 8004b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8004b9c:	4611      	mov	r1, r2
{
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8004ba2:	f000 f9e1 	bl	8004f68 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8004ba6:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8004ba8:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8004baa:	d102      	bne.n	8004bb2 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004bac:	2002      	movs	r0, #2
}
 8004bae:	b005      	add	sp, #20
 8004bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f9ce 	bl	8004f56 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004bba:	2050      	movs	r0, #80	; 0x50
 8004bbc:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8004bc0:	f00c f910 	bl	8010de4 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004bc4:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004bca:	fb03 5606 	mla	r6, r3, r6, r5
 8004bce:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8004bd2:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004bd4:	bf44      	itt	mi
 8004bd6:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004bd8:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004bdc:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004bde:	bf48      	it	mi
 8004be0:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fe63 	bl	80058ae <USBH_AllocPipe>
 8004be8:	4601      	mov	r1, r0
 8004bea:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8004bec:	8960      	ldrh	r0, [r4, #10]
 8004bee:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004bf2:	9002      	str	r0, [sp, #8]
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	7862      	ldrb	r2, [r4, #1]
 8004bf8:	9001      	str	r0, [sp, #4]
 8004bfa:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004bfe:	9000      	str	r0, [sp, #0]
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 fe40 	bl	8005886 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004c06:	2200      	movs	r2, #0
 8004c08:	7821      	ldrb	r1, [r4, #0]
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f00c f881 	bl	8010d12 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8004c10:	2300      	movs	r3, #0
 8004c12:	210a      	movs	r1, #10
 8004c14:	4628      	mov	r0, r5
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f9a6 	bl	8004f68 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8004c1c:	28ff      	cmp	r0, #255	; 0xff
 8004c1e:	d0c5      	beq.n	8004bac <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004c20:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 8004c22:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004c24:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004c28:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004c2c:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004c30:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004c34:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004c38:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004c3c:	bf0d      	iteet	eq
 8004c3e:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004c40:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004c42:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004c44:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004c46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c4a:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004c4e:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004c50:	bf08      	it	eq
 8004c52:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004c54:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004c56:	bf1a      	itte	ne
 8004c58:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004c5a:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004c5c:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004c5e:	f000 fe26 	bl	80058ae <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004c62:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004c64:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 fe21 	bl	80058ae <USBH_AllocPipe>
 8004c6c:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8004c6e:	8b20      	ldrh	r0, [r4, #24]
 8004c70:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004c74:	9002      	str	r0, [sp, #8]
 8004c76:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004c7a:	7ba2      	ldrb	r2, [r4, #14]
 8004c7c:	7b61      	ldrb	r1, [r4, #13]
 8004c7e:	9601      	str	r6, [sp, #4]
 8004c80:	9000      	str	r0, [sp, #0]
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 fdff 	bl	8005886 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8004c88:	8b60      	ldrh	r0, [r4, #26]
 8004c8a:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004c8c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8004c8e:	9002      	str	r0, [sp, #8]
 8004c90:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004c94:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004c98:	7be2      	ldrb	r2, [r4, #15]
 8004c9a:	7b21      	ldrb	r1, [r4, #12]
 8004c9c:	9000      	str	r0, [sp, #0]
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 fdf1 	bl	8005886 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	7b61      	ldrb	r1, [r4, #13]
 8004ca8:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 8004caa:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004cae:	f00c f830 	bl	8010d12 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8004cb2:	4632      	mov	r2, r6
 8004cb4:	7b21      	ldrb	r1, [r4, #12]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f00c f82b 	bl	8010d12 <USBH_LL_SetToggle>
      status = USBH_OK;
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	e776      	b.n	8004bae <USBH_CDC_InterfaceInit+0x18>

08004cc0 <USBH_CDC_ClassRequest>:
{
 8004cc0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004cc2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004cc6:	2207      	movs	r2, #7
{
 8004cc8:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004cca:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004ccc:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004cce:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004cd0:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004cd2:	2321      	movs	r3, #33	; 0x21

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004cd4:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004cd6:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004cdc:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004cde:	f000 fb4e 	bl	800537e <USBH_CtlReq>
  if(status == USBH_OK)
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	b920      	cbnz	r0, 8004cf0 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004ce6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004cea:	2102      	movs	r1, #2
 8004cec:	4620      	mov	r0, r4
 8004cee:	4798      	blx	r3
}
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}

08004cf4 <USBH_CDC_TransmitCallback>:
 8004cf4:	4770      	bx	lr

08004cf6 <USBH_CDC_ReceiveCallback>:
 8004cf6:	4770      	bx	lr

08004cf8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004cf8:	4770      	bx	lr

08004cfa <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004cfa:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004cfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004d00:	69dc      	ldr	r4, [r3, #28]
{
 8004d02:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8004d04:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d817      	bhi.n	8004d3c <USBH_CDC_Process+0x42>
 8004d0c:	e8df f003 	tbb	[pc, r3]
 8004d10:	42180603 	.word	0x42180603
 8004d14:	b6          	.byte	0xb6
 8004d15:	00          	.byte	0x00
    status = USBH_OK;
 8004d16:	2000      	movs	r0, #0
}
 8004d18:	b003      	add	sp, #12
 8004d1a:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004d1c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004d1e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d20:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004d22:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004d24:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d26:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004d28:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004d2e:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004d30:	f000 fb25 	bl	800537e <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004d34:	bb50      	cbnz	r0, 8004d8c <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004d36:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8004d38:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e7eb      	b.n	8004d18 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004d40:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d42:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004d44:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004d48:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004d4a:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d4c:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004d4e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004d54:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004d56:	f000 fb12 	bl	800537e <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004d5a:	b9b8      	cbnz	r0, 8004d8c <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d60:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE;
 8004d64:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	d1e4      	bne.n	8004d3c <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d76:	795a      	ldrb	r2, [r3, #5]
 8004d78:	4291      	cmp	r1, r2
 8004d7a:	d1df      	bne.n	8004d3c <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d1db      	bne.n	8004d3c <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7ff ffb7 	bl	8004cf8 <USBH_CDC_LineCodingChanged>
 8004d8a:	e7d7      	b.n	8004d3c <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 8004d8c:	2801      	cmp	r0, #1
 8004d8e:	d0d5      	beq.n	8004d3c <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004d90:	2304      	movs	r3, #4
 8004d92:	e7d1      	b.n	8004d38 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8004d94:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8004d98:	2901      	cmp	r1, #1
 8004d9a:	d029      	beq.n	8004df0 <USBH_CDC_Process+0xf6>
 8004d9c:	2902      	cmp	r1, #2
 8004d9e:	d036      	beq.n	8004e0e <USBH_CDC_Process+0x114>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004da0:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004da4:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8004da6:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d055      	beq.n	8004e5a <USBH_CDC_Process+0x160>
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d1c4      	bne.n	8004d3c <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004db2:	7b21      	ldrb	r1, [r4, #12]
 8004db4:	4628      	mov	r0, r5
 8004db6:	f00b ff9b 	bl	8010cf0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004dba:	2801      	cmp	r0, #1
 8004dbc:	d1be      	bne.n	8004d3c <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004dbe:	7b21      	ldrb	r1, [r4, #12]
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f00b ff51 	bl	8010c68 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dc8:	4298      	cmp	r0, r3
 8004dca:	d050      	beq.n	8004e6e <USBH_CDC_Process+0x174>
 8004dcc:	8b62      	ldrh	r2, [r4, #26]
 8004dce:	4290      	cmp	r0, r2
 8004dd0:	d94d      	bls.n	8004e6e <USBH_CDC_Process+0x174>
        CDC_Handle->RxDataLength -= length ;
 8004dd2:	1a1b      	subs	r3, r3, r0
 8004dd4:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8004dd6:	6a23      	ldr	r3, [r4, #32]
 8004dd8:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004dda:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 8004ddc:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004dde:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2104      	movs	r1, #4
 8004de6:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8004dea:	f000 fe43 	bl	8005a74 <osMessagePut>
 8004dee:	e7a5      	b.n	8004d3c <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004df0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004df2:	8b22      	ldrh	r2, [r4, #24]
 8004df4:	7b63      	ldrb	r3, [r4, #13]
 8004df6:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8004df8:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 8004dfa:	69e1      	ldr	r1, [r4, #28]
 8004dfc:	bf98      	it	ls
 8004dfe:	b282      	uxthls	r2, r0
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 fd18 	bl	8005836 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004e06:	2302      	movs	r3, #2
 8004e08:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8004e0c:	e7c8      	b.n	8004da0 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004e0e:	7b61      	ldrb	r1, [r4, #13]
 8004e10:	f00b ff6e 	bl	8010cf0 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8004e14:	2801      	cmp	r0, #1
 8004e16:	d11d      	bne.n	8004e54 <USBH_CDC_Process+0x15a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1a:	8b22      	ldrh	r2, [r4, #24]
 8004e1c:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004e1e:	bf89      	itett	hi
 8004e20:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8004e22:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004e24:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004e26:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8004e28:	bf92      	itee	ls
 8004e2a:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004e2c:	189b      	addhi	r3, r3, r2
 8004e2e:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8004e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e32:	b11b      	cbz	r3, 8004e3c <USBH_CDC_Process+0x142>
         CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8004e3a:	e004      	b.n	8004e46 <USBH_CDC_Process+0x14c>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8004e3c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff ff57 	bl	8004cf4 <USBH_CDC_TransmitCallback>
      osMessagePut (phost->os_event, USBH_CLASS_EVENT, 0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2104      	movs	r1, #4
 8004e4a:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8004e4e:	f000 fe11 	bl	8005a74 <osMessagePut>
 8004e52:	e7a5      	b.n	8004da0 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8004e54:	2802      	cmp	r0, #2
 8004e56:	d1a3      	bne.n	8004da0 <USBH_CDC_Process+0xa6>
 8004e58:	e7ec      	b.n	8004e34 <USBH_CDC_Process+0x13a>
    USBH_BulkReceiveData (phost,
 8004e5a:	7b23      	ldrb	r3, [r4, #12]
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	8b62      	ldrh	r2, [r4, #26]
 8004e60:	6a21      	ldr	r1, [r4, #32]
 8004e62:	f000 fd00 	bl	8005866 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004e66:	2304      	movs	r3, #4
 8004e68:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8004e6c:	e766      	b.n	8004d3c <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004e6e:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 8004e70:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004e72:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8004e76:	f7ff ff3e 	bl	8004cf6 <USBH_CDC_ReceiveCallback>
 8004e7a:	e7b2      	b.n	8004de2 <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f000 fc94 	bl	80057aa <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8004e82:	2800      	cmp	r0, #0
 8004e84:	f47f af5a 	bne.w	8004d3c <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8004e88:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8004e8c:	e756      	b.n	8004d3c <USBH_CDC_Process+0x42>

08004e8e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004e8e:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8004e92:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8004e96:	2100      	movs	r1, #0
 8004e98:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d1fb      	bne.n	8004e98 <DeInitStateMachine+0xa>
 8004ea0:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004ea4:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	d1fb      	bne.n	8004eaa <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004eb2:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004eb4:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8004eb6:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8004eb8:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8004eba:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8004ebc:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8004ec0:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004ec2:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8004ec4:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004ec6:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8004eca:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8004ece:	2000      	movs	r0, #0
 8004ed0:	4770      	bx	lr
	...

08004ed4 <USBH_Init>:
{
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	b088      	sub	sp, #32
  if(phost == NULL)
 8004eda:	4605      	mov	r5, r0
 8004edc:	b348      	cbz	r0, 8004f32 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 8004ede:	2300      	movs	r3, #0
  phost->id = id;
 8004ee0:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8004ee4:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8004ee8:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8004eec:	f7ff ffcf 	bl	8004e8e <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8004ef0:	b10c      	cbz	r4, 8004ef6 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8004ef2:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8004ef6:	4c10      	ldr	r4, [pc, #64]	; (8004f38 <USBH_Init+0x64>)
 8004ef8:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8004efa:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8004efc:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8004f00:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8004f02:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fdaf 	bl	8005a6c <osMessageCreate>
 8004f0e:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8004f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f16:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8004f18:	4629      	mov	r1, r5
 8004f1a:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8004f1c:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8004f1e:	f000 fcf5 	bl	800590c <osThreadCreate>
 8004f22:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 8004f26:	4628      	mov	r0, r5
 8004f28:	f00b fe3a 	bl	8010ba0 <USBH_LL_Init>
  return USBH_OK;
 8004f2c:	2000      	movs	r0, #0
}
 8004f2e:	b008      	add	sp, #32
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8004f32:	2002      	movs	r0, #2
 8004f34:	e7fb      	b.n	8004f2e <USBH_Init+0x5a>
 8004f36:	bf00      	nop
 8004f38:	08011cc4 	.word	0x08011cc4

08004f3c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8004f3c:	b149      	cbz	r1, 8004f52 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004f3e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004f42:	b933      	cbnz	r3, 8004f52 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004f44:	2201      	movs	r2, #1
 8004f46:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 8004f4a:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 8004f4e:	4618      	mov	r0, r3
 8004f50:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004f52:	2002      	movs	r0, #2
  }

  return status;
}
 8004f54:	4770      	bx	lr

08004f56 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8004f56:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004f5a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004f5c:	bf86      	itte	hi
 8004f5e:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8004f62:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004f64:	2002      	movls	r0, #2
  }
  return status;
}
 8004f66:	4770      	bx	lr

08004f68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004f6c:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8004f70:	b2e5      	uxtb	r5, r4
 8004f72:	428e      	cmp	r6, r1
 8004f74:	d001      	beq.n	8004f7a <USBH_FindInterface+0x12>
 8004f76:	29ff      	cmp	r1, #255	; 0xff
 8004f78:	d10b      	bne.n	8004f92 <USBH_FindInterface+0x2a>
 8004f7a:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8004f7e:	4296      	cmp	r6, r2
 8004f80:	d001      	beq.n	8004f86 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004f82:	2aff      	cmp	r2, #255	; 0xff
 8004f84:	d105      	bne.n	8004f92 <USBH_FindInterface+0x2a>
 8004f86:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8004f8a:	429e      	cmp	r6, r3
 8004f8c:	d006      	beq.n	8004f9c <USBH_FindInterface+0x34>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004f8e:	2bff      	cmp	r3, #255	; 0xff
 8004f90:	d004      	beq.n	8004f9c <USBH_FindInterface+0x34>
 8004f92:	3401      	adds	r4, #1
 8004f94:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004f96:	2c02      	cmp	r4, #2
 8004f98:	d1e8      	bne.n	8004f6c <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004f9a:	25ff      	movs	r5, #255	; 0xff
}
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}

08004fa0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004fa4:	f00b fe28 	bl	8010bf8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4620      	mov	r0, r4
 8004fac:	f00b fea4 	bl	8010cf8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004fb4:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004fb6:	2302      	movs	r3, #2
{
 8004fb8:	b087      	sub	sp, #28
 8004fba:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004fbc:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8004fc0:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8004fc4:	b933      	cbnz	r3, 8004fd4 <USBH_Process+0x20>
 8004fc6:	7802      	ldrb	r2, [r0, #0]
 8004fc8:	b122      	cbz	r2, 8004fd4 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8004fca:	7802      	ldrb	r2, [r0, #0]
 8004fcc:	2a03      	cmp	r2, #3
 8004fce:	d001      	beq.n	8004fd4 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 8004fd4:	7822      	ldrb	r2, [r4, #0]
 8004fd6:	2a0b      	cmp	r2, #11
 8004fd8:	d855      	bhi.n	8005086 <USBH_Process+0xd2>
 8004fda:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004fde:	000c      	.short	0x000c
 8004fe0:	001f001a 	.word	0x001f001a
 8004fe4:	00540152 	.word	0x00540152
 8004fe8:	01370057 	.word	0x01370057
 8004fec:	00fe00f3 	.word	0x00fe00f3
 8004ff0:	01160109 	.word	0x01160109
 8004ff4:	0149      	.short	0x0149
    if (phost->device.is_connected)
 8004ff6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d043      	beq.n	8005086 <USBH_Process+0xd2>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004ffe:	2501      	movs	r5, #1
      USBH_Delay(200U);
 8005000:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005002:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 8005004:	f00b fe94 	bl	8010d30 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005008:	4620      	mov	r0, r4
 800500a:	f00b fe1f 	bl	8010c4c <USBH_LL_ResetPort>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0U);
 800500e:	2200      	movs	r2, #0
 8005010:	e034      	b.n	800507c <USBH_Process+0xc8>
    if (phost->device.PortEnabled == 1U)
 8005012:	2b01      	cmp	r3, #1
 8005014:	d137      	bne.n	8005086 <USBH_Process+0xd2>
      phost->gState = HOST_DEV_ATTACHED;
 8005016:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8005018:	7023      	strb	r3, [r4, #0]
 800501a:	e034      	b.n	8005086 <USBH_Process+0xd2>
    USBH_Delay(100U);
 800501c:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 800501e:	2500      	movs	r5, #0
    USBH_Delay(100U);
 8005020:	f00b fe86 	bl	8010d30 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005024:	4620      	mov	r0, r4
 8005026:	f00b fe03 	bl	8010c30 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800502a:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800502c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005030:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 8005032:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005034:	4620      	mov	r0, r4
 8005036:	f000 fc3a 	bl	80058ae <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800503a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800503c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800503e:	4620      	mov	r0, r4
 8005040:	f000 fc35 	bl	80058ae <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8005044:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005046:	4601      	mov	r1, r0
 8005048:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800504a:	9202      	str	r2, [sp, #8]
 800504c:	4620      	mov	r0, r4
 800504e:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8005052:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	9501      	str	r5, [sp, #4]
 800505c:	f000 fc13 	bl	8005886 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8005060:	79a2      	ldrb	r2, [r4, #6]
 8005062:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005066:	4620      	mov	r0, r4
 8005068:	9202      	str	r2, [sp, #8]
 800506a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800506e:	7961      	ldrb	r1, [r4, #5]
 8005070:	9200      	str	r2, [sp, #0]
 8005072:	462a      	mov	r2, r5
 8005074:	9501      	str	r5, [sp, #4]
 8005076:	f000 fc06 	bl	8005886 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800507a:	462a      	mov	r2, r5
 800507c:	2101      	movs	r1, #1
 800507e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8005082:	f000 fcf7 	bl	8005a74 <osMessagePut>
}
 8005086:	2000      	movs	r0, #0
 8005088:	b007      	add	sp, #28
 800508a:	bd30      	pop	{r4, r5, pc}
  switch (phost->EnumState)
 800508c:	7863      	ldrb	r3, [r4, #1]
 800508e:	2b07      	cmp	r3, #7
 8005090:	d8f9      	bhi.n	8005086 <USBH_Process+0xd2>
 8005092:	e8df f003 	tbb	[pc, r3]
 8005096:	2a04      	.short	0x2a04
 8005098:	564d4533 	.word	0x564d4533
 800509c:	796a      	.short	0x796a
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800509e:	2108      	movs	r1, #8
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 fa5b 	bl	800555c <USBH_Get_DevDesc>
 80050a6:	4605      	mov	r5, r0
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d1ec      	bne.n	8005086 <USBH_Process+0xd2>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80050ac:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80050ae:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 80050b2:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80050b4:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80050b6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80050ba:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80050bc:	9202      	str	r2, [sp, #8]
 80050be:	4620      	mov	r0, r4
 80050c0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80050c4:	9501      	str	r5, [sp, #4]
 80050c6:	9200      	str	r2, [sp, #0]
 80050c8:	2280      	movs	r2, #128	; 0x80
 80050ca:	f000 fbdc 	bl	8005886 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80050ce:	79a2      	ldrb	r2, [r4, #6]
 80050d0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80050d4:	4620      	mov	r0, r4
 80050d6:	9202      	str	r2, [sp, #8]
 80050d8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80050dc:	7961      	ldrb	r1, [r4, #5]
 80050de:	9200      	str	r2, [sp, #0]
 80050e0:	462a      	mov	r2, r5
 80050e2:	9501      	str	r5, [sp, #4]
 80050e4:	f000 fbcf 	bl	8005886 <USBH_OpenPipe>
 80050e8:	e7cd      	b.n	8005086 <USBH_Process+0xd2>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80050ea:	2112      	movs	r1, #18
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 fa35 	bl	800555c <USBH_Get_DevDesc>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1c7      	bne.n	8005086 <USBH_Process+0xd2>
      phost->EnumState = ENUM_SET_ADDR;
 80050f6:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80050f8:	7063      	strb	r3, [r4, #1]
 80050fa:	e7c4      	b.n	8005086 <USBH_Process+0xd2>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80050fc:	2101      	movs	r1, #1
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 fb29 	bl	8005756 <USBH_SetAddress>
 8005104:	4605      	mov	r5, r0
 8005106:	2800      	cmp	r0, #0
 8005108:	d1bd      	bne.n	8005086 <USBH_Process+0xd2>
      USBH_Delay(2U);
 800510a:	2002      	movs	r0, #2
 800510c:	f00b fe10 	bl	8010d30 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005110:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005112:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 8005114:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005116:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005118:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800511c:	79a2      	ldrb	r2, [r4, #6]
 800511e:	e7cd      	b.n	80050bc <USBH_Process+0x108>
    if ( USBH_Get_CfgDesc(phost,
 8005120:	2109      	movs	r1, #9
 8005122:	4620      	mov	r0, r4
 8005124:	f000 fa62 	bl	80055ec <USBH_Get_CfgDesc>
 8005128:	2800      	cmp	r0, #0
 800512a:	d1ac      	bne.n	8005086 <USBH_Process+0xd2>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800512c:	2304      	movs	r3, #4
 800512e:	e7e3      	b.n	80050f8 <USBH_Process+0x144>
    if (USBH_Get_CfgDesc(phost,
 8005130:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8005134:	4620      	mov	r0, r4
 8005136:	f000 fa59 	bl	80055ec <USBH_Get_CfgDesc>
 800513a:	2800      	cmp	r0, #0
 800513c:	d1a3      	bne.n	8005086 <USBH_Process+0xd2>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800513e:	2305      	movs	r3, #5
 8005140:	e7da      	b.n	80050f8 <USBH_Process+0x144>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8005142:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8005146:	b161      	cbz	r1, 8005162 <USBH_Process+0x1ae>
      if ( USBH_Get_StringDesc(phost,
 8005148:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800514c:	23ff      	movs	r3, #255	; 0xff
 800514e:	4620      	mov	r0, r4
 8005150:	f000 fada 	bl	8005708 <USBH_Get_StringDesc>
 8005154:	4602      	mov	r2, r0
 8005156:	2800      	cmp	r0, #0
 8005158:	d195      	bne.n	8005086 <USBH_Process+0xd2>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800515a:	2306      	movs	r3, #6
 800515c:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800515e:	2105      	movs	r1, #5
 8005160:	e78d      	b.n	800507e <USBH_Process+0xca>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005162:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005164:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	e7f9      	b.n	800515e <USBH_Process+0x1aa>
    if (phost->device.DevDesc.iProduct != 0U)
 800516a:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800516e:	b149      	cbz	r1, 8005184 <USBH_Process+0x1d0>
      if ( USBH_Get_StringDesc(phost,
 8005170:	23ff      	movs	r3, #255	; 0xff
 8005172:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fac6 	bl	8005708 <USBH_Get_StringDesc>
 800517c:	2800      	cmp	r0, #0
 800517e:	d182      	bne.n	8005086 <USBH_Process+0xd2>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005180:	2307      	movs	r3, #7
 8005182:	e7b9      	b.n	80050f8 <USBH_Process+0x144>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005184:	2307      	movs	r3, #7
 8005186:	e7ed      	b.n	8005164 <USBH_Process+0x1b0>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8005188:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800518c:	b189      	cbz	r1, 80051b2 <USBH_Process+0x1fe>
      if ( USBH_Get_StringDesc(phost,
 800518e:	23ff      	movs	r3, #255	; 0xff
 8005190:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fab7 	bl	8005708 <USBH_Get_StringDesc>
 800519a:	2800      	cmp	r0, #0
 800519c:	f47f af73 	bne.w	8005086 <USBH_Process+0xd2>
      phost->device.current_interface = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80051a6:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d108      	bne.n	80051c0 <USBH_Process+0x20c>
        phost->gState  = HOST_SET_CONFIGURATION;
 80051ae:	2308      	movs	r3, #8
 80051b0:	e732      	b.n	8005018 <USBH_Process+0x64>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80051b2:	460a      	mov	r2, r1
 80051b4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80051b8:	2105      	movs	r1, #5
 80051ba:	f000 fc5b 	bl	8005a74 <osMessagePut>
 80051be:	e7ef      	b.n	80051a0 <USBH_Process+0x1ec>
        phost->gState  = HOST_INPUT;
 80051c0:	2307      	movs	r3, #7
 80051c2:	e729      	b.n	8005018 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80051c4:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f43f af5c 	beq.w	8005086 <USBH_Process+0xd2>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80051ce:	2101      	movs	r1, #1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80051d4:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 80051d6:	7023      	strb	r3, [r4, #0]
 80051d8:	e7c5      	b.n	8005166 <USBH_Process+0x1b2>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80051da:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fac7 	bl	8005772 <USBH_SetCfg>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f47f af12 	bne.w	800500e <USBH_Process+0x5a>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80051ea:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 80051ec:	7023      	strb	r3, [r4, #0]
 80051ee:	e70e      	b.n	800500e <USBH_Process+0x5a>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80051f0:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80051f4:	069b      	lsls	r3, r3, #26
 80051f6:	d506      	bpl.n	8005206 <USBH_Process+0x252>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80051f8:	2101      	movs	r1, #1
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 fac7 	bl	800578e <USBH_SetFeature>
 8005200:	2800      	cmp	r0, #0
 8005202:	f47f af04 	bne.w	800500e <USBH_Process+0x5a>
      phost->gState  = HOST_CHECK_CLASS;
 8005206:	230a      	movs	r3, #10
 8005208:	e7f0      	b.n	80051ec <USBH_Process+0x238>
    if(phost->ClassNumber == 0U)
 800520a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0a9      	beq.n	8005166 <USBH_Process+0x1b2>
      phost->pActiveClass = NULL;
 8005212:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005214:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 8005218:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800521c:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8005220:	7919      	ldrb	r1, [r3, #4]
 8005222:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8005224:	bf08      	it	eq
 8005226:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800522a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800522e:	b15b      	cbz	r3, 8005248 <USBH_Process+0x294>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4620      	mov	r0, r4
 8005234:	4798      	blx	r3
 8005236:	b938      	cbnz	r0, 8005248 <USBH_Process+0x294>
          phost->gState  = HOST_CLASS_REQUEST;
 8005238:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800523a:	2103      	movs	r1, #3
 800523c:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 800523e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005240:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8005244:	4798      	blx	r3
 8005246:	e78e      	b.n	8005166 <USBH_Process+0x1b2>
        phost->gState  = HOST_ABORT_STATE;
 8005248:	230d      	movs	r3, #13
 800524a:	e7c4      	b.n	80051d6 <USBH_Process+0x222>
    if(phost->pActiveClass != NULL)
 800524c:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 8005250:	b15a      	cbz	r2, 800526a <USBH_Process+0x2b6>
      status = phost->pActiveClass->Requests(phost);
 8005252:	6913      	ldr	r3, [r2, #16]
 8005254:	4620      	mov	r0, r4
 8005256:	4798      	blx	r3
 8005258:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800525c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f af10 	bne.w	8005086 <USBH_Process+0xd2>
        phost->gState  = HOST_CLASS;
 8005266:	230b      	movs	r3, #11
 8005268:	e6d6      	b.n	8005018 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800526a:	230d      	movs	r3, #13
 800526c:	7023      	strb	r3, [r4, #0]
 800526e:	e776      	b.n	800515e <USBH_Process+0x1aa>
    if(phost->pActiveClass != NULL)
 8005270:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8005274:	2b00      	cmp	r3, #0
 8005276:	f43f af06 	beq.w	8005086 <USBH_Process+0xd2>
      phost->pActiveClass->BgndProcess(phost);
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	4620      	mov	r0, r4
 800527e:	4798      	blx	r3
 8005280:	e701      	b.n	8005086 <USBH_Process+0xd2>
    DeInitStateMachine(phost);
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff fe03 	bl	8004e8e <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8005288:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800528c:	2b00      	cmp	r3, #0
 800528e:	f43f aefa 	beq.w	8005086 <USBH_Process+0xd2>
      phost->pActiveClass->DeInit(phost);
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4620      	mov	r0, r4
 8005296:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800529e:	e6f2      	b.n	8005086 <USBH_Process+0xd2>

080052a0 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 80052a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052a2:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a8:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 80052ac:	a801      	add	r0, sp, #4
 80052ae:	f000 fc09 	bl	8005ac4 <osMessageGet>

    if( event.status == osEventMessage )
 80052b2:	9b01      	ldr	r3, [sp, #4]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d1f5      	bne.n	80052a4 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fe7b 	bl	8004fb4 <USBH_Process>
 80052be:	e7f1      	b.n	80052a4 <USBH_Process_OS+0x4>

080052c0 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80052c0:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80052c4:	4770      	bx	lr

080052c6 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80052c6:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80052ca:	3201      	adds	r2, #1
 80052cc:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80052d0:	7802      	ldrb	r2, [r0, #0]
 80052d2:	2a0b      	cmp	r2, #11
 80052d4:	d104      	bne.n	80052e0 <USBH_LL_IncTimer+0x1a>
 80052d6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80052da:	b10b      	cbz	r3, 80052e0 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4718      	bx	r3
 80052e0:	4770      	bx	lr

080052e2 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80052e8:	4770      	bx	lr

080052ea <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80052f0:	4770      	bx	lr

080052f2 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 80052f2:	7803      	ldrb	r3, [r0, #0]
{
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 80052f8:	b97b      	cbnz	r3, 800531a <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1U;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8005300:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8005304:	b10b      	cbz	r3, 800530a <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005306:	2104      	movs	r1, #4
 8005308:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	2101      	movs	r1, #1
 800530e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8005312:	f000 fbaf 	bl	8005a74 <osMessagePut>
}
 8005316:	2000      	movs	r0, #0
 8005318:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 800531a:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800531e:	2b01      	cmp	r3, #1
 8005320:	d1f3      	bne.n	800530a <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 8005322:	2302      	movs	r3, #2
 8005324:	7003      	strb	r3, [r0, #0]
 8005326:	e7f0      	b.n	800530a <USBH_LL_Connect+0x18>

08005328 <USBH_LL_Disconnect>:
{
 8005328:	b510      	push	{r4, lr}
 800532a:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 800532c:	f00b fc72 	bl	8010c14 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005330:	7921      	ldrb	r1, [r4, #4]
 8005332:	4620      	mov	r0, r4
 8005334:	f000 fad2 	bl	80058dc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005338:	7961      	ldrb	r1, [r4, #5]
 800533a:	4620      	mov	r0, r4
 800533c:	f000 face 	bl	80058dc <USBH_FreePipe>
  phost->device.is_connected = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8005346:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800534a:	b113      	cbz	r3, 8005352 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800534c:	2105      	movs	r1, #5
 800534e:	4620      	mov	r0, r4
 8005350:	4798      	blx	r3
  USBH_LL_Start(phost);
 8005352:	4620      	mov	r0, r4
 8005354:	f00b fc50 	bl	8010bf8 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8005358:	2303      	movs	r3, #3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800535a:	2200      	movs	r2, #0
 800535c:	2101      	movs	r1, #1
  phost->gState = HOST_DEV_DISCONNECTED;
 800535e:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005360:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8005364:	f000 fb86 	bl	8005a74 <osMessagePut>
}
 8005368:	2000      	movs	r0, #0
 800536a:	bd10      	pop	{r4, pc}

0800536c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800536c:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 800536e:	2200      	movs	r2, #0
 8005370:	2102      	movs	r1, #2
 8005372:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8005376:	f000 fb7d 	bl	8005a74 <osMessagePut>
  return USBH_OK;
}
 800537a:	2000      	movs	r0, #0
 800537c:	bd08      	pop	{r3, pc}

0800537e <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800537e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8005380:	7885      	ldrb	r5, [r0, #2]
{
 8005382:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8005384:	2d01      	cmp	r5, #1
 8005386:	d003      	beq.n	8005390 <USBH_CtlReq+0x12>
 8005388:	2d02      	cmp	r5, #2
 800538a:	d00d      	beq.n	80053a8 <USBH_CtlReq+0x2a>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800538c:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800538e:	e053      	b.n	8005438 <USBH_CtlReq+0xba>
    phost->RequestState = CMD_WAIT;
 8005390:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8005392:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8005394:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8005396:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8005398:	7083      	strb	r3, [r0, #2]
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
        }
      }
#if (USBH_USE_OS == 1U)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	2103      	movs	r1, #3
 800539e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80053a2:	f000 fb67 	bl	8005a74 <osMessagePut>
 80053a6:	e7f1      	b.n	800538c <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 80053a8:	7e03      	ldrb	r3, [r0, #24]
 80053aa:	2101      	movs	r1, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	2b0a      	cmp	r3, #10
 80053b0:	d8ec      	bhi.n	800538c <USBH_CtlReq+0xe>
 80053b2:	e8df f003 	tbb	[pc, r3]
 80053b6:	0e06      	.short	0x0e06
 80053b8:	4e432f25 	.word	0x4e432f25
 80053bc:	9b90766c 	.word	0x9b90766c
 80053c0:	a5          	.byte	0xa5
 80053c1:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80053c2:	7942      	ldrb	r2, [r0, #5]
 80053c4:	f100 0110 	add.w	r1, r0, #16
 80053c8:	f000 f9fd 	bl	80057c6 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80053cc:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80053ce:	7623      	strb	r3, [r4, #24]
 80053d0:	e7dc      	b.n	800538c <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80053d2:	7941      	ldrb	r1, [r0, #5]
 80053d4:	f00b fc8c 	bl	8010cf0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80053d8:	2801      	cmp	r0, #1
 80053da:	d10c      	bne.n	80053f6 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 80053dc:	8ae2      	ldrh	r2, [r4, #22]
 80053de:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80053e2:	b122      	cbz	r2, 80053ee <USBH_CtlReq+0x70>
        if (direction == USB_D2H)
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da42      	bge.n	800546e <USBH_CtlReq+0xf0>
          phost->Control.state = CTRL_DATA_IN;
 80053e8:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 80053ea:	7623      	strb	r3, [r4, #24]
 80053ec:	e7d5      	b.n	800539a <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da34      	bge.n	800545c <USBH_CtlReq+0xde>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80053f2:	2309      	movs	r3, #9
 80053f4:	e7f9      	b.n	80053ea <USBH_CtlReq+0x6c>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80053f6:	2804      	cmp	r0, #4
 80053f8:	d067      	beq.n	80054ca <USBH_CtlReq+0x14c>
 80053fa:	2802      	cmp	r0, #2
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80053fc:	d1c6      	bne.n	800538c <USBH_CtlReq+0xe>
 80053fe:	e064      	b.n	80054ca <USBH_CtlReq+0x14c>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005400:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8005404:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 8005406:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8005408:	6881      	ldr	r1, [r0, #8]
 800540a:	7903      	ldrb	r3, [r0, #4]
 800540c:	f000 fa03 	bl	8005816 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005410:	2304      	movs	r3, #4
 8005412:	e7dc      	b.n	80053ce <USBH_CtlReq+0x50>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005414:	7901      	ldrb	r1, [r0, #4]
 8005416:	f00b fc6b 	bl	8010cf0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800541a:	2801      	cmp	r0, #1
 800541c:	d0e9      	beq.n	80053f2 <USBH_CtlReq+0x74>
    if  (URB_Status == USBH_URB_STALL)
 800541e:	2805      	cmp	r0, #5
 8005420:	d16c      	bne.n	80054fc <USBH_CtlReq+0x17e>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	2103      	movs	r1, #3
 8005426:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800542a:	f000 fb23 	bl	8005a74 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800542e:	2301      	movs	r3, #1
      status = USBH_NOT_SUPPORTED;
 8005430:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8005432:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8005434:	2300      	movs	r3, #0
 8005436:	7623      	strb	r3, [r4, #24]
}
 8005438:	b003      	add	sp, #12
 800543a:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 800543c:	7943      	ldrb	r3, [r0, #5]
 800543e:	8982      	ldrh	r2, [r0, #12]
 8005440:	9100      	str	r1, [sp, #0]
 8005442:	6881      	ldr	r1, [r0, #8]
 8005444:	f000 f9d0 	bl	80057e8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005448:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800544c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800544e:	2306      	movs	r3, #6
 8005450:	e7bd      	b.n	80053ce <USBH_CtlReq+0x50>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005452:	7941      	ldrb	r1, [r0, #5]
 8005454:	f00b fc4c 	bl	8010cf0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005458:	2801      	cmp	r0, #1
 800545a:	d101      	bne.n	8005460 <USBH_CtlReq+0xe2>
          phost->Control.state = CTRL_STATUS_IN;
 800545c:	2307      	movs	r3, #7
 800545e:	e7c4      	b.n	80053ea <USBH_CtlReq+0x6c>
    else if  (URB_Status == USBH_URB_STALL)
 8005460:	2805      	cmp	r0, #5
 8005462:	d102      	bne.n	800546a <USBH_CtlReq+0xec>
      phost->Control.state = CTRL_STALLED;
 8005464:	230c      	movs	r3, #12
 8005466:	7623      	strb	r3, [r4, #24]
 8005468:	e7db      	b.n	8005422 <USBH_CtlReq+0xa4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800546a:	2802      	cmp	r0, #2
 800546c:	d101      	bne.n	8005472 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_DATA_OUT;
 800546e:	2305      	movs	r3, #5
 8005470:	e7bb      	b.n	80053ea <USBH_CtlReq+0x6c>
      if (URB_Status == USBH_URB_ERROR)
 8005472:	2804      	cmp	r0, #4
 8005474:	d18a      	bne.n	800538c <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8005476:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005478:	2200      	movs	r2, #0
 800547a:	2103      	movs	r1, #3
 800547c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8005480:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005482:	f000 faf7 	bl	8005a74 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8005486:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8005488:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800548a:	70a3      	strb	r3, [r4, #2]
 800548c:	e7d4      	b.n	8005438 <USBH_CtlReq+0xba>
    USBH_CtlReceiveData (phost,
 800548e:	2200      	movs	r2, #0
 8005490:	7903      	ldrb	r3, [r0, #4]
 8005492:	4611      	mov	r1, r2
 8005494:	f000 f9bf 	bl	8005816 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005498:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800549c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800549e:	2308      	movs	r3, #8
 80054a0:	e795      	b.n	80053ce <USBH_CtlReq+0x50>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80054a2:	7901      	ldrb	r1, [r0, #4]
 80054a4:	f00b fc24 	bl	8010cf0 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80054a8:	2801      	cmp	r0, #1
 80054aa:	d10c      	bne.n	80054c6 <USBH_CtlReq+0x148>
      phost->Control.state = CTRL_COMPLETE;
 80054ac:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2103      	movs	r1, #3
 80054b2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 80054b6:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80054b8:	f000 fadc 	bl	8005a74 <osMessagePut>
      phost->RequestState = CMD_SEND;
 80054bc:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 80054be:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80054c0:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 80054c2:	7620      	strb	r0, [r4, #24]
 80054c4:	e7b8      	b.n	8005438 <USBH_CtlReq+0xba>
    else if (URB_Status == USBH_URB_ERROR)
 80054c6:	2804      	cmp	r0, #4
 80054c8:	d101      	bne.n	80054ce <USBH_CtlReq+0x150>
      {
        phost->Control.state = CTRL_ERROR;
 80054ca:	230b      	movs	r3, #11
 80054cc:	e78d      	b.n	80053ea <USBH_CtlReq+0x6c>
      if(URB_Status == USBH_URB_STALL)
 80054ce:	2805      	cmp	r0, #5
 80054d0:	f47f af5c 	bne.w	800538c <USBH_CtlReq+0xe>
 80054d4:	e7a5      	b.n	8005422 <USBH_CtlReq+0xa4>
    USBH_CtlSendData (phost,
 80054d6:	2200      	movs	r2, #0
 80054d8:	7943      	ldrb	r3, [r0, #5]
 80054da:	9100      	str	r1, [sp, #0]
 80054dc:	4611      	mov	r1, r2
 80054de:	f000 f983 	bl	80057e8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80054e2:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80054e6:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80054e8:	230a      	movs	r3, #10
 80054ea:	e770      	b.n	80053ce <USBH_CtlReq+0x50>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80054ec:	7941      	ldrb	r1, [r0, #5]
 80054ee:	f00b fbff 	bl	8010cf0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80054f2:	2801      	cmp	r0, #1
 80054f4:	d0da      	beq.n	80054ac <USBH_CtlReq+0x12e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80054f6:	2802      	cmp	r0, #2
 80054f8:	f43f af7b 	beq.w	80053f2 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_ERROR)
 80054fc:	2804      	cmp	r0, #4
 80054fe:	e77d      	b.n	80053fc <USBH_CtlReq+0x7e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005500:	7e43      	ldrb	r3, [r0, #25]
 8005502:	3301      	adds	r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	7643      	strb	r3, [r0, #25]
 800550a:	d805      	bhi.n	8005518 <USBH_CtlReq+0x19a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800550c:	f00b fb82 	bl	8010c14 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8005510:	2301      	movs	r3, #1
 8005512:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8005514:	70a3      	strb	r3, [r4, #2]
 8005516:	e739      	b.n	800538c <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005518:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800551c:	2106      	movs	r1, #6
 800551e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	7663      	strb	r3, [r4, #25]
 8005524:	e7af      	b.n	8005486 <USBH_CtlReq+0x108>

08005526 <USBH_GetDescriptor>:
{
 8005526:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8005528:	7884      	ldrb	r4, [r0, #2]
{
 800552a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800552e:	2c01      	cmp	r4, #1
 8005530:	d10f      	bne.n	8005552 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005532:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 8005536:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005538:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 800553a:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800553c:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800553e:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005542:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005544:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005548:	bf0c      	ite	eq
 800554a:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800554e:	2200      	movne	r2, #0
 8005550:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 8005552:	462a      	mov	r2, r5
 8005554:	4619      	mov	r1, r3
}
 8005556:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8005558:	f7ff bf11 	b.w	800537e <USBH_CtlReq>

0800555c <USBH_Get_DevDesc>:
{
 800555c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800555e:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8005562:	460d      	mov	r5, r1
 8005564:	9100      	str	r1, [sp, #0]
 8005566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800556a:	2100      	movs	r1, #0
{
 800556c:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800556e:	f7ff ffda 	bl	8005526 <USBH_GetDescriptor>
 8005572:	bbc8      	cbnz	r0, 80055e8 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005574:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 8005578:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800557a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800557e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8005582:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005586:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800558a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800558e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8005592:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005596:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800559a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800559e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80055a2:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80055a6:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80055aa:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 80055ae:	d91b      	bls.n	80055e8 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 80055b0:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 80055b4:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 80055b8:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80055bc:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80055c0:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80055c4:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80055c8:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80055cc:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80055d0:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 80055d4:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80055d8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80055dc:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80055e0:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80055e4:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 80055e8:	b003      	add	sp, #12
 80055ea:	bd30      	pop	{r4, r5, pc}

080055ec <USBH_Get_CfgDesc>:
{
 80055ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80055f0:	f100 051c 	add.w	r5, r0, #28
{
 80055f4:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80055f6:	9100      	str	r1, [sp, #0]
 80055f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fc:	462b      	mov	r3, r5
 80055fe:	2100      	movs	r1, #0
{
 8005600:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8005602:	f7ff ff90 	bl	8005526 <USBH_GetDescriptor>
 8005606:	bb48      	cbnz	r0, 800565c <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005608:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800560a:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800560c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005610:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005614:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8005616:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800561a:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800561e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005622:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8005626:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800562a:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800562e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005632:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8005636:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800563a:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800563e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005642:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005646:	d909      	bls.n	800565c <USBH_Get_CfgDesc+0x70>
 8005648:	4627      	mov	r7, r4
 800564a:	462b      	mov	r3, r5
 800564c:	4606      	mov	r6, r0
 800564e:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005650:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005654:	2e02      	cmp	r6, #2
 8005656:	d001      	beq.n	800565c <USBH_Get_CfgDesc+0x70>
 8005658:	4596      	cmp	lr, r2
 800565a:	d802      	bhi.n	8005662 <USBH_Get_CfgDesc+0x76>
}
 800565c:	b003      	add	sp, #12
 800565e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005662:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005664:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005666:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005668:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800566a:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800566c:	2904      	cmp	r1, #4
 800566e:	d1f1      	bne.n	8005654 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005670:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005672:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005676:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800567a:	7859      	ldrb	r1, [r3, #1]
 800567c:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8005680:	7899      	ldrb	r1, [r3, #2]
 8005682:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8005686:	78d9      	ldrb	r1, [r3, #3]
 8005688:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800568c:	7919      	ldrb	r1, [r3, #4]
 800568e:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8005692:	7959      	ldrb	r1, [r3, #5]
 8005694:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8005698:	7999      	ldrb	r1, [r3, #6]
 800569a:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800569e:	79d9      	ldrb	r1, [r3, #7]
 80056a0:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80056a4:	7a19      	ldrb	r1, [r3, #8]
 80056a6:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
        ep_ix = 0U;
 80056aa:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80056ac:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 80056b0:	428d      	cmp	r5, r1
 80056b2:	d802      	bhi.n	80056ba <USBH_Get_CfgDesc+0xce>
 80056b4:	3601      	adds	r6, #1
 80056b6:	371a      	adds	r7, #26
 80056b8:	e7cc      	b.n	8005654 <USBH_Get_CfgDesc+0x68>
 80056ba:	4596      	cmp	lr, r2
 80056bc:	d9fa      	bls.n	80056b4 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80056be:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80056c0:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80056c2:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80056c4:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80056c6:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80056c8:	2d05      	cmp	r5, #5
 80056ca:	d1ef      	bne.n	80056ac <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80056cc:	1c4d      	adds	r5, r1, #1
 80056ce:	f893 9000 	ldrb.w	r9, [r3]
 80056d2:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 80056d6:	4421      	add	r1, r4
 80056d8:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80056dc:	f893 9001 	ldrb.w	r9, [r3, #1]
 80056e0:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80056e4:	f893 9002 	ldrb.w	r9, [r3, #2]
 80056e8:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80056ec:	f893 9003 	ldrb.w	r9, [r3, #3]
 80056f0:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80056f4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80056f8:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80056fc:	f893 9006 	ldrb.w	r9, [r3, #6]
 8005700:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8005704:	b2e9      	uxtb	r1, r5
 8005706:	e7d1      	b.n	80056ac <USBH_Get_CfgDesc+0xc0>

08005708 <USBH_Get_StringDesc>:
{
 8005708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800570a:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800570e:	4614      	mov	r4, r2
 8005710:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8005718:	462b      	mov	r3, r5
 800571a:	2100      	movs	r1, #0
{
 800571c:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 800571e:	f7ff ff02 	bl	8005526 <USBH_GetDescriptor>
 8005722:	b978      	cbnz	r0, 8005744 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005724:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8005728:	2b03      	cmp	r3, #3
 800572a:	d10b      	bne.n	8005744 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800572c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 8005730:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005732:	3b02      	subs	r3, #2
 8005734:	42bb      	cmp	r3, r7
 8005736:	bf28      	it	cs
 8005738:	463b      	movcs	r3, r7
 800573a:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800573c:	4293      	cmp	r3, r2
 800573e:	d803      	bhi.n	8005748 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8005740:	2300      	movs	r3, #0
 8005742:	7023      	strb	r3, [r4, #0]
}
 8005744:	b003      	add	sp, #12
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8005748:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800574a:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800574c:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800574e:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 8005750:	f804 1b01 	strb.w	r1, [r4], #1
 8005754:	e7f2      	b.n	800573c <USBH_Get_StringDesc+0x34>

08005756 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8005756:	7883      	ldrb	r3, [r0, #2]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800575c:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800575e:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005760:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005762:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005764:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8005766:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005768:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800576a:	2200      	movs	r2, #0
 800576c:	4611      	mov	r1, r2
 800576e:	f7ff be06 	b.w	800537e <USBH_CtlReq>

08005772 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8005772:	7883      	ldrb	r3, [r0, #2]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005778:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800577a:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 800577c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800577e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005780:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8005782:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005784:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8005786:	2200      	movs	r2, #0
 8005788:	4611      	mov	r1, r2
 800578a:	f7ff bdf8 	b.w	800537e <USBH_CtlReq>

0800578e <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 800578e:	7883      	ldrb	r3, [r0, #2]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d106      	bne.n	80057a2 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005794:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005796:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 8005798:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800579a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800579c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800579e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80057a0:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80057a2:	2200      	movs	r2, #0
 80057a4:	4611      	mov	r1, r2
 80057a6:	f7ff bdea 	b.w	800537e <USBH_CtlReq>

080057aa <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80057aa:	7883      	ldrb	r3, [r0, #2]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d106      	bne.n	80057be <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80057b0:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80057b2:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80057b4:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80057b6:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80057b8:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80057ba:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0U;
 80057bc:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 80057be:	2200      	movs	r2, #0
 80057c0:	4611      	mov	r1, r2
 80057c2:	f7ff bddc 	b.w	800537e <USBH_CtlReq>

080057c6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80057c6:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80057c8:	2308      	movs	r3, #8
{
 80057ca:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80057cc:	2400      	movs	r4, #0
{
 80057ce:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	9101      	str	r1, [sp, #4]
 80057d4:	4623      	mov	r3, r4
 80057d6:	9403      	str	r4, [sp, #12]
 80057d8:	4622      	mov	r2, r4
 80057da:	9400      	str	r4, [sp, #0]
 80057dc:	4629      	mov	r1, r5
 80057de:	f00b fa6d 	bl	8010cbc <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 80057e2:	4620      	mov	r0, r4
 80057e4:	b005      	add	sp, #20
 80057e6:	bd30      	pop	{r4, r5, pc}

080057e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80057e8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80057ea:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80057ee:	b085      	sub	sp, #20
 80057f0:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80057f2:	2d00      	cmp	r5, #0
{
 80057f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80057f8:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80057fa:	bf18      	it	ne
 80057fc:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80057fe:	9101      	str	r1, [sp, #4]
 8005800:	4621      	mov	r1, r4
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	2301      	movs	r3, #1
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2300      	movs	r3, #0
 800580a:	461a      	mov	r2, r3
 800580c:	f00b fa56 	bl	8010cbc <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8005810:	2000      	movs	r0, #0
 8005812:	b005      	add	sp, #20
 8005814:	bd30      	pop	{r4, r5, pc}

08005816 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005816:	b530      	push	{r4, r5, lr}
 8005818:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800581a:	2400      	movs	r4, #0
{
 800581c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800581e:	9202      	str	r2, [sp, #8]
 8005820:	2201      	movs	r2, #1
 8005822:	9101      	str	r1, [sp, #4]
 8005824:	4623      	mov	r3, r4
 8005826:	9403      	str	r4, [sp, #12]
 8005828:	4629      	mov	r1, r5
 800582a:	9200      	str	r2, [sp, #0]
 800582c:	f00b fa46 	bl	8010cbc <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8005830:	4620      	mov	r0, r4
 8005832:	b005      	add	sp, #20
 8005834:	bd30      	pop	{r4, r5, pc}

08005836 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8005836:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005838:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800583c:	b085      	sub	sp, #20
 800583e:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005840:	2d00      	cmp	r5, #0
{
 8005842:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005846:	9202      	str	r2, [sp, #8]
 8005848:	f04f 0200 	mov.w	r2, #0
    do_ping = 0U;
 800584c:	bf18      	it	ne
 800584e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005850:	9101      	str	r1, [sp, #4]
 8005852:	4621      	mov	r1, r4
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	2301      	movs	r3, #1
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	2302      	movs	r3, #2
 800585c:	f00b fa2e 	bl	8010cbc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8005860:	2000      	movs	r0, #0
 8005862:	b005      	add	sp, #20
 8005864:	bd30      	pop	{r4, r5, pc}

08005866 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005866:	b530      	push	{r4, r5, lr}
 8005868:	b085      	sub	sp, #20
 800586a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800586c:	2400      	movs	r4, #0
 800586e:	2302      	movs	r3, #2
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	2201      	movs	r2, #1
 8005874:	9101      	str	r1, [sp, #4]
 8005876:	4629      	mov	r1, r5
 8005878:	9403      	str	r4, [sp, #12]
 800587a:	9200      	str	r2, [sp, #0]
 800587c:	f00b fa1e 	bl	8010cbc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8005880:	4620      	mov	r0, r4
 8005882:	b005      	add	sp, #20
 8005884:	bd30      	pop	{r4, r5, pc}

08005886 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8005886:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8005888:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800588c:	9402      	str	r4, [sp, #8]
 800588e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005892:	9401      	str	r4, [sp, #4]
 8005894:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005898:	9400      	str	r4, [sp, #0]
 800589a:	f00b f9e9 	bl	8010c70 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 800589e:	2000      	movs	r0, #0
 80058a0:	b004      	add	sp, #16
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80058a4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80058a6:	f00b f9fb 	bl	8010ca0 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 80058aa:	2000      	movs	r0, #0
 80058ac:	bd08      	pop	{r3, pc}

080058ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80058ae:	b530      	push	{r4, r5, lr}
 80058b0:	2300      	movs	r3, #0
 80058b2:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80058b6:	f854 5b04 	ldr.w	r5, [r4], #4
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	042d      	lsls	r5, r5, #16
 80058be:	d407      	bmi.n	80058d0 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80058c0:	33e0      	adds	r3, #224	; 0xe0
 80058c2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 80058c6:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80058c8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 80058cc:	b2d0      	uxtb	r0, r2
 80058ce:	bd30      	pop	{r4, r5, pc}
 80058d0:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 80058d2:	2b0b      	cmp	r3, #11
 80058d4:	d1ef      	bne.n	80058b6 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 80058d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058da:	e7f7      	b.n	80058cc <USBH_AllocPipe+0x1e>

080058dc <USBH_FreePipe>:
   if(idx < 11U)
 80058dc:	290a      	cmp	r1, #10
 80058de:	bf9f      	itttt	ls
 80058e0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 80058e4:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 80058e8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80058ec:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 80058f0:	2000      	movs	r0, #0
 80058f2:	4770      	bx	lr

080058f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058f4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80058f6:	f001 f93d 	bl	8006b74 <vTaskStartScheduler>
  
  return osOK;
}
 80058fa:	2000      	movs	r0, #0
 80058fc:	bd08      	pop	{r3, pc}

080058fe <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8005902:	b10b      	cbz	r3, 8005908 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8005904:	f001 b984 	b.w	8006c10 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8005908:	f001 b97c 	b.w	8006c04 <xTaskGetTickCount>

0800590c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800590c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800590e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8005912:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005914:	8a02      	ldrh	r2, [r0, #16]
{
 8005916:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8005918:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800591a:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800591e:	bf14      	ite	ne
 8005920:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005922:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005924:	a803      	add	r0, sp, #12
 8005926:	9400      	str	r4, [sp, #0]
 8005928:	9001      	str	r0, [sp, #4]
 800592a:	4628      	mov	r0, r5
 800592c:	f001 f84a 	bl	80069c4 <xTaskCreate>
 8005930:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005932:	bf0c      	ite	eq
 8005934:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005936:	2000      	movne	r0, #0
}
 8005938:	b005      	add	sp, #20
 800593a:	bd30      	pop	{r4, r5, pc}

0800593c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800593c:	2800      	cmp	r0, #0
 800593e:	bf08      	it	eq
 8005940:	2001      	moveq	r0, #1
{
 8005942:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005944:	f001 fa7a 	bl	8006e3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005948:	2000      	movs	r0, #0
 800594a:	bd08      	pop	{r3, pc}

0800594c <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800594c:	2001      	movs	r0, #1
 800594e:	f000 bd8d 	b.w	800646c <xQueueCreateMutex>
	...

08005954 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005954:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005956:	2400      	movs	r4, #0
{
 8005958:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800595a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800595c:	b1e8      	cbz	r0, 800599a <osMutexWait+0x46>
 800595e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005962:	b1a3      	cbz	r3, 800598e <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005964:	aa01      	add	r2, sp, #4
 8005966:	4621      	mov	r1, r4
 8005968:	f000 ff24 	bl	80067b4 <xQueueReceiveFromISR>
 800596c:	2801      	cmp	r0, #1
 800596e:	d002      	beq.n	8005976 <osMutexWait+0x22>
      return osErrorOS;
 8005970:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8005972:	b002      	add	sp, #8
 8005974:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	b13b      	cbz	r3, 800598a <osMutexWait+0x36>
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <osMutexWait+0x4c>)
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	f3bf 8f6f 	isb	sy
  return osOK;
 800598a:	2000      	movs	r0, #0
 800598c:	e7f1      	b.n	8005972 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800598e:	4619      	mov	r1, r3
 8005990:	f000 fe46 	bl	8006620 <xQueueGenericReceive>
 8005994:	2801      	cmp	r0, #1
 8005996:	d1eb      	bne.n	8005970 <osMutexWait+0x1c>
 8005998:	e7f7      	b.n	800598a <osMutexWait+0x36>
    return osErrorParameter;
 800599a:	2080      	movs	r0, #128	; 0x80
 800599c:	e7e9      	b.n	8005972 <osMutexWait+0x1e>
 800599e:	bf00      	nop
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80059a4:	2901      	cmp	r1, #1
{ 
 80059a6:	4608      	mov	r0, r1
 80059a8:	b510      	push	{r4, lr}
  if (count == 1) {
 80059aa:	d10c      	bne.n	80059c6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80059ac:	2203      	movs	r2, #3
 80059ae:	2100      	movs	r1, #0
 80059b0:	f000 fc58 	bl	8006264 <xQueueGenericCreate>
 80059b4:	4604      	mov	r4, r0
 80059b6:	b120      	cbz	r0, 80059c2 <osSemaphoreCreate+0x1e>
 80059b8:	2300      	movs	r3, #0
 80059ba:	461a      	mov	r2, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	f000 fc97 	bl	80062f0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80059c2:	4620      	mov	r0, r4
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80059ca:	f000 bc6e 	b.w	80062aa <xQueueCreateCountingSemaphore>
	...

080059d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80059d0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80059d2:	2400      	movs	r4, #0
{
 80059d4:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80059d6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80059d8:	b1e8      	cbz	r0, 8005a16 <osSemaphoreWait+0x46>
 80059da:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80059de:	b1a3      	cbz	r3, 8005a0a <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80059e0:	aa01      	add	r2, sp, #4
 80059e2:	4621      	mov	r1, r4
 80059e4:	f000 fee6 	bl	80067b4 <xQueueReceiveFromISR>
 80059e8:	2801      	cmp	r0, #1
 80059ea:	d002      	beq.n	80059f2 <osSemaphoreWait+0x22>
      return osErrorOS;
 80059ec:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80059ee:	b002      	add	sp, #8
 80059f0:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	b13b      	cbz	r3, 8005a06 <osSemaphoreWait+0x36>
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <osSemaphoreWait+0x4c>)
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
  return osOK;
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7f1      	b.n	80059ee <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f000 fe08 	bl	8006620 <xQueueGenericReceive>
 8005a10:	2801      	cmp	r0, #1
 8005a12:	d1eb      	bne.n	80059ec <osSemaphoreWait+0x1c>
 8005a14:	e7f7      	b.n	8005a06 <osSemaphoreWait+0x36>
    return osErrorParameter;
 8005a16:	2080      	movs	r0, #128	; 0x80
 8005a18:	e7e9      	b.n	80059ee <osSemaphoreWait+0x1e>
 8005a1a:	bf00      	nop
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005a20:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005a22:	2400      	movs	r4, #0
 8005a24:	9401      	str	r4, [sp, #4]
 8005a26:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8005a2a:	b193      	cbz	r3, 8005a52 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005a2c:	a901      	add	r1, sp, #4
 8005a2e:	f000 fd99 	bl	8006564 <xQueueGiveFromISR>
 8005a32:	2801      	cmp	r0, #1
 8005a34:	d113      	bne.n	8005a5e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	b913      	cbnz	r3, 8005a40 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8005a3a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <osSemaphoreRelease+0x44>)
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	e7f3      	b.n	8005a3a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005a52:	461a      	mov	r2, r3
 8005a54:	4619      	mov	r1, r3
 8005a56:	f000 fc4b 	bl	80062f0 <xQueueGenericSend>
 8005a5a:	2801      	cmp	r0, #1
 8005a5c:	d0ed      	beq.n	8005a3a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8005a5e:	20ff      	movs	r0, #255	; 0xff
 8005a60:	e7ec      	b.n	8005a3c <osSemaphoreRelease+0x1c>
 8005a62:	bf00      	nop
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <osMutexRelease>:
 8005a68:	f7ff bfda 	b.w	8005a20 <osSemaphoreRelease>

08005a6c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	c803      	ldmia	r0, {r0, r1}
 8005a70:	f000 bbf8 	b.w	8006264 <xQueueGenericCreate>

08005a74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8005a76:	2400      	movs	r4, #0
{
 8005a78:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a7a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8005a7c:	42a2      	cmp	r2, r4
 8005a7e:	bf08      	it	eq
 8005a80:	2201      	moveq	r2, #1
 8005a82:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8005a86:	b1ab      	cbz	r3, 8005ab4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a88:	4623      	mov	r3, r4
 8005a8a:	aa03      	add	r2, sp, #12
 8005a8c:	a901      	add	r1, sp, #4
 8005a8e:	f000 fcff 	bl	8006490 <xQueueGenericSendFromISR>
 8005a92:	2801      	cmp	r0, #1
 8005a94:	d002      	beq.n	8005a9c <osMessagePut+0x28>
      return osErrorOS;
 8005a96:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8005a98:	b004      	add	sp, #16
 8005a9a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	b13b      	cbz	r3, 8005ab0 <osMessagePut+0x3c>
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <osMessagePut+0x4c>)
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
  return osOK;
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7f1      	b.n	8005a98 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005ab4:	a901      	add	r1, sp, #4
 8005ab6:	f000 fc1b 	bl	80062f0 <xQueueGenericSend>
 8005aba:	2801      	cmp	r0, #1
 8005abc:	d1eb      	bne.n	8005a96 <osMessagePut+0x22>
 8005abe:	e7f7      	b.n	8005ab0 <osMessagePut+0x3c>
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8005ac6:	2600      	movs	r6, #0
{
 8005ac8:	b085      	sub	sp, #20
 8005aca:	4604      	mov	r4, r0
 8005acc:	4617      	mov	r7, r2
 8005ace:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8005ad0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8005ad2:	9602      	str	r6, [sp, #8]
 8005ad4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8005ad6:	b911      	cbnz	r1, 8005ade <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8005ad8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	e016      	b.n	8005b0c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 8005ade:	9600      	str	r6, [sp, #0]
 8005ae0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8005ae4:	b1cb      	cbz	r3, 8005b1a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ae6:	466a      	mov	r2, sp
 8005ae8:	a902      	add	r1, sp, #8
 8005aea:	f000 fe63 	bl	80067b4 <xQueueReceiveFromISR>
 8005aee:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8005af0:	bf0a      	itet	eq
 8005af2:	2310      	moveq	r3, #16
      event.status = osOK;
 8005af4:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8005af6:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8005af8:	9b00      	ldr	r3, [sp, #0]
 8005afa:	b13b      	cbz	r3, 8005b0c <osMessageGet+0x48>
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <osMessageGet+0x70>)
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8005b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b14:	4620      	mov	r0, r4
 8005b16:	b005      	add	sp, #20
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005b1a:	a902      	add	r1, sp, #8
 8005b1c:	f000 fd80 	bl	8006620 <xQueueGenericReceive>
 8005b20:	2801      	cmp	r0, #1
 8005b22:	d101      	bne.n	8005b28 <osMessageGet+0x64>
      event.status = osEventMessage;
 8005b24:	2310      	movs	r3, #16
 8005b26:	e7d8      	b.n	8005ada <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b28:	2f00      	cmp	r7, #0
 8005b2a:	bf0c      	ite	eq
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	2340      	movne	r3, #64	; 0x40
 8005b30:	e7d3      	b.n	8005ada <osMessageGet+0x16>
 8005b32:	bf00      	nop
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005b38:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005b3a:	f001 fae9 	bl	8007110 <xTaskGetSchedulerState>
 8005b3e:	2801      	cmp	r0, #1
 8005b40:	d003      	beq.n	8005b4a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005b46:	f000 b925 	b.w	8005d94 <xPortSysTickHandler>
 8005b4a:	bd08      	pop	{r3, pc}

08005b4c <osMessageWaiting>:
 8005b4c:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8005b50:	b10b      	cbz	r3, 8005b56 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005b52:	f000 be9a 	b.w	800688a <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005b56:	f000 be83 	b.w	8006860 <uxQueueMessagesWaiting>

08005b5a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8005b60:	b91c      	cbnz	r4, 8005b6a <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 8005b62:	f000 feb5 	bl	80068d0 <vQueueDelete>

  return osOK; 
 8005b66:	4620      	mov	r0, r4
 8005b68:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8005b6a:	2082      	movs	r0, #130	; 0x82
}
 8005b6c:	bd10      	pop	{r4, pc}

08005b6e <osSemaphoreDelete>:
 8005b6e:	f7ff bff4 	b.w	8005b5a <osMessageDelete>

08005b72 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b72:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b7a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b80:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b82:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	4770      	bx	lr

08005b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6103      	str	r3, [r0, #16]
 8005b8c:	4770      	bx	lr

08005b8e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b8e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b90:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005b92:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b94:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b9a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005b9c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b9e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	6003      	str	r3, [r0, #0]
 8005ba4:	4770      	bx	lr

08005ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ba6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ba8:	1c53      	adds	r3, r2, #1
{
 8005baa:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8005bac:	d10a      	bne.n	8005bc4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bae:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bb4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bb6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bb8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005bba:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bbc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	6003      	str	r3, [r0, #0]
 8005bc2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc4:	f100 0308 	add.w	r3, r0, #8
 8005bc8:	685c      	ldr	r4, [r3, #4]
 8005bca:	6825      	ldr	r5, [r4, #0]
 8005bcc:	42aa      	cmp	r2, r5
 8005bce:	d3ef      	bcc.n	8005bb0 <vListInsert+0xa>
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	e7f9      	b.n	8005bc8 <vListInsert+0x22>

08005bd4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bd4:	6841      	ldr	r1, [r0, #4]
 8005bd6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005bd8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bdc:	6882      	ldr	r2, [r0, #8]
 8005bde:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005be4:	bf08      	it	eq
 8005be6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005be8:	2200      	movs	r2, #0
 8005bea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	3801      	subs	r0, #1
 8005bf0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005bf2:	4770      	bx	lr

08005bf4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvTaskExitError+0x34>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	d00a      	beq.n	8005c12 <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	b672      	cpsid	i
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	b662      	cpsie	i
 8005c10:	e7fe      	b.n	8005c10 <prvTaskExitError+0x1c>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	e7fe      	b.n	8005c26 <prvTaskExitError+0x32>
 8005c28:	20000024 	.word	0x20000024

08005c2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005c2c:	4806      	ldr	r0, [pc, #24]	; (8005c48 <prvPortStartFirstTask+0x1c>)
 8005c2e:	6800      	ldr	r0, [r0, #0]
 8005c30:	6800      	ldr	r0, [r0, #0]
 8005c32:	f380 8808 	msr	MSP, r0
 8005c36:	b662      	cpsie	i
 8005c38:	b661      	cpsie	f
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	df00      	svc	0
 8005c44:	bf00      	nop
 8005c46:	0000      	.short	0x0000
 8005c48:	e000ed08 	.word	0xe000ed08

08005c4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c5c <vPortEnableVFP+0x10>
 8005c50:	6801      	ldr	r1, [r0, #0]
 8005c52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c56:	6001      	str	r1, [r0, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	0000      	.short	0x0000
 8005c5c:	e000ed88 	.word	0xe000ed88

08005c60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c64:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c68:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005c6c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c6e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c72:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c74:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005c76:	f06f 0302 	mvn.w	r3, #2
 8005c7a:	6203      	str	r3, [r0, #32]
}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	08005bf5 	.word	0x08005bf5
	...

08005c90 <SVC_Handler>:
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	4770      	bx	lr
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	200080d8 	.word	0x200080d8

08005cb4 <vPortEnterCritical>:
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	b672      	cpsid	i
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	b662      	cpsie	i
	uxCriticalNesting++;
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <vPortEnterCritical+0x44>)
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005cce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005cd2:	d10f      	bne.n	8005cf4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <vPortEnterCritical+0x48>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cdc:	d00a      	beq.n	8005cf4 <vPortEnterCritical+0x40>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	b672      	cpsid	i
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	b662      	cpsie	i
 8005cf2:	e7fe      	b.n	8005cf2 <vPortEnterCritical+0x3e>
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000024 	.word	0x20000024
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <vPortExitCritical+0x28>)
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	b953      	cbnz	r3, 8005d1c <vPortExitCritical+0x1c>
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	b672      	cpsid	i
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	b662      	cpsie	i
 8005d1a:	e7fe      	b.n	8005d1a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d20:	b90b      	cbnz	r3, 8005d26 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	4770      	bx	lr
 8005d28:	20000024 	.word	0x20000024
 8005d2c:	00000000 	.word	0x00000000

08005d30 <PendSV_Handler>:
	__asm volatile
 8005d30:	f3ef 8009 	mrs	r0, PSP
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <pxCurrentTCBConst>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f01e 0f10 	tst.w	lr, #16
 8005d40:	bf08      	it	eq
 8005d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d54:	b672      	cpsid	i
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	b662      	cpsie	i
 8005d64:	f001 f8cc 	bl	8006f00 <vTaskSwitchContext>
 8005d68:	f04f 0000 	mov.w	r0, #0
 8005d6c:	f380 8811 	msr	BASEPRI, r0
 8005d70:	bc08      	pop	{r3}
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6808      	ldr	r0, [r1, #0]
 8005d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f01e 0f10 	tst.w	lr, #16
 8005d7e:	bf08      	it	eq
 8005d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d84:	f380 8809 	msr	PSP, r0
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop

08005d90 <pxCurrentTCBConst>:
 8005d90:	200080d8 	.word	0x200080d8

08005d94 <xPortSysTickHandler>:
{
 8005d94:	b508      	push	{r3, lr}
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8005daa:	f000 ff39 	bl	8006c20 <xTaskIncrementTick>
 8005dae:	b118      	cbz	r0, 8005db8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <xPortSysTickHandler+0x2c>)
 8005db6:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005db8:	2300      	movs	r3, #0
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	bd08      	pop	{r3, pc}
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <vPortSetupTimerInterrupt+0x1c>)
 8005dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd0:	4a04      	ldr	r2, [pc, #16]	; (8005de4 <vPortSetupTimerInterrupt+0x20>)
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <vPortSetupTimerInterrupt+0x24>)
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000030 	.word	0x20000030
 8005de4:	e000e014 	.word	0xe000e014
 8005de8:	e000e010 	.word	0xe000e010

08005dec <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <xPortStartScheduler+0x90>)
{
 8005dee:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005df0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005df2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dfc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dfe:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005e0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e0e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e10:	2207      	movs	r2, #7
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <xPortStartScheduler+0x98>)
 8005e14:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e16:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005e1a:	1e54      	subs	r4, r2, #1
 8005e1c:	0600      	lsls	r0, r0, #24
 8005e1e:	d423      	bmi.n	8005e68 <xPortStartScheduler+0x7c>
 8005e20:	b101      	cbz	r1, 8005e24 <xPortStartScheduler+0x38>
 8005e22:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005e2c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <xPortStartScheduler+0x90>)
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <xPortStartScheduler+0x9c>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005e3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005e46:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005e48:	f7ff ffbc 	bl	8005dc4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xPortStartScheduler+0xa0>)
 8005e50:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005e52:	f7ff fefb 	bl	8005c4c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e56:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <xPortStartScheduler+0xa4>)
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e5e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005e60:	f7ff fee4 	bl	8005c2c <prvPortStartFirstTask>
	prvTaskExitError();
 8005e64:	f7ff fec6 	bl	8005bf4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e68:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	0052      	lsls	r2, r2, #1
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	f88d 2003 	strb.w	r2, [sp, #3]
 8005e76:	4622      	mov	r2, r4
 8005e78:	e7cd      	b.n	8005e16 <xPortStartScheduler+0x2a>
 8005e7a:	bf00      	nop
 8005e7c:	e000e400 	.word	0xe000e400
 8005e80:	200000b8 	.word	0x200000b8
 8005e84:	200000bc 	.word	0x200000bc
 8005e88:	e000ed20 	.word	0xe000ed20
 8005e8c:	20000024 	.word	0x20000024
 8005e90:	e000ef34 	.word	0xe000ef34

08005e94 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005e94:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d910      	bls.n	8005ebe <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e9c:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <vPortValidateInterruptPriority+0x54>)
 8005e9e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ea0:	4a12      	ldr	r2, [pc, #72]	; (8005eec <vPortValidateInterruptPriority+0x58>)
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d90a      	bls.n	8005ebe <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	b672      	cpsid	i
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	b662      	cpsie	i
 8005ebc:	e7fe      	b.n	8005ebc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <vPortValidateInterruptPriority+0x5c>)
 8005ec0:	4a0c      	ldr	r2, [pc, #48]	; (8005ef4 <vPortValidateInterruptPriority+0x60>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d90a      	bls.n	8005ee4 <vPortValidateInterruptPriority+0x50>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	b672      	cpsid	i
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	b662      	cpsie	i
 8005ee2:	e7fe      	b.n	8005ee2 <vPortValidateInterruptPriority+0x4e>
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	e000e3f0 	.word	0xe000e3f0
 8005eec:	200000b8 	.word	0x200000b8
 8005ef0:	e000ed0c 	.word	0xe000ed0c
 8005ef4:	200000bc 	.word	0x200000bc

08005ef8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <prvInsertBlockIntoFreeList+0x40>)
{
 8005efa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4282      	cmp	r2, r0
 8005f00:	d318      	bcc.n	8005f34 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f02:	685c      	ldr	r4, [r3, #4]
 8005f04:	1919      	adds	r1, r3, r4
 8005f06:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f08:	bf01      	itttt	eq
 8005f0a:	6841      	ldreq	r1, [r0, #4]
 8005f0c:	4618      	moveq	r0, r3
 8005f0e:	1909      	addeq	r1, r1, r4
 8005f10:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f12:	6844      	ldr	r4, [r0, #4]
 8005f14:	1901      	adds	r1, r0, r4
 8005f16:	428a      	cmp	r2, r1
 8005f18:	d107      	bne.n	8005f2a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f1a:	4908      	ldr	r1, [pc, #32]	; (8005f3c <prvInsertBlockIntoFreeList+0x44>)
 8005f1c:	6809      	ldr	r1, [r1, #0]
 8005f1e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f20:	bf1f      	itttt	ne
 8005f22:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f24:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f26:	1909      	addne	r1, r1, r4
 8005f28:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f2a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f2c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f2e:	bf18      	it	ne
 8005f30:	6018      	strne	r0, [r3, #0]
 8005f32:	bd10      	pop	{r4, pc}
 8005f34:	4613      	mov	r3, r2
 8005f36:	e7e1      	b.n	8005efc <prvInsertBlockIntoFreeList+0x4>
 8005f38:	200080d0 	.word	0x200080d0
 8005f3c:	200000c0 	.word	0x200000c0

08005f40 <pvPortMalloc>:
{
 8005f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f44:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005f46:	f000 fe55 	bl	8006bf4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005f4a:	4941      	ldr	r1, [pc, #260]	; (8006050 <pvPortMalloc+0x110>)
 8005f4c:	4d41      	ldr	r5, [pc, #260]	; (8006054 <pvPortMalloc+0x114>)
 8005f4e:	680b      	ldr	r3, [r1, #0]
 8005f50:	bb0b      	cbnz	r3, 8005f96 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8005f52:	4a41      	ldr	r2, [pc, #260]	; (8006058 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f56:	4e41      	ldr	r6, [pc, #260]	; (800605c <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f58:	bf1b      	ittet	ne
 8005f5a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f5c:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f60:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	f020 0007 	bicne.w	r0, r0, #7
 8005f68:	bf1c      	itt	ne
 8005f6a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8005f6e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f70:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f72:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f74:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8005f76:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f78:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8005f7c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005f7e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f80:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8005f82:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f84:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f86:	4b36      	ldr	r3, [pc, #216]	; (8006060 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f88:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <pvPortMalloc+0x124>)
 8005f8e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f94:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f96:	682f      	ldr	r7, [r5, #0]
 8005f98:	4227      	tst	r7, r4
 8005f9a:	d116      	bne.n	8005fca <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	d042      	beq.n	8006026 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8005fa0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fa6:	bf1c      	itt	ne
 8005fa8:	f023 0307 	bicne.w	r3, r3, #7
 8005fac:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fae:	b163      	cbz	r3, 8005fca <pvPortMalloc+0x8a>
 8005fb0:	4a2c      	ldr	r2, [pc, #176]	; (8006064 <pvPortMalloc+0x124>)
 8005fb2:	6816      	ldr	r6, [r2, #0]
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	42b3      	cmp	r3, r6
 8005fb8:	d807      	bhi.n	8005fca <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8005fba:	4a28      	ldr	r2, [pc, #160]	; (800605c <pvPortMalloc+0x11c>)
 8005fbc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fbe:	6868      	ldr	r0, [r5, #4]
 8005fc0:	4283      	cmp	r3, r0
 8005fc2:	d804      	bhi.n	8005fce <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8005fc4:	6809      	ldr	r1, [r1, #0]
 8005fc6:	428d      	cmp	r5, r1
 8005fc8:	d107      	bne.n	8005fda <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8005fca:	2400      	movs	r4, #0
 8005fcc:	e02b      	b.n	8006026 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fce:	682c      	ldr	r4, [r5, #0]
 8005fd0:	2c00      	cmp	r4, #0
 8005fd2:	d0f7      	beq.n	8005fc4 <pvPortMalloc+0x84>
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4625      	mov	r5, r4
 8005fd8:	e7f1      	b.n	8005fbe <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fda:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fdc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fde:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fe0:	1ac2      	subs	r2, r0, r3
 8005fe2:	2a10      	cmp	r2, #16
 8005fe4:	d911      	bls.n	800600a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fe6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe8:	0741      	lsls	r1, r0, #29
 8005fea:	d00a      	beq.n	8006002 <pvPortMalloc+0xc2>
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	b672      	cpsid	i
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	b662      	cpsie	i
 8006000:	e7fe      	b.n	8006000 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006002:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006004:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006006:	f7ff ff77 	bl	8005ef8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800600a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800600c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800600e:	4914      	ldr	r1, [pc, #80]	; (8006060 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006010:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006012:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006014:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006016:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006018:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800601c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800601e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006020:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006022:	bf38      	it	cc
 8006024:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8006026:	f000 fe8f 	bl	8006d48 <xTaskResumeAll>
		if( pvReturn == NULL )
 800602a:	b90c      	cbnz	r4, 8006030 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 800602c:	f009 fa20 	bl	800f470 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006030:	0763      	lsls	r3, r4, #29
 8006032:	d00a      	beq.n	800604a <pvPortMalloc+0x10a>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	b672      	cpsid	i
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	b662      	cpsie	i
 8006048:	e7fe      	b.n	8006048 <pvPortMalloc+0x108>
}
 800604a:	4620      	mov	r0, r4
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	200000c0 	.word	0x200000c0
 8006054:	200080c4 	.word	0x200080c4
 8006058:	200000c4 	.word	0x200000c4
 800605c:	200080d0 	.word	0x200080d0
 8006060:	200080cc 	.word	0x200080cc
 8006064:	200080c8 	.word	0x200080c8

08006068 <vPortFree>:
{
 8006068:	b510      	push	{r4, lr}
	if( pv != NULL )
 800606a:	4604      	mov	r4, r0
 800606c:	2800      	cmp	r0, #0
 800606e:	d032      	beq.n	80060d6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006070:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <vPortFree+0x70>)
 8006072:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	4213      	tst	r3, r2
 800607a:	d10a      	bne.n	8006092 <vPortFree+0x2a>
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	b672      	cpsid	i
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	b662      	cpsie	i
 8006090:	e7fe      	b.n	8006090 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006092:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006096:	b151      	cbz	r1, 80060ae <vPortFree+0x46>
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	b672      	cpsid	i
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	b662      	cpsie	i
 80060ac:	e7fe      	b.n	80060ac <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060ae:	ea23 0302 	bic.w	r3, r3, r2
 80060b2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80060b6:	f000 fd9d 	bl	8006bf4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <vPortFree+0x74>)
 80060bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060c0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060c4:	6811      	ldr	r1, [r2, #0]
 80060c6:	440b      	add	r3, r1
 80060c8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ca:	f7ff ff15 	bl	8005ef8 <prvInsertBlockIntoFreeList>
}
 80060ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80060d2:	f000 be39 	b.w	8006d48 <xTaskResumeAll>
 80060d6:	bd10      	pop	{r4, pc}
 80060d8:	200080c4 	.word	0x200080c4
 80060dc:	200080c8 	.word	0x200080c8

080060e0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80060e6:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e8:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060ea:	b942      	cbnz	r2, 80060fe <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ec:	6805      	ldr	r5, [r0, #0]
 80060ee:	b99d      	cbnz	r5, 8006118 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80060f0:	6840      	ldr	r0, [r0, #4]
 80060f2:	f001 f863 	bl	80071bc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80060f6:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80060f8:	3601      	adds	r6, #1
 80060fa:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80060fe:	b96d      	cbnz	r5, 800611c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006100:	6880      	ldr	r0, [r0, #8]
 8006102:	f00a fe8e 	bl	8010e22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800610a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800610c:	6862      	ldr	r2, [r4, #4]
 800610e:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006110:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006112:	d301      	bcc.n	8006118 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006118:	2000      	movs	r0, #0
 800611a:	e7ed      	b.n	80060f8 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611c:	68c0      	ldr	r0, [r0, #12]
 800611e:	f00a fe80 	bl	8010e22 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006124:	68e2      	ldr	r2, [r4, #12]
 8006126:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006128:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800612a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800612c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800612e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006130:	bf3e      	ittt	cc
 8006132:	6862      	ldrcc	r2, [r4, #4]
 8006134:	189b      	addcc	r3, r3, r2
 8006136:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006138:	2d02      	cmp	r5, #2
 800613a:	d1ed      	bne.n	8006118 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800613c:	b10e      	cbz	r6, 8006142 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800613e:	3e01      	subs	r6, #1
 8006140:	e7ea      	b.n	8006118 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8006142:	4630      	mov	r0, r6
 8006144:	e7d8      	b.n	80060f8 <prvCopyDataToQueue+0x18>

08006146 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006146:	4603      	mov	r3, r0
 8006148:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800614a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800614c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800614e:	b162      	cbz	r2, 800616a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006150:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006152:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006154:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006156:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006158:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800615e:	bf24      	itt	cs
 8006160:	6819      	ldrcs	r1, [r3, #0]
 8006162:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006164:	68d9      	ldr	r1, [r3, #12]
 8006166:	f00a be5c 	b.w	8010e22 <memcpy>
}
 800616a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616e:	4770      	bx	lr

08006170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006174:	f7ff fd9e 	bl	8005cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006178:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006180:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006182:	2d00      	cmp	r5, #0
 8006184:	dc14      	bgt.n	80061b0 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006186:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006188:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800618c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006190:	f7ff fdb6 	bl	8005d00 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006194:	f7ff fd8e 	bl	8005cb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006198:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800619c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800619e:	2d00      	cmp	r5, #0
 80061a0:	dc12      	bgt.n	80061c8 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061a2:	23ff      	movs	r3, #255	; 0xff
 80061a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80061a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80061ac:	f7ff bda8 	b.w	8005d00 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0e7      	beq.n	8006186 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 ff12 	bl	8006fe0 <xTaskRemoveFromEventList>
 80061bc:	b108      	cbz	r0, 80061c2 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80061be:	f000 ffa1 	bl	8007104 <vTaskMissedYield>
 80061c2:	3d01      	subs	r5, #1
 80061c4:	b26d      	sxtb	r5, r5
 80061c6:	e7dc      	b.n	8006182 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0e9      	beq.n	80061a2 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 ff06 	bl	8006fe0 <xTaskRemoveFromEventList>
 80061d4:	b108      	cbz	r0, 80061da <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80061d6:	f000 ff95 	bl	8007104 <vTaskMissedYield>
 80061da:	3d01      	subs	r5, #1
 80061dc:	b26d      	sxtb	r5, r5
 80061de:	e7de      	b.n	800619e <prvUnlockQueue+0x2e>

080061e0 <xQueueGenericReset>:
{
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80061e4:	4604      	mov	r4, r0
 80061e6:	b950      	cbnz	r0, 80061fe <xQueueGenericReset+0x1e>
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	b672      	cpsid	i
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	b662      	cpsie	i
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80061fe:	f7ff fd59 	bl	8005cb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006202:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800620a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800620c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800620e:	1a1b      	subs	r3, r3, r0
 8006210:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006212:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006214:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006216:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006218:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800621a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800621c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006224:	b995      	cbnz	r5, 800624c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b163      	cbz	r3, 8006244 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622a:	f104 0010 	add.w	r0, r4, #16
 800622e:	f000 fed7 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006232:	b138      	cbz	r0, 8006244 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <xQueueGenericReset+0x80>)
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006244:	f7ff fd5c 	bl	8005d00 <vPortExitCritical>
}
 8006248:	2001      	movs	r0, #1
 800624a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800624c:	f104 0010 	add.w	r0, r4, #16
 8006250:	f7ff fc8f 	bl	8005b72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006254:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006258:	f7ff fc8b 	bl	8005b72 <vListInitialise>
 800625c:	e7f2      	b.n	8006244 <xQueueGenericReset+0x64>
 800625e:	bf00      	nop
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xQueueGenericCreate>:
	{
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006268:	4606      	mov	r6, r0
 800626a:	b950      	cbnz	r0, 8006282 <xQueueGenericCreate+0x1e>
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	b672      	cpsid	i
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	b662      	cpsie	i
 8006280:	e7fe      	b.n	8006280 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006282:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006284:	3048      	adds	r0, #72	; 0x48
 8006286:	f7ff fe5b 	bl	8005f40 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800628a:	4604      	mov	r4, r0
 800628c:	b138      	cbz	r0, 800629e <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800628e:	b945      	cbnz	r5, 80062a2 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006290:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006292:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006294:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006296:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff ffa1 	bl	80061e0 <xQueueGenericReset>
	}
 800629e:	4620      	mov	r0, r4
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80062a2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062a6:	6003      	str	r3, [r0, #0]
 80062a8:	e7f3      	b.n	8006292 <xQueueGenericCreate+0x2e>

080062aa <xQueueCreateCountingSemaphore>:
	{
 80062aa:	b510      	push	{r4, lr}
 80062ac:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80062ae:	b950      	cbnz	r0, 80062c6 <xQueueCreateCountingSemaphore+0x1c>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	e7fe      	b.n	80062c4 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062c6:	4288      	cmp	r0, r1
 80062c8:	d20a      	bcs.n	80062e0 <xQueueCreateCountingSemaphore+0x36>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	b672      	cpsid	i
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	b662      	cpsie	i
 80062de:	e7fe      	b.n	80062de <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80062e0:	2202      	movs	r2, #2
 80062e2:	2100      	movs	r1, #0
 80062e4:	f7ff ffbe 	bl	8006264 <xQueueGenericCreate>
		if( xHandle != NULL )
 80062e8:	b100      	cbz	r0, 80062ec <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80062ea:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80062ec:	bd10      	pop	{r4, pc}
	...

080062f0 <xQueueGenericSend>:
{
 80062f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	4689      	mov	r9, r1
 80062f6:	9201      	str	r2, [sp, #4]
 80062f8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80062fa:	4604      	mov	r4, r0
 80062fc:	b950      	cbnz	r0, 8006314 <xQueueGenericSend+0x24>
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	b672      	cpsid	i
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	b662      	cpsie	i
 8006312:	e7fe      	b.n	8006312 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006314:	2900      	cmp	r1, #0
 8006316:	f040 808c 	bne.w	8006432 <xQueueGenericSend+0x142>
 800631a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8088 	beq.w	8006432 <xQueueGenericSend+0x142>
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	b672      	cpsid	i
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	b662      	cpsie	i
 8006336:	e7fe      	b.n	8006336 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006338:	9e01      	ldr	r6, [sp, #4]
 800633a:	2e00      	cmp	r6, #0
 800633c:	f000 8084 	beq.w	8006448 <xQueueGenericSend+0x158>
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	e7fe      	b.n	8006354 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006356:	9d01      	ldr	r5, [sp, #4]
 8006358:	b91d      	cbnz	r5, 8006362 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800635a:	f7ff fcd1 	bl	8005d00 <vPortExitCritical>
			return errQUEUE_FULL;
 800635e:	2000      	movs	r0, #0
 8006360:	e058      	b.n	8006414 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8006362:	b916      	cbnz	r6, 800636a <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8006364:	a802      	add	r0, sp, #8
 8006366:	f000 fe7f 	bl	8007068 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800636a:	f7ff fcc9 	bl	8005d00 <vPortExitCritical>
		vTaskSuspendAll();
 800636e:	f000 fc41 	bl	8006bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006372:	f7ff fc9f 	bl	8005cb4 <vPortEnterCritical>
 8006376:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	d101      	bne.n	8006382 <xQueueGenericSend+0x92>
 800637e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006382:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006386:	2bff      	cmp	r3, #255	; 0xff
 8006388:	d101      	bne.n	800638e <xQueueGenericSend+0x9e>
 800638a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800638e:	f7ff fcb7 	bl	8005d00 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006392:	a901      	add	r1, sp, #4
 8006394:	a802      	add	r0, sp, #8
 8006396:	f000 fe77 	bl	8007088 <xTaskCheckForTimeOut>
 800639a:	2800      	cmp	r0, #0
 800639c:	d143      	bne.n	8006426 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800639e:	f7ff fc89 	bl	8005cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80063a4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80063a6:	f7ff fcab 	bl	8005d00 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063aa:	42ae      	cmp	r6, r5
 80063ac:	d135      	bne.n	800641a <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063ae:	9901      	ldr	r1, [sp, #4]
 80063b0:	f104 0010 	add.w	r0, r4, #16
 80063b4:	f000 fdf8 	bl	8006fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff fed9 	bl	8006170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063be:	f000 fcc3 	bl	8006d48 <xTaskResumeAll>
 80063c2:	b938      	cbnz	r0, 80063d4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80063c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c8:	f8ca 3000 	str.w	r3, [sl]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80063d6:	f7ff fc6d 	bl	8005cb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d301      	bcc.n	80063e6 <xQueueGenericSend+0xf6>
 80063e2:	2f02      	cmp	r7, #2
 80063e4:	d1b7      	bne.n	8006356 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e6:	463a      	mov	r2, r7
 80063e8:	4649      	mov	r1, r9
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7ff fe78 	bl	80060e0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f2:	b11b      	cbz	r3, 80063fc <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80063f8:	f000 fdf2 	bl	8006fe0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80063fc:	b138      	cbz	r0, 800640e <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	4b19      	ldr	r3, [pc, #100]	; (8006468 <xQueueGenericSend+0x178>)
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800640e:	f7ff fc77 	bl	8005d00 <vPortExitCritical>
				return pdPASS;
 8006412:	2001      	movs	r0, #1
}
 8006414:	b004      	add	sp, #16
 8006416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800641a:	4620      	mov	r0, r4
 800641c:	f7ff fea8 	bl	8006170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006420:	f000 fc92 	bl	8006d48 <xTaskResumeAll>
 8006424:	e7d6      	b.n	80063d4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff fea2 	bl	8006170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800642c:	f000 fc8c 	bl	8006d48 <xTaskResumeAll>
 8006430:	e795      	b.n	800635e <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006432:	2f02      	cmp	r7, #2
 8006434:	d102      	bne.n	800643c <xQueueGenericSend+0x14c>
 8006436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10a      	bne.n	8006452 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643c:	f000 fe68 	bl	8007110 <xTaskGetSchedulerState>
 8006440:	2800      	cmp	r0, #0
 8006442:	f43f af79 	beq.w	8006338 <xQueueGenericSend+0x48>
 8006446:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006448:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800644c:	f8df a018 	ldr.w	sl, [pc, #24]	; 8006468 <xQueueGenericSend+0x178>
 8006450:	e7c1      	b.n	80063d6 <xQueueGenericSend+0xe6>
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	b672      	cpsid	i
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	b662      	cpsie	i
 8006466:	e7fe      	b.n	8006466 <xQueueGenericSend+0x176>
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <xQueueCreateMutex>:
	{
 800646c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800646e:	4602      	mov	r2, r0
 8006470:	2100      	movs	r1, #0
 8006472:	2001      	movs	r0, #1
 8006474:	f7ff fef6 	bl	8006264 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8006478:	4604      	mov	r4, r0
 800647a:	b138      	cbz	r0, 800648c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006480:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006482:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006484:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006486:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006488:	f7ff ff32 	bl	80062f0 <xQueueGenericSend>
	}
 800648c:	4620      	mov	r0, r4
 800648e:	bd10      	pop	{r4, pc}

08006490 <xQueueGenericSendFromISR>:
{
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4688      	mov	r8, r1
 8006496:	4691      	mov	r9, r2
 8006498:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800649a:	4604      	mov	r4, r0
 800649c:	b950      	cbnz	r0, 80064b4 <xQueueGenericSendFromISR+0x24>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	e7fe      	b.n	80064b2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b4:	bb19      	cbnz	r1, 80064fe <xQueueGenericSendFromISR+0x6e>
 80064b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80064b8:	b30b      	cbz	r3, 80064fe <xQueueGenericSendFromISR+0x6e>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	b672      	cpsid	i
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	b662      	cpsie	i
 80064ce:	e7fe      	b.n	80064ce <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064d4:	f000 fd84 	bl	8006fe0 <xTaskRemoveFromEventList>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d036      	beq.n	800654a <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 80064dc:	f1b9 0f00 	cmp.w	r9, #0
 80064e0:	d033      	beq.n	800654a <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064e2:	2001      	movs	r0, #1
 80064e4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80064e8:	f386 8811 	msr	BASEPRI, r6
}
 80064ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064f0:	3501      	adds	r5, #1
 80064f2:	b26d      	sxtb	r5, r5
 80064f4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80064f8:	e027      	b.n	800654a <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7f4      	b.n	80064e8 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064fe:	2f02      	cmp	r7, #2
 8006500:	d102      	bne.n	8006508 <xQueueGenericSendFromISR+0x78>
 8006502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d122      	bne.n	800654e <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006508:	f7ff fcc4 	bl	8005e94 <vPortValidateInterruptPriority>
	__asm volatile
 800650c:	f3ef 8611 	mrs	r6, BASEPRI
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	b672      	cpsid	i
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006524:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006528:	429a      	cmp	r2, r3
 800652a:	d301      	bcc.n	8006530 <xQueueGenericSendFromISR+0xa0>
 800652c:	2f02      	cmp	r7, #2
 800652e:	d1e4      	bne.n	80064fa <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006530:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006534:	463a      	mov	r2, r7
 8006536:	4641      	mov	r1, r8
 8006538:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800653a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800653c:	f7ff fdd0 	bl	80060e0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006540:	1c6b      	adds	r3, r5, #1
 8006542:	d1d5      	bne.n	80064f0 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1c2      	bne.n	80064d0 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 800654a:	2001      	movs	r0, #1
 800654c:	e7cc      	b.n	80064e8 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	e7fe      	b.n	8006562 <xQueueGenericSendFromISR+0xd2>

08006564 <xQueueGiveFromISR>:
{
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006568:	4604      	mov	r4, r0
 800656a:	b950      	cbnz	r0, 8006582 <xQueueGiveFromISR+0x1e>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	e7fe      	b.n	8006580 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006584:	b153      	cbz	r3, 800659c <xQueueGiveFromISR+0x38>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	b672      	cpsid	i
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	b662      	cpsie	i
 800659a:	e7fe      	b.n	800659a <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800659c:	6803      	ldr	r3, [r0, #0]
 800659e:	b913      	cbnz	r3, 80065a6 <xQueueGiveFromISR+0x42>
 80065a0:	6843      	ldr	r3, [r0, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d130      	bne.n	8006608 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a6:	f7ff fc75 	bl	8005e94 <vPortValidateInterruptPriority>
	__asm volatile
 80065aa:	f3ef 8611 	mrs	r6, BASEPRI
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80065c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d301      	bcc.n	80065ce <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 80065ca:	2000      	movs	r0, #0
 80065cc:	e014      	b.n	80065f8 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80065d2:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80065d4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80065d6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	d110      	bne.n	80065fe <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065de:	b90b      	cbnz	r3, 80065e4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80065e0:	2001      	movs	r0, #1
 80065e2:	e009      	b.n	80065f8 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065e8:	f000 fcfa 	bl	8006fe0 <xTaskRemoveFromEventList>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0f7      	beq.n	80065e0 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	d0f5      	beq.n	80065e0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065f4:	2001      	movs	r0, #1
 80065f6:	6028      	str	r0, [r5, #0]
	__asm volatile
 80065f8:	f386 8811 	msr	BASEPRI, r6
}
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065fe:	3301      	adds	r3, #1
 8006600:	b25b      	sxtb	r3, r3
 8006602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006606:	e7eb      	b.n	80065e0 <xQueueGiveFromISR+0x7c>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	e7fe      	b.n	800661c <xQueueGiveFromISR+0xb8>
	...

08006620 <xQueueGenericReceive>:
{
 8006620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	4688      	mov	r8, r1
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 800662a:	4604      	mov	r4, r0
 800662c:	b950      	cbnz	r0, 8006644 <xQueueGenericReceive+0x24>
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	b672      	cpsid	i
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	b662      	cpsie	i
 8006642:	e7fe      	b.n	8006642 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006644:	2900      	cmp	r1, #0
 8006646:	f040 80a9 	bne.w	800679c <xQueueGenericReceive+0x17c>
 800664a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a5 	beq.w	800679c <xQueueGenericReceive+0x17c>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	e7fe      	b.n	8006666 <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006668:	9e01      	ldr	r6, [sp, #4]
 800666a:	2e00      	cmp	r6, #0
 800666c:	f000 809c 	beq.w	80067a8 <xQueueGenericReceive+0x188>
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	b672      	cpsid	i
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	b662      	cpsie	i
 8006684:	e7fe      	b.n	8006684 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006686:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006688:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800668a:	2b00      	cmp	r3, #0
 800668c:	d06d      	beq.n	800676a <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800668e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006692:	e05f      	b.n	8006754 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006694:	9d01      	ldr	r5, [sp, #4]
 8006696:	b91d      	cbnz	r5, 80066a0 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8006698:	f7ff fb32 	bl	8005d00 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800669c:	4628      	mov	r0, r5
 800669e:	e067      	b.n	8006770 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 80066a0:	b916      	cbnz	r6, 80066a8 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 80066a2:	a802      	add	r0, sp, #8
 80066a4:	f000 fce0 	bl	8007068 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80066a8:	f7ff fb2a 	bl	8005d00 <vPortExitCritical>
		vTaskSuspendAll();
 80066ac:	f000 faa2 	bl	8006bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b0:	f7ff fb00 	bl	8005cb4 <vPortEnterCritical>
 80066b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d101      	bne.n	80066c0 <xQueueGenericReceive+0xa0>
 80066bc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80066c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80066c4:	2bff      	cmp	r3, #255	; 0xff
 80066c6:	d101      	bne.n	80066cc <xQueueGenericReceive+0xac>
 80066c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066cc:	f7ff fb18 	bl	8005d00 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d0:	a901      	add	r1, sp, #4
 80066d2:	a802      	add	r0, sp, #8
 80066d4:	f000 fcd8 	bl	8007088 <xTaskCheckForTimeOut>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d152      	bne.n	8006782 <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 80066dc:	f7ff faea 	bl	8005cb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80066e2:	f7ff fb0d 	bl	8005d00 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	d145      	bne.n	8006776 <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	b933      	cbnz	r3, 80066fc <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 80066ee:	f7ff fae1 	bl	8005cb4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80066f2:	6860      	ldr	r0, [r4, #4]
 80066f4:	f000 fd1c 	bl	8007130 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80066f8:	f7ff fb02 	bl	8005d00 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066fc:	9901      	ldr	r1, [sp, #4]
 80066fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006702:	f000 fc51 	bl	8006fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006706:	4620      	mov	r0, r4
 8006708:	f7ff fd32 	bl	8006170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800670c:	f000 fb1c 	bl	8006d48 <xTaskResumeAll>
 8006710:	b938      	cbnz	r0, 8006722 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8006712:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006716:	f8ca 3000 	str.w	r3, [sl]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006724:	f7ff fac6 	bl	8005cb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006728:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800672a:	2d00      	cmp	r5, #0
 800672c:	d0b2      	beq.n	8006694 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800672e:	4641      	mov	r1, r8
 8006730:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006732:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006734:	f7ff fd07 	bl	8006146 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8006738:	f1b9 0f00 	cmp.w	r9, #0
 800673c:	d1a3      	bne.n	8006686 <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800673e:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006740:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006742:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006744:	b913      	cbnz	r3, 800674c <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006746:	f000 fd8d 	bl	8007264 <pvTaskIncrementMutexHeldCount>
 800674a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	b163      	cbz	r3, 800676a <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006750:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006754:	f000 fc44 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006758:	b138      	cbz	r0, 800676a <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 800675a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675e:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <xQueueGenericReceive+0x190>)
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800676a:	f7ff fac9 	bl	8005d00 <vPortExitCritical>
				return pdPASS;
 800676e:	2001      	movs	r0, #1
}
 8006770:	b004      	add	sp, #16
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff fcfa 	bl	8006170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800677c:	f000 fae4 	bl	8006d48 <xTaskResumeAll>
 8006780:	e7cf      	b.n	8006722 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fcf4 	bl	8006170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006788:	f000 fade 	bl	8006d48 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800678c:	f7ff fa92 	bl	8005cb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006790:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8006792:	f7ff fab5 	bl	8005d00 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006796:	2d00      	cmp	r5, #0
 8006798:	d1c3      	bne.n	8006722 <xQueueGenericReceive+0x102>
 800679a:	e77f      	b.n	800669c <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800679c:	f000 fcb8 	bl	8007110 <xTaskGetSchedulerState>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	f43f af61 	beq.w	8006668 <xQueueGenericReceive+0x48>
 80067a6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80067a8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80067aa:	f8df a004 	ldr.w	sl, [pc, #4]	; 80067b0 <xQueueGenericReceive+0x190>
 80067ae:	e7b9      	b.n	8006724 <xQueueGenericReceive+0x104>
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <xQueueReceiveFromISR>:
{
 80067b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	4689      	mov	r9, r1
 80067ba:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80067bc:	4605      	mov	r5, r0
 80067be:	b950      	cbnz	r0, 80067d6 <xQueueReceiveFromISR+0x22>
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	e7fe      	b.n	80067d4 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d6:	bb81      	cbnz	r1, 800683a <xQueueReceiveFromISR+0x86>
 80067d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067da:	b373      	cbz	r3, 800683a <xQueueReceiveFromISR+0x86>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	b672      	cpsid	i
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	b662      	cpsie	i
 80067f0:	e7fe      	b.n	80067f0 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80067f2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067f6:	4649      	mov	r1, r9
 80067f8:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80067fa:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80067fc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067fe:	f7ff fca2 	bl	8006146 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006802:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006804:	1c73      	adds	r3, r6, #1
 8006806:	d113      	bne.n	8006830 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006808:	692b      	ldr	r3, [r5, #16]
 800680a:	b90b      	cbnz	r3, 8006810 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 800680c:	2001      	movs	r0, #1
 800680e:	e00b      	b.n	8006828 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006810:	f105 0010 	add.w	r0, r5, #16
 8006814:	f000 fbe4 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006818:	2800      	cmp	r0, #0
 800681a:	d0f7      	beq.n	800680c <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	d0f4      	beq.n	800680c <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006822:	2001      	movs	r0, #1
 8006824:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8006828:	f387 8811 	msr	BASEPRI, r7
}
 800682c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006830:	3601      	adds	r6, #1
 8006832:	b276      	sxtb	r6, r6
 8006834:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8006838:	e7e8      	b.n	800680c <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800683a:	f7ff fb2b 	bl	8005e94 <vPortValidateInterruptPriority>
	__asm volatile
 800683e:	f3ef 8711 	mrs	r7, BASEPRI
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	b672      	cpsid	i
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006856:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006858:	2c00      	cmp	r4, #0
 800685a:	d1ca      	bne.n	80067f2 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 800685c:	4620      	mov	r0, r4
 800685e:	e7e3      	b.n	8006828 <xQueueReceiveFromISR+0x74>

08006860 <uxQueueMessagesWaiting>:
{
 8006860:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8006862:	4604      	mov	r4, r0
 8006864:	b950      	cbnz	r0, 800687c <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	b672      	cpsid	i
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	b662      	cpsie	i
 800687a:	e7fe      	b.n	800687a <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 800687c:	f7ff fa1a 	bl	8005cb4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006880:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8006882:	f7ff fa3d 	bl	8005d00 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006886:	4620      	mov	r0, r4
 8006888:	bd10      	pop	{r4, pc}

0800688a <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800688a:	b950      	cbnz	r0, 80068a2 <uxQueueMessagesWaitingFromISR+0x18>
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	b672      	cpsid	i
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	b662      	cpsie	i
 80068a0:	e7fe      	b.n	80068a0 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80068a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80068a4:	4770      	bx	lr
	...

080068a8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <vQueueUnregisterQueue+0x24>)
	{
 80068ac:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068ae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80068b2:	684c      	ldr	r4, [r1, #4]
 80068b4:	4284      	cmp	r4, r0
 80068b6:	d104      	bne.n	80068c2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068b8:	2000      	movs	r0, #0
 80068ba:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068be:	6048      	str	r0, [r1, #4]
				break;
 80068c0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068c2:	3301      	adds	r3, #1
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d1f2      	bne.n	80068ae <vQueueUnregisterQueue+0x6>
 80068c8:	bd10      	pop	{r4, pc}
 80068ca:	bf00      	nop
 80068cc:	200083c4 	.word	0x200083c4

080068d0 <vQueueDelete>:
{
 80068d0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80068d2:	4604      	mov	r4, r0
 80068d4:	b950      	cbnz	r0, 80068ec <vQueueDelete+0x1c>
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	e7fe      	b.n	80068ea <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 80068ec:	f7ff ffdc 	bl	80068a8 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 80068f0:	4620      	mov	r0, r4
}
 80068f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 80068f6:	f7ff bbb7 	b.w	8006068 <vPortFree>
	...

080068fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fc:	4a06      	ldr	r2, [pc, #24]	; (8006918 <prvResetNextTaskUnblockTime+0x1c>)
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	6819      	ldr	r1, [r3, #0]
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <prvResetNextTaskUnblockTime+0x20>)
 8006904:	b919      	cbnz	r1, 800690e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006912:	68d2      	ldr	r2, [r2, #12]
 8006914:	6852      	ldr	r2, [r2, #4]
 8006916:	e7f8      	b.n	800690a <prvResetNextTaskUnblockTime+0xe>
 8006918:	200080dc 	.word	0x200080dc
 800691c:	200081b4 	.word	0x200081b4

08006920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8006924:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006926:	4e1b      	ldr	r6, [pc, #108]	; (8006994 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8006928:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800692a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692c:	6830      	ldr	r0, [r6, #0]
 800692e:	3004      	adds	r0, #4
 8006930:	f7ff f950 	bl	8005bd4 <uxListRemove>
 8006934:	4633      	mov	r3, r6
 8006936:	b940      	cbnz	r0, 800694a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006938:	6831      	ldr	r1, [r6, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	4e16      	ldr	r6, [pc, #88]	; (8006998 <prvAddCurrentTaskToDelayedList+0x78>)
 800693e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	4088      	lsls	r0, r1
 8006944:	ea22 0200 	bic.w	r2, r2, r0
 8006948:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800694a:	1c62      	adds	r2, r4, #1
 800694c:	d107      	bne.n	800695e <prvAddCurrentTaskToDelayedList+0x3e>
 800694e:	b137      	cbz	r7, 800695e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	4812      	ldr	r0, [pc, #72]	; (800699c <prvAddCurrentTaskToDelayedList+0x7c>)
 8006954:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800695a:	f7ff b918 	b.w	8005b8e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800695e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006960:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8006962:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006964:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8006966:	d907      	bls.n	8006978 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <prvAddCurrentTaskToDelayedList+0x80>)
 800696a:	6810      	ldr	r0, [r2, #0]
 800696c:	6819      	ldr	r1, [r3, #0]
}
 800696e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006972:	3104      	adds	r1, #4
 8006974:	f7ff b917 	b.w	8005ba6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006978:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <prvAddCurrentTaskToDelayedList+0x84>)
 800697a:	6810      	ldr	r0, [r2, #0]
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	3104      	adds	r1, #4
 8006980:	f7ff f911 	bl	8005ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006984:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <prvAddCurrentTaskToDelayedList+0x88>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4294      	cmp	r4, r2
 800698a:	d200      	bcs.n	800698e <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800698c:	601c      	str	r4, [r3, #0]
 800698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006990:	200081fc 	.word	0x200081fc
 8006994:	200080d8 	.word	0x200080d8
 8006998:	20008184 	.word	0x20008184
 800699c:	200081d4 	.word	0x200081d4
 80069a0:	200080e0 	.word	0x200080e0
 80069a4:	200080dc 	.word	0x200080dc
 80069a8:	200081b4 	.word	0x200081b4

080069ac <prvTaskIsTaskSuspended.part.0>:
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	e7fe      	b.n	80069c0 <prvTaskIsTaskSuspended.part.0+0x14>
	...

080069c4 <xTaskCreate>:
	{
 80069c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80069cc:	4680      	mov	r8, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d2:	4650      	mov	r0, sl
	{
 80069d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	f7ff fab3 	bl	8005f40 <pvPortMalloc>
			if( pxStack != NULL )
 80069da:	4607      	mov	r7, r0
 80069dc:	2800      	cmp	r0, #0
 80069de:	f000 809e 	beq.w	8006b1e <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80069e2:	2058      	movs	r0, #88	; 0x58
 80069e4:	f7ff faac 	bl	8005f40 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80069e8:	4604      	mov	r4, r0
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f000 8094 	beq.w	8006b18 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069f0:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 80069f2:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069f4:	21a5      	movs	r1, #165	; 0xa5
 80069f6:	4638      	mov	r0, r7
 80069f8:	f00a fa1e 	bl	8010e38 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80069fc:	f1aa 0a04 	sub.w	sl, sl, #4
 8006a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a02:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006a06:	449a      	add	sl, r3
 8006a08:	1e6b      	subs	r3, r5, #1
 8006a0a:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a0c:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a10:	7859      	ldrb	r1, [r3, #1]
 8006a12:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8006a16:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006a1a:	b109      	cbz	r1, 8006a20 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	d1f7      	bne.n	8006a10 <xTaskCreate+0x4c>
 8006a20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a22:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a26:	1d27      	adds	r7, r4, #4
 8006a28:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a2a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a2e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8006a30:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8006a34:	bf28      	it	cs
 8006a36:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006a38:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006a3a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a40:	f7ff f8a2 	bl	8005b88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a44:	f104 0018 	add.w	r0, r4, #24
 8006a48:	f7ff f89e 	bl	8005b88 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006a4c:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a50:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a52:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a54:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a56:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a58:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a5a:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 8006a5c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a60:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a64:	f7ff f8fc 	bl	8005c60 <pxPortInitialiseStack>
 8006a68:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006a6a:	b106      	cbz	r6, 8006a6e <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a6c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8006a6e:	f7ff f921 	bl	8005cb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006a72:	4b32      	ldr	r3, [pc, #200]	; (8006b3c <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8006a74:	4e32      	ldr	r6, [pc, #200]	; (8006b40 <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006b6c <xTaskCreate+0x1a8>
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006a80:	6835      	ldr	r5, [r6, #0]
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	d14e      	bne.n	8006b24 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 8006a86:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d11d      	bne.n	8006aca <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a8e:	eb08 0005 	add.w	r0, r8, r5
 8006a92:	3514      	adds	r5, #20
 8006a94:	f7ff f86d 	bl	8005b72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a98:	2d8c      	cmp	r5, #140	; 0x8c
 8006a9a:	d1f8      	bne.n	8006a8e <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 8006a9c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8006b70 <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 8006aa0:	4d28      	ldr	r5, [pc, #160]	; (8006b44 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f7ff f865 	bl	8005b72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7ff f862 	bl	8005b72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aae:	4826      	ldr	r0, [pc, #152]	; (8006b48 <xTaskCreate+0x184>)
 8006ab0:	f7ff f85f 	bl	8005b72 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006ab4:	4825      	ldr	r0, [pc, #148]	; (8006b4c <xTaskCreate+0x188>)
 8006ab6:	f7ff f85c 	bl	8005b72 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006aba:	4825      	ldr	r0, [pc, #148]	; (8006b50 <xTaskCreate+0x18c>)
 8006abc:	f7ff f859 	bl	8005b72 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac0:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <xTaskCreate+0x190>)
 8006ac2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <xTaskCreate+0x194>)
 8006ac8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 8006acc:	2501      	movs	r5, #1
 8006ace:	4924      	ldr	r1, [pc, #144]	; (8006b60 <xTaskCreate+0x19c>)
		uxTaskNumber++;
 8006ad0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006ad2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ada:	fa05 f302 	lsl.w	r3, r5, r2
 8006ade:	4303      	orrs	r3, r0
 8006ae0:	2014      	movs	r0, #20
 8006ae2:	600b      	str	r3, [r1, #0]
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	fb00 8002 	mla	r0, r0, r2, r8
 8006aea:	f7ff f850 	bl	8005b8e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006aee:	f7ff f907 	bl	8005d00 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006af2:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <xTaskCreate+0x1a0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	b163      	cbz	r3, 8006b12 <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af8:	6833      	ldr	r3, [r6, #0]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d207      	bcs.n	8006b12 <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 8006b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <xTaskCreate+0x1a4>)
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
	}
 8006b12:	4628      	mov	r0, r5
 8006b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff faa5 	bl	8006068 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b22:	e7f6      	b.n	8006b12 <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 8006b24:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <xTaskCreate+0x1a0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ce      	bne.n	8006aca <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8c9      	bhi.n	8006aca <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 8006b36:	6034      	str	r4, [r6, #0]
 8006b38:	e7c7      	b.n	8006aca <xTaskCreate+0x106>
 8006b3a:	bf00      	nop
 8006b3c:	20008170 	.word	0x20008170
 8006b40:	200080d8 	.word	0x200080d8
 8006b44:	2000819c 	.word	0x2000819c
 8006b48:	200081bc 	.word	0x200081bc
 8006b4c:	200081e8 	.word	0x200081e8
 8006b50:	200081d4 	.word	0x200081d4
 8006b54:	200080dc 	.word	0x200080dc
 8006b58:	200080e0 	.word	0x200080e0
 8006b5c:	20008180 	.word	0x20008180
 8006b60:	20008184 	.word	0x20008184
 8006b64:	200081d0 	.word	0x200081d0
 8006b68:	e000ed04 	.word	0xe000ed04
 8006b6c:	200080e4 	.word	0x200080e4
 8006b70:	20008188 	.word	0x20008188

08006b74 <vTaskStartScheduler>:
{
 8006b74:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <vTaskStartScheduler+0x68>)
 8006b78:	2400      	movs	r4, #0
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	4918      	ldr	r1, [pc, #96]	; (8006be0 <vTaskStartScheduler+0x6c>)
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	4623      	mov	r3, r4
 8006b82:	9400      	str	r4, [sp, #0]
 8006b84:	4817      	ldr	r0, [pc, #92]	; (8006be4 <vTaskStartScheduler+0x70>)
 8006b86:	f7ff ff1d 	bl	80069c4 <xTaskCreate>
	if( xReturn == pdPASS )
 8006b8a:	2801      	cmp	r0, #1
 8006b8c:	d116      	bne.n	8006bbc <vTaskStartScheduler+0x48>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <vTaskStartScheduler+0x74>)
 8006ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006baa:	4b10      	ldr	r3, [pc, #64]	; (8006bec <vTaskStartScheduler+0x78>)
 8006bac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <vTaskStartScheduler+0x7c>)
 8006bb0:	601c      	str	r4, [r3, #0]
}
 8006bb2:	b002      	add	sp, #8
 8006bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006bb8:	f7ff b918 	b.w	8005dec <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d10a      	bne.n	8006bd6 <vTaskStartScheduler+0x62>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	e7fe      	b.n	8006bd4 <vTaskStartScheduler+0x60>
}
 8006bd6:	b002      	add	sp, #8
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	200081b0 	.word	0x200081b0
 8006be0:	08011d29 	.word	0x08011d29
 8006be4:	08006e89 	.word	0x08006e89
 8006be8:	200081b4 	.word	0x200081b4
 8006bec:	200081d0 	.word	0x200081d0
 8006bf0:	200081fc 	.word	0x200081fc

08006bf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006bf4:	4a02      	ldr	r2, [pc, #8]	; (8006c00 <vTaskSuspendAll+0xc>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000817c 	.word	0x2000817c

08006c04 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <xTaskGetTickCount+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200081fc 	.word	0x200081fc

08006c10 <xTaskGetTickCountFromISR>:
{
 8006c10:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c12:	f7ff f93f 	bl	8005e94 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8006c16:	4b01      	ldr	r3, [pc, #4]	; (8006c1c <xTaskGetTickCountFromISR+0xc>)
 8006c18:	6818      	ldr	r0, [r3, #0]
}
 8006c1a:	bd08      	pop	{r3, pc}
 8006c1c:	200081fc 	.word	0x200081fc

08006c20 <xTaskIncrementTick>:
{
 8006c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c24:	4b3d      	ldr	r3, [pc, #244]	; (8006d1c <xTaskIncrementTick+0xfc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d155      	bne.n	8006cd8 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	; (8006d20 <xTaskIncrementTick+0x100>)
 8006c2e:	681c      	ldr	r4, [r3, #0]
 8006c30:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006c32:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006c34:	b9cc      	cbnz	r4, 8006c6a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8006c36:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <xTaskIncrementTick+0x104>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	b152      	cbz	r2, 8006c54 <xTaskIncrementTick+0x34>
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	e7fe      	b.n	8006c52 <xTaskIncrementTick+0x32>
 8006c54:	4a34      	ldr	r2, [pc, #208]	; (8006d28 <xTaskIncrementTick+0x108>)
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	6810      	ldr	r0, [r2, #0]
 8006c5a:	6018      	str	r0, [r3, #0]
 8006c5c:	6011      	str	r1, [r2, #0]
 8006c5e:	4a33      	ldr	r2, [pc, #204]	; (8006d2c <xTaskIncrementTick+0x10c>)
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	f7ff fe49 	bl	80068fc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c6a:	4d31      	ldr	r5, [pc, #196]	; (8006d30 <xTaskIncrementTick+0x110>)
 8006c6c:	f04f 0b00 	mov.w	fp, #0
 8006c70:	4f30      	ldr	r7, [pc, #192]	; (8006d34 <xTaskIncrementTick+0x114>)
 8006c72:	682b      	ldr	r3, [r5, #0]
 8006c74:	429c      	cmp	r4, r3
 8006c76:	d33e      	bcc.n	8006cf6 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c78:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006d24 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8006c7c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006d44 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c80:	f8d8 2000 	ldr.w	r2, [r8]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	bb72      	cbnz	r2, 8006ce6 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c8c:	602a      	str	r2, [r5, #0]
					break;
 8006c8e:	e032      	b.n	8006cf6 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c90:	f106 0a04 	add.w	sl, r6, #4
 8006c94:	4650      	mov	r0, sl
 8006c96:	f7fe ff9d 	bl	8005bd4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c9a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006c9c:	b119      	cbz	r1, 8006ca6 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c9e:	f106 0018 	add.w	r0, r6, #24
 8006ca2:	f7fe ff97 	bl	8005bd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ca6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f8d9 3000 	ldr.w	r3, [r9]
 8006cae:	f04f 0e14 	mov.w	lr, #20
 8006cb2:	fa02 f100 	lsl.w	r1, r2, r0
 8006cb6:	4319      	orrs	r1, r3
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <xTaskIncrementTick+0x118>)
 8006cba:	f8c9 1000 	str.w	r1, [r9]
 8006cbe:	4651      	mov	r1, sl
 8006cc0:	fb0e 3000 	mla	r0, lr, r0, r3
 8006cc4:	f7fe ff63 	bl	8005b8e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc8:	6838      	ldr	r0, [r7, #0]
 8006cca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006ccc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006cce:	4291      	cmp	r1, r2
 8006cd0:	bf28      	it	cs
 8006cd2:	f04f 0b01 	movcs.w	fp, #1
 8006cd6:	e7d3      	b.n	8006c80 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8006cd8:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006cda:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e011      	b.n	8006d0a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ce6:	f8d8 2000 	ldr.w	r2, [r8]
 8006cea:	68d2      	ldr	r2, [r2, #12]
 8006cec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006cf0:	428c      	cmp	r4, r1
 8006cf2:	d2cd      	bcs.n	8006c90 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8006cf4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <xTaskIncrementTick+0x118>)
 8006cfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006cfc:	2214      	movs	r2, #20
 8006cfe:	434a      	muls	r2, r1
 8006d00:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8006d02:	2a02      	cmp	r2, #2
 8006d04:	bf28      	it	cs
 8006d06:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <xTaskIncrementTick+0x120>)
 8006d0c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	bf18      	it	ne
 8006d12:	f04f 0b01 	movne.w	fp, #1
}
 8006d16:	4658      	mov	r0, fp
 8006d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	2000817c 	.word	0x2000817c
 8006d20:	200081fc 	.word	0x200081fc
 8006d24:	200080dc 	.word	0x200080dc
 8006d28:	200080e0 	.word	0x200080e0
 8006d2c:	200081b8 	.word	0x200081b8
 8006d30:	200081b4 	.word	0x200081b4
 8006d34:	200080d8 	.word	0x200080d8
 8006d38:	200080e4 	.word	0x200080e4
 8006d3c:	20008178 	.word	0x20008178
 8006d40:	20008200 	.word	0x20008200
 8006d44:	20008184 	.word	0x20008184

08006d48 <xTaskResumeAll>:
{
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8006d4c:	4c32      	ldr	r4, [pc, #200]	; (8006e18 <xTaskResumeAll+0xd0>)
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	b953      	cbnz	r3, 8006d68 <xTaskResumeAll+0x20>
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	b672      	cpsid	i
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	b662      	cpsie	i
 8006d66:	e7fe      	b.n	8006d66 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8006d68:	f7fe ffa4 	bl	8005cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d72:	6824      	ldr	r4, [r4, #0]
 8006d74:	b12c      	cbz	r4, 8006d82 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8006d76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006d78:	f7fe ffc2 	bl	8005d00 <vPortExitCritical>
}
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d82:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <xTaskResumeAll+0xd4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f5      	beq.n	8006d76 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d8a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8006e34 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8006d8e:	4f24      	ldr	r7, [pc, #144]	; (8006e20 <xTaskResumeAll+0xd8>)
 8006d90:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006e38 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d94:	f8d9 3000 	ldr.w	r3, [r9]
 8006d98:	b9e3      	cbnz	r3, 8006dd4 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8006d9a:	b10c      	cbz	r4, 8006da0 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8006d9c:	f7ff fdae 	bl	80068fc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006da0:	4d20      	ldr	r5, [pc, #128]	; (8006e24 <xTaskResumeAll+0xdc>)
 8006da2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006da4:	b144      	cbz	r4, 8006db8 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8006da6:	4e20      	ldr	r6, [pc, #128]	; (8006e28 <xTaskResumeAll+0xe0>)
 8006da8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006daa:	f7ff ff39 	bl	8006c20 <xTaskIncrementTick>
 8006dae:	b100      	cbz	r0, 8006db2 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8006db0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006db2:	3c01      	subs	r4, #1
 8006db4:	d1f9      	bne.n	8006daa <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8006db6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <xTaskResumeAll+0xe0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0da      	beq.n	8006d76 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	4b19      	ldr	r3, [pc, #100]	; (8006e2c <xTaskResumeAll+0xe4>)
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006dd0:	2401      	movs	r4, #1
 8006dd2:	e7d1      	b.n	8006d78 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006dd4:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8006dd8:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006dda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ddc:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dde:	f104 0018 	add.w	r0, r4, #24
 8006de2:	f7fe fef7 	bl	8005bd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7fe fef4 	bl	8005bd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	2014      	movs	r0, #20
 8006df2:	fa05 f302 	lsl.w	r3, r5, r2
 8006df6:	fb00 8002 	mla	r0, r0, r2, r8
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	f7fe fec5 	bl	8005b8e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <xTaskResumeAll+0xe8>)
 8006e06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d3c1      	bcc.n	8006d94 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <xTaskResumeAll+0xe0>)
 8006e12:	601d      	str	r5, [r3, #0]
 8006e14:	e7be      	b.n	8006d94 <xTaskResumeAll+0x4c>
 8006e16:	bf00      	nop
 8006e18:	2000817c 	.word	0x2000817c
 8006e1c:	20008170 	.word	0x20008170
 8006e20:	20008184 	.word	0x20008184
 8006e24:	20008178 	.word	0x20008178
 8006e28:	20008200 	.word	0x20008200
 8006e2c:	e000ed04 	.word	0xe000ed04
 8006e30:	200080d8 	.word	0x200080d8
 8006e34:	200081bc 	.word	0x200081bc
 8006e38:	200080e4 	.word	0x200080e4

08006e3c <vTaskDelay>:
	{
 8006e3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e3e:	b940      	cbnz	r0, 8006e52 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8006e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <vTaskDelay+0x44>)
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <vTaskDelay+0x48>)
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	b151      	cbz	r1, 8006e6e <vTaskDelay+0x32>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	e7fe      	b.n	8006e6c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006e6e:	f7ff fec1 	bl	8006bf4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e72:	f7ff fd55 	bl	8006920 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006e76:	f7ff ff67 	bl	8006d48 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0e0      	beq.n	8006e40 <vTaskDelay+0x4>
 8006e7e:	bd08      	pop	{r3, pc}
 8006e80:	e000ed04 	.word	0xe000ed04
 8006e84:	2000817c 	.word	0x2000817c

08006e88 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006e88:	4e18      	ldr	r6, [pc, #96]	; (8006eec <prvIdleTask+0x64>)
{
 8006e8a:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e8c:	4c18      	ldr	r4, [pc, #96]	; (8006ef0 <prvIdleTask+0x68>)
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	b973      	cbnz	r3, 8006eb0 <prvIdleTask+0x28>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e92:	4b18      	ldr	r3, [pc, #96]	; (8006ef4 <prvIdleTask+0x6c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d907      	bls.n	8006eaa <prvIdleTask+0x22>
				taskYIELD();
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <prvIdleTask+0x70>)
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8006eaa:	f008 fadf 	bl	800f46c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006eae:	e7ed      	b.n	8006e8c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8006eb0:	f7ff fea0 	bl	8006bf4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006eb4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8006eb6:	f7ff ff47 	bl	8006d48 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	d0e7      	beq.n	8006e8e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8006ebe:	f7fe fef9 	bl	8005cb4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ec2:	68f3      	ldr	r3, [r6, #12]
 8006ec4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec6:	1d28      	adds	r0, r5, #4
 8006ec8:	f7fe fe84 	bl	8005bd4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006ecc:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <prvIdleTask+0x74>)
 8006ece:	6813      	ldr	r3, [r2, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8006eda:	f7fe ff11 	bl	8005d00 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006ede:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006ee0:	f7ff f8c2 	bl	8006068 <vPortFree>
			vPortFree( pxTCB );
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f7ff f8bf 	bl	8006068 <vPortFree>
 8006eea:	e7d0      	b.n	8006e8e <prvIdleTask+0x6>
 8006eec:	200081e8 	.word	0x200081e8
 8006ef0:	20008174 	.word	0x20008174
 8006ef4:	200080e4 	.word	0x200080e4
 8006ef8:	e000ed04 	.word	0xe000ed04
 8006efc:	20008170 	.word	0x20008170

08006f00 <vTaskSwitchContext>:
{
 8006f00:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <vTaskSwitchContext+0x94>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <vTaskSwitchContext+0x98>)
 8006f08:	b112      	cbz	r2, 8006f10 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8006f10:	4c22      	ldr	r4, [pc, #136]	; (8006f9c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8006f12:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006f1e:	d10b      	bne.n	8006f38 <vTaskSwitchContext+0x38>
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006f26:	d107      	bne.n	8006f38 <vTaskSwitchContext+0x38>
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006f2e:	d103      	bne.n	8006f38 <vTaskSwitchContext+0x38>
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8006f36:	d004      	beq.n	8006f42 <vTaskSwitchContext+0x42>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	3134      	adds	r1, #52	; 0x34
 8006f3e:	f008 fa96 	bl	800f46e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <vTaskSwitchContext+0xa0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006f46:	fab3 f383 	clz	r3, r3
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2214      	movs	r2, #20
 8006f4e:	4915      	ldr	r1, [pc, #84]	; (8006fa4 <vTaskSwitchContext+0xa4>)
 8006f50:	f1c3 031f 	rsb	r3, r3, #31
 8006f54:	435a      	muls	r2, r3
 8006f56:	588d      	ldr	r5, [r1, r2]
 8006f58:	1888      	adds	r0, r1, r2
 8006f5a:	b955      	cbnz	r5, 8006f72 <vTaskSwitchContext+0x72>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	b672      	cpsid	i
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	b662      	cpsie	i
 8006f70:	e7fe      	b.n	8006f70 <vTaskSwitchContext+0x70>
 8006f72:	6845      	ldr	r5, [r0, #4]
 8006f74:	3208      	adds	r2, #8
 8006f76:	686d      	ldr	r5, [r5, #4]
 8006f78:	440a      	add	r2, r1
 8006f7a:	4295      	cmp	r5, r2
 8006f7c:	6045      	str	r5, [r0, #4]
 8006f7e:	bf04      	itt	eq
 8006f80:	686a      	ldreq	r2, [r5, #4]
 8006f82:	6042      	streq	r2, [r0, #4]
 8006f84:	2214      	movs	r2, #20
 8006f86:	fb02 1303 	mla	r3, r2, r3, r1
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	2000817c 	.word	0x2000817c
 8006f98:	20008200 	.word	0x20008200
 8006f9c:	200080d8 	.word	0x200080d8
 8006fa0:	20008184 	.word	0x20008184
 8006fa4:	200080e4 	.word	0x200080e4

08006fa8 <vTaskPlaceOnEventList>:
{
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006fac:	b950      	cbnz	r0, 8006fc4 <vTaskPlaceOnEventList+0x1c>
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	b672      	cpsid	i
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	b662      	cpsie	i
 8006fc2:	e7fe      	b.n	8006fc2 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <vTaskPlaceOnEventList+0x34>)
 8006fc6:	6819      	ldr	r1, [r3, #0]
 8006fc8:	3118      	adds	r1, #24
 8006fca:	f7fe fdec 	bl	8005ba6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fce:	4620      	mov	r0, r4
 8006fd0:	2101      	movs	r1, #1
}
 8006fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fd6:	f7ff bca3 	b.w	8006920 <prvAddCurrentTaskToDelayedList>
 8006fda:	bf00      	nop
 8006fdc:	200080d8 	.word	0x200080d8

08006fe0 <xTaskRemoveFromEventList>:
{
 8006fe0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fe2:	68c3      	ldr	r3, [r0, #12]
 8006fe4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006fe6:	b954      	cbnz	r4, 8006ffe <xTaskRemoveFromEventList+0x1e>
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
 8006ffc:	e7fe      	b.n	8006ffc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ffe:	f104 0518 	add.w	r5, r4, #24
 8007002:	4628      	mov	r0, r5
 8007004:	f7fe fde6 	bl	8005bd4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <xTaskRemoveFromEventList+0x70>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	b9db      	cbnz	r3, 8007046 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800700e:	1d25      	adds	r5, r4, #4
 8007010:	4628      	mov	r0, r5
 8007012:	f7fe fddf 	bl	8005bd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007016:	490f      	ldr	r1, [pc, #60]	; (8007054 <xTaskRemoveFromEventList+0x74>)
 8007018:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800701a:	2301      	movs	r3, #1
 800701c:	6808      	ldr	r0, [r1, #0]
 800701e:	4093      	lsls	r3, r2
 8007020:	4303      	orrs	r3, r0
 8007022:	2014      	movs	r0, #20
 8007024:	600b      	str	r3, [r1, #0]
 8007026:	4629      	mov	r1, r5
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <xTaskRemoveFromEventList+0x78>)
 800702a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800702e:	f7fe fdae 	bl	8005b8e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <xTaskRemoveFromEventList+0x7c>)
 8007034:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	429a      	cmp	r2, r3
 800703c:	d906      	bls.n	800704c <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800703e:	2001      	movs	r0, #1
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <xTaskRemoveFromEventList+0x80>)
 8007042:	6018      	str	r0, [r3, #0]
 8007044:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007046:	4629      	mov	r1, r5
 8007048:	4806      	ldr	r0, [pc, #24]	; (8007064 <xTaskRemoveFromEventList+0x84>)
 800704a:	e7f0      	b.n	800702e <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800704c:	2000      	movs	r0, #0
}
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	2000817c 	.word	0x2000817c
 8007054:	20008184 	.word	0x20008184
 8007058:	200080e4 	.word	0x200080e4
 800705c:	200080d8 	.word	0x200080d8
 8007060:	20008200 	.word	0x20008200
 8007064:	200081bc 	.word	0x200081bc

08007068 <vTaskSetTimeOutState>:
{
 8007068:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800706a:	b908      	cbnz	r0, 8007070 <vTaskSetTimeOutState+0x8>
 800706c:	f7ff fc9e 	bl	80069ac <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007070:	4b03      	ldr	r3, [pc, #12]	; (8007080 <vTaskSetTimeOutState+0x18>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007076:	4b03      	ldr	r3, [pc, #12]	; (8007084 <vTaskSetTimeOutState+0x1c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6043      	str	r3, [r0, #4]
 800707c:	bd08      	pop	{r3, pc}
 800707e:	bf00      	nop
 8007080:	200081b8 	.word	0x200081b8
 8007084:	200081fc 	.word	0x200081fc

08007088 <xTaskCheckForTimeOut>:
{
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800708c:	4604      	mov	r4, r0
 800708e:	b950      	cbnz	r0, 80070a6 <xTaskCheckForTimeOut+0x1e>
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	e7fe      	b.n	80070a4 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80070a6:	b951      	cbnz	r1, 80070be <xTaskCheckForTimeOut+0x36>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	e7fe      	b.n	80070bc <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80070be:	f7fe fdf9 	bl	8005cb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <xTaskCheckForTimeOut+0x74>)
 80070c4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	d010      	beq.n	80070ee <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070cc:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <xTaskCheckForTimeOut+0x78>)
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	4290      	cmp	r0, r2
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	d001      	beq.n	80070dc <xTaskCheckForTimeOut+0x54>
 80070d8:	4291      	cmp	r1, r2
 80070da:	d20d      	bcs.n	80070f8 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070dc:	1a88      	subs	r0, r1, r2
 80070de:	4283      	cmp	r3, r0
 80070e0:	d90a      	bls.n	80070f8 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80070e2:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 80070e4:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80070e6:	4413      	add	r3, r2
 80070e8:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80070ea:	f7ff ffbd 	bl	8007068 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80070ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80070f0:	f7fe fe06 	bl	8005d00 <vPortExitCritical>
}
 80070f4:	4620      	mov	r0, r4
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80070f8:	2401      	movs	r4, #1
 80070fa:	e7f9      	b.n	80070f0 <xTaskCheckForTimeOut+0x68>
 80070fc:	200081fc 	.word	0x200081fc
 8007100:	200081b8 	.word	0x200081b8

08007104 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007104:	2201      	movs	r2, #1
 8007106:	4b01      	ldr	r3, [pc, #4]	; (800710c <vTaskMissedYield+0x8>)
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	4770      	bx	lr
 800710c:	20008200 	.word	0x20008200

08007110 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <xTaskGetSchedulerState+0x18>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b133      	cbz	r3, 8007124 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <xTaskGetSchedulerState+0x1c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800711c:	bf0c      	ite	eq
 800711e:	2002      	moveq	r0, #2
 8007120:	2000      	movne	r0, #0
 8007122:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007124:	2001      	movs	r0, #1
	}
 8007126:	4770      	bx	lr
 8007128:	200081d0 	.word	0x200081d0
 800712c:	2000817c 	.word	0x2000817c

08007130 <vTaskPriorityInherit>:
	{
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8007134:	4604      	mov	r4, r0
 8007136:	2800      	cmp	r0, #0
 8007138:	d038      	beq.n	80071ac <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800713a:	4d1d      	ldr	r5, [pc, #116]	; (80071b0 <vTaskPriorityInherit+0x80>)
 800713c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800713e:	682a      	ldr	r2, [r5, #0]
 8007140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007142:	4293      	cmp	r3, r2
 8007144:	d232      	bcs.n	80071ac <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007146:	6982      	ldr	r2, [r0, #24]
 8007148:	2a00      	cmp	r2, #0
 800714a:	db04      	blt.n	8007156 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714c:	682a      	ldr	r2, [r5, #0]
 800714e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007150:	f1c2 0207 	rsb	r2, r2, #7
 8007154:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007156:	4e17      	ldr	r6, [pc, #92]	; (80071b4 <vTaskPriorityInherit+0x84>)
 8007158:	2714      	movs	r7, #20
 800715a:	6962      	ldr	r2, [r4, #20]
 800715c:	fb07 6303 	mla	r3, r7, r3, r6
 8007160:	429a      	cmp	r2, r3
 8007162:	d120      	bne.n	80071a6 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007164:	f104 0804 	add.w	r8, r4, #4
 8007168:	4640      	mov	r0, r8
 800716a:	f7fe fd33 	bl	8005bd4 <uxListRemove>
 800716e:	4a12      	ldr	r2, [pc, #72]	; (80071b8 <vTaskPriorityInherit+0x88>)
 8007170:	b948      	cbnz	r0, 8007186 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007172:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007174:	4347      	muls	r7, r0
 8007176:	59f3      	ldr	r3, [r6, r7]
 8007178:	b92b      	cbnz	r3, 8007186 <vTaskPriorityInherit+0x56>
 800717a:	2101      	movs	r1, #1
 800717c:	6813      	ldr	r3, [r2, #0]
 800717e:	4081      	lsls	r1, r0
 8007180:	ea23 0301 	bic.w	r3, r3, r1
 8007184:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007186:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8007188:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800718a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800718c:	2301      	movs	r3, #1
 800718e:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007190:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007192:	430b      	orrs	r3, r1
 8007194:	4641      	mov	r1, r8
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	2314      	movs	r3, #20
 800719a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800719e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80071a2:	f7fe bcf4 	b.w	8005b8e <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071a6:	682b      	ldr	r3, [r5, #0]
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	200080d8 	.word	0x200080d8
 80071b4:	200080e4 	.word	0x200080e4
 80071b8:	20008184 	.word	0x20008184

080071bc <xTaskPriorityDisinherit>:
	{
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80071be:	4604      	mov	r4, r0
 80071c0:	b908      	cbnz	r0, 80071c6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80071c2:	2000      	movs	r0, #0
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <xTaskPriorityDisinherit+0x9c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4298      	cmp	r0, r3
 80071cc:	d00a      	beq.n	80071e4 <xTaskPriorityDisinherit+0x28>
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	b672      	cpsid	i
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	b662      	cpsie	i
 80071e2:	e7fe      	b.n	80071e2 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80071e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80071e6:	b953      	cbnz	r3, 80071fe <xTaskPriorityDisinherit+0x42>
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	e7fe      	b.n	80071fc <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007200:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007202:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007204:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007206:	4291      	cmp	r1, r2
 8007208:	d0db      	beq.n	80071c2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d9      	bne.n	80071c2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800720e:	1d05      	adds	r5, r0, #4
 8007210:	4e12      	ldr	r6, [pc, #72]	; (800725c <xTaskPriorityDisinherit+0xa0>)
 8007212:	4628      	mov	r0, r5
 8007214:	f7fe fcde 	bl	8005bd4 <uxListRemove>
 8007218:	4a11      	ldr	r2, [pc, #68]	; (8007260 <xTaskPriorityDisinherit+0xa4>)
 800721a:	b950      	cbnz	r0, 8007232 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800721c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800721e:	2114      	movs	r1, #20
 8007220:	4379      	muls	r1, r7
 8007222:	5873      	ldr	r3, [r6, r1]
 8007224:	b92b      	cbnz	r3, 8007232 <xTaskPriorityDisinherit+0x76>
 8007226:	2001      	movs	r0, #1
 8007228:	6813      	ldr	r3, [r2, #0]
 800722a:	40b8      	lsls	r0, r7
 800722c:	ea23 0300 	bic.w	r3, r3, r0
 8007230:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007232:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007234:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007238:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800723c:	2401      	movs	r4, #1
 800723e:	6811      	ldr	r1, [r2, #0]
 8007240:	fa04 f003 	lsl.w	r0, r4, r3
 8007244:	4308      	orrs	r0, r1
 8007246:	4629      	mov	r1, r5
 8007248:	6010      	str	r0, [r2, #0]
 800724a:	2014      	movs	r0, #20
 800724c:	fb00 6003 	mla	r0, r0, r3, r6
 8007250:	f7fe fc9d 	bl	8005b8e <vListInsertEnd>
					xReturn = pdTRUE;
 8007254:	4620      	mov	r0, r4
	}
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	200080d8 	.word	0x200080d8
 800725c:	200080e4 	.word	0x200080e4
 8007260:	20008184 	.word	0x20008184

08007264 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <pvTaskIncrementMutexHeldCount+0x14>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	b11a      	cbz	r2, 8007272 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800726e:	3201      	adds	r2, #1
 8007270:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8007272:	6818      	ldr	r0, [r3, #0]
	}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	200080d8 	.word	0x200080d8

0800727c <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800727c:	680a      	ldr	r2, [r1, #0]
{
 800727e:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007280:	320c      	adds	r2, #12
{
 8007282:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007284:	f001 fb06 	bl	8008894 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007288:	b908      	cbnz	r0, 800728e <netconn_apimsg+0x12>
    return apimsg->err;
 800728a:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 800728e:	bd10      	pop	{r4, pc}

08007290 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007292:	b958      	cbnz	r0, 80072ac <netconn_close_shutdown+0x1c>
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <netconn_close_shutdown+0x34>)
 8007296:	f44f 724a 	mov.w	r2, #808	; 0x328
 800729a:	490b      	ldr	r1, [pc, #44]	; (80072c8 <netconn_close_shutdown+0x38>)
 800729c:	480b      	ldr	r0, [pc, #44]	; (80072cc <netconn_close_shutdown+0x3c>)
 800729e:	f009 fe7f 	bl	8010fa0 <iprintf>
 80072a2:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 80072a6:	b007      	add	sp, #28
 80072a8:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80072ac:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 80072ae:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80072b0:	f88d 100c 	strb.w	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80072b4:	a901      	add	r1, sp, #4
 80072b6:	4806      	ldr	r0, [pc, #24]	; (80072d0 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80072b8:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80072bc:	f7ff ffde 	bl	800727c <netconn_apimsg>
  return err;
 80072c0:	e7f1      	b.n	80072a6 <netconn_close_shutdown+0x16>
 80072c2:	bf00      	nop
 80072c4:	08011d86 	.word	0x08011d86
 80072c8:	08011db8 	.word	0x08011db8
 80072cc:	08011dd4 	.word	0x08011dd4
 80072d0:	080085a5 	.word	0x080085a5

080072d4 <netconn_recv_data>:
{
 80072d4:	b570      	push	{r4, r5, r6, lr}
  void *buf = NULL;
 80072d6:	2300      	movs	r3, #0
{
 80072d8:	b086      	sub	sp, #24
 80072da:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80072dc:	460e      	mov	r6, r1
  void *buf = NULL;
 80072de:	9300      	str	r3, [sp, #0]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80072e0:	b951      	cbnz	r1, 80072f8 <netconn_recv_data+0x24>
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <netconn_recv_data+0x108>)
 80072e4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80072e8:	493d      	ldr	r1, [pc, #244]	; (80073e0 <netconn_recv_data+0x10c>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80072ea:	483e      	ldr	r0, [pc, #248]	; (80073e4 <netconn_recv_data+0x110>)
 80072ec:	f009 fe58 	bl	8010fa0 <iprintf>
 80072f0:	f06f 000f 	mvn.w	r0, #15
}
 80072f4:	b006      	add	sp, #24
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 80072f8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80072fa:	b920      	cbnz	r0, 8007306 <netconn_recv_data+0x32>
 80072fc:	4b37      	ldr	r3, [pc, #220]	; (80073dc <netconn_recv_data+0x108>)
 80072fe:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007302:	4939      	ldr	r1, [pc, #228]	; (80073e8 <netconn_recv_data+0x114>)
 8007304:	e7f1      	b.n	80072ea <netconn_recv_data+0x16>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007306:	4605      	mov	r5, r0
 8007308:	f815 3b10 	ldrb.w	r3, [r5], #16
 800730c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007310:	2b10      	cmp	r3, #16
 8007312:	d10e      	bne.n	8007332 <netconn_recv_data+0x5e>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007314:	4628      	mov	r0, r5
 8007316:	f007 fe48 	bl	800efaa <sys_mbox_valid>
 800731a:	b950      	cbnz	r0, 8007332 <netconn_recv_data+0x5e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800731c:	f104 0014 	add.w	r0, r4, #20
 8007320:	f007 fe43 	bl	800efaa <sys_mbox_valid>
 8007324:	2800      	cmp	r0, #0
 8007326:	bf14      	ite	ne
 8007328:	f06f 000a 	mvnne.w	r0, #10
 800732c:	f06f 000e 	mvneq.w	r0, #14
 8007330:	e7e0      	b.n	80072f4 <netconn_recv_data+0x20>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007332:	4628      	mov	r0, r5
 8007334:	f007 fe39 	bl	800efaa <sys_mbox_valid>
 8007338:	b948      	cbnz	r0, 800734e <netconn_recv_data+0x7a>
 800733a:	4b28      	ldr	r3, [pc, #160]	; (80073dc <netconn_recv_data+0x108>)
 800733c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007340:	492a      	ldr	r1, [pc, #168]	; (80073ec <netconn_recv_data+0x118>)
 8007342:	4828      	ldr	r0, [pc, #160]	; (80073e4 <netconn_recv_data+0x110>)
 8007344:	f009 fe2c 	bl	8010fa0 <iprintf>
 8007348:	f06f 000a 	mvn.w	r0, #10
 800734c:	e7d2      	b.n	80072f4 <netconn_recv_data+0x20>
  if (ERR_IS_FATAL(conn->last_err)) {
 800734e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8007352:	f110 0f0c 	cmn.w	r0, #12
 8007356:	dbcd      	blt.n	80072f4 <netconn_recv_data+0x20>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007358:	2200      	movs	r2, #0
 800735a:	4669      	mov	r1, sp
 800735c:	4628      	mov	r0, r5
 800735e:	f007 fdf1 	bl	800ef44 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007362:	7823      	ldrb	r3, [r4, #0]
 8007364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007368:	2b10      	cmp	r3, #16
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	d12a      	bne.n	80073c4 <netconn_recv_data+0xf0>
    API_MSG_VAR_REF(msg).conn = conn;
 800736e:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 8007370:	b1ab      	cbz	r3, 800739e <netconn_recv_data+0xca>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007372:	891b      	ldrh	r3, [r3, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8007374:	a901      	add	r1, sp, #4
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <netconn_recv_data+0x11c>)
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007378:	9303      	str	r3, [sp, #12]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800737a:	f7ff ff7f 	bl	800727c <netconn_apimsg>
    if (buf == NULL) {
 800737e:	9a00      	ldr	r2, [sp, #0]
 8007380:	b9b2      	cbnz	r2, 80073b0 <netconn_recv_data+0xdc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007384:	b113      	cbz	r3, 800738c <netconn_recv_data+0xb8>
 8007386:	2101      	movs	r1, #1
 8007388:	4620      	mov	r0, r4
 800738a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	b943      	cbnz	r3, 80073a2 <netconn_recv_data+0xce>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007390:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8007394:	2800      	cmp	r0, #0
 8007396:	bf08      	it	eq
 8007398:	f06f 000d 	mvneq.w	r0, #13
 800739c:	e7aa      	b.n	80072f4 <netconn_recv_data+0x20>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	e7e8      	b.n	8007374 <netconn_recv_data+0xa0>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80073a2:	2101      	movs	r1, #1
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7ff ff73 	bl	8007290 <netconn_close_shutdown>
      return ERR_CLSD;
 80073aa:	f06f 000e 	mvn.w	r0, #14
 80073ae:	e7a1      	b.n	80072f4 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 80073b0:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80073b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073b4:	b113      	cbz	r3, 80073bc <netconn_recv_data+0xe8>
 80073b6:	2101      	movs	r1, #1
 80073b8:	4620      	mov	r0, r4
 80073ba:	4798      	blx	r3
  *new_buf = buf;
 80073bc:	9b00      	ldr	r3, [sp, #0]
  return ERR_OK;
 80073be:	2000      	movs	r0, #0
  *new_buf = buf;
 80073c0:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80073c2:	e797      	b.n	80072f4 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80073c4:	b933      	cbnz	r3, 80073d4 <netconn_recv_data+0x100>
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <netconn_recv_data+0x108>)
 80073c8:	f240 223e 	movw	r2, #574	; 0x23e
 80073cc:	4909      	ldr	r1, [pc, #36]	; (80073f4 <netconn_recv_data+0x120>)
 80073ce:	4805      	ldr	r0, [pc, #20]	; (80073e4 <netconn_recv_data+0x110>)
 80073d0:	f009 fde6 	bl	8010fa0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	891a      	ldrh	r2, [r3, #8]
 80073da:	e7ea      	b.n	80073b2 <netconn_recv_data+0xde>
 80073dc:	08011d86 	.word	0x08011d86
 80073e0:	08011e89 	.word	0x08011e89
 80073e4:	08011dd4 	.word	0x08011dd4
 80073e8:	08011ea7 	.word	0x08011ea7
 80073ec:	08011ec2 	.word	0x08011ec2
 80073f0:	08008465 	.word	0x08008465
 80073f4:	08011ee1 	.word	0x08011ee1

080073f8 <netconn_new_with_proto_and_callback>:
{
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	460d      	mov	r5, r1
 80073fc:	b086      	sub	sp, #24
  conn = netconn_alloc(t, callback);
 80073fe:	4611      	mov	r1, r2
 8007400:	f000 fdba 	bl	8007f78 <netconn_alloc>
  if (conn != NULL) {
 8007404:	4604      	mov	r4, r0
 8007406:	2800      	cmp	r0, #0
 8007408:	d03f      	beq.n	800748a <netconn_new_with_proto_and_callback+0x92>
    API_MSG_VAR_REF(msg).conn = conn;
 800740a:	a906      	add	r1, sp, #24
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800740c:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8007410:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007414:	481e      	ldr	r0, [pc, #120]	; (8007490 <netconn_new_with_proto_and_callback+0x98>)
 8007416:	f7ff ff31 	bl	800727c <netconn_apimsg>
    if (err != ERR_OK) {
 800741a:	2800      	cmp	r0, #0
 800741c:	d035      	beq.n	800748a <netconn_new_with_proto_and_callback+0x92>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	b12b      	cbz	r3, 800742e <netconn_new_with_proto_and_callback+0x36>
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <netconn_new_with_proto_and_callback+0x9c>)
 8007424:	2289      	movs	r2, #137	; 0x89
 8007426:	491c      	ldr	r1, [pc, #112]	; (8007498 <netconn_new_with_proto_and_callback+0xa0>)
 8007428:	481c      	ldr	r0, [pc, #112]	; (800749c <netconn_new_with_proto_and_callback+0xa4>)
 800742a:	f009 fdb9 	bl	8010fa0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800742e:	f104 0510 	add.w	r5, r4, #16
 8007432:	4628      	mov	r0, r5
 8007434:	f007 fdb9 	bl	800efaa <sys_mbox_valid>
 8007438:	b928      	cbnz	r0, 8007446 <netconn_new_with_proto_and_callback+0x4e>
 800743a:	4b16      	ldr	r3, [pc, #88]	; (8007494 <netconn_new_with_proto_and_callback+0x9c>)
 800743c:	228a      	movs	r2, #138	; 0x8a
 800743e:	4918      	ldr	r1, [pc, #96]	; (80074a0 <netconn_new_with_proto_and_callback+0xa8>)
 8007440:	4816      	ldr	r0, [pc, #88]	; (800749c <netconn_new_with_proto_and_callback+0xa4>)
 8007442:	f009 fdad 	bl	8010fa0 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007446:	f104 0014 	add.w	r0, r4, #20
 800744a:	f007 fdae 	bl	800efaa <sys_mbox_valid>
 800744e:	b128      	cbz	r0, 800745c <netconn_new_with_proto_and_callback+0x64>
 8007450:	4b10      	ldr	r3, [pc, #64]	; (8007494 <netconn_new_with_proto_and_callback+0x9c>)
 8007452:	228c      	movs	r2, #140	; 0x8c
 8007454:	4913      	ldr	r1, [pc, #76]	; (80074a4 <netconn_new_with_proto_and_callback+0xac>)
 8007456:	4811      	ldr	r0, [pc, #68]	; (800749c <netconn_new_with_proto_and_callback+0xa4>)
 8007458:	f009 fda2 	bl	8010fa0 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800745c:	f104 060c 	add.w	r6, r4, #12
 8007460:	4630      	mov	r0, r6
 8007462:	f007 fde3 	bl	800f02c <sys_sem_valid>
 8007466:	b928      	cbnz	r0, 8007474 <netconn_new_with_proto_and_callback+0x7c>
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <netconn_new_with_proto_and_callback+0x9c>)
 800746a:	228f      	movs	r2, #143	; 0x8f
 800746c:	490e      	ldr	r1, [pc, #56]	; (80074a8 <netconn_new_with_proto_and_callback+0xb0>)
 800746e:	480b      	ldr	r0, [pc, #44]	; (800749c <netconn_new_with_proto_and_callback+0xa4>)
 8007470:	f009 fd96 	bl	8010fa0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007474:	4630      	mov	r0, r6
 8007476:	f007 fdd6 	bl	800f026 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800747a:	4628      	mov	r0, r5
 800747c:	f007 fd42 	bl	800ef04 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007480:	4621      	mov	r1, r4
      return NULL;
 8007482:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8007484:	2007      	movs	r0, #7
 8007486:	f003 fc6b 	bl	800ad60 <memp_free>
}
 800748a:	4620      	mov	r0, r4
 800748c:	b006      	add	sp, #24
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	08007ef9 	.word	0x08007ef9
 8007494:	08011d86 	.word	0x08011d86
 8007498:	08011e19 	.word	0x08011e19
 800749c:	08011dd4 	.word	0x08011dd4
 80074a0:	08011e3a 	.word	0x08011e3a
 80074a4:	08011e4f 	.word	0x08011e4f
 80074a8:	08011e70 	.word	0x08011e70

080074ac <netconn_delete>:
{
 80074ac:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 80074ae:	4604      	mov	r4, r0
{
 80074b0:	b087      	sub	sp, #28
  if (conn == NULL) {
 80074b2:	b178      	cbz	r0, 80074d4 <netconn_delete+0x28>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80074b4:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 80074b6:	9001      	str	r0, [sp, #4]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80074b8:	a901      	add	r1, sp, #4
 80074ba:	4807      	ldr	r0, [pc, #28]	; (80074d8 <netconn_delete+0x2c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80074bc:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80074c0:	f7ff fedc 	bl	800727c <netconn_apimsg>
  if (err != ERR_OK) {
 80074c4:	4605      	mov	r5, r0
 80074c6:	b910      	cbnz	r0, 80074ce <netconn_delete+0x22>
  netconn_free(conn);
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fd9b 	bl	8008004 <netconn_free>
}
 80074ce:	4628      	mov	r0, r5
 80074d0:	b007      	add	sp, #28
 80074d2:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 80074d4:	4605      	mov	r5, r0
 80074d6:	e7fa      	b.n	80074ce <netconn_delete+0x22>
 80074d8:	080081f9 	.word	0x080081f9

080074dc <netconn_bind>:
{
 80074dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80074de:	b950      	cbnz	r0, 80074f6 <netconn_bind+0x1a>
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <netconn_bind+0x34>)
 80074e2:	22ff      	movs	r2, #255	; 0xff
 80074e4:	490b      	ldr	r1, [pc, #44]	; (8007514 <netconn_bind+0x38>)
 80074e6:	480c      	ldr	r0, [pc, #48]	; (8007518 <netconn_bind+0x3c>)
 80074e8:	f009 fd5a 	bl	8010fa0 <iprintf>
 80074ec:	f06f 000f 	mvn.w	r0, #15
}
 80074f0:	b007      	add	sp, #28
 80074f2:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <netconn_bind+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 80074f8:	9001      	str	r0, [sp, #4]
    addr = IP4_ADDR_ANY;
 80074fa:	2900      	cmp	r1, #0
 80074fc:	bf08      	it	eq
 80074fe:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007500:	4807      	ldr	r0, [pc, #28]	; (8007520 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007502:	f8ad 2010 	strh.w	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007506:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007508:	a901      	add	r1, sp, #4
 800750a:	f7ff feb7 	bl	800727c <netconn_apimsg>
  return err;
 800750e:	e7ef      	b.n	80074f0 <netconn_bind+0x14>
 8007510:	08011d86 	.word	0x08011d86
 8007514:	08011d6b 	.word	0x08011d6b
 8007518:	08011dd4 	.word	0x08011dd4
 800751c:	08012a38 	.word	0x08012a38
 8007520:	08008329 	.word	0x08008329

08007524 <netconn_listen_with_backlog>:
{
 8007524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007526:	b958      	cbnz	r0, 8007540 <netconn_listen_with_backlog+0x1c>
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <netconn_listen_with_backlog+0x2c>)
 800752a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800752e:	4909      	ldr	r1, [pc, #36]	; (8007554 <netconn_listen_with_backlog+0x30>)
 8007530:	4809      	ldr	r0, [pc, #36]	; (8007558 <netconn_listen_with_backlog+0x34>)
 8007532:	f009 fd35 	bl	8010fa0 <iprintf>
 8007536:	f06f 000f 	mvn.w	r0, #15
}
 800753a:	b007      	add	sp, #28
 800753c:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8007540:	a906      	add	r1, sp, #24
 8007542:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <netconn_listen_with_backlog+0x38>)
 8007548:	f7ff fe98 	bl	800727c <netconn_apimsg>
  return err;
 800754c:	e7f5      	b.n	800753a <netconn_listen_with_backlog+0x16>
 800754e:	bf00      	nop
 8007550:	08011d86 	.word	0x08011d86
 8007554:	08011dfc 	.word	0x08011dfc
 8007558:	08011dd4 	.word	0x08011dd4
 800755c:	08008389 	.word	0x08008389

08007560 <netconn_accept>:
{
 8007560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007562:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007564:	460d      	mov	r5, r1
 8007566:	b951      	cbnz	r1, 800757e <netconn_accept+0x1e>
 8007568:	4b20      	ldr	r3, [pc, #128]	; (80075ec <netconn_accept+0x8c>)
 800756a:	f240 128d 	movw	r2, #397	; 0x18d
 800756e:	4920      	ldr	r1, [pc, #128]	; (80075f0 <netconn_accept+0x90>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007570:	4820      	ldr	r0, [pc, #128]	; (80075f4 <netconn_accept+0x94>)
 8007572:	f009 fd15 	bl	8010fa0 <iprintf>
 8007576:	f06f 000f 	mvn.w	r0, #15
}
 800757a:	b003      	add	sp, #12
 800757c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 800757e:	2600      	movs	r6, #0
 8007580:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007582:	b920      	cbnz	r0, 800758e <netconn_accept+0x2e>
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <netconn_accept+0x8c>)
 8007586:	f240 128f 	movw	r2, #399	; 0x18f
 800758a:	491b      	ldr	r1, [pc, #108]	; (80075f8 <netconn_accept+0x98>)
 800758c:	e7f0      	b.n	8007570 <netconn_accept+0x10>
  if (ERR_IS_FATAL(conn->last_err)) {
 800758e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8007592:	f110 0f0c 	cmn.w	r0, #12
 8007596:	dbf0      	blt.n	800757a <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8007598:	f104 0714 	add.w	r7, r4, #20
 800759c:	4638      	mov	r0, r7
 800759e:	f007 fd04 	bl	800efaa <sys_mbox_valid>
 80075a2:	b1d0      	cbz	r0, 80075da <netconn_accept+0x7a>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80075a4:	4638      	mov	r0, r7
 80075a6:	4632      	mov	r2, r6
 80075a8:	a901      	add	r1, sp, #4
 80075aa:	f007 fccb 	bl	800ef44 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80075ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  newconn = (struct netconn *)accept_ptr;
 80075b0:	9f01      	ldr	r7, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80075b2:	b11b      	cbz	r3, 80075bc <netconn_accept+0x5c>
 80075b4:	4632      	mov	r2, r6
 80075b6:	2101      	movs	r1, #1
 80075b8:	4620      	mov	r0, r4
 80075ba:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 80075bc:	9a01      	ldr	r2, [sp, #4]
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <netconn_accept+0x9c>)
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d010      	beq.n	80075e6 <netconn_accept+0x86>
  if (newconn == NULL) {
 80075c4:	b967      	cbnz	r7, 80075e0 <netconn_accept+0x80>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 80075c6:	f007 fd6d 	bl	800f0a4 <sys_arch_protect>
 80075ca:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80075ce:	330c      	adds	r3, #12
 80075d0:	bfa4      	itt	ge
 80075d2:	23f1      	movge	r3, #241	; 0xf1
 80075d4:	7223      	strbge	r3, [r4, #8]
 80075d6:	f007 fd71 	bl	800f0bc <sys_arch_unprotect>
    return ERR_CLSD;
 80075da:	f06f 000e 	mvn.w	r0, #14
 80075de:	e7cc      	b.n	800757a <netconn_accept+0x1a>
  *new_conn = newconn;
 80075e0:	602f      	str	r7, [r5, #0]
  return ERR_OK;
 80075e2:	2000      	movs	r0, #0
 80075e4:	e7c9      	b.n	800757a <netconn_accept+0x1a>
    return ERR_ABRT;
 80075e6:	f06f 000c 	mvn.w	r0, #12
 80075ea:	e7c6      	b.n	800757a <netconn_accept+0x1a>
 80075ec:	08011d86 	.word	0x08011d86
 80075f0:	08011d2e 	.word	0x08011d2e
 80075f4:	08011dd4 	.word	0x08011dd4
 80075f8:	08011d4e 	.word	0x08011d4e
 80075fc:	20008404 	.word	0x20008404

08007600 <netconn_recv>:
{
 8007600:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007602:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007604:	460e      	mov	r6, r1
 8007606:	b959      	cbnz	r1, 8007620 <netconn_recv+0x20>
 8007608:	4b20      	ldr	r3, [pc, #128]	; (800768c <netconn_recv+0x8c>)
 800760a:	f44f 721d 	mov.w	r2, #628	; 0x274
 800760e:	4920      	ldr	r1, [pc, #128]	; (8007690 <netconn_recv+0x90>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007610:	f06f 050f 	mvn.w	r5, #15
 8007614:	481f      	ldr	r0, [pc, #124]	; (8007694 <netconn_recv+0x94>)
 8007616:	f009 fcc3 	bl	8010fa0 <iprintf>
}
 800761a:	4628      	mov	r0, r5
 800761c:	b002      	add	sp, #8
 800761e:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 8007620:	2200      	movs	r2, #0
 8007622:	600a      	str	r2, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007624:	b920      	cbnz	r0, 8007630 <netconn_recv+0x30>
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <netconn_recv+0x8c>)
 8007628:	f240 2276 	movw	r2, #630	; 0x276
 800762c:	491a      	ldr	r1, [pc, #104]	; (8007698 <netconn_recv+0x98>)
 800762e:	e7ef      	b.n	8007610 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007630:	7803      	ldrb	r3, [r0, #0]
 8007632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007636:	2b10      	cmp	r3, #16
 8007638:	d124      	bne.n	8007684 <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800763a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800763c:	9201      	str	r2, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800763e:	f003 fb73 	bl	800ad28 <memp_malloc>
    if (buf == NULL) {
 8007642:	4604      	mov	r4, r0
 8007644:	b1d8      	cbz	r0, 800767e <netconn_recv+0x7e>
    err = netconn_recv_data(conn, (void **)&p);
 8007646:	4628      	mov	r0, r5
 8007648:	a901      	add	r1, sp, #4
 800764a:	f7ff fe43 	bl	80072d4 <netconn_recv_data>
    if (err != ERR_OK) {
 800764e:	4605      	mov	r5, r0
 8007650:	b120      	cbz	r0, 800765c <netconn_recv+0x5c>
      memp_free(MEMP_NETBUF, buf);
 8007652:	4621      	mov	r1, r4
 8007654:	2006      	movs	r0, #6
 8007656:	f003 fb83 	bl	800ad60 <memp_free>
      return err;
 800765a:	e7de      	b.n	800761a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	b933      	cbnz	r3, 800766e <netconn_recv+0x6e>
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <netconn_recv+0x8c>)
 8007662:	f240 228a 	movw	r2, #650	; 0x28a
 8007666:	490d      	ldr	r1, [pc, #52]	; (800769c <netconn_recv+0x9c>)
 8007668:	480a      	ldr	r0, [pc, #40]	; (8007694 <netconn_recv+0x94>)
 800766a:	f009 fc99 	bl	8010fa0 <iprintf>
    buf->p = p;
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	6023      	str	r3, [r4, #0]
    buf->ptr = p;
 8007672:	6063      	str	r3, [r4, #4]
    buf->port = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8007678:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 800767a:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 800767c:	e7cd      	b.n	800761a <netconn_recv+0x1a>
      return ERR_MEM;
 800767e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007682:	e7ca      	b.n	800761a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf);
 8007684:	f7ff fe26 	bl	80072d4 <netconn_recv_data>
 8007688:	4605      	mov	r5, r0
 800768a:	e7c6      	b.n	800761a <netconn_recv+0x1a>
 800768c:	08011d86 	.word	0x08011d86
 8007690:	08011e89 	.word	0x08011e89
 8007694:	08011dd4 	.word	0x08011dd4
 8007698:	08011ea7 	.word	0x08011ea7
 800769c:	0801324b 	.word	0x0801324b

080076a0 <netconn_write_partly>:
{
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	4615      	mov	r5, r2
 80076a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80076a8:	b950      	cbnz	r0, 80076c0 <netconn_write_partly+0x20>
 80076aa:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <netconn_write_partly+0x80>)
 80076ac:	f240 22e6 	movw	r2, #742	; 0x2e6
 80076b0:	491c      	ldr	r1, [pc, #112]	; (8007724 <netconn_write_partly+0x84>)
 80076b2:	481d      	ldr	r0, [pc, #116]	; (8007728 <netconn_write_partly+0x88>)
 80076b4:	f009 fc74 	bl	8010fa0 <iprintf>
 80076b8:	f06f 000f 	mvn.w	r0, #15
}
 80076bc:	b006      	add	sp, #24
 80076be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80076c0:	7802      	ldrb	r2, [r0, #0]
 80076c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80076c6:	2a10      	cmp	r2, #16
 80076c8:	d009      	beq.n	80076de <netconn_write_partly+0x3e>
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <netconn_write_partly+0x80>)
 80076cc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80076d0:	4916      	ldr	r1, [pc, #88]	; (800772c <netconn_write_partly+0x8c>)
 80076d2:	4815      	ldr	r0, [pc, #84]	; (8007728 <netconn_write_partly+0x88>)
 80076d4:	f009 fc64 	bl	8010fa0 <iprintf>
    return ERR_VAL;
 80076d8:	f06f 0005 	mvn.w	r0, #5
 80076dc:	e7ee      	b.n	80076bc <netconn_write_partly+0x1c>
  if (size == 0) {
 80076de:	b90d      	cbnz	r5, 80076e4 <netconn_write_partly+0x44>
    return ERR_OK;
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7eb      	b.n	80076bc <netconn_write_partly+0x1c>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80076e4:	7f02      	ldrb	r2, [r0, #28]
 80076e6:	0792      	lsls	r2, r2, #30
 80076e8:	d413      	bmi.n	8007712 <netconn_write_partly+0x72>
 80076ea:	f3c3 0680 	ubfx	r6, r3, #2, #1
  if (dontblock && !bytes_written) {
 80076ee:	b98e      	cbnz	r6, 8007714 <netconn_write_partly+0x74>
  API_MSG_VAR_REF(msg).conn = conn;
 80076f0:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80076f2:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80076f4:	a901      	add	r1, sp, #4
 80076f6:	480e      	ldr	r0, [pc, #56]	; (8007730 <netconn_write_partly+0x90>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80076f8:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80076fc:	9504      	str	r5, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80076fe:	f7ff fdbd 	bl	800727c <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8007702:	2800      	cmp	r0, #0
 8007704:	d1da      	bne.n	80076bc <netconn_write_partly+0x1c>
 8007706:	2c00      	cmp	r4, #0
 8007708:	d0ea      	beq.n	80076e0 <netconn_write_partly+0x40>
    if (dontblock) {
 800770a:	b136      	cbz	r6, 800771a <netconn_write_partly+0x7a>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	e7d4      	b.n	80076bc <netconn_write_partly+0x1c>
 8007712:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 8007714:	2c00      	cmp	r4, #0
 8007716:	d1eb      	bne.n	80076f0 <netconn_write_partly+0x50>
 8007718:	e7de      	b.n	80076d8 <netconn_write_partly+0x38>
      *bytes_written = size;
 800771a:	6025      	str	r5, [r4, #0]
 800771c:	e7ce      	b.n	80076bc <netconn_write_partly+0x1c>
 800771e:	bf00      	nop
 8007720:	08011d86 	.word	0x08011d86
 8007724:	08011eed 	.word	0x08011eed
 8007728:	08011dd4 	.word	0x08011dd4
 800772c:	08011f09 	.word	0x08011f09
 8007730:	080084bd 	.word	0x080084bd

08007734 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8007734:	2103      	movs	r1, #3
 8007736:	f7ff bdab 	b.w	8007290 <netconn_close_shutdown>
	...

0800773c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	4606      	mov	r6, r0
 8007742:	4617      	mov	r7, r2
 8007744:	461d      	mov	r5, r3
 8007746:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800774a:	460c      	mov	r4, r1
 800774c:	b929      	cbnz	r1, 800775a <recv_udp+0x1e>
 800774e:	4b22      	ldr	r3, [pc, #136]	; (80077d8 <recv_udp+0x9c>)
 8007750:	22b1      	movs	r2, #177	; 0xb1
 8007752:	4922      	ldr	r1, [pc, #136]	; (80077dc <recv_udp+0xa0>)
 8007754:	4822      	ldr	r0, [pc, #136]	; (80077e0 <recv_udp+0xa4>)
 8007756:	f009 fc23 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800775a:	b98e      	cbnz	r6, 8007780 <recv_udp+0x44>
 800775c:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <recv_udp+0x9c>)
 800775e:	22b2      	movs	r2, #178	; 0xb2
 8007760:	4920      	ldr	r1, [pc, #128]	; (80077e4 <recv_udp+0xa8>)
 8007762:	481f      	ldr	r0, [pc, #124]	; (80077e0 <recv_udp+0xa4>)
 8007764:	f009 fc1c 	bl	8010fa0 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007768:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 800776a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800776e:	f003 bc7d 	b.w	800b06c <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007772:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007774:	b373      	cbz	r3, 80077d4 <recv_udp+0x98>
 8007776:	462a      	mov	r2, r5
 8007778:	4630      	mov	r0, r6
}
 800777a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800777e:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007780:	6873      	ldr	r3, [r6, #4]
 8007782:	429c      	cmp	r4, r3
 8007784:	d005      	beq.n	8007792 <recv_udp+0x56>
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <recv_udp+0x9c>)
 8007788:	22ba      	movs	r2, #186	; 0xba
 800778a:	4917      	ldr	r1, [pc, #92]	; (80077e8 <recv_udp+0xac>)
 800778c:	4814      	ldr	r0, [pc, #80]	; (80077e0 <recv_udp+0xa4>)
 800778e:	f009 fc07 	bl	8010fa0 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007792:	f106 0810 	add.w	r8, r6, #16
 8007796:	4640      	mov	r0, r8
 8007798:	f007 fc07 	bl	800efaa <sys_mbox_valid>
 800779c:	2800      	cmp	r0, #0
 800779e:	d0e3      	beq.n	8007768 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80077a0:	2006      	movs	r0, #6
 80077a2:	f003 fac1 	bl	800ad28 <memp_malloc>
  if (buf == NULL) {
 80077a6:	4604      	mov	r4, r0
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d0dd      	beq.n	8007768 <recv_udp+0x2c>
    buf->p = p;
 80077ac:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 80077ae:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 80077b0:	b105      	cbz	r5, 80077b4 <recv_udp+0x78>
 80077b2:	682d      	ldr	r5, [r5, #0]
 80077b4:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80077b6:	4621      	mov	r1, r4
    buf->port = port;
 80077b8:	f8a4 900c 	strh.w	r9, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80077bc:	4640      	mov	r0, r8
  len = p->tot_len;
 80077be:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80077c0:	f007 fbb6 	bl	800ef30 <sys_mbox_trypost>
 80077c4:	4601      	mov	r1, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d0d3      	beq.n	8007772 <recv_udp+0x36>
    netbuf_delete(buf);
 80077ca:	4620      	mov	r0, r4
}
 80077cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 80077d0:	f000 bf52 	b.w	8008678 <netbuf_delete>
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	08012200 	.word	0x08012200
 80077dc:	08012232 	.word	0x08012232
 80077e0:	08011dd4 	.word	0x08011dd4
 80077e4:	08012254 	.word	0x08012254
 80077e8:	08012273 	.word	0x08012273

080077ec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80077ec:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80077ee:	6844      	ldr	r4, [r0, #4]
{
 80077f0:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 80077f2:	4620      	mov	r0, r4
 80077f4:	f004 f8bc 	bl	800b970 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80077f8:	4620      	mov	r0, r4
 80077fa:	4909      	ldr	r1, [pc, #36]	; (8007820 <setup_tcp+0x34>)
 80077fc:	f004 f8bc 	bl	800b978 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007800:	4620      	mov	r0, r4
 8007802:	4908      	ldr	r1, [pc, #32]	; (8007824 <setup_tcp+0x38>)
 8007804:	f004 f8d0 	bl	800b9a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007808:	4620      	mov	r0, r4
 800780a:	4907      	ldr	r1, [pc, #28]	; (8007828 <setup_tcp+0x3c>)
 800780c:	2202      	movs	r2, #2
 800780e:	f004 f8ff 	bl	800ba10 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8007812:	4620      	mov	r0, r4
 8007814:	4905      	ldr	r1, [pc, #20]	; (800782c <setup_tcp+0x40>)
}
 8007816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 800781a:	f004 b8db 	b.w	800b9d4 <tcp_err>
 800781e:	bf00      	nop
 8007820:	08007dc9 	.word	0x08007dc9
 8007824:	08007e8d 	.word	0x08007e8d
 8007828:	08007d51 	.word	0x08007d51
 800782c:	08007831 	.word	0x08007831

08007830 <err_tcp>:
{
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007836:	4604      	mov	r4, r0
 8007838:	b930      	cbnz	r0, 8007848 <err_tcp+0x18>
 800783a:	4b41      	ldr	r3, [pc, #260]	; (8007940 <err_tcp+0x110>)
 800783c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007840:	4940      	ldr	r1, [pc, #256]	; (8007944 <err_tcp+0x114>)
 8007842:	4841      	ldr	r0, [pc, #260]	; (8007948 <err_tcp+0x118>)
 8007844:	f009 fbac 	bl	8010fa0 <iprintf>
  old_state = conn->state;
 8007848:	7865      	ldrb	r5, [r4, #1]
  conn->pcb.tcp = NULL;
 800784a:	2700      	movs	r7, #0
  if (old_state == NETCONN_CLOSE) {
 800784c:	2d04      	cmp	r5, #4
  conn->pcb.tcp = NULL;
 800784e:	6067      	str	r7, [r4, #4]
  conn->state = NETCONN_NONE;
 8007850:	7067      	strb	r7, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8007852:	d162      	bne.n	800791a <err_tcp+0xea>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8007854:	f007 fc26 	bl	800f0a4 <sys_arch_protect>
 8007858:	f994 3008 	ldrsb.w	r3, [r4, #8]
    err = ERR_OK;
 800785c:	2600      	movs	r6, #0
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800785e:	330c      	adds	r3, #12
 8007860:	bfa8      	it	ge
 8007862:	7227      	strbge	r7, [r4, #8]
 8007864:	f007 fc2a 	bl	800f0bc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007868:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800786a:	b11b      	cbz	r3, 8007874 <err_tcp+0x44>
 800786c:	2200      	movs	r2, #0
 800786e:	2104      	movs	r1, #4
 8007870:	4620      	mov	r0, r4
 8007872:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007874:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007876:	b11b      	cbz	r3, 8007880 <err_tcp+0x50>
 8007878:	2200      	movs	r2, #0
 800787a:	4620      	mov	r0, r4
 800787c:	4611      	mov	r1, r2
 800787e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007880:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007882:	b11b      	cbz	r3, 800788c <err_tcp+0x5c>
 8007884:	2200      	movs	r2, #0
 8007886:	2102      	movs	r1, #2
 8007888:	4620      	mov	r0, r4
 800788a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800788c:	f104 0710 	add.w	r7, r4, #16
 8007890:	4638      	mov	r0, r7
 8007892:	f007 fb8a 	bl	800efaa <sys_mbox_valid>
 8007896:	b118      	cbz	r0, 80078a0 <err_tcp+0x70>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8007898:	2100      	movs	r1, #0
 800789a:	4638      	mov	r0, r7
 800789c:	f007 fb48 	bl	800ef30 <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80078a0:	f104 0714 	add.w	r7, r4, #20
 80078a4:	4638      	mov	r0, r7
 80078a6:	f007 fb80 	bl	800efaa <sys_mbox_valid>
 80078aa:	b118      	cbz	r0, 80078b4 <err_tcp+0x84>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80078ac:	2100      	movs	r1, #0
 80078ae:	4638      	mov	r0, r7
 80078b0:	f007 fb3e 	bl	800ef30 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80078b4:	2d01      	cmp	r5, #1
 80078b6:	d002      	beq.n	80078be <err_tcp+0x8e>
 80078b8:	3d03      	subs	r5, #3
 80078ba:	2d01      	cmp	r5, #1
 80078bc:	d833      	bhi.n	8007926 <err_tcp+0xf6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80078be:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80078c0:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80078c4:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80078c6:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80078c8:	d438      	bmi.n	800793c <err_tcp+0x10c>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80078ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078cc:	b933      	cbnz	r3, 80078dc <err_tcp+0xac>
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <err_tcp+0x110>)
 80078d0:	f240 12b3 	movw	r2, #435	; 0x1b3
 80078d4:	491d      	ldr	r1, [pc, #116]	; (800794c <err_tcp+0x11c>)
 80078d6:	481c      	ldr	r0, [pc, #112]	; (8007948 <err_tcp+0x118>)
 80078d8:	f009 fb62 	bl	8010fa0 <iprintf>
      conn->current_msg->err = err;
 80078dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078de:	681d      	ldr	r5, [r3, #0]
      conn->current_msg->err = err;
 80078e0:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078e2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80078e4:	4628      	mov	r0, r5
 80078e6:	f007 fba1 	bl	800f02c <sys_sem_valid>
 80078ea:	b930      	cbnz	r0, 80078fa <err_tcp+0xca>
 80078ec:	4b14      	ldr	r3, [pc, #80]	; (8007940 <err_tcp+0x110>)
 80078ee:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80078f2:	4917      	ldr	r1, [pc, #92]	; (8007950 <err_tcp+0x120>)
 80078f4:	4814      	ldr	r0, [pc, #80]	; (8007948 <err_tcp+0x118>)
 80078f6:	f009 fb53 	bl	8010fa0 <iprintf>
      conn->current_msg = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 80078fe:	f007 fbd1 	bl	800f0a4 <sys_arch_protect>
 8007902:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8007906:	330c      	adds	r3, #12
 8007908:	bfa8      	it	ge
 800790a:	7226      	strbge	r6, [r4, #8]
 800790c:	f007 fbd6 	bl	800f0bc <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8007910:	4628      	mov	r0, r5
}
 8007912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8007916:	f007 bb83 	b.w	800f020 <sys_sem_signal>
    SYS_ARCH_SET(conn->last_err, err);
 800791a:	f007 fbc3 	bl	800f0a4 <sys_arch_protect>
 800791e:	7226      	strb	r6, [r4, #8]
 8007920:	f007 fbcc 	bl	800f0bc <sys_arch_unprotect>
 8007924:	e7a0      	b.n	8007868 <err_tcp+0x38>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007928:	b143      	cbz	r3, 800793c <err_tcp+0x10c>
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <err_tcp+0x110>)
 800792c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007930:	4908      	ldr	r1, [pc, #32]	; (8007954 <err_tcp+0x124>)
 8007932:	4805      	ldr	r0, [pc, #20]	; (8007948 <err_tcp+0x118>)
}
 8007934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007938:	f009 bb32 	b.w	8010fa0 <iprintf>
 800793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007940:	08012200 	.word	0x08012200
 8007944:	08011f2b 	.word	0x08011f2b
 8007948:	08011dd4 	.word	0x08011dd4
 800794c:	08011f38 	.word	0x08011f38
 8007950:	08011f52 	.word	0x08011f52
 8007954:	08011f6b 	.word	0x08011f6b

08007958 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	460f      	mov	r7, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800795e:	4604      	mov	r4, r0
 8007960:	b930      	cbnz	r0, 8007970 <lwip_netconn_do_writemore+0x18>
 8007962:	4b74      	ldr	r3, [pc, #464]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 8007964:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8007968:	4973      	ldr	r1, [pc, #460]	; (8007b38 <lwip_netconn_do_writemore+0x1e0>)
 800796a:	4874      	ldr	r0, [pc, #464]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 800796c:	f009 fb18 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007970:	7863      	ldrb	r3, [r4, #1]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d006      	beq.n	8007984 <lwip_netconn_do_writemore+0x2c>
 8007976:	4b6f      	ldr	r3, [pc, #444]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 8007978:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800797c:	4970      	ldr	r1, [pc, #448]	; (8007b40 <lwip_netconn_do_writemore+0x1e8>)
 800797e:	486f      	ldr	r0, [pc, #444]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 8007980:	f009 fb0e 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007986:	b933      	cbnz	r3, 8007996 <lwip_netconn_do_writemore+0x3e>
 8007988:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 800798a:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800798e:	496d      	ldr	r1, [pc, #436]	; (8007b44 <lwip_netconn_do_writemore+0x1ec>)
 8007990:	486a      	ldr	r0, [pc, #424]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 8007992:	f009 fb05 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007996:	6863      	ldr	r3, [r4, #4]
 8007998:	b933      	cbnz	r3, 80079a8 <lwip_netconn_do_writemore+0x50>
 800799a:	4b66      	ldr	r3, [pc, #408]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 800799c:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80079a0:	4969      	ldr	r1, [pc, #420]	; (8007b48 <lwip_netconn_do_writemore+0x1f0>)
 80079a2:	4866      	ldr	r0, [pc, #408]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 80079a4:	f009 fafc 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80079a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079aa:	6a22      	ldr	r2, [r4, #32]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d306      	bcc.n	80079c0 <lwip_netconn_do_writemore+0x68>
 80079b2:	4b60      	ldr	r3, [pc, #384]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 80079b4:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80079b8:	4964      	ldr	r1, [pc, #400]	; (8007b4c <lwip_netconn_do_writemore+0x1f4>)
 80079ba:	4860      	ldr	r0, [pc, #384]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 80079bc:	f009 faf0 	bl	8010fa0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80079c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80079c2:	7f22      	ldrb	r2, [r4, #28]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80079c4:	6899      	ldr	r1, [r3, #8]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80079c6:	0790      	lsls	r0, r2, #30
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80079c8:	6a22      	ldr	r2, [r4, #32]
  apiflags = conn->current_msg->msg.w.apiflags;
 80079ca:	7c1e      	ldrb	r6, [r3, #16]
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80079cc:	eb01 0902 	add.w	r9, r1, r2
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80079d0:	68d9      	ldr	r1, [r3, #12]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80079d2:	bf54      	ite	pl
 80079d4:	f3c6 0880 	ubfxpl	r8, r6, #2, #1
 80079d8:	f04f 0801 	movmi.w	r8, #1
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80079dc:	1a8b      	subs	r3, r1, r2
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80079de:	6860      	ldr	r0, [r4, #4]
    if (diff > 0xffffUL) { /* max_u16_t */
 80079e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    available = tcp_sndbuf(conn->pcb.tcp);
 80079e4:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
      len = 0xffff;
 80079e8:	bf2a      	itet	cs
 80079ea:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
      len = (u16_t)diff;
 80079ee:	b29b      	uxthcc	r3, r3
      apiflags |= TCP_WRITE_FLAG_MORE;
 80079f0:	f046 0602 	orrcs.w	r6, r6, #2
    if (available < len) {
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	d95f      	bls.n	8007ab8 <lwip_netconn_do_writemore+0x160>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 80079f8:	f1b8 0f00 	cmp.w	r8, #0
 80079fc:	d059      	beq.n	8007ab2 <lwip_netconn_do_writemore+0x15a>
        if (!len) {
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	d05c      	beq.n	8007abc <lwip_netconn_do_writemore+0x164>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8007a02:	442a      	add	r2, r5
 8007a04:	4291      	cmp	r1, r2
 8007a06:	d206      	bcs.n	8007a16 <lwip_netconn_do_writemore+0xbe>
 8007a08:	4b4a      	ldr	r3, [pc, #296]	; (8007b34 <lwip_netconn_do_writemore+0x1dc>)
 8007a0a:	f240 6213 	movw	r2, #1555	; 0x613
 8007a0e:	4950      	ldr	r1, [pc, #320]	; (8007b50 <lwip_netconn_do_writemore+0x1f8>)
 8007a10:	484a      	ldr	r0, [pc, #296]	; (8007b3c <lwip_netconn_do_writemore+0x1e4>)
 8007a12:	f009 fac5 	bl	8010fa0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007a16:	4633      	mov	r3, r6
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	6860      	ldr	r0, [r4, #4]
 8007a1e:	f006 f8c7 	bl	800dbb0 <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007a22:	1c43      	adds	r3, r0, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007a24:	4606      	mov	r6, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d869      	bhi.n	8007b00 <lwip_netconn_do_writemore+0x1a8>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8007a2c:	f1b8 0f00 	cmp.w	r8, #0
 8007a30:	d047      	beq.n	8007ac2 <lwip_netconn_do_writemore+0x16a>
 8007a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	429d      	cmp	r5, r3
 8007a38:	d243      	bcs.n	8007ac2 <lwip_netconn_do_writemore+0x16a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a3c:	b11b      	cbz	r3, 8007a46 <lwip_netconn_do_writemore+0xee>
 8007a3e:	462a      	mov	r2, r5
 8007a40:	2103      	movs	r1, #3
 8007a42:	4620      	mov	r0, r4
 8007a44:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007a46:	7f23      	ldrb	r3, [r4, #28]
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	d14b      	bne.n	8007aea <lwip_netconn_do_writemore+0x192>
      err_t out_err;
      conn->write_offset += len;
 8007a52:	6a23      	ldr	r3, [r4, #32]
 8007a54:	441d      	add	r5, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8007a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->write_offset += len;
 8007a58:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	4295      	cmp	r5, r2
 8007a5e:	d002      	beq.n	8007a66 <lwip_netconn_do_writemore+0x10e>
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	d03f      	beq.n	8007ae6 <lwip_netconn_do_writemore+0x18e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8007a66:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8007a68:	2501      	movs	r5, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007a6a:	6860      	ldr	r0, [r4, #4]
 8007a6c:	f006 fc24 	bl	800e2b8 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007a70:	f110 0f0c 	cmn.w	r0, #12
 8007a74:	db01      	blt.n	8007a7a <lwip_netconn_do_writemore+0x122>
 8007a76:	1d01      	adds	r1, r0, #4
 8007a78:	d153      	bne.n	8007b22 <lwip_netconn_do_writemore+0x1ca>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8007a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7c:	2200      	movs	r2, #0
      out_err = tcp_output(conn->pcb.tcp);
 8007a7e:	4606      	mov	r6, r0
        conn->current_msg->msg.w.len = 0;
 8007a80:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a84:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007a86:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8007a88:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007a8a:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8007a8c:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8007a8e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8007a90:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8007a92:	f007 fb07 	bl	800f0a4 <sys_arch_protect>
 8007a96:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	bfa8      	it	ge
 8007a9e:	7226      	strbge	r6, [r4, #8]
 8007aa0:	f007 fb0c 	bl	800f0bc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007aa4:	b117      	cbz	r7, 8007aac <lwip_netconn_do_writemore+0x154>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f007 faba 	bl	800f020 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8007aac:	2000      	movs	r0, #0
 8007aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007ab2:	f046 0602 	orr.w	r6, r6, #2
 8007ab6:	e7a4      	b.n	8007a02 <lwip_netconn_do_writemore+0xaa>
 8007ab8:	461d      	mov	r5, r3
 8007aba:	e7a2      	b.n	8007a02 <lwip_netconn_do_writemore+0xaa>
          err = ERR_WOULDBLOCK;
 8007abc:	f06f 0606 	mvn.w	r6, #6
 8007ac0:	e7b7      	b.n	8007a32 <lwip_netconn_do_writemore+0xda>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007ac2:	6863      	ldr	r3, [r4, #4]
 8007ac4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ac8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007acc:	d303      	bcc.n	8007ad6 <lwip_netconn_do_writemore+0x17e>
 8007ace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d9bb      	bls.n	8007a4e <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0b8      	beq.n	8007a4e <lwip_netconn_do_writemore+0xf6>
 8007adc:	462a      	mov	r2, r5
 8007ade:	2103      	movs	r1, #3
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4798      	blx	r3
 8007ae4:	e7b3      	b.n	8007a4e <lwip_netconn_do_writemore+0xf6>
  u8_t write_finished = 0;
 8007ae6:	4635      	mov	r5, r6
 8007ae8:	e7bf      	b.n	8007a6a <lwip_netconn_do_writemore+0x112>
    } else if (err == ERR_MEM) {
 8007aea:	1c72      	adds	r2, r6, #1
 8007aec:	d108      	bne.n	8007b00 <lwip_netconn_do_writemore+0x1a8>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007aee:	6860      	ldr	r0, [r4, #4]
 8007af0:	f006 fbe2 	bl	800e2b8 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007af4:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007af8:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007afa:	db01      	blt.n	8007b00 <lwip_netconn_do_writemore+0x1a8>
 8007afc:	1d03      	adds	r3, r0, #4
 8007afe:	d103      	bne.n	8007b08 <lwip_netconn_do_writemore+0x1b0>
      conn->current_msg->msg.w.len = 0;
 8007b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b02:	2200      	movs	r2, #0
 8007b04:	60da      	str	r2, [r3, #12]
 8007b06:	e7bc      	b.n	8007a82 <lwip_netconn_do_writemore+0x12a>
      } else if (dontblock) {
 8007b08:	f1b8 0f00 	cmp.w	r8, #0
 8007b0c:	d103      	bne.n	8007b16 <lwip_netconn_do_writemore+0x1be>
    return ERR_MEM;
 8007b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        conn->current_msg->msg.w.len = 0;
 8007b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b18:	2200      	movs	r2, #0
        err = ERR_WOULDBLOCK;
 8007b1a:	f06f 0606 	mvn.w	r6, #6
        conn->current_msg->msg.w.len = 0;
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e7af      	b.n	8007a82 <lwip_netconn_do_writemore+0x12a>
  if (write_finished) {
 8007b22:	2d00      	cmp	r5, #0
 8007b24:	d0f3      	beq.n	8007b0e <lwip_netconn_do_writemore+0x1b6>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
    conn->current_msg->err = err;
 8007b28:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007b2a:	6815      	ldr	r5, [r2, #0]
    conn->current_msg->err = err;
 8007b2c:	7113      	strb	r3, [r2, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007b2e:	350c      	adds	r5, #12
 8007b30:	e7ac      	b.n	8007a8c <lwip_netconn_do_writemore+0x134>
 8007b32:	bf00      	nop
 8007b34:	08012200 	.word	0x08012200
 8007b38:	08011f2b 	.word	0x08011f2b
 8007b3c:	08011dd4 	.word	0x08011dd4
 8007b40:	08012047 	.word	0x08012047
 8007b44:	08011f38 	.word	0x08011f38
 8007b48:	08012064 	.word	0x08012064
 8007b4c:	0801207a 	.word	0x0801207a
 8007b50:	080120ac 	.word	0x080120ac

08007b54 <lwip_netconn_do_close_internal>:
{
 8007b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	b930      	cbnz	r0, 8007b6c <lwip_netconn_do_close_internal+0x18>
 8007b5e:	4b71      	ldr	r3, [pc, #452]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007b60:	f240 3243 	movw	r2, #835	; 0x343
 8007b64:	4970      	ldr	r1, [pc, #448]	; (8007d28 <lwip_netconn_do_close_internal+0x1d4>)
 8007b66:	4871      	ldr	r0, [pc, #452]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007b68:	f009 fa1a 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007b6c:	7823      	ldrb	r3, [r4, #0]
 8007b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d006      	beq.n	8007b84 <lwip_netconn_do_close_internal+0x30>
 8007b76:	4b6b      	ldr	r3, [pc, #428]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007b78:	f44f 7251 	mov.w	r2, #836	; 0x344
 8007b7c:	496c      	ldr	r1, [pc, #432]	; (8007d30 <lwip_netconn_do_close_internal+0x1dc>)
 8007b7e:	486b      	ldr	r0, [pc, #428]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007b80:	f009 fa0e 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8007b84:	7863      	ldrb	r3, [r4, #1]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d006      	beq.n	8007b98 <lwip_netconn_do_close_internal+0x44>
 8007b8a:	4b66      	ldr	r3, [pc, #408]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007b8c:	f240 3245 	movw	r2, #837	; 0x345
 8007b90:	4968      	ldr	r1, [pc, #416]	; (8007d34 <lwip_netconn_do_close_internal+0x1e0>)
 8007b92:	4866      	ldr	r0, [pc, #408]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007b94:	f009 fa04 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	b933      	cbnz	r3, 8007baa <lwip_netconn_do_close_internal+0x56>
 8007b9c:	4b61      	ldr	r3, [pc, #388]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007b9e:	f240 3246 	movw	r2, #838	; 0x346
 8007ba2:	4965      	ldr	r1, [pc, #404]	; (8007d38 <lwip_netconn_do_close_internal+0x1e4>)
 8007ba4:	4861      	ldr	r0, [pc, #388]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007ba6:	f009 f9fb 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bac:	b933      	cbnz	r3, 8007bbc <lwip_netconn_do_close_internal+0x68>
 8007bae:	4b5d      	ldr	r3, [pc, #372]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007bb0:	f240 3247 	movw	r2, #839	; 0x347
 8007bb4:	4961      	ldr	r1, [pc, #388]	; (8007d3c <lwip_netconn_do_close_internal+0x1e8>)
 8007bb6:	485d      	ldr	r0, [pc, #372]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007bb8:	f009 f9f2 	bl	8010fa0 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8007bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tpcb = conn->pcb.tcp;
 8007bbe:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8007bc0:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8007bc2:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8007bc4:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8007bc8:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8007bcc:	f000 8084 	beq.w	8007cd8 <lwip_netconn_do_close_internal+0x184>
  } else if (shut_rx &&
 8007bd0:	f1b9 0f00 	cmp.w	r9, #0
 8007bd4:	d005      	beq.n	8007be2 <lwip_netconn_do_close_internal+0x8e>
             ((tpcb->state == FIN_WAIT_1) ||
 8007bd6:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8007bd8:	1f5a      	subs	r2, r3, #5
 8007bda:	2a01      	cmp	r2, #1
 8007bdc:	d97c      	bls.n	8007cd8 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d07a      	beq.n	8007cd8 <lwip_netconn_do_close_internal+0x184>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007be2:	f1b8 0f00 	cmp.w	r8, #0
 8007be6:	d011      	beq.n	8007c0c <lwip_netconn_do_close_internal+0xb8>
 8007be8:	7eaf      	ldrb	r7, [r5, #26]
 8007bea:	f017 0710 	ands.w	r7, r7, #16
 8007bee:	d173      	bne.n	8007cd8 <lwip_netconn_do_close_internal+0x184>
  if (tpcb->state == LISTEN) {
 8007bf0:	7d2b      	ldrb	r3, [r5, #20]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10c      	bne.n	8007c10 <lwip_netconn_do_close_internal+0xbc>
    tcp_accept(tpcb, NULL);
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f003 ff03 	bl	800ba04 <tcp_accept>
  if (close) {
 8007bfe:	bb27      	cbnz	r7, 8007c4a <lwip_netconn_do_close_internal+0xf6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007c00:	4642      	mov	r2, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	4628      	mov	r0, r5
 8007c06:	f004 fab5 	bl	800c174 <tcp_shutdown>
 8007c0a:	e021      	b.n	8007c50 <lwip_netconn_do_close_internal+0xfc>
 8007c0c:	4647      	mov	r7, r8
 8007c0e:	e7ef      	b.n	8007bf0 <lwip_netconn_do_close_internal+0x9c>
    if (shut_rx) {
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	d007      	beq.n	8007c26 <lwip_netconn_do_close_internal+0xd2>
      tcp_recv(tpcb, NULL);
 8007c16:	2100      	movs	r1, #0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f003 fead 	bl	800b978 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4628      	mov	r0, r5
 8007c22:	f003 feef 	bl	800ba04 <tcp_accept>
    if (shut_tx) {
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	d003      	beq.n	8007c34 <lwip_netconn_do_close_internal+0xe0>
      tcp_sent(tpcb, NULL);
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f003 feba 	bl	800b9a8 <tcp_sent>
    if (close) {
 8007c34:	2f00      	cmp	r7, #0
 8007c36:	d0e3      	beq.n	8007c00 <lwip_netconn_do_close_internal+0xac>
      tcp_poll(tpcb, NULL, 0);
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	f003 fee7 	bl	800ba10 <tcp_poll>
      tcp_err(tpcb, NULL);
 8007c42:	2100      	movs	r1, #0
 8007c44:	4628      	mov	r0, r5
 8007c46:	f003 fec5 	bl	800b9d4 <tcp_err>
      err = tcp_close(tpcb);
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f004 f9f0 	bl	800c030 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007c50:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8007c52:	b160      	cbz	r0, 8007c6e <lwip_netconn_do_close_internal+0x11a>
    if (err == ERR_MEM) {
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d10a      	bne.n	8007c6e <lwip_netconn_do_close_internal+0x11a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5a:	f893 b009 	ldrb.w	fp, [r3, #9]
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	d13f      	bne.n	8007ce4 <lwip_netconn_do_close_internal+0x190>
        if (close) {
 8007c64:	b11f      	cbz	r7, 8007c6e <lwip_netconn_do_close_internal+0x11a>
          err = ERR_OK;
 8007c66:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f004 fb1f 	bl	800c2ac <tcp_abort>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c70:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007c72:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8007c78:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8007c7a:	b9ce      	cbnz	r6, 8007cb0 <lwip_netconn_do_close_internal+0x15c>
      if (close) {
 8007c7c:	b137      	cbz	r7, 8007c8c <lwip_netconn_do_close_internal+0x138>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 8007c80:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007c82:	b11b      	cbz	r3, 8007c8c <lwip_netconn_do_close_internal+0x138>
 8007c84:	4632      	mov	r2, r6
 8007c86:	2104      	movs	r1, #4
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4798      	blx	r3
      if (shut_rx) {
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	d005      	beq.n	8007c9e <lwip_netconn_do_close_internal+0x14a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c94:	b163      	cbz	r3, 8007cb0 <lwip_netconn_do_close_internal+0x15c>
 8007c96:	2200      	movs	r2, #0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4798      	blx	r3
      if (shut_tx) {
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	d005      	beq.n	8007cb0 <lwip_netconn_do_close_internal+0x15c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007ca4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ca6:	b11b      	cbz	r3, 8007cb0 <lwip_netconn_do_close_internal+0x15c>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2102      	movs	r1, #2
 8007cac:	4620      	mov	r0, r4
 8007cae:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8007cb0:	f007 f9f8 	bl	800f0a4 <sys_arch_protect>
 8007cb4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	bfa8      	it	ge
 8007cbc:	7226      	strbge	r6, [r4, #8]
 8007cbe:	f007 f9fd 	bl	800f0bc <sys_arch_unprotect>
    if (delayed)
 8007cc2:	f1ba 0f00 	cmp.w	sl, #0
 8007cc6:	d003      	beq.n	8007cd0 <lwip_netconn_do_close_internal+0x17c>
      sys_sem_signal(op_completed_sem);
 8007cc8:	f105 000c 	add.w	r0, r5, #12
 8007ccc:	f007 f9a8 	bl	800f020 <sys_sem_signal>
    return ERR_OK;
 8007cd0:	2600      	movs	r6, #0
}
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_arg(tpcb, NULL);
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f003 fe48 	bl	800b970 <tcp_arg>
 8007ce0:	2701      	movs	r7, #1
 8007ce2:	e785      	b.n	8007bf0 <lwip_netconn_do_close_internal+0x9c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007ce4:	7d2b      	ldrb	r3, [r5, #20]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d106      	bne.n	8007cf8 <lwip_netconn_do_close_internal+0x1a4>
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <lwip_netconn_do_close_internal+0x1d0>)
 8007cec:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007cf0:	4913      	ldr	r1, [pc, #76]	; (8007d40 <lwip_netconn_do_close_internal+0x1ec>)
 8007cf2:	480e      	ldr	r0, [pc, #56]	; (8007d2c <lwip_netconn_do_close_internal+0x1d8>)
 8007cf4:	f009 f954 	bl	8010fa0 <iprintf>
    if (shut_tx) {
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	d003      	beq.n	8007d06 <lwip_netconn_do_close_internal+0x1b2>
      tcp_sent(tpcb, sent_tcp);
 8007cfe:	4911      	ldr	r1, [pc, #68]	; (8007d44 <lwip_netconn_do_close_internal+0x1f0>)
 8007d00:	4628      	mov	r0, r5
 8007d02:	f003 fe51 	bl	800b9a8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8007d06:	2201      	movs	r2, #1
 8007d08:	4628      	mov	r0, r5
 8007d0a:	490f      	ldr	r1, [pc, #60]	; (8007d48 <lwip_netconn_do_close_internal+0x1f4>)
 8007d0c:	f003 fe80 	bl	800ba10 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007d10:	4628      	mov	r0, r5
 8007d12:	490e      	ldr	r1, [pc, #56]	; (8007d4c <lwip_netconn_do_close_internal+0x1f8>)
 8007d14:	f003 fe5e 	bl	800b9d4 <tcp_err>
    tcp_arg(tpcb, conn);
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f003 fe28 	bl	800b970 <tcp_arg>
 8007d20:	e7d7      	b.n	8007cd2 <lwip_netconn_do_close_internal+0x17e>
 8007d22:	bf00      	nop
 8007d24:	08012200 	.word	0x08012200
 8007d28:	08011d79 	.word	0x08011d79
 8007d2c:	08011dd4 	.word	0x08011dd4
 8007d30:	08011f85 	.word	0x08011f85
 8007d34:	08011fa3 	.word	0x08011fa3
 8007d38:	08011fc7 	.word	0x08011fc7
 8007d3c:	08011f38 	.word	0x08011f38
 8007d40:	08011fda 	.word	0x08011fda
 8007d44:	08007e8d 	.word	0x08007e8d
 8007d48:	08007d51 	.word	0x08007d51
 8007d4c:	08007831 	.word	0x08007831

08007d50 <poll_tcp>:
{
 8007d50:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007d52:	4604      	mov	r4, r0
 8007d54:	b930      	cbnz	r0, 8007d64 <poll_tcp+0x14>
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <poll_tcp+0x6c>)
 8007d58:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007d5c:	4918      	ldr	r1, [pc, #96]	; (8007dc0 <poll_tcp+0x70>)
 8007d5e:	4819      	ldr	r0, [pc, #100]	; (8007dc4 <poll_tcp+0x74>)
 8007d60:	f009 f91e 	bl	8010fa0 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8007d64:	7861      	ldrb	r1, [r4, #1]
 8007d66:	2901      	cmp	r1, #1
 8007d68:	d11b      	bne.n	8007da2 <poll_tcp+0x52>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7ff fdf4 	bl	8007958 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007d70:	7f23      	ldrb	r3, [r4, #28]
 8007d72:	06da      	lsls	r2, r3, #27
 8007d74:	d513      	bpl.n	8007d9e <poll_tcp+0x4e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	b18a      	cbz	r2, 8007d9e <poll_tcp+0x4e>
 8007d7a:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 8007d7e:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8007d82:	d30c      	bcc.n	8007d9e <poll_tcp+0x4e>
 8007d84:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8007d88:	2a04      	cmp	r2, #4
 8007d8a:	d808      	bhi.n	8007d9e <poll_tcp+0x4e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8007d8c:	f023 0310 	bic.w	r3, r3, #16
 8007d90:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d94:	b11b      	cbz	r3, 8007d9e <poll_tcp+0x4e>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2102      	movs	r1, #2
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4798      	blx	r3
}
 8007d9e:	2000      	movs	r0, #0
 8007da0:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8007da2:	2904      	cmp	r1, #4
 8007da4:	d1e4      	bne.n	8007d70 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007da6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007da8:	b11a      	cbz	r2, 8007db2 <poll_tcp+0x62>
 8007daa:	7a53      	ldrb	r3, [r2, #9]
 8007dac:	b10b      	cbz	r3, 8007db2 <poll_tcp+0x62>
      conn->current_msg->msg.sd.polls_left--;
 8007dae:	3b01      	subs	r3, #1
 8007db0:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007db2:	2101      	movs	r1, #1
 8007db4:	4620      	mov	r0, r4
 8007db6:	f7ff fecd 	bl	8007b54 <lwip_netconn_do_close_internal>
 8007dba:	e7d9      	b.n	8007d70 <poll_tcp+0x20>
 8007dbc:	08012200 	.word	0x08012200
 8007dc0:	08011f2b 	.word	0x08011f2b
 8007dc4:	08011dd4 	.word	0x08011dd4

08007dc8 <recv_tcp>:
{
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4605      	mov	r5, r0
 8007dce:	4616      	mov	r6, r2
 8007dd0:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	b929      	cbnz	r1, 8007de2 <recv_tcp+0x1a>
 8007dd6:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <recv_tcp+0xb0>)
 8007dd8:	22f9      	movs	r2, #249	; 0xf9
 8007dda:	4928      	ldr	r1, [pc, #160]	; (8007e7c <recv_tcp+0xb4>)
 8007ddc:	4828      	ldr	r0, [pc, #160]	; (8007e80 <recv_tcp+0xb8>)
 8007dde:	f009 f8df 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007de2:	bb9d      	cbnz	r5, 8007e4c <recv_tcp+0x84>
    return ERR_VAL;
 8007de4:	f06f 0405 	mvn.w	r4, #5
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007de8:	4b23      	ldr	r3, [pc, #140]	; (8007e78 <recv_tcp+0xb0>)
 8007dea:	22fa      	movs	r2, #250	; 0xfa
 8007dec:	4925      	ldr	r1, [pc, #148]	; (8007e84 <recv_tcp+0xbc>)
 8007dee:	4824      	ldr	r0, [pc, #144]	; (8007e80 <recv_tcp+0xb8>)
 8007df0:	f009 f8d6 	bl	8010fa0 <iprintf>
}
 8007df4:	4620      	mov	r0, r4
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcp_recved(pcb, p->tot_len);
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	8931      	ldrh	r1, [r6, #8]
 8007dfe:	f003 fd4d 	bl	800b89c <tcp_recved>
      pbuf_free(p);
 8007e02:	4630      	mov	r0, r6
 8007e04:	f003 f932 	bl	800b06c <pbuf_free>
 8007e08:	e7f4      	b.n	8007df4 <recv_tcp+0x2c>
  if (err != ERR_OK) {
 8007e0a:	f1b8 0f00 	cmp.w	r8, #0
 8007e0e:	d009      	beq.n	8007e24 <recv_tcp+0x5c>
    NETCONN_SET_SAFE_ERR(conn, err);
 8007e10:	f007 f948 	bl	800f0a4 <sys_arch_protect>
 8007e14:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	bfa8      	it	ge
 8007e1c:	f885 8008 	strbge.w	r8, [r5, #8]
 8007e20:	f007 f94c 	bl	800f0bc <sys_arch_unprotect>
  if (p != NULL) {
 8007e24:	b16e      	cbz	r6, 8007e42 <recv_tcp+0x7a>
    len = p->tot_len;
 8007e26:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4648      	mov	r0, r9
 8007e2c:	f007 f880 	bl	800ef30 <sys_mbox_trypost>
 8007e30:	4604      	mov	r4, r0
 8007e32:	b940      	cbnz	r0, 8007e46 <recv_tcp+0x7e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007e34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007e36:	b1eb      	cbz	r3, 8007e74 <recv_tcp+0xac>
 8007e38:	4601      	mov	r1, r0
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	4798      	blx	r3
 8007e40:	e7d8      	b.n	8007df4 <recv_tcp+0x2c>
    len = 0;
 8007e42:	4637      	mov	r7, r6
 8007e44:	e7f0      	b.n	8007e28 <recv_tcp+0x60>
    return ERR_MEM;
 8007e46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e4a:	e7d3      	b.n	8007df4 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007e4c:	686b      	ldr	r3, [r5, #4]
 8007e4e:	429f      	cmp	r7, r3
 8007e50:	d006      	beq.n	8007e60 <recv_tcp+0x98>
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <recv_tcp+0xb0>)
 8007e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e58:	490b      	ldr	r1, [pc, #44]	; (8007e88 <recv_tcp+0xc0>)
 8007e5a:	4809      	ldr	r0, [pc, #36]	; (8007e80 <recv_tcp+0xb8>)
 8007e5c:	f009 f8a0 	bl	8010fa0 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007e60:	f105 0910 	add.w	r9, r5, #16
 8007e64:	4648      	mov	r0, r9
 8007e66:	f007 f8a0 	bl	800efaa <sys_mbox_valid>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1cc      	bne.n	8007e0a <recv_tcp+0x42>
    if (p != NULL) {
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	d1c2      	bne.n	8007dfa <recv_tcp+0x32>
    return ERR_OK;
 8007e74:	2400      	movs	r4, #0
 8007e76:	e7bd      	b.n	8007df4 <recv_tcp+0x2c>
 8007e78:	08012200 	.word	0x08012200
 8007e7c:	080121a1 	.word	0x080121a1
 8007e80:	08011dd4 	.word	0x08011dd4
 8007e84:	080121c3 	.word	0x080121c3
 8007e88:	080121e2 	.word	0x080121e2

08007e8c <sent_tcp>:
{
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007e90:	4604      	mov	r4, r0
 8007e92:	b970      	cbnz	r0, 8007eb2 <sent_tcp+0x26>
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <sent_tcp+0x60>)
 8007e96:	f240 1261 	movw	r2, #353	; 0x161
 8007e9a:	4915      	ldr	r1, [pc, #84]	; (8007ef0 <sent_tcp+0x64>)
 8007e9c:	4815      	ldr	r0, [pc, #84]	; (8007ef4 <sent_tcp+0x68>)
 8007e9e:	f009 f87f 	bl	8010fa0 <iprintf>
}
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8007ea6:	2904      	cmp	r1, #4
 8007ea8:	d108      	bne.n	8007ebc <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007eaa:	2101      	movs	r1, #1
 8007eac:	f7ff fe52 	bl	8007b54 <lwip_netconn_do_close_internal>
 8007eb0:	e004      	b.n	8007ebc <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8007eb2:	7841      	ldrb	r1, [r0, #1]
 8007eb4:	2901      	cmp	r1, #1
 8007eb6:	d1f6      	bne.n	8007ea6 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007eb8:	f7ff fd4e 	bl	8007958 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0ef      	beq.n	8007ea2 <sent_tcp+0x16>
 8007ec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ec6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007eca:	d3ea      	bcc.n	8007ea2 <sent_tcp+0x16>
 8007ecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d8e6      	bhi.n	8007ea2 <sent_tcp+0x16>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8007ed4:	7f23      	ldrb	r3, [r4, #28]
 8007ed6:	f023 0310 	bic.w	r3, r3, #16
 8007eda:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0df      	beq.n	8007ea2 <sent_tcp+0x16>
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4798      	blx	r3
  return ERR_OK;
 8007eea:	e7da      	b.n	8007ea2 <sent_tcp+0x16>
 8007eec:	08012200 	.word	0x08012200
 8007ef0:	08011f2b 	.word	0x08011f2b
 8007ef4:	08011dd4 	.word	0x08011dd4

08007ef8 <lwip_netconn_do_newconn>:
{
 8007ef8:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8007efa:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007efc:	6805      	ldr	r5, [r0, #0]
{
 8007efe:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8007f00:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007f02:	6868      	ldr	r0, [r5, #4]
 8007f04:	bb28      	cbnz	r0, 8007f52 <lwip_netconn_do_newconn+0x5a>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8007f06:	782b      	ldrb	r3, [r5, #0]
 8007f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d014      	beq.n	8007f3a <lwip_netconn_do_newconn+0x42>
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d11c      	bne.n	8007f4e <lwip_netconn_do_newconn+0x56>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007f14:	f006 ff4a 	bl	800edac <udp_new_ip_type>
 8007f18:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8007f1a:	6822      	ldr	r2, [r4, #0]
 8007f1c:	6850      	ldr	r0, [r2, #4]
 8007f1e:	b150      	cbz	r0, 8007f36 <lwip_netconn_do_newconn+0x3e>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007f20:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007f22:	4914      	ldr	r1, [pc, #80]	; (8007f74 <lwip_netconn_do_newconn+0x7c>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007f24:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007f26:	bf04      	itt	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007f2c:	f006 ff14 	bl	800ed58 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	b96b      	cbnz	r3, 8007f52 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8007f36:	23ff      	movs	r3, #255	; 0xff
 8007f38:	e00a      	b.n	8007f50 <lwip_netconn_do_newconn+0x58>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007f3a:	f004 fa87 	bl	800c44c <tcp_new_ip_type>
 8007f3e:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007f40:	6820      	ldr	r0, [r4, #0]
 8007f42:	6843      	ldr	r3, [r0, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f6      	beq.n	8007f36 <lwip_netconn_do_newconn+0x3e>
      setup_tcp(msg->conn);
 8007f48:	f7ff fc50 	bl	80077ec <setup_tcp>
 8007f4c:	e7f0      	b.n	8007f30 <lwip_netconn_do_newconn+0x38>
    msg->err = ERR_VAL;
 8007f4e:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8007f50:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	b163      	cbz	r3, 8007f70 <lwip_netconn_do_newconn+0x78>
 8007f56:	f007 f8a5 	bl	800f0a4 <sys_arch_protect>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007f60:	320c      	adds	r2, #12
 8007f62:	bfa4      	itt	ge
 8007f64:	7922      	ldrbge	r2, [r4, #4]
 8007f66:	721a      	strbge	r2, [r3, #8]
}
 8007f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 8007f6c:	f007 b8a6 	b.w	800f0bc <sys_arch_unprotect>
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	bf00      	nop
 8007f74:	0800773d 	.word	0x0800773d

08007f78 <netconn_alloc>:
{
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007f7c:	2007      	movs	r0, #7
{
 8007f7e:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007f80:	f002 fed2 	bl	800ad28 <memp_malloc>
  if (conn == NULL) {
 8007f84:	4604      	mov	r4, r0
 8007f86:	b3a8      	cbz	r0, 8007ff4 <netconn_alloc+0x7c>
  conn->type = t;
 8007f88:	7005      	strb	r5, [r0, #0]
  switch(NETCONNTYPE_GROUP(t)) {
 8007f8a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->last_err = ERR_OK;
 8007f8e:	2300      	movs	r3, #0
  switch(NETCONNTYPE_GROUP(t)) {
 8007f90:	2d10      	cmp	r5, #16
  conn->last_err = ERR_OK;
 8007f92:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8007f94:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8007f96:	d00e      	beq.n	8007fb6 <netconn_alloc+0x3e>
 8007f98:	2d20      	cmp	r5, #32
 8007f9a:	d00c      	beq.n	8007fb6 <netconn_alloc+0x3e>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <netconn_alloc+0x80>)
 8007f9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007fa2:	4916      	ldr	r1, [pc, #88]	; (8007ffc <netconn_alloc+0x84>)
 8007fa4:	4816      	ldr	r0, [pc, #88]	; (8008000 <netconn_alloc+0x88>)
 8007fa6:	f008 fffb 	bl	8010fa0 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007faa:	4621      	mov	r1, r4
 8007fac:	2007      	movs	r0, #7
 8007fae:	f002 fed7 	bl	800ad60 <memp_free>
  return NULL;
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	e01e      	b.n	8007ff4 <netconn_alloc+0x7c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007fb6:	f104 0610 	add.w	r6, r4, #16
 8007fba:	2106      	movs	r1, #6
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f006 ff91 	bl	800eee4 <sys_mbox_new>
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1f0      	bne.n	8007faa <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007fc8:	f104 000c 	add.w	r0, r4, #12
 8007fcc:	f006 fff5 	bl	800efba <sys_sem_new>
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b118      	cbz	r0, 8007fdc <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f006 ff95 	bl	800ef04 <sys_mbox_free>
    goto free_and_return;
 8007fda:	e7e6      	b.n	8007faa <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007fdc:	f104 0014 	add.w	r0, r4, #20
 8007fe0:	f006 ffe8 	bl	800efb4 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8007fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  conn->state        = NETCONN_NONE;
 8007fe8:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 8007fea:	61a3      	str	r3, [r4, #24]
  conn->callback     = callback;
 8007fec:	62a7      	str	r7, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8007fee:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8007ff0:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 8007ff2:	7725      	strb	r5, [r4, #28]
}
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff8:	08012200 	.word	0x08012200
 8007ffc:	080120d7 	.word	0x080120d7
 8008000:	08011dd4 	.word	0x08011dd4

08008004 <netconn_free>:
{
 8008004:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008006:	6843      	ldr	r3, [r0, #4]
{
 8008008:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800800a:	b133      	cbz	r3, 800801a <netconn_free+0x16>
 800800c:	4b16      	ldr	r3, [pc, #88]	; (8008068 <netconn_free+0x64>)
 800800e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008012:	4916      	ldr	r1, [pc, #88]	; (800806c <netconn_free+0x68>)
 8008014:	4816      	ldr	r0, [pc, #88]	; (8008070 <netconn_free+0x6c>)
 8008016:	f008 ffc3 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800801a:	f104 0010 	add.w	r0, r4, #16
 800801e:	f006 ffc4 	bl	800efaa <sys_mbox_valid>
 8008022:	b130      	cbz	r0, 8008032 <netconn_free+0x2e>
 8008024:	4b10      	ldr	r3, [pc, #64]	; (8008068 <netconn_free+0x64>)
 8008026:	f240 22e2 	movw	r2, #738	; 0x2e2
 800802a:	4912      	ldr	r1, [pc, #72]	; (8008074 <netconn_free+0x70>)
 800802c:	4810      	ldr	r0, [pc, #64]	; (8008070 <netconn_free+0x6c>)
 800802e:	f008 ffb7 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008032:	f104 0014 	add.w	r0, r4, #20
 8008036:	f006 ffb8 	bl	800efaa <sys_mbox_valid>
 800803a:	b130      	cbz	r0, 800804a <netconn_free+0x46>
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <netconn_free+0x64>)
 800803e:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008042:	490d      	ldr	r1, [pc, #52]	; (8008078 <netconn_free+0x74>)
 8008044:	480a      	ldr	r0, [pc, #40]	; (8008070 <netconn_free+0x6c>)
 8008046:	f008 ffab 	bl	8010fa0 <iprintf>
  sys_sem_free(&conn->op_completed);
 800804a:	f104 050c 	add.w	r5, r4, #12
 800804e:	4628      	mov	r0, r5
 8008050:	f006 ffe9 	bl	800f026 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008054:	4628      	mov	r0, r5
 8008056:	f006 ffee 	bl	800f036 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800805a:	4621      	mov	r1, r4
 800805c:	2007      	movs	r0, #7
}
 800805e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8008062:	f002 be7d 	b.w	800ad60 <memp_free>
 8008066:	bf00      	nop
 8008068:	08012200 	.word	0x08012200
 800806c:	080120fd 	.word	0x080120fd
 8008070:	08011dd4 	.word	0x08011dd4
 8008074:	0801212b 	.word	0x0801212b
 8008078:	08012165 	.word	0x08012165

0800807c <netconn_drain>:
{
 800807c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800807e:	f100 0510 	add.w	r5, r0, #16
{
 8008082:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008084:	4628      	mov	r0, r5
 8008086:	f006 ff90 	bl	800efaa <sys_mbox_valid>
 800808a:	b9b0      	cbnz	r0, 80080ba <netconn_drain+0x3e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800808c:	3414      	adds	r4, #20
 800808e:	4620      	mov	r0, r4
 8008090:	f006 ff8b 	bl	800efaa <sys_mbox_valid>
 8008094:	2800      	cmp	r0, #0
 8008096:	d13d      	bne.n	8008114 <netconn_drain+0x98>
}
 8008098:	b002      	add	sp, #8
 800809a:	bd70      	pop	{r4, r5, r6, pc}
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800809c:	7823      	ldrb	r3, [r4, #0]
 800809e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	d116      	bne.n	80080d4 <netconn_drain+0x58>
        if (mem != NULL) {
 80080a6:	9e01      	ldr	r6, [sp, #4]
 80080a8:	b13e      	cbz	r6, 80080ba <netconn_drain+0x3e>
          if (conn->pcb.tcp != NULL) {
 80080aa:	6860      	ldr	r0, [r4, #4]
 80080ac:	b110      	cbz	r0, 80080b4 <netconn_drain+0x38>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80080ae:	8931      	ldrh	r1, [r6, #8]
 80080b0:	f003 fbf4 	bl	800b89c <tcp_recved>
          pbuf_free(p);
 80080b4:	4630      	mov	r0, r6
 80080b6:	f002 ffd9 	bl	800b06c <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80080ba:	a901      	add	r1, sp, #4
 80080bc:	4628      	mov	r0, r5
 80080be:	f006 ff63 	bl	800ef88 <sys_arch_mbox_tryfetch>
 80080c2:	3001      	adds	r0, #1
 80080c4:	d1ea      	bne.n	800809c <netconn_drain+0x20>
    sys_mbox_free(&conn->recvmbox);
 80080c6:	4628      	mov	r0, r5
 80080c8:	f006 ff1c 	bl	800ef04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80080cc:	4628      	mov	r0, r5
 80080ce:	f006 ff71 	bl	800efb4 <sys_mbox_set_invalid>
 80080d2:	e7db      	b.n	800808c <netconn_drain+0x10>
        netbuf_delete((struct netbuf *)mem);
 80080d4:	9801      	ldr	r0, [sp, #4]
 80080d6:	f000 facf 	bl	8008678 <netbuf_delete>
 80080da:	e7ee      	b.n	80080ba <netconn_drain+0x3e>
      if (mem != &netconn_aborted) {
 80080dc:	9d01      	ldr	r5, [sp, #4]
 80080de:	42b5      	cmp	r5, r6
 80080e0:	d00b      	beq.n	80080fa <netconn_drain+0x7e>
        netconn_drain(newconn);
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7ff ffca 	bl	800807c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80080e8:	6868      	ldr	r0, [r5, #4]
 80080ea:	b118      	cbz	r0, 80080f4 <netconn_drain+0x78>
          tcp_abort(newconn->pcb.tcp);
 80080ec:	f004 f8de 	bl	800c2ac <tcp_abort>
          newconn->pcb.tcp = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 80080f4:	4628      	mov	r0, r5
 80080f6:	f7ff ff85 	bl	8008004 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80080fa:	a901      	add	r1, sp, #4
 80080fc:	4620      	mov	r0, r4
 80080fe:	f006 ff43 	bl	800ef88 <sys_arch_mbox_tryfetch>
 8008102:	3001      	adds	r0, #1
 8008104:	d1ea      	bne.n	80080dc <netconn_drain+0x60>
    sys_mbox_free(&conn->acceptmbox);
 8008106:	4620      	mov	r0, r4
 8008108:	f006 fefc 	bl	800ef04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800810c:	4620      	mov	r0, r4
 800810e:	f006 ff51 	bl	800efb4 <sys_mbox_set_invalid>
}
 8008112:	e7c1      	b.n	8008098 <netconn_drain+0x1c>
      if (mem != &netconn_aborted) {
 8008114:	4e00      	ldr	r6, [pc, #0]	; (8008118 <netconn_drain+0x9c>)
 8008116:	e7f0      	b.n	80080fa <netconn_drain+0x7e>
 8008118:	20008404 	.word	0x20008404

0800811c <accept_function>:
{
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	460f      	mov	r7, r1
 8008122:	4690      	mov	r8, r2
  if (conn == NULL) {
 8008124:	4605      	mov	r5, r0
 8008126:	b920      	cbnz	r0, 8008132 <accept_function+0x16>
    return ERR_VAL;
 8008128:	f06f 0405 	mvn.w	r4, #5
}
 800812c:	4620      	mov	r0, r4
 800812e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008132:	f100 0414 	add.w	r4, r0, #20
 8008136:	4620      	mov	r0, r4
 8008138:	f006 ff37 	bl	800efaa <sys_mbox_valid>
 800813c:	2800      	cmp	r0, #0
 800813e:	d0f3      	beq.n	8008128 <accept_function+0xc>
  if (newpcb == NULL) {
 8008140:	b96f      	cbnz	r7, 800815e <accept_function+0x42>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008142:	492c      	ldr	r1, [pc, #176]	; (80081f4 <accept_function+0xd8>)
 8008144:	4620      	mov	r0, r4
 8008146:	f006 fef3 	bl	800ef30 <sys_mbox_trypost>
 800814a:	4602      	mov	r2, r0
 800814c:	2800      	cmp	r0, #0
 800814e:	d1eb      	bne.n	8008128 <accept_function+0xc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008150:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0e8      	beq.n	8008128 <accept_function+0xc>
 8008156:	4601      	mov	r1, r0
 8008158:	4628      	mov	r0, r5
 800815a:	4798      	blx	r3
 800815c:	e7e4      	b.n	8008128 <accept_function+0xc>
  newconn = netconn_alloc(conn->type, conn->callback);
 800815e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008160:	7828      	ldrb	r0, [r5, #0]
 8008162:	f7ff ff09 	bl	8007f78 <netconn_alloc>
  if (newconn == NULL) {
 8008166:	4606      	mov	r6, r0
 8008168:	b968      	cbnz	r0, 8008186 <accept_function+0x6a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800816a:	4922      	ldr	r1, [pc, #136]	; (80081f4 <accept_function+0xd8>)
 800816c:	4620      	mov	r0, r4
 800816e:	f006 fedf 	bl	800ef30 <sys_mbox_trypost>
 8008172:	4602      	mov	r2, r0
 8008174:	b920      	cbnz	r0, 8008180 <accept_function+0x64>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008176:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008178:	b113      	cbz	r3, 8008180 <accept_function+0x64>
 800817a:	4601      	mov	r1, r0
 800817c:	4628      	mov	r0, r5
 800817e:	4798      	blx	r3
    return ERR_MEM;
 8008180:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008184:	e7d2      	b.n	800812c <accept_function+0x10>
  newconn->pcb.tcp = newpcb;
 8008186:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8008188:	f7ff fb30 	bl	80077ec <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800818c:	4620      	mov	r0, r4
  newconn->last_err = err;
 800818e:	f886 8008 	strb.w	r8, [r6, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008192:	4631      	mov	r1, r6
 8008194:	f006 fecc 	bl	800ef30 <sys_mbox_trypost>
 8008198:	4604      	mov	r4, r0
 800819a:	b318      	cbz	r0, 80081e4 <accept_function+0xc8>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800819c:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 800819e:	2100      	movs	r1, #0
 80081a0:	4620      	mov	r0, r4
 80081a2:	f003 fbe5 	bl	800b970 <tcp_arg>
    tcp_recv(pcb, NULL);
 80081a6:	4620      	mov	r0, r4
 80081a8:	2100      	movs	r1, #0
 80081aa:	f003 fbe5 	bl	800b978 <tcp_recv>
    tcp_sent(pcb, NULL);
 80081ae:	4620      	mov	r0, r4
 80081b0:	2100      	movs	r1, #0
 80081b2:	f003 fbf9 	bl	800b9a8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80081b6:	2200      	movs	r2, #0
 80081b8:	4620      	mov	r0, r4
 80081ba:	4611      	mov	r1, r2
 80081bc:	f003 fc28 	bl	800ba10 <tcp_poll>
    tcp_err(pcb, NULL);
 80081c0:	2100      	movs	r1, #0
 80081c2:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 80081c4:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 80081c8:	f003 fc04 	bl	800b9d4 <tcp_err>
    newconn->pcb.tcp = NULL;
 80081cc:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 80081ce:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 80081d0:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 80081d2:	f006 fe97 	bl	800ef04 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80081d6:	4620      	mov	r0, r4
 80081d8:	f006 feec 	bl	800efb4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ff11 	bl	8008004 <netconn_free>
 80081e2:	e7cd      	b.n	8008180 <accept_function+0x64>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80081e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0a0      	beq.n	800812c <accept_function+0x10>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4601      	mov	r1, r0
 80081ee:	4628      	mov	r0, r5
 80081f0:	4798      	blx	r3
 80081f2:	e79b      	b.n	800812c <accept_function+0x10>
 80081f4:	20008404 	.word	0x20008404

080081f8 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 80081f8:	6803      	ldr	r3, [r0, #0]
{
 80081fa:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 80081fc:	785d      	ldrb	r5, [r3, #1]
{
 80081fe:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008200:	b16d      	cbz	r5, 800821e <lwip_netconn_do_delconn+0x26>
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008208:	2b10      	cmp	r3, #16
 800820a:	d006      	beq.n	800821a <lwip_netconn_do_delconn+0x22>
 800820c:	4b40      	ldr	r3, [pc, #256]	; (8008310 <lwip_netconn_do_delconn+0x118>)
 800820e:	f240 4201 	movw	r2, #1025	; 0x401
 8008212:	4940      	ldr	r1, [pc, #256]	; (8008314 <lwip_netconn_do_delconn+0x11c>)
 8008214:	4840      	ldr	r0, [pc, #256]	; (8008318 <lwip_netconn_do_delconn+0x120>)
 8008216:	f008 fec3 	bl	8010fa0 <iprintf>
  if (((state != NETCONN_NONE) &&
 800821a:	2d02      	cmp	r5, #2
 800821c:	d121      	bne.n	8008262 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 800821e:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8008220:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8008222:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8008224:	f7ff ff2a 	bl	800807c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	6858      	ldr	r0, [r3, #4]
 800822c:	b160      	cbz	r0, 8008248 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008234:	2a10      	cmp	r2, #16
 8008236:	d032      	beq.n	800829e <lwip_netconn_do_delconn+0xa6>
 8008238:	2a20      	cmp	r2, #32
 800823a:	d102      	bne.n	8008242 <lwip_netconn_do_delconn+0x4a>
        msg->conn->pcb.udp->recv_arg = NULL;
 800823c:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 800823e:	f006 fd8f 	bl	800ed60 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800824c:	b113      	cbz	r3, 8008254 <lwip_netconn_do_delconn+0x5c>
 800824e:	2200      	movs	r2, #0
 8008250:	4611      	mov	r1, r2
 8008252:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008258:	b15b      	cbz	r3, 8008272 <lwip_netconn_do_delconn+0x7a>
 800825a:	2200      	movs	r2, #0
 800825c:	2102      	movs	r1, #2
 800825e:	4798      	blx	r3
 8008260:	e007      	b.n	8008272 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8008262:	2d03      	cmp	r5, #3
 8008264:	d103      	bne.n	800826e <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	7f1b      	ldrb	r3, [r3, #28]
 800826a:	075b      	lsls	r3, r3, #29
 800826c:	d4d7      	bmi.n	800821e <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 800826e:	23fb      	movs	r3, #251	; 0xfb
 8008270:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	300c      	adds	r0, #12
 8008276:	f006 fed9 	bl	800f02c <sys_sem_valid>
 800827a:	2800      	cmp	r0, #0
 800827c:	d046      	beq.n	800830c <lwip_netconn_do_delconn+0x114>
    TCPIP_APIMSG_ACK(msg);
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d043      	beq.n	800830c <lwip_netconn_do_delconn+0x114>
 8008284:	f006 ff0e 	bl	800f0a4 <sys_arch_protect>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800828e:	320c      	adds	r2, #12
 8008290:	bfa4      	itt	ge
 8008292:	7922      	ldrbge	r2, [r4, #4]
 8008294:	721a      	strbge	r2, [r3, #8]
}
 8008296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 800829a:	f006 bf0f 	b.w	800f0bc <sys_arch_unprotect>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800829e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a0:	b90a      	cbnz	r2, 80082a6 <lwip_netconn_do_delconn+0xae>
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	b133      	cbz	r3, 80082b4 <lwip_netconn_do_delconn+0xbc>
 80082a6:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <lwip_netconn_do_delconn+0x118>)
 80082a8:	f240 4235 	movw	r2, #1077	; 0x435
 80082ac:	491b      	ldr	r1, [pc, #108]	; (800831c <lwip_netconn_do_delconn+0x124>)
 80082ae:	481a      	ldr	r0, [pc, #104]	; (8008318 <lwip_netconn_do_delconn+0x120>)
 80082b0:	f008 fe76 	bl	8010fa0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	2304      	movs	r3, #4
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80082b8:	2100      	movs	r1, #0
        msg->conn->state = NETCONN_CLOSE;
 80082ba:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80082bc:	2303      	movs	r3, #3
 80082be:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80082c0:	6244      	str	r4, [r0, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80082c2:	f7ff fc47 	bl	8007b54 <lwip_netconn_do_close_internal>
 80082c6:	b308      	cbz	r0, 800830c <lwip_netconn_do_delconn+0x114>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d006      	beq.n	80082de <lwip_netconn_do_delconn+0xe6>
 80082d0:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <lwip_netconn_do_delconn+0x118>)
 80082d2:	f240 423b 	movw	r2, #1083	; 0x43b
 80082d6:	4912      	ldr	r1, [pc, #72]	; (8008320 <lwip_netconn_do_delconn+0x128>)
 80082d8:	480f      	ldr	r0, [pc, #60]	; (8008318 <lwip_netconn_do_delconn+0x120>)
 80082da:	f008 fe61 	bl	8010fa0 <iprintf>
          UNLOCK_TCPIP_CORE();
 80082de:	4811      	ldr	r0, [pc, #68]	; (8008324 <lwip_netconn_do_delconn+0x12c>)
 80082e0:	f006 fecc 	bl	800f07c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	2100      	movs	r1, #0
 80082e8:	300c      	adds	r0, #12
 80082ea:	f006 fe7e 	bl	800efea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80082ee:	480d      	ldr	r0, [pc, #52]	; (8008324 <lwip_netconn_do_delconn+0x12c>)
 80082f0:	f006 febf 	bl	800f072 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	b143      	cbz	r3, 800830c <lwip_netconn_do_delconn+0x114>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <lwip_netconn_do_delconn+0x118>)
 80082fc:	f240 423f 	movw	r2, #1087	; 0x43f
 8008300:	4907      	ldr	r1, [pc, #28]	; (8008320 <lwip_netconn_do_delconn+0x128>)
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <lwip_netconn_do_delconn+0x120>)
}
 8008304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008308:	f008 be4a 	b.w	8010fa0 <iprintf>
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	bf00      	nop
 8008310:	08012200 	.word	0x08012200
 8008314:	08011ffd 	.word	0x08011ffd
 8008318:	08011dd4 	.word	0x08011dd4
 800831c:	08012011 	.word	0x08012011
 8008320:	0801202c 	.word	0x0801202c
 8008324:	20008408 	.word	0x20008408

08008328 <lwip_netconn_do_bind>:
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008328:	6803      	ldr	r3, [r0, #0]
{
 800832a:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800832c:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 8008330:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008332:	f112 0f0c 	cmn.w	r2, #12
 8008336:	da0f      	bge.n	8008358 <lwip_netconn_do_bind+0x30>
    msg->err = msg->conn->last_err;
 8008338:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	b31b      	cbz	r3, 8008386 <lwip_netconn_do_bind+0x5e>
 800833e:	f006 feb1 	bl	800f0a4 <sys_arch_protect>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008348:	320c      	adds	r2, #12
 800834a:	bfa4      	itt	ge
 800834c:	7922      	ldrbge	r2, [r4, #4]
 800834e:	721a      	strbge	r2, [r3, #8]
}
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8008354:	f006 beb2 	b.w	800f0bc <sys_arch_unprotect>
    msg->err = ERR_VAL;
 8008358:	22fa      	movs	r2, #250	; 0xfa
 800835a:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800835c:	6858      	ldr	r0, [r3, #4]
 800835e:	2800      	cmp	r0, #0
 8008360:	d0eb      	beq.n	800833a <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008368:	2b10      	cmp	r3, #16
 800836a:	d007      	beq.n	800837c <lwip_netconn_do_bind+0x54>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d1e4      	bne.n	800833a <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008370:	89a2      	ldrh	r2, [r4, #12]
 8008372:	68a1      	ldr	r1, [r4, #8]
 8008374:	f006 fc1a 	bl	800ebac <udp_bind>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008378:	7120      	strb	r0, [r4, #4]
        break;
 800837a:	e7de      	b.n	800833a <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800837c:	89a2      	ldrh	r2, [r4, #12]
 800837e:	68a1      	ldr	r1, [r4, #8]
 8008380:	f003 f9be 	bl	800b700 <tcp_bind>
 8008384:	e7f8      	b.n	8008378 <lwip_netconn_do_bind+0x50>
 8008386:	bd10      	pop	{r4, pc}

08008388 <lwip_netconn_do_listen>:
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008388:	6803      	ldr	r3, [r0, #0]
{
 800838a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800838c:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 8008390:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008392:	f112 0f0c 	cmn.w	r2, #12
 8008396:	da0f      	bge.n	80083b8 <lwip_netconn_do_listen+0x30>
    msg->err = msg->conn->last_err;
 8008398:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	b153      	cbz	r3, 80083b4 <lwip_netconn_do_listen+0x2c>
 800839e:	f006 fe81 	bl	800f0a4 <sys_arch_protect>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80083a8:	320c      	adds	r2, #12
 80083aa:	bfa4      	itt	ge
 80083ac:	7922      	ldrbge	r2, [r4, #4]
 80083ae:	721a      	strbge	r2, [r3, #8]
 80083b0:	f006 fe84 	bl	800f0bc <sys_arch_unprotect>
}
 80083b4:	b003      	add	sp, #12
 80083b6:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 80083b8:	22f5      	movs	r2, #245	; 0xf5
 80083ba:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80083bc:	6858      	ldr	r0, [r3, #4]
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0eb      	beq.n	800839a <lwip_netconn_do_listen+0x12>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80083c8:	2a10      	cmp	r2, #16
 80083ca:	d146      	bne.n	800845a <lwip_netconn_do_listen+0xd2>
        if (msg->conn->state == NETCONN_NONE) {
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d13f      	bne.n	8008452 <lwip_netconn_do_listen+0xca>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 80083d2:	7d03      	ldrb	r3, [r0, #20]
 80083d4:	b113      	cbz	r3, 80083dc <lwip_netconn_do_listen+0x54>
            msg->err = ERR_VAL;
 80083d6:	23fa      	movs	r3, #250	; 0xfa
        msg->err = ERR_ARG;
 80083d8:	7123      	strb	r3, [r4, #4]
 80083da:	e7de      	b.n	800839a <lwip_netconn_do_listen+0x12>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80083dc:	f10d 0207 	add.w	r2, sp, #7
 80083e0:	21ff      	movs	r1, #255	; 0xff
 80083e2:	f003 f9d7 	bl	800b794 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 80083e6:	4605      	mov	r5, r0
 80083e8:	b910      	cbnz	r0, 80083f0 <lwip_netconn_do_listen+0x68>
              msg->err = err;
 80083ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083ee:	e7f3      	b.n	80083d8 <lwip_netconn_do_listen+0x50>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80083f0:	6820      	ldr	r0, [r4, #0]
 80083f2:	3010      	adds	r0, #16
 80083f4:	f006 fdd9 	bl	800efaa <sys_mbox_valid>
 80083f8:	b138      	cbz	r0, 800840a <lwip_netconn_do_listen+0x82>
                sys_mbox_free(&msg->conn->recvmbox);
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	3010      	adds	r0, #16
 80083fe:	f006 fd81 	bl	800ef04 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008402:	6820      	ldr	r0, [r4, #0]
 8008404:	3010      	adds	r0, #16
 8008406:	f006 fdd5 	bl	800efb4 <sys_mbox_set_invalid>
              msg->err = ERR_OK;
 800840a:	2300      	movs	r3, #0
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800840c:	6820      	ldr	r0, [r4, #0]
              msg->err = ERR_OK;
 800840e:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008410:	3014      	adds	r0, #20
 8008412:	f006 fdca 	bl	800efaa <sys_mbox_valid>
 8008416:	b928      	cbnz	r0, 8008424 <lwip_netconn_do_listen+0x9c>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	2106      	movs	r1, #6
 800841c:	3014      	adds	r0, #20
 800841e:	f006 fd61 	bl	800eee4 <sys_mbox_new>
 8008422:	7120      	strb	r0, [r4, #4]
              if (msg->err == ERR_OK) {
 8008424:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8008428:	b963      	cbnz	r3, 8008444 <lwip_netconn_do_listen+0xbc>
                msg->conn->state = NETCONN_LISTEN;
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	2302      	movs	r3, #2
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800842e:	4628      	mov	r0, r5
                msg->conn->state = NETCONN_LISTEN;
 8008430:	704b      	strb	r3, [r1, #1]
                msg->conn->pcb.tcp = lpcb;
 8008432:	604d      	str	r5, [r1, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008434:	f003 fa9c 	bl	800b970 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	4909      	ldr	r1, [pc, #36]	; (8008460 <lwip_netconn_do_listen+0xd8>)
 800843c:	6858      	ldr	r0, [r3, #4]
 800843e:	f003 fae1 	bl	800ba04 <tcp_accept>
 8008442:	e7aa      	b.n	800839a <lwip_netconn_do_listen+0x12>
                tcp_close(lpcb);
 8008444:	4628      	mov	r0, r5
 8008446:	f003 fdf3 	bl	800c030 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	2200      	movs	r2, #0
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	e7a3      	b.n	800839a <lwip_netconn_do_listen+0x12>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8008452:	2b02      	cmp	r3, #2
 8008454:	d1a1      	bne.n	800839a <lwip_netconn_do_listen+0x12>
          msg->err = ERR_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e7be      	b.n	80083d8 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 800845a:	23f0      	movs	r3, #240	; 0xf0
 800845c:	e7bc      	b.n	80083d8 <lwip_netconn_do_listen+0x50>
 800845e:	bf00      	nop
 8008460:	0800811d 	.word	0x0800811d

08008464 <lwip_netconn_do_recv>:
{
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8008466:	2300      	movs	r3, #0
{
 8008468:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800846a:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800846c:	6803      	ldr	r3, [r0, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	b912      	cbnz	r2, 8008478 <lwip_netconn_do_recv+0x14>
  TCPIP_APIMSG_ACK(msg);
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	b9a3      	cbnz	r3, 80084a0 <lwip_netconn_do_recv+0x3c>
 8008476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800847e:	2b10      	cmp	r3, #16
 8008480:	d1f7      	bne.n	8008472 <lwip_netconn_do_recv+0xe>
      u32_t remaining = msg->msg.r.len;
 8008482:	6885      	ldr	r5, [r0, #8]
 8008484:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8008488:	42bd      	cmp	r5, r7
 800848a:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	bf28      	it	cs
 8008490:	463e      	movcs	r6, r7
 8008492:	6858      	ldr	r0, [r3, #4]
 8008494:	b2b1      	uxth	r1, r6
 8008496:	f003 fa01 	bl	800b89c <tcp_recved>
      } while (remaining != 0);
 800849a:	1bad      	subs	r5, r5, r6
 800849c:	d1f4      	bne.n	8008488 <lwip_netconn_do_recv+0x24>
 800849e:	e7e8      	b.n	8008472 <lwip_netconn_do_recv+0xe>
  TCPIP_APIMSG_ACK(msg);
 80084a0:	f006 fe00 	bl	800f0a4 <sys_arch_protect>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80084aa:	320c      	adds	r2, #12
 80084ac:	bfa4      	itt	ge
 80084ae:	7922      	ldrbge	r2, [r4, #4]
 80084b0:	721a      	strbge	r2, [r3, #8]
}
 80084b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 80084b6:	f006 be01 	b.w	800f0bc <sys_arch_unprotect>
	...

080084bc <lwip_netconn_do_write>:
void
lwip_netconn_do_write(void *m)
{
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80084bc:	6803      	ldr	r3, [r0, #0]
{
 80084be:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80084c0:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 80084c4:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80084c6:	f112 0f0c 	cmn.w	r2, #12
 80084ca:	da0d      	bge.n	80084e8 <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 80084cc:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80084ce:	f006 fde9 	bl	800f0a4 <sys_arch_protect>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80084d8:	320c      	adds	r2, #12
 80084da:	bfa4      	itt	ge
 80084dc:	7922      	ldrbge	r2, [r4, #4]
 80084de:	721a      	strbge	r2, [r3, #8]
}
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80084e4:	f006 bdea 	b.w	800f0bc <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80084ee:	2a10      	cmp	r2, #16
 80084f0:	d149      	bne.n	8008586 <lwip_netconn_do_write+0xca>
      if (msg->conn->state != NETCONN_NONE) {
 80084f2:	785a      	ldrb	r2, [r3, #1]
 80084f4:	b112      	cbz	r2, 80084fc <lwip_netconn_do_write+0x40>
        msg->err = ERR_INPROGRESS;
 80084f6:	23fb      	movs	r3, #251	; 0xfb
      msg->err = ERR_VAL;
 80084f8:	7123      	strb	r3, [r4, #4]
 80084fa:	e7e8      	b.n	80084ce <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d03f      	beq.n	8008582 <lwip_netconn_do_write+0xc6>
        msg->conn->state = NETCONN_WRITE;
 8008502:	2201      	movs	r2, #1
 8008504:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008508:	b90a      	cbnz	r2, 800850e <lwip_netconn_do_write+0x52>
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	b133      	cbz	r3, 800851c <lwip_netconn_do_write+0x60>
 800850e:	4b1f      	ldr	r3, [pc, #124]	; (800858c <lwip_netconn_do_write+0xd0>)
 8008510:	f240 6283 	movw	r2, #1667	; 0x683
 8008514:	491e      	ldr	r1, [pc, #120]	; (8008590 <lwip_netconn_do_write+0xd4>)
 8008516:	481f      	ldr	r0, [pc, #124]	; (8008594 <lwip_netconn_do_write+0xd8>)
 8008518:	f008 fd42 	bl	8010fa0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800851c:	68e3      	ldr	r3, [r4, #12]
 800851e:	b933      	cbnz	r3, 800852e <lwip_netconn_do_write+0x72>
 8008520:	4b1a      	ldr	r3, [pc, #104]	; (800858c <lwip_netconn_do_write+0xd0>)
 8008522:	f240 6284 	movw	r2, #1668	; 0x684
 8008526:	491c      	ldr	r1, [pc, #112]	; (8008598 <lwip_netconn_do_write+0xdc>)
 8008528:	481a      	ldr	r0, [pc, #104]	; (8008594 <lwip_netconn_do_write+0xd8>)
 800852a:	f008 fd39 	bl	8010fa0 <iprintf>
        msg->conn->current_msg = msg;
 800852e:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset = 0;
 8008530:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008532:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 8008534:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008536:	f7ff fa0f 	bl	8007958 <lwip_netconn_do_writemore>
 800853a:	b330      	cbz	r0, 800858a <lwip_netconn_do_write+0xce>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	785b      	ldrb	r3, [r3, #1]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d006      	beq.n	8008552 <lwip_netconn_do_write+0x96>
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <lwip_netconn_do_write+0xd0>)
 8008546:	f240 6289 	movw	r2, #1673	; 0x689
 800854a:	4914      	ldr	r1, [pc, #80]	; (800859c <lwip_netconn_do_write+0xe0>)
 800854c:	4811      	ldr	r0, [pc, #68]	; (8008594 <lwip_netconn_do_write+0xd8>)
 800854e:	f008 fd27 	bl	8010fa0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008552:	4813      	ldr	r0, [pc, #76]	; (80085a0 <lwip_netconn_do_write+0xe4>)
 8008554:	f006 fd92 	bl	800f07c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	2100      	movs	r1, #0
 800855c:	300c      	adds	r0, #12
 800855e:	f006 fd44 	bl	800efea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008562:	480f      	ldr	r0, [pc, #60]	; (80085a0 <lwip_netconn_do_write+0xe4>)
 8008564:	f006 fd85 	bl	800f072 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d10c      	bne.n	800858a <lwip_netconn_do_write+0xce>
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <lwip_netconn_do_write+0xd0>)
 8008572:	f240 628d 	movw	r2, #1677	; 0x68d
 8008576:	4909      	ldr	r1, [pc, #36]	; (800859c <lwip_netconn_do_write+0xe0>)
 8008578:	4806      	ldr	r0, [pc, #24]	; (8008594 <lwip_netconn_do_write+0xd8>)
}
 800857a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800857e:	f008 bd0f 	b.w	8010fa0 <iprintf>
        msg->err = ERR_CONN;
 8008582:	23f5      	movs	r3, #245	; 0xf5
 8008584:	e7b8      	b.n	80084f8 <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 8008586:	23fa      	movs	r3, #250	; 0xfa
 8008588:	e7b6      	b.n	80084f8 <lwip_netconn_do_write+0x3c>
 800858a:	bd10      	pop	{r4, pc}
 800858c:	08012200 	.word	0x08012200
 8008590:	08012011 	.word	0x08012011
 8008594:	08011dd4 	.word	0x08011dd4
 8008598:	08012033 	.word	0x08012033
 800859c:	0801202c 	.word	0x0801202c
 80085a0:	20008408 	.word	0x20008408

080085a4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80085a8:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80085aa:	6843      	ldr	r3, [r0, #4]
 80085ac:	b163      	cbz	r3, 80085c8 <lwip_netconn_do_close+0x24>
 80085ae:	7803      	ldrb	r3, [r0, #0]
 80085b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d107      	bne.n	80085c8 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80085b8:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80085ba:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80085bc:	2a03      	cmp	r2, #3
 80085be:	d001      	beq.n	80085c4 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d001      	beq.n	80085c8 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d10e      	bne.n	80085e6 <lwip_netconn_do_close+0x42>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80085c8:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80085ca:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80085cc:	f006 fd6a 	bl	800f0a4 <sys_arch_protect>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80085d6:	320c      	adds	r2, #12
 80085d8:	bfa4      	itt	ge
 80085da:	7922      	ldrbge	r2, [r4, #4]
 80085dc:	721a      	strbge	r2, [r3, #8]
}
 80085de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80085e2:	f006 bd6b 	b.w	800f0bc <sys_arch_unprotect>
    } else if (state == NETCONN_WRITE) {
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <lwip_netconn_do_close+0x4a>
      msg->err = ERR_INPROGRESS;
 80085ea:	23fb      	movs	r3, #251	; 0xfb
 80085ec:	e7ed      	b.n	80085ca <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80085ee:	07d3      	lsls	r3, r2, #31
 80085f0:	d501      	bpl.n	80085f6 <lwip_netconn_do_close+0x52>
        netconn_drain(msg->conn);
 80085f2:	f7ff fd43 	bl	800807c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085fa:	b90a      	cbnz	r2, 8008600 <lwip_netconn_do_close+0x5c>
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	b133      	cbz	r3, 800860e <lwip_netconn_do_close+0x6a>
 8008600:	4b18      	ldr	r3, [pc, #96]	; (8008664 <lwip_netconn_do_close+0xc0>)
 8008602:	f240 721c 	movw	r2, #1820	; 0x71c
 8008606:	4918      	ldr	r1, [pc, #96]	; (8008668 <lwip_netconn_do_close+0xc4>)
 8008608:	4818      	ldr	r0, [pc, #96]	; (800866c <lwip_netconn_do_close+0xc8>)
 800860a:	f008 fcc9 	bl	8010fa0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008612:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8008614:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8008616:	6244      	str	r4, [r0, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008618:	f7ff fa9c 	bl	8007b54 <lwip_netconn_do_close_internal>
 800861c:	b308      	cbz	r0, 8008662 <lwip_netconn_do_close+0xbe>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	2b04      	cmp	r3, #4
 8008624:	d006      	beq.n	8008634 <lwip_netconn_do_close+0x90>
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <lwip_netconn_do_close+0xc0>)
 8008628:	f240 7221 	movw	r2, #1825	; 0x721
 800862c:	4910      	ldr	r1, [pc, #64]	; (8008670 <lwip_netconn_do_close+0xcc>)
 800862e:	480f      	ldr	r0, [pc, #60]	; (800866c <lwip_netconn_do_close+0xc8>)
 8008630:	f008 fcb6 	bl	8010fa0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008634:	480f      	ldr	r0, [pc, #60]	; (8008674 <lwip_netconn_do_close+0xd0>)
 8008636:	f006 fd21 	bl	800f07c <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800863a:	6820      	ldr	r0, [r4, #0]
 800863c:	2100      	movs	r1, #0
 800863e:	300c      	adds	r0, #12
 8008640:	f006 fcd3 	bl	800efea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008644:	480b      	ldr	r0, [pc, #44]	; (8008674 <lwip_netconn_do_close+0xd0>)
 8008646:	f006 fd14 	bl	800f072 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	b143      	cbz	r3, 8008662 <lwip_netconn_do_close+0xbe>
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <lwip_netconn_do_close+0xc0>)
 8008652:	f240 7225 	movw	r2, #1829	; 0x725
 8008656:	4906      	ldr	r1, [pc, #24]	; (8008670 <lwip_netconn_do_close+0xcc>)
 8008658:	4804      	ldr	r0, [pc, #16]	; (800866c <lwip_netconn_do_close+0xc8>)
}
 800865a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800865e:	f008 bc9f 	b.w	8010fa0 <iprintf>
 8008662:	bd10      	pop	{r4, pc}
 8008664:	08012200 	.word	0x08012200
 8008668:	08012011 	.word	0x08012011
 800866c:	08011dd4 	.word	0x08011dd4
 8008670:	0801202c 	.word	0x0801202c
 8008674:	20008408 	.word	0x20008408

08008678 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008678:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800867a:	4604      	mov	r4, r0
 800867c:	b160      	cbz	r0, 8008698 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	b120      	cbz	r0, 800868c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8008682:	f002 fcf3 	bl	800b06c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800868c:	4621      	mov	r1, r4
 800868e:	2006      	movs	r0, #6
  }
}
 8008690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8008694:	f002 bb64 	b.w	800ad60 <memp_free>
 8008698:	bd10      	pop	{r4, pc}
	...

0800869c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800869c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800869e:	b940      	cbnz	r0, 80086b2 <netbuf_data+0x16>
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <netbuf_data+0x44>)
 80086a2:	22c2      	movs	r2, #194	; 0xc2
 80086a4:	490f      	ldr	r1, [pc, #60]	; (80086e4 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80086a6:	4810      	ldr	r0, [pc, #64]	; (80086e8 <netbuf_data+0x4c>)
 80086a8:	f008 fc7a 	bl	8010fa0 <iprintf>
 80086ac:	f06f 000f 	mvn.w	r0, #15
 80086b0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80086b2:	b919      	cbnz	r1, 80086bc <netbuf_data+0x20>
 80086b4:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <netbuf_data+0x44>)
 80086b6:	22c3      	movs	r2, #195	; 0xc3
 80086b8:	490c      	ldr	r1, [pc, #48]	; (80086ec <netbuf_data+0x50>)
 80086ba:	e7f4      	b.n	80086a6 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80086bc:	b91a      	cbnz	r2, 80086c6 <netbuf_data+0x2a>
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <netbuf_data+0x44>)
 80086c0:	22c4      	movs	r2, #196	; 0xc4
 80086c2:	490b      	ldr	r1, [pc, #44]	; (80086f0 <netbuf_data+0x54>)
 80086c4:	e7ef      	b.n	80086a6 <netbuf_data+0xa>

  if (buf->ptr == NULL) {
 80086c6:	6843      	ldr	r3, [r0, #4]
 80086c8:	b133      	cbz	r3, 80086d8 <netbuf_data+0x3c>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80086ce:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 80086d0:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 80086d2:	895b      	ldrh	r3, [r3, #10]
 80086d4:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80086d6:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 80086d8:	f06f 0001 	mvn.w	r0, #1
}
 80086dc:	bd08      	pop	{r3, pc}
 80086de:	bf00      	nop
 80086e0:	08012291 	.word	0x08012291
 80086e4:	08012300 	.word	0x08012300
 80086e8:	08011dd4 	.word	0x08011dd4
 80086ec:	08012319 	.word	0x08012319
 80086f0:	08012336 	.word	0x08012336

080086f4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80086f4:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80086f6:	b940      	cbnz	r0, 800870a <netbuf_next+0x16>
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <netbuf_next+0x2c>)
 80086fa:	22dc      	movs	r2, #220	; 0xdc
 80086fc:	4909      	ldr	r1, [pc, #36]	; (8008724 <netbuf_next+0x30>)
 80086fe:	480a      	ldr	r0, [pc, #40]	; (8008728 <netbuf_next+0x34>)
 8008700:	f008 fc4e 	bl	8010fa0 <iprintf>
  if (buf->ptr->next == NULL) {
    return -1;
 8008704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
    return 1;
  }
  return 0;
}
 8008708:	bd08      	pop	{r3, pc}
  if (buf->ptr->next == NULL) {
 800870a:	6843      	ldr	r3, [r0, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0f8      	beq.n	8008704 <netbuf_next+0x10>
  buf->ptr = buf->ptr->next;
 8008712:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 8008714:	6818      	ldr	r0, [r3, #0]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8008716:	fab0 f080 	clz	r0, r0
 800871a:	0940      	lsrs	r0, r0, #5
 800871c:	bd08      	pop	{r3, pc}
 800871e:	bf00      	nop
 8008720:	08012291 	.word	0x08012291
 8008724:	0801234f 	.word	0x0801234f
 8008728:	08011dd4 	.word	0x08011dd4

0800872c <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800872c:	4b1d      	ldr	r3, [pc, #116]	; (80087a4 <tcpip_thread+0x78>)
 800872e:	681b      	ldr	r3, [r3, #0]
{
 8008730:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8008732:	b113      	cbz	r3, 800873a <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8008734:	4a1c      	ldr	r2, [pc, #112]	; (80087a8 <tcpip_thread+0x7c>)
 8008736:	6810      	ldr	r0, [r2, #0]
 8008738:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800873a:	4d1c      	ldr	r5, [pc, #112]	; (80087ac <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800873c:	4e1c      	ldr	r6, [pc, #112]	; (80087b0 <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800873e:	4c1d      	ldr	r4, [pc, #116]	; (80087b4 <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 8008740:	481a      	ldr	r0, [pc, #104]	; (80087ac <tcpip_thread+0x80>)
 8008742:	f006 fc96 	bl	800f072 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8008746:	4628      	mov	r0, r5
 8008748:	f006 fc98 	bl	800f07c <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800874c:	a901      	add	r1, sp, #4
 800874e:	4630      	mov	r0, r6
 8008750:	f006 f940 	bl	800e9d4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008754:	4628      	mov	r0, r5
 8008756:	f006 fc8c 	bl	800f072 <sys_mutex_lock>
    if (msg == NULL) {
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	b933      	cbnz	r3, 800876c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800875e:	4623      	mov	r3, r4
 8008760:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008762:	4915      	ldr	r1, [pc, #84]	; (80087b8 <tcpip_thread+0x8c>)
 8008764:	4815      	ldr	r0, [pc, #84]	; (80087bc <tcpip_thread+0x90>)
 8008766:	f008 fc1b 	bl	8010fa0 <iprintf>
      break;
 800876a:	e7ec      	b.n	8008746 <tcpip_thread+0x1a>
    switch (msg->type) {
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	2a03      	cmp	r2, #3
 8008770:	d00b      	beq.n	800878a <tcpip_thread+0x5e>
 8008772:	2a04      	cmp	r2, #4
 8008774:	d00f      	beq.n	8008796 <tcpip_thread+0x6a>
 8008776:	2a02      	cmp	r2, #2
 8008778:	d111      	bne.n	800879e <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800877a:	1d18      	adds	r0, r3, #4
 800877c:	c807      	ldmia	r0, {r0, r1, r2}
 800877e:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008780:	9901      	ldr	r1, [sp, #4]
 8008782:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008784:	f002 faec 	bl	800ad60 <memp_free>
      break;
 8008788:	e7dd      	b.n	8008746 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800878a:	6898      	ldr	r0, [r3, #8]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008790:	9901      	ldr	r1, [sp, #4]
 8008792:	2008      	movs	r0, #8
 8008794:	e7f6      	b.n	8008784 <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	6898      	ldr	r0, [r3, #8]
 800879a:	4790      	blx	r2
      break;
 800879c:	e7d3      	b.n	8008746 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800879e:	4623      	mov	r3, r4
 80087a0:	229b      	movs	r2, #155	; 0x9b
 80087a2:	e7de      	b.n	8008762 <tcpip_thread+0x36>
 80087a4:	20008208 	.word	0x20008208
 80087a8:	2000820c 	.word	0x2000820c
 80087ac:	20008408 	.word	0x20008408
 80087b0:	20008204 	.word	0x20008204
 80087b4:	080123c6 	.word	0x080123c6
 80087b8:	080123f6 	.word	0x080123f6
 80087bc:	08011dd4 	.word	0x08011dd4

080087c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80087c4:	4810      	ldr	r0, [pc, #64]	; (8008808 <tcpip_inpkt+0x48>)
{
 80087c6:	460e      	mov	r6, r1
 80087c8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80087ca:	f006 fbee 	bl	800efaa <sys_mbox_valid>
 80087ce:	b928      	cbnz	r0, 80087dc <tcpip_inpkt+0x1c>
 80087d0:	4b0e      	ldr	r3, [pc, #56]	; (800880c <tcpip_inpkt+0x4c>)
 80087d2:	22b5      	movs	r2, #181	; 0xb5
 80087d4:	490e      	ldr	r1, [pc, #56]	; (8008810 <tcpip_inpkt+0x50>)
 80087d6:	480f      	ldr	r0, [pc, #60]	; (8008814 <tcpip_inpkt+0x54>)
 80087d8:	f008 fbe2 	bl	8010fa0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80087dc:	2009      	movs	r0, #9
 80087de:	f002 faa3 	bl	800ad28 <memp_malloc>
  if (msg == NULL) {
 80087e2:	4604      	mov	r4, r0
 80087e4:	b168      	cbz	r0, 8008802 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80087e6:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
 80087e8:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80087ea:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80087ec:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80087ee:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 80087f0:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80087f2:	4805      	ldr	r0, [pc, #20]	; (8008808 <tcpip_inpkt+0x48>)
 80087f4:	f006 fb9c 	bl	800ef30 <sys_mbox_trypost>
 80087f8:	b128      	cbz	r0, 8008806 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80087fa:	4621      	mov	r1, r4
 80087fc:	2009      	movs	r0, #9
 80087fe:	f002 faaf 	bl	800ad60 <memp_free>
    return ERR_MEM;
 8008802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	20008204 	.word	0x20008204
 800880c:	080123c6 	.word	0x080123c6
 8008810:	080123b9 	.word	0x080123b9
 8008814:	08011dd4 	.word	0x08011dd4

08008818 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008818:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800881c:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8008820:	bf14      	ite	ne
 8008822:	4a02      	ldrne	r2, [pc, #8]	; (800882c <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008824:	4a02      	ldreq	r2, [pc, #8]	; (8008830 <tcpip_input+0x18>)
 8008826:	f7ff bfcb 	b.w	80087c0 <tcpip_inpkt>
 800882a:	bf00      	nop
 800882c:	0800eddd 	.word	0x0800eddd
 8008830:	08009e29 	.word	0x08009e29

08008834 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008838:	4812      	ldr	r0, [pc, #72]	; (8008884 <tcpip_callback_with_block+0x50>)
{
 800883a:	460e      	mov	r6, r1
 800883c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800883e:	f006 fbb4 	bl	800efaa <sys_mbox_valid>
 8008842:	b928      	cbnz	r0, 8008850 <tcpip_callback_with_block+0x1c>
 8008844:	4b10      	ldr	r3, [pc, #64]	; (8008888 <tcpip_callback_with_block+0x54>)
 8008846:	22ee      	movs	r2, #238	; 0xee
 8008848:	4910      	ldr	r1, [pc, #64]	; (800888c <tcpip_callback_with_block+0x58>)
 800884a:	4811      	ldr	r0, [pc, #68]	; (8008890 <tcpip_callback_with_block+0x5c>)
 800884c:	f008 fba8 	bl	8010fa0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008850:	2008      	movs	r0, #8
 8008852:	f002 fa69 	bl	800ad28 <memp_malloc>
  if (msg == NULL) {
 8008856:	4604      	mov	r4, r0
 8008858:	b188      	cbz	r0, 800887e <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800885a:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
 800885c:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 800885e:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8008860:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8008862:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 8008864:	4807      	ldr	r0, [pc, #28]	; (8008884 <tcpip_callback_with_block+0x50>)
  if (block) {
 8008866:	b11d      	cbz	r5, 8008870 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 8008868:	f006 fb56 	bl	800ef18 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 800886c:	2000      	movs	r0, #0
 800886e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008870:	f006 fb5e 	bl	800ef30 <sys_mbox_trypost>
 8008874:	b128      	cbz	r0, 8008882 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008876:	4621      	mov	r1, r4
 8008878:	2008      	movs	r0, #8
 800887a:	f002 fa71 	bl	800ad60 <memp_free>
    return ERR_MEM;
 800887e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008884:	20008204 	.word	0x20008204
 8008888:	080123c6 	.word	0x080123c6
 800888c:	080123b9 	.word	0x080123b9
 8008890:	08011dd4 	.word	0x08011dd4

08008894 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008894:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8008896:	4c06      	ldr	r4, [pc, #24]	; (80088b0 <tcpip_send_msg_wait_sem+0x1c>)
{
 8008898:	460e      	mov	r6, r1
 800889a:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 800889c:	4620      	mov	r0, r4
 800889e:	f006 fbe8 	bl	800f072 <sys_mutex_lock>
  fn(apimsg);
 80088a2:	4630      	mov	r0, r6
 80088a4:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 80088a6:	4620      	mov	r0, r4
 80088a8:	f006 fbe8 	bl	800f07c <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80088ac:	2000      	movs	r0, #0
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	20008408 	.word	0x20008408

080088b4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80088b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088b6:	4605      	mov	r5, r0
 80088b8:	460c      	mov	r4, r1
  lwip_init();
 80088ba:	f000 f840 	bl	800893e <lwip_init>

  tcpip_init_done = initfunc;
 80088be:	4b13      	ldr	r3, [pc, #76]	; (800890c <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80088c0:	2106      	movs	r1, #6
 80088c2:	4813      	ldr	r0, [pc, #76]	; (8008910 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 80088c4:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <tcpip_init+0x60>)
 80088c8:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80088ca:	f006 fb0b 	bl	800eee4 <sys_mbox_new>
 80088ce:	b130      	cbz	r0, 80088de <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80088d0:	4b11      	ldr	r3, [pc, #68]	; (8008918 <tcpip_init+0x64>)
 80088d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80088d6:	4911      	ldr	r1, [pc, #68]	; (800891c <tcpip_init+0x68>)
 80088d8:	4811      	ldr	r0, [pc, #68]	; (8008920 <tcpip_init+0x6c>)
 80088da:	f008 fb61 	bl	8010fa0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80088de:	4811      	ldr	r0, [pc, #68]	; (8008924 <tcpip_init+0x70>)
 80088e0:	f006 fbb8 	bl	800f054 <sys_mutex_new>
 80088e4:	b130      	cbz	r0, 80088f4 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80088e6:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <tcpip_init+0x64>)
 80088e8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80088ec:	490e      	ldr	r1, [pc, #56]	; (8008928 <tcpip_init+0x74>)
 80088ee:	480c      	ldr	r0, [pc, #48]	; (8008920 <tcpip_init+0x6c>)
 80088f0:	f008 fb56 	bl	8010fa0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80088f4:	2303      	movs	r3, #3
 80088f6:	2200      	movs	r2, #0
 80088f8:	490c      	ldr	r1, [pc, #48]	; (800892c <tcpip_init+0x78>)
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008900:	480b      	ldr	r0, [pc, #44]	; (8008930 <tcpip_init+0x7c>)
 8008902:	f006 fbbe 	bl	800f082 <sys_thread_new>
}
 8008906:	b003      	add	sp, #12
 8008908:	bd30      	pop	{r4, r5, pc}
 800890a:	bf00      	nop
 800890c:	20008208 	.word	0x20008208
 8008910:	20008204 	.word	0x20008204
 8008914:	2000820c 	.word	0x2000820c
 8008918:	080123c6 	.word	0x080123c6
 800891c:	08012368 	.word	0x08012368
 8008920:	08011dd4 	.word	0x08011dd4
 8008924:	20008408 	.word	0x20008408
 8008928:	0801238b 	.word	0x0801238b
 800892c:	0800872d 	.word	0x0800872d
 8008930:	080123ac 	.word	0x080123ac

08008934 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8008934:	ba40      	rev16	r0, r0
}
 8008936:	b280      	uxth	r0, r0
 8008938:	4770      	bx	lr

0800893a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800893a:	ba00      	rev	r0, r0
 800893c:	4770      	bx	lr

0800893e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800893e:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008940:	f006 fb7c 	bl	800f03c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008944:	f001 ff7a 	bl	800a83c <mem_init>
  memp_init();
 8008948:	f002 f9e0 	bl	800ad0c <memp_init>
  pbuf_init();
  netif_init();
 800894c:	f002 fa2b 	bl	800ada6 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008950:	f006 f892 	bl	800ea78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008954:	f002 fed2 	bl	800b6fc <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800895c:	f006 b802 	b.w	800e964 <sys_timeouts_init>

08008960 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8008960:	7a43      	ldrb	r3, [r0, #9]
 8008962:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8008964:	bf1f      	itttt	ne
 8008966:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8008968:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 800896a:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 800896c:	82c3      	strhne	r3, [r0, #22]
 800896e:	4770      	bx	lr

08008970 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8008970:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008972:	8a83      	ldrh	r3, [r0, #20]
{
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008978:	3302      	adds	r3, #2
 800897a:	2b44      	cmp	r3, #68	; 0x44
 800897c:	d906      	bls.n	800898c <dhcp_option_short+0x1c>
 800897e:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <dhcp_option_short+0x38>)
 8008980:	f240 5282 	movw	r2, #1410	; 0x582
 8008984:	4909      	ldr	r1, [pc, #36]	; (80089ac <dhcp_option_short+0x3c>)
 8008986:	480a      	ldr	r0, [pc, #40]	; (80089b0 <dhcp_option_short+0x40>)
 8008988:	f008 fb0a 	bl	8010fa0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800898c:	8aa3      	ldrh	r3, [r4, #20]
 800898e:	0a28      	lsrs	r0, r5, #8
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	18d1      	adds	r1, r2, r3
 8008994:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008998:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800899a:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800899c:	82a1      	strh	r1, [r4, #20]
 800899e:	fa12 f383 	uxtah	r3, r2, r3
 80089a2:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	0801263b 	.word	0x0801263b
 80089ac:	08012670 	.word	0x08012670
 80089b0:	08011dd4 	.word	0x08011dd4

080089b4 <dhcp_option>:
{
 80089b4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80089b6:	8a83      	ldrh	r3, [r0, #20]
{
 80089b8:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80089ba:	3202      	adds	r2, #2
{
 80089bc:	4604      	mov	r4, r0
 80089be:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80089c0:	4413      	add	r3, r2
 80089c2:	2b44      	cmp	r3, #68	; 0x44
 80089c4:	d906      	bls.n	80089d4 <dhcp_option+0x20>
 80089c6:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <dhcp_option+0x3c>)
 80089c8:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80089cc:	4909      	ldr	r1, [pc, #36]	; (80089f4 <dhcp_option+0x40>)
 80089ce:	480a      	ldr	r0, [pc, #40]	; (80089f8 <dhcp_option+0x44>)
 80089d0:	f008 fae6 	bl	8010fa0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80089d4:	8aa3      	ldrh	r3, [r4, #20]
 80089d6:	6922      	ldr	r2, [r4, #16]
 80089d8:	18d1      	adds	r1, r2, r3
 80089da:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80089de:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80089e0:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80089e2:	82a1      	strh	r1, [r4, #20]
 80089e4:	fa12 f383 	uxtah	r3, r2, r3
 80089e8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	bf00      	nop
 80089f0:	0801263b 	.word	0x0801263b
 80089f4:	08012578 	.word	0x08012578
 80089f8:	08011dd4 	.word	0x08011dd4

080089fc <dhcp_option_byte>:
{
 80089fc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80089fe:	8a83      	ldrh	r3, [r0, #20]
{
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008a04:	2b43      	cmp	r3, #67	; 0x43
 8008a06:	d906      	bls.n	8008a16 <dhcp_option_byte+0x1a>
 8008a08:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <dhcp_option_byte+0x2c>)
 8008a0a:	f240 527b 	movw	r2, #1403	; 0x57b
 8008a0e:	4907      	ldr	r1, [pc, #28]	; (8008a2c <dhcp_option_byte+0x30>)
 8008a10:	4807      	ldr	r0, [pc, #28]	; (8008a30 <dhcp_option_byte+0x34>)
 8008a12:	f008 fac5 	bl	8010fa0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8008a16:	8aa2      	ldrh	r2, [r4, #20]
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	1c51      	adds	r1, r2, #1
 8008a1c:	4413      	add	r3, r2
 8008a1e:	82a1      	strh	r1, [r4, #20]
 8008a20:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	0801263b 	.word	0x0801263b
 8008a2c:	080125c0 	.word	0x080125c0
 8008a30:	08011dd4 	.word	0x08011dd4

08008a34 <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8008a34:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008a36:	8a83      	ldrh	r3, [r0, #20]
{
 8008a38:	4605      	mov	r5, r0
 8008a3a:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	2b44      	cmp	r3, #68	; 0x44
 8008a40:	d906      	bls.n	8008a50 <dhcp_option_long+0x1c>
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <dhcp_option_long+0x50>)
 8008a44:	f240 528a 	movw	r2, #1418	; 0x58a
 8008a48:	490f      	ldr	r1, [pc, #60]	; (8008a88 <dhcp_option_long+0x54>)
 8008a4a:	4810      	ldr	r0, [pc, #64]	; (8008a8c <dhcp_option_long+0x58>)
 8008a4c:	f008 faa8 	bl	8010fa0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008a50:	8aab      	ldrh	r3, [r5, #20]
 8008a52:	0e20      	lsrs	r0, r4, #24
 8008a54:	692a      	ldr	r2, [r5, #16]
 8008a56:	18d1      	adds	r1, r2, r3
 8008a58:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8008a5c:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008a5e:	0c20      	lsrs	r0, r4, #16
 8008a60:	fa12 f181 	uxtah	r1, r2, r1
 8008a64:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8008a68:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008a6a:	0a20      	lsrs	r0, r4, #8
 8008a6c:	fa12 f181 	uxtah	r1, r2, r1
 8008a70:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008a74:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008a76:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008a78:	82a9      	strh	r1, [r5, #20]
 8008a7a:	fa12 f383 	uxtah	r3, r2, r3
 8008a7e:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	0801263b 	.word	0x0801263b
 8008a88:	080125fb 	.word	0x080125fb
 8008a8c:	08011dd4 	.word	0x08011dd4

08008a90 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8008a98:	4680      	mov	r8, r0
 8008a9a:	b950      	cbnz	r0, 8008ab2 <dhcp_create_msg+0x22>
 8008a9c:	4b62      	ldr	r3, [pc, #392]	; (8008c28 <dhcp_create_msg+0x198>)
 8008a9e:	f240 721d 	movw	r2, #1821	; 0x71d
 8008aa2:	4962      	ldr	r1, [pc, #392]	; (8008c2c <dhcp_create_msg+0x19c>)
 8008aa4:	4862      	ldr	r0, [pc, #392]	; (8008c30 <dhcp_create_msg+0x1a0>)
 8008aa6:	f008 fa7b 	bl	8010fa0 <iprintf>
 8008aaa:	f06f 000f 	mvn.w	r0, #15
 8008aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8008ab2:	b951      	cbnz	r1, 8008aca <dhcp_create_msg+0x3a>
 8008ab4:	4b5c      	ldr	r3, [pc, #368]	; (8008c28 <dhcp_create_msg+0x198>)
 8008ab6:	f240 721e 	movw	r2, #1822	; 0x71e
 8008aba:	495e      	ldr	r1, [pc, #376]	; (8008c34 <dhcp_create_msg+0x1a4>)
 8008abc:	485c      	ldr	r0, [pc, #368]	; (8008c30 <dhcp_create_msg+0x1a0>)
 8008abe:	f008 fa6f 	bl	8010fa0 <iprintf>
 8008ac2:	f06f 0005 	mvn.w	r0, #5
 8008ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8008aca:	68cb      	ldr	r3, [r1, #12]
 8008acc:	b133      	cbz	r3, 8008adc <dhcp_create_msg+0x4c>
 8008ace:	4b56      	ldr	r3, [pc, #344]	; (8008c28 <dhcp_create_msg+0x198>)
 8008ad0:	f240 721f 	movw	r2, #1823	; 0x71f
 8008ad4:	4958      	ldr	r1, [pc, #352]	; (8008c38 <dhcp_create_msg+0x1a8>)
 8008ad6:	4856      	ldr	r0, [pc, #344]	; (8008c30 <dhcp_create_msg+0x1a0>)
 8008ad8:	f008 fa62 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	b133      	cbz	r3, 8008aee <dhcp_create_msg+0x5e>
 8008ae0:	4b51      	ldr	r3, [pc, #324]	; (8008c28 <dhcp_create_msg+0x198>)
 8008ae2:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8008ae6:	4955      	ldr	r1, [pc, #340]	; (8008c3c <dhcp_create_msg+0x1ac>)
 8008ae8:	4851      	ldr	r0, [pc, #324]	; (8008c30 <dhcp_create_msg+0x1a0>)
 8008aea:	f008 fa59 	bl	8010fa0 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8008aee:	2200      	movs	r2, #0
 8008af0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8008af4:	4610      	mov	r0, r2
 8008af6:	f002 fb23 	bl	800b140 <pbuf_alloc>
 8008afa:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f000 808f 	beq.w	8008c20 <dhcp_create_msg+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8008b02:	8943      	ldrh	r3, [r0, #10]
 8008b04:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8008b08:	d206      	bcs.n	8008b18 <dhcp_create_msg+0x88>
 8008b0a:	4b47      	ldr	r3, [pc, #284]	; (8008c28 <dhcp_create_msg+0x198>)
 8008b0c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008b10:	494b      	ldr	r1, [pc, #300]	; (8008c40 <dhcp_create_msg+0x1b0>)
 8008b12:	4847      	ldr	r0, [pc, #284]	; (8008c30 <dhcp_create_msg+0x1a0>)
 8008b14:	f008 fa44 	bl	8010fa0 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8008b18:	2e03      	cmp	r6, #3
 8008b1a:	d102      	bne.n	8008b22 <dhcp_create_msg+0x92>
 8008b1c:	7a63      	ldrb	r3, [r4, #9]
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d107      	bne.n	8008b32 <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8008b22:	7aa3      	ldrb	r3, [r4, #10]
 8008b24:	4d47      	ldr	r5, [pc, #284]	; (8008c44 <dhcp_create_msg+0x1b4>)
 8008b26:	b913      	cbnz	r3, 8008b2e <dhcp_create_msg+0x9e>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8008b28:	f008 fa52 	bl	8010fd0 <rand>
 8008b2c:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8008b32:	68e3      	ldr	r3, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 8008b34:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8008b36:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8008b38:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8008b3a:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8008b3c:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8008b3e:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8008b40:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 8008b44:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8008b46:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	f7ff fef6 	bl	800893a <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8008b4e:	6923      	ldr	r3, [r4, #16]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8008b50:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8008b52:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 8008b54:	721d      	strb	r5, [r3, #8]
 8008b56:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 8008b58:	729d      	strb	r5, [r3, #10]
 8008b5a:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8008b5c:	731d      	strb	r5, [r3, #12]
 8008b5e:	735d      	strb	r5, [r3, #13]
 8008b60:	739d      	strb	r5, [r3, #14]
 8008b62:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8008b64:	d008      	beq.n	8008b78 <dhcp_create_msg+0xe8>
 8008b66:	1ff2      	subs	r2, r6, #7
 8008b68:	2a01      	cmp	r2, #1
 8008b6a:	d905      	bls.n	8008b78 <dhcp_create_msg+0xe8>
 8008b6c:	2e03      	cmp	r6, #3
 8008b6e:	d106      	bne.n	8008b7e <dhcp_create_msg+0xee>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8008b70:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8008b72:	3a04      	subs	r2, #4
 8008b74:	2a01      	cmp	r2, #1
 8008b76:	d802      	bhi.n	8008b7e <dhcp_create_msg+0xee>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8008b78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008b7c:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f103 001c 	add.w	r0, r3, #28
 8008b84:	741a      	strb	r2, [r3, #16]
 8008b86:	745a      	strb	r2, [r3, #17]
 8008b88:	749a      	strb	r2, [r3, #18]
 8008b8a:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8008b8c:	751a      	strb	r2, [r3, #20]
 8008b8e:	755a      	strb	r2, [r3, #21]
 8008b90:	759a      	strb	r2, [r3, #22]
 8008b92:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8008b94:	761a      	strb	r2, [r3, #24]
 8008b96:	765a      	strb	r2, [r3, #25]
 8008b98:	769a      	strb	r2, [r3, #26]
 8008b9a:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8008b9c:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 8008ba0:	b291      	uxth	r1, r2
 8008ba2:	428d      	cmp	r5, r1
 8008ba4:	d93a      	bls.n	8008c1c <dhcp_create_msg+0x18c>
 8008ba6:	2905      	cmp	r1, #5
 8008ba8:	d838      	bhi.n	8008c1c <dhcp_create_msg+0x18c>
 8008baa:	eb08 0102 	add.w	r1, r8, r2
 8008bae:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8008bb8:	2a10      	cmp	r2, #16
 8008bba:	d1f1      	bne.n	8008ba0 <dhcp_create_msg+0x110>
 8008bbc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008bc0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8008bca:	428a      	cmp	r2, r1
 8008bcc:	d1fb      	bne.n	8008bc6 <dhcp_create_msg+0x136>
 8008bce:	f103 00ec 	add.w	r0, r3, #236	; 0xec
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8008bd8:	4282      	cmp	r2, r0
 8008bda:	d1fb      	bne.n	8008bd4 <dhcp_create_msg+0x144>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008bdc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008be0:	2263      	movs	r2, #99	; 0x63
 8008be2:	33f0      	adds	r3, #240	; 0xf0
 8008be4:	f803 0c03 	strb.w	r0, [r3, #-3]
 8008be8:	2053      	movs	r0, #83	; 0x53
 8008bea:	f803 2c04 	strb.w	r2, [r3, #-4]
 8008bee:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 8008bf2:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008bf4:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 8008bf8:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8008bfa:	f803 2b01 	strb.w	r2, [r3], #1
 8008bfe:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8008c00:	2a44      	cmp	r2, #68	; 0x44
 8008c02:	d1fa      	bne.n	8008bfa <dhcp_create_msg+0x16a>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8008c04:	2201      	movs	r2, #1
 8008c06:	4620      	mov	r0, r4
 8008c08:	2135      	movs	r1, #53	; 0x35
 8008c0a:	f7ff fed3 	bl	80089b4 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4631      	mov	r1, r6
 8008c12:	f7ff fef3 	bl	80089fc <dhcp_option_byte>
  return ERR_OK;
 8008c16:	2000      	movs	r0, #0
 8008c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	e7c8      	b.n	8008bb2 <dhcp_create_msg+0x122>
    return ERR_MEM;
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c28:	0801263b 	.word	0x0801263b
 8008c2c:	08012445 	.word	0x08012445
 8008c30:	08011dd4 	.word	0x08011dd4
 8008c34:	08012464 	.word	0x08012464
 8008c38:	08012482 	.word	0x08012482
 8008c3c:	080124a7 	.word	0x080124a7
 8008c40:	080124ce 	.word	0x080124ce
 8008c44:	20008214 	.word	0x20008214

08008c48 <dhcp_check>:
{
 8008c48:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008c4a:	6a04      	ldr	r4, [r0, #32]
{
 8008c4c:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008c4e:	2108      	movs	r1, #8
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff fe85 	bl	8008960 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8008c56:	2200      	movs	r2, #0
 8008c58:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 fe8f 	bl	8009980 <etharp_query>
  if (dhcp->tries < 255) {
 8008c62:	7aa3      	ldrb	r3, [r4, #10]
 8008c64:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008c66:	bf1c      	itt	ne
 8008c68:	3301      	addne	r3, #1
 8008c6a:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	82e3      	strh	r3, [r4, #22]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c74 <dhcp_bind>:
{
 8008c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8008c76:	4605      	mov	r5, r0
 8008c78:	b940      	cbnz	r0, 8008c8c <dhcp_bind+0x18>
 8008c7a:	4b3a      	ldr	r3, [pc, #232]	; (8008d64 <dhcp_bind+0xf0>)
 8008c7c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008c80:	4939      	ldr	r1, [pc, #228]	; (8008d68 <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008c82:	483a      	ldr	r0, [pc, #232]	; (8008d6c <dhcp_bind+0xf8>)
 8008c84:	f008 f98c 	bl	8010fa0 <iprintf>
}
 8008c88:	b003      	add	sp, #12
 8008c8a:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8008c8c:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008c8e:	b924      	cbnz	r4, 8008c9a <dhcp_bind+0x26>
 8008c90:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <dhcp_bind+0xf0>)
 8008c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c96:	4936      	ldr	r1, [pc, #216]	; (8008d70 <dhcp_bind+0xfc>)
 8008c98:	e7f3      	b.n	8008c82 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	d00b      	beq.n	8008cbc <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008ca4:	223c      	movs	r2, #60	; 0x3c
 8008ca6:	331e      	adds	r3, #30
 8008ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	bf28      	it	cs
 8008cb4:	4613      	movcs	r3, r2
     if (dhcp->t0_timeout == 0) {
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d041      	beq.n	8008d3e <dhcp_bind+0xca>
       dhcp->t0_timeout = 1;
 8008cba:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cbe:	1c58      	adds	r0, r3, #1
 8008cc0:	d00d      	beq.n	8008cde <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008cc2:	223c      	movs	r2, #60	; 0x3c
 8008cc4:	331e      	adds	r3, #30
 8008cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	bf28      	it	cs
 8008cd2:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d034      	beq.n	8008d42 <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 8008cd8:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008cda:	8b23      	ldrh	r3, [r4, #24]
 8008cdc:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008cde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ce0:	1c59      	adds	r1, r3, #1
 8008ce2:	d00c      	beq.n	8008cfe <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008ce4:	223c      	movs	r2, #60	; 0x3c
 8008ce6:	331e      	adds	r3, #30
 8008ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bf28      	it	cs
 8008cf4:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 8008cf6:	b333      	cbz	r3, 8008d46 <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 8008cf8:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8008cfa:	8b63      	ldrh	r3, [r4, #26]
 8008cfc:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8008cfe:	8b63      	ldrh	r3, [r4, #26]
 8008d00:	8b22      	ldrh	r2, [r4, #24]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d302      	bcc.n	8008d0c <dhcp_bind+0x98>
 8008d06:	b10b      	cbz	r3, 8008d0c <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8008d0c:	7ae3      	ldrb	r3, [r4, #11]
 8008d0e:	b1e3      	cbz	r3, 8008d4a <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008d12:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008d14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d16:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8008d18:	b92b      	cbnz	r3, 8008d26 <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8008d1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d1c:	9a00      	ldr	r2, [sp, #0]
 8008d1e:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d24:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8008d26:	4620      	mov	r0, r4
 8008d28:	210a      	movs	r1, #10
 8008d2a:	f7ff fe19 	bl	8008960 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008d2e:	ab01      	add	r3, sp, #4
 8008d30:	466a      	mov	r2, sp
 8008d32:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008d36:	4628      	mov	r0, r5
 8008d38:	f002 f858 	bl	800adec <netif_set_addr>
 8008d3c:	e7a4      	b.n	8008c88 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7bb      	b.n	8008cba <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e7c8      	b.n	8008cd8 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7d6      	b.n	8008cf8 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008d4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 8008d4e:	061a      	lsls	r2, r3, #24
 8008d50:	d401      	bmi.n	8008d56 <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008d52:	23ff      	movs	r3, #255	; 0xff
 8008d54:	e7dd      	b.n	8008d12 <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8008d56:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8008d58:	bf8c      	ite	hi
 8008d5a:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008d5e:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8008d62:	e7d6      	b.n	8008d12 <dhcp_bind+0x9e>
 8008d64:	0801263b 	.word	0x0801263b
 8008d68:	08012414 	.word	0x08012414
 8008d6c:	08011dd4 	.word	0x08011dd4
 8008d70:	0801242d 	.word	0x0801242d

08008d74 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8008d74:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8008d76:	4604      	mov	r4, r0
 8008d78:	b940      	cbnz	r0, 8008d8c <dhcp_option_trailer+0x18>
 8008d7a:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <dhcp_option_trailer+0x64>)
 8008d7c:	f240 7282 	movw	r2, #1922	; 0x782
 8008d80:	4916      	ldr	r1, [pc, #88]	; (8008ddc <dhcp_option_trailer+0x68>)
 8008d82:	4817      	ldr	r0, [pc, #92]	; (8008de0 <dhcp_option_trailer+0x6c>)
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 8008d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8008d88:	f008 b90a 	b.w	8010fa0 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8008d8c:	6903      	ldr	r3, [r0, #16]
 8008d8e:	b933      	cbnz	r3, 8008d9e <dhcp_option_trailer+0x2a>
 8008d90:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <dhcp_option_trailer+0x64>)
 8008d92:	f240 7283 	movw	r2, #1923	; 0x783
 8008d96:	4913      	ldr	r1, [pc, #76]	; (8008de4 <dhcp_option_trailer+0x70>)
 8008d98:	4811      	ldr	r0, [pc, #68]	; (8008de0 <dhcp_option_trailer+0x6c>)
 8008d9a:	f008 f901 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008d9e:	8aa3      	ldrh	r3, [r4, #20]
 8008da0:	2b43      	cmp	r3, #67	; 0x43
 8008da2:	d906      	bls.n	8008db2 <dhcp_option_trailer+0x3e>
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <dhcp_option_trailer+0x64>)
 8008da6:	f240 7284 	movw	r2, #1924	; 0x784
 8008daa:	490f      	ldr	r1, [pc, #60]	; (8008de8 <dhcp_option_trailer+0x74>)
 8008dac:	480c      	ldr	r0, [pc, #48]	; (8008de0 <dhcp_option_trailer+0x6c>)
 8008dae:	f008 f8f7 	bl	8010fa0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8008db2:	8aa3      	ldrh	r3, [r4, #20]
 8008db4:	6922      	ldr	r2, [r4, #16]
 8008db6:	1c59      	adds	r1, r3, #1
 8008db8:	4413      	add	r3, r2
 8008dba:	82a1      	strh	r1, [r4, #20]
 8008dbc:	21ff      	movs	r1, #255	; 0xff
 8008dbe:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8008dc2:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8008dc4:	8aa3      	ldrh	r3, [r4, #20]
 8008dc6:	2b43      	cmp	r3, #67	; 0x43
 8008dc8:	d900      	bls.n	8008dcc <dhcp_option_trailer+0x58>
}
 8008dca:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8008dcc:	1c58      	adds	r0, r3, #1
 8008dce:	4413      	add	r3, r2
 8008dd0:	82a0      	strh	r0, [r4, #20]
 8008dd2:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8008dd6:	e7f5      	b.n	8008dc4 <dhcp_option_trailer+0x50>
 8008dd8:	0801263b 	.word	0x0801263b
 8008ddc:	080126b1 	.word	0x080126b1
 8008de0:	08011dd4 	.word	0x08011dd4
 8008de4:	080126d3 	.word	0x080126d3
 8008de8:	080126ff 	.word	0x080126ff

08008dec <dhcp_delete_msg>:
{
 8008dec:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8008dee:	4604      	mov	r4, r0
 8008df0:	b940      	cbnz	r0, 8008e04 <dhcp_delete_msg+0x18>
 8008df2:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <dhcp_delete_msg+0x4c>)
 8008df4:	f240 726d 	movw	r2, #1901	; 0x76d
 8008df8:	4910      	ldr	r1, [pc, #64]	; (8008e3c <dhcp_delete_msg+0x50>)
 8008dfa:	4811      	ldr	r0, [pc, #68]	; (8008e40 <dhcp_delete_msg+0x54>)
}
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8008e00:	f008 b8ce 	b.w	8010fa0 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8008e04:	68c3      	ldr	r3, [r0, #12]
 8008e06:	b933      	cbnz	r3, 8008e16 <dhcp_delete_msg+0x2a>
 8008e08:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <dhcp_delete_msg+0x4c>)
 8008e0a:	f240 726e 	movw	r2, #1902	; 0x76e
 8008e0e:	490d      	ldr	r1, [pc, #52]	; (8008e44 <dhcp_delete_msg+0x58>)
 8008e10:	480b      	ldr	r0, [pc, #44]	; (8008e40 <dhcp_delete_msg+0x54>)
 8008e12:	f008 f8c5 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	b933      	cbnz	r3, 8008e28 <dhcp_delete_msg+0x3c>
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <dhcp_delete_msg+0x4c>)
 8008e1c:	f240 726f 	movw	r2, #1903	; 0x76f
 8008e20:	4909      	ldr	r1, [pc, #36]	; (8008e48 <dhcp_delete_msg+0x5c>)
 8008e22:	4807      	ldr	r0, [pc, #28]	; (8008e40 <dhcp_delete_msg+0x54>)
 8008e24:	f008 f8bc 	bl	8010fa0 <iprintf>
  if (dhcp->p_out != NULL) {
 8008e28:	68e0      	ldr	r0, [r4, #12]
 8008e2a:	b108      	cbz	r0, 8008e30 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 8008e2c:	f002 f91e 	bl	800b06c <pbuf_free>
  dhcp->p_out = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	bd10      	pop	{r4, pc}
 8008e38:	0801263b 	.word	0x0801263b
 8008e3c:	0801250e 	.word	0x0801250e
 8008e40:	08011dd4 	.word	0x08011dd4
 8008e44:	0801252c 	.word	0x0801252c
 8008e48:	08012551 	.word	0x08012551

08008e4c <dhcp_discover>:
{
 8008e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008e4e:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008e50:	6a04      	ldr	r4, [r0, #32]
{
 8008e52:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008e54:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008e56:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f7ff fd81 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4621      	mov	r1, r4
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff fe14 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 8008e68:	4605      	mov	r5, r0
 8008e6a:	bb78      	cbnz	r0, 8008ecc <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	2139      	movs	r1, #57	; 0x39
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff fd9f 	bl	80089b4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8008e76:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f7ff fd79 	bl	8008970 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008e7e:	2203      	movs	r2, #3
 8008e80:	2137      	movs	r1, #55	; 0x37
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7ff fd96 	bl	80089b4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008e88:	2101      	movs	r1, #1
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7ff fdb6 	bl	80089fc <dhcp_option_byte>
 8008e90:	2103      	movs	r1, #3
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff fdb2 	bl	80089fc <dhcp_option_byte>
 8008e98:	211c      	movs	r1, #28
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7ff fdae 	bl	80089fc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff ff67 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008ea6:	8aa1      	ldrh	r1, [r4, #20]
 8008ea8:	68e0      	ldr	r0, [r4, #12]
 8008eaa:	31f0      	adds	r1, #240	; 0xf0
 8008eac:	b289      	uxth	r1, r1
 8008eae:	f002 fa23 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <dhcp_discover+0xb0>)
 8008eb4:	4812      	ldr	r0, [pc, #72]	; (8008f00 <dhcp_discover+0xb4>)
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	2343      	movs	r3, #67	; 0x43
 8008eba:	9600      	str	r6, [sp, #0]
 8008ebc:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <dhcp_discover+0xb8>)
 8008ebe:	68e1      	ldr	r1, [r4, #12]
 8008ec0:	6800      	ldr	r0, [r0, #0]
 8008ec2:	f005 fec7 	bl	800ec54 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7ff ff90 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8008ecc:	7aa3      	ldrb	r3, [r4, #10]
}
 8008ece:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8008ed0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008ed2:	bf1c      	itt	ne
 8008ed4:	3301      	addne	r3, #1
 8008ed6:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8008ed8:	7aa2      	ldrb	r2, [r4, #10]
 8008eda:	2a05      	cmp	r2, #5
 8008edc:	bf96      	itet	ls
 8008ede:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8008ee2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8008ee6:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008ee8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008eec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ef4:	82e3      	strh	r3, [r4, #22]
}
 8008ef6:	b002      	add	sp, #8
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	bf00      	nop
 8008efc:	08012a38 	.word	0x08012a38
 8008f00:	20008210 	.word	0x20008210
 8008f04:	08012a3c 	.word	0x08012a3c

08008f08 <dhcp_select>:
{
 8008f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008f0a:	6a04      	ldr	r4, [r0, #32]
{
 8008f0c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff fd25 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8008f16:	2203      	movs	r2, #3
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7ff fdb8 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 8008f20:	4605      	mov	r5, r0
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d147      	bne.n	8008fb6 <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008f26:	2202      	movs	r2, #2
 8008f28:	2139      	movs	r1, #57	; 0x39
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff fd42 	bl	80089b4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8008f30:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff fd1c 	bl	8008970 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8008f38:	2204      	movs	r2, #4
 8008f3a:	2132      	movs	r1, #50	; 0x32
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f7ff fd39 	bl	80089b4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008f42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f44:	f7ff fcf9 	bl	800893a <lwip_htonl>
 8008f48:	4601      	mov	r1, r0
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f7ff fd72 	bl	8008a34 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8008f50:	2204      	movs	r2, #4
 8008f52:	2136      	movs	r1, #54	; 0x36
 8008f54:	4620      	mov	r0, r4
 8008f56:	f7ff fd2d 	bl	80089b4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f5c:	f7ff fced 	bl	800893a <lwip_htonl>
 8008f60:	4601      	mov	r1, r0
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff fd66 	bl	8008a34 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008f68:	2203      	movs	r2, #3
 8008f6a:	2137      	movs	r1, #55	; 0x37
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7ff fd21 	bl	80089b4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008f72:	2101      	movs	r1, #1
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7ff fd41 	bl	80089fc <dhcp_option_byte>
 8008f7a:	2103      	movs	r1, #3
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7ff fd3d 	bl	80089fc <dhcp_option_byte>
 8008f82:	211c      	movs	r1, #28
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff fd39 	bl	80089fc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7ff fef2 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008f90:	8aa1      	ldrh	r1, [r4, #20]
 8008f92:	68e0      	ldr	r0, [r4, #12]
 8008f94:	31f0      	adds	r1, #240	; 0xf0
 8008f96:	b289      	uxth	r1, r1
 8008f98:	f002 f9ae 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <dhcp_select+0xdc>)
 8008f9e:	4812      	ldr	r0, [pc, #72]	; (8008fe8 <dhcp_select+0xe0>)
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	2343      	movs	r3, #67	; 0x43
 8008fa4:	9600      	str	r6, [sp, #0]
 8008fa6:	4a11      	ldr	r2, [pc, #68]	; (8008fec <dhcp_select+0xe4>)
 8008fa8:	68e1      	ldr	r1, [r4, #12]
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	f005 fe52 	bl	800ec54 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7ff ff1b 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8008fb6:	7aa3      	ldrb	r3, [r4, #10]
}
 8008fb8:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8008fba:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008fbc:	bf1c      	itt	ne
 8008fbe:	3301      	addne	r3, #1
 8008fc0:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8008fc2:	7aa2      	ldrb	r2, [r4, #10]
 8008fc4:	2a05      	cmp	r2, #5
 8008fc6:	bf96      	itet	ls
 8008fc8:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8008fcc:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8008fd0:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008fd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008fd6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fde:	82e3      	strh	r3, [r4, #22]
}
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	08012a38 	.word	0x08012a38
 8008fe8:	20008210 	.word	0x20008210
 8008fec:	08012a3c 	.word	0x08012a3c

08008ff0 <dhcp_reboot>:
{
 8008ff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008ff2:	6a04      	ldr	r4, [r0, #32]
{
 8008ff4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8008ff6:	2103      	movs	r1, #3
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7ff fcb1 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8008ffe:	2203      	movs	r2, #3
 8009000:	4621      	mov	r1, r4
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff fd44 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009008:	4605      	mov	r5, r0
 800900a:	2800      	cmp	r0, #0
 800900c:	d13a      	bne.n	8009084 <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800900e:	2202      	movs	r2, #2
 8009010:	2139      	movs	r1, #57	; 0x39
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff fcce 	bl	80089b4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8009018:	f44f 7110 	mov.w	r1, #576	; 0x240
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fca7 	bl	8008970 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009022:	2204      	movs	r2, #4
 8009024:	2132      	movs	r1, #50	; 0x32
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff fcc4 	bl	80089b4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800902c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800902e:	f7ff fc84 	bl	800893a <lwip_htonl>
 8009032:	4601      	mov	r1, r0
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff fcfd 	bl	8008a34 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800903a:	2203      	movs	r2, #3
 800903c:	2137      	movs	r1, #55	; 0x37
 800903e:	4620      	mov	r0, r4
 8009040:	f7ff fcb8 	bl	80089b4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009044:	2101      	movs	r1, #1
 8009046:	4620      	mov	r0, r4
 8009048:	f7ff fcd8 	bl	80089fc <dhcp_option_byte>
 800904c:	2103      	movs	r1, #3
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff fcd4 	bl	80089fc <dhcp_option_byte>
 8009054:	211c      	movs	r1, #28
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff fcd0 	bl	80089fc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800905c:	4620      	mov	r0, r4
 800905e:	f7ff fe89 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009062:	8aa1      	ldrh	r1, [r4, #20]
 8009064:	68e0      	ldr	r0, [r4, #12]
 8009066:	31f0      	adds	r1, #240	; 0xf0
 8009068:	b289      	uxth	r1, r1
 800906a:	f002 f945 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800906e:	4813      	ldr	r0, [pc, #76]	; (80090bc <dhcp_reboot+0xcc>)
 8009070:	9600      	str	r6, [sp, #0]
 8009072:	2343      	movs	r3, #67	; 0x43
 8009074:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <dhcp_reboot+0xd0>)
 8009076:	68e1      	ldr	r1, [r4, #12]
 8009078:	6800      	ldr	r0, [r0, #0]
 800907a:	f005 fe51 	bl	800ed20 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800907e:	4620      	mov	r0, r4
 8009080:	f7ff feb4 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8009084:	7aa3      	ldrb	r3, [r4, #10]
}
 8009086:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8009088:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800908a:	bf1c      	itt	ne
 800908c:	3301      	addne	r3, #1
 800908e:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009090:	7aa3      	ldrb	r3, [r4, #10]
 8009092:	2b09      	cmp	r3, #9
 8009094:	bf96      	itet	ls
 8009096:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800909a:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800909e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80090a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80090a6:	bf9c      	itt	ls
 80090a8:	00db      	lslls	r3, r3, #3
 80090aa:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80090ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80090b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b4:	82e3      	strh	r3, [r4, #22]
}
 80090b6:	b002      	add	sp, #8
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	bf00      	nop
 80090bc:	20008210 	.word	0x20008210
 80090c0:	08012a3c 	.word	0x08012a3c

080090c4 <dhcp_arp_reply>:
{
 80090c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80090c6:	4605      	mov	r5, r0
 80090c8:	b948      	cbnz	r0, 80090de <dhcp_arp_reply+0x1a>
 80090ca:	4b24      	ldr	r3, [pc, #144]	; (800915c <dhcp_arp_reply+0x98>)
 80090cc:	f240 327b 	movw	r2, #891	; 0x37b
 80090d0:	4923      	ldr	r1, [pc, #140]	; (8009160 <dhcp_arp_reply+0x9c>)
 80090d2:	4824      	ldr	r0, [pc, #144]	; (8009164 <dhcp_arp_reply+0xa0>)
}
 80090d4:	b003      	add	sp, #12
 80090d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80090da:	f007 bf61 	b.w	8010fa0 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80090de:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	d039      	beq.n	8009158 <dhcp_arp_reply+0x94>
 80090e4:	7a63      	ldrb	r3, [r4, #9]
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	d136      	bne.n	8009158 <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80090ea:	680a      	ldr	r2, [r1, #0]
 80090ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d132      	bne.n	8009158 <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80090f2:	210c      	movs	r1, #12
 80090f4:	4620      	mov	r0, r4
 80090f6:	f7ff fc33 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 80090fa:	2204      	movs	r2, #4
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f7ff fcc6 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009104:	bb08      	cbnz	r0, 800914a <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009106:	2204      	movs	r2, #4
 8009108:	2132      	movs	r1, #50	; 0x32
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff fc52 	bl	80089b4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009112:	f7ff fc12 	bl	800893a <lwip_htonl>
 8009116:	4601      	mov	r1, r0
 8009118:	4620      	mov	r0, r4
 800911a:	f7ff fc8b 	bl	8008a34 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800911e:	4620      	mov	r0, r4
 8009120:	f7ff fe28 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009124:	8aa1      	ldrh	r1, [r4, #20]
 8009126:	68e0      	ldr	r0, [r4, #12]
 8009128:	31f0      	adds	r1, #240	; 0xf0
 800912a:	b289      	uxth	r1, r1
 800912c:	f002 f8e4 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009130:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <dhcp_arp_reply+0xa4>)
 8009132:	480e      	ldr	r0, [pc, #56]	; (800916c <dhcp_arp_reply+0xa8>)
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	2343      	movs	r3, #67	; 0x43
 8009138:	9500      	str	r5, [sp, #0]
 800913a:	4a0d      	ldr	r2, [pc, #52]	; (8009170 <dhcp_arp_reply+0xac>)
 800913c:	68e1      	ldr	r1, [r4, #12]
 800913e:	6800      	ldr	r0, [r0, #0]
 8009140:	f005 fd88 	bl	800ec54 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff fe51 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800914a:	7aa3      	ldrb	r3, [r4, #10]
 800914c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800914e:	bf1c      	itt	ne
 8009150:	3301      	addne	r3, #1
 8009152:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009154:	2314      	movs	r3, #20
 8009156:	82e3      	strh	r3, [r4, #22]
}
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	0801263b 	.word	0x0801263b
 8009160:	0801241f 	.word	0x0801241f
 8009164:	08011dd4 	.word	0x08011dd4
 8009168:	08012a38 	.word	0x08012a38
 800916c:	20008210 	.word	0x20008210
 8009170:	08012a3c 	.word	0x08012a3c

08009174 <dhcp_renew>:
{
 8009174:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009176:	6a04      	ldr	r4, [r0, #32]
{
 8009178:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800917a:	2105      	movs	r1, #5
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff fbef 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009182:	2203      	movs	r2, #3
 8009184:	4621      	mov	r1, r4
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff fc82 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 800918c:	4605      	mov	r5, r0
 800918e:	bb70      	cbnz	r0, 80091ee <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009190:	2202      	movs	r2, #2
 8009192:	2139      	movs	r1, #57	; 0x39
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff fc0d 	bl	80089b4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800919a:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 800919c:	4620      	mov	r0, r4
 800919e:	f7ff fbe7 	bl	8008970 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80091a2:	2203      	movs	r2, #3
 80091a4:	2137      	movs	r1, #55	; 0x37
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff fc04 	bl	80089b4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80091ac:	2101      	movs	r1, #1
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7ff fc24 	bl	80089fc <dhcp_option_byte>
 80091b4:	2103      	movs	r1, #3
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7ff fc20 	bl	80089fc <dhcp_option_byte>
 80091bc:	211c      	movs	r1, #28
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff fc1c 	bl	80089fc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7ff fdd5 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80091ca:	8aa1      	ldrh	r1, [r4, #20]
 80091cc:	68e0      	ldr	r0, [r4, #12]
 80091ce:	31f0      	adds	r1, #240	; 0xf0
 80091d0:	b289      	uxth	r1, r1
 80091d2:	f002 f891 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80091d6:	4813      	ldr	r0, [pc, #76]	; (8009224 <dhcp_renew+0xb0>)
 80091d8:	9600      	str	r6, [sp, #0]
 80091da:	2343      	movs	r3, #67	; 0x43
 80091dc:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80091e0:	68e1      	ldr	r1, [r4, #12]
 80091e2:	6800      	ldr	r0, [r0, #0]
 80091e4:	f005 fd9c 	bl	800ed20 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7ff fdff 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80091ee:	7aa3      	ldrb	r3, [r4, #10]
}
 80091f0:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 80091f2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80091f4:	bf1c      	itt	ne
 80091f6:	3301      	addne	r3, #1
 80091f8:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 80091fa:	7aa3      	ldrb	r3, [r4, #10]
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	bf96      	itet	ls
 8009200:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009204:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8009208:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800920c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8009210:	bf9c      	itt	ls
 8009212:	011b      	lslls	r3, r3, #4
 8009214:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009216:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800921a:	fb93 f3f2 	sdiv	r3, r3, r2
 800921e:	82e3      	strh	r3, [r4, #22]
}
 8009220:	b002      	add	sp, #8
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	20008210 	.word	0x20008210

08009228 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009228:	b158      	cbz	r0, 8009242 <dhcp_supplied_address+0x1a>
 800922a:	6a00      	ldr	r0, [r0, #32]
 800922c:	b148      	cbz	r0, 8009242 <dhcp_supplied_address+0x1a>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800922e:	7a40      	ldrb	r0, [r0, #9]
 8009230:	280a      	cmp	r0, #10
 8009232:	d005      	beq.n	8009240 <dhcp_supplied_address+0x18>
 8009234:	3804      	subs	r0, #4
 8009236:	2801      	cmp	r0, #1
 8009238:	bf8c      	ite	hi
 800923a:	2000      	movhi	r0, #0
 800923c:	2001      	movls	r0, #1
 800923e:	4770      	bx	lr
 8009240:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8009242:	4770      	bx	lr

08009244 <dhcp_release>:
{
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009246:	6a04      	ldr	r4, [r0, #32]
{
 8009248:	b085      	sub	sp, #20
 800924a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800924c:	2c00      	cmp	r4, #0
 800924e:	d047      	beq.n	80092e0 <dhcp_release+0x9c>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8009250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009252:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8009254:	f7ff ffe8 	bl	8009228 <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8009258:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800925a:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800925c:	4620      	mov	r0, r4
 800925e:	f7ff fb7f 	bl	8008960 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8009262:	2300      	movs	r3, #0
 8009264:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8009266:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009268:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800926a:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800926c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800926e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009270:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8009272:	8463      	strh	r3, [r4, #34]	; 0x22
 8009274:	8423      	strh	r3, [r4, #32]
 8009276:	83e3      	strh	r3, [r4, #30]
 8009278:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800927a:	b375      	cbz	r5, 80092da <dhcp_release+0x96>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800927c:	2207      	movs	r2, #7
 800927e:	4621      	mov	r1, r4
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff fc05 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 8009286:	4605      	mov	r5, r0
 8009288:	bb08      	cbnz	r0, 80092ce <dhcp_release+0x8a>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800928a:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800928c:	2204      	movs	r2, #4
 800928e:	2136      	movs	r1, #54	; 0x36
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff fb8f 	bl	80089b4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8009296:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800929a:	f7ff fb4e 	bl	800893a <lwip_htonl>
 800929e:	4601      	mov	r1, r0
 80092a0:	4620      	mov	r0, r4
 80092a2:	f7ff fbc7 	bl	8008a34 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fd64 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80092ac:	8aa1      	ldrh	r1, [r4, #20]
 80092ae:	68e0      	ldr	r0, [r4, #12]
 80092b0:	31f0      	adds	r1, #240	; 0xf0
 80092b2:	b289      	uxth	r1, r1
 80092b4:	f002 f820 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80092b8:	480b      	ldr	r0, [pc, #44]	; (80092e8 <dhcp_release+0xa4>)
 80092ba:	9600      	str	r6, [sp, #0]
 80092bc:	2343      	movs	r3, #67	; 0x43
 80092be:	463a      	mov	r2, r7
 80092c0:	68e1      	ldr	r1, [r4, #12]
 80092c2:	6800      	ldr	r0, [r0, #0]
 80092c4:	f005 fd2c 	bl	800ed20 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff fd8f 	bl	8008dec <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80092ce:	4b07      	ldr	r3, [pc, #28]	; (80092ec <dhcp_release+0xa8>)
 80092d0:	4630      	mov	r0, r6
 80092d2:	461a      	mov	r2, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	f001 fd89 	bl	800adec <netif_set_addr>
}
 80092da:	4628      	mov	r0, r5
 80092dc:	b005      	add	sp, #20
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 80092e0:	f06f 050f 	mvn.w	r5, #15
 80092e4:	e7f9      	b.n	80092da <dhcp_release+0x96>
 80092e6:	bf00      	nop
 80092e8:	20008210 	.word	0x20008210
 80092ec:	08012a38 	.word	0x08012a38

080092f0 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 80092f0:	4b51      	ldr	r3, [pc, #324]	; (8009438 <dhcp_coarse_tmr+0x148>)
{
 80092f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 80092f6:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80092f8:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80092fc:	4f4f      	ldr	r7, [pc, #316]	; (800943c <dhcp_coarse_tmr+0x14c>)
 80092fe:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8009440 <dhcp_coarse_tmr+0x150>
  while (netif != NULL) {
 8009302:	b915      	cbnz	r5, 800930a <dhcp_coarse_tmr+0x1a>
}
 8009304:	b003      	add	sp, #12
 8009306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800930a:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800930c:	b17c      	cbz	r4, 800932e <dhcp_coarse_tmr+0x3e>
 800930e:	7a63      	ldrb	r3, [r4, #9]
 8009310:	b16b      	cbz	r3, 800932e <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8009312:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8009314:	b169      	cbz	r1, 8009332 <dhcp_coarse_tmr+0x42>
 8009316:	8c22      	ldrh	r2, [r4, #32]
 8009318:	3201      	adds	r2, #1
 800931a:	b292      	uxth	r2, r2
 800931c:	4291      	cmp	r1, r2
 800931e:	8422      	strh	r2, [r4, #32]
 8009320:	d107      	bne.n	8009332 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff ff8e 	bl	8009244 <dhcp_release>
        dhcp_discover(netif);
 8009328:	4628      	mov	r0, r5
 800932a:	f7ff fd8f 	bl	8008e4c <dhcp_discover>
    netif = netif->next;
 800932e:	682d      	ldr	r5, [r5, #0]
 8009330:	e7e7      	b.n	8009302 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009332:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 8009336:	f1b9 0f00 	cmp.w	r9, #0
 800933a:	d064      	beq.n	8009406 <dhcp_coarse_tmr+0x116>
 800933c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8009340:	f1b9 0f01 	cmp.w	r9, #1
 8009344:	83e2      	strh	r2, [r4, #30]
 8009346:	d15e      	bne.n	8009406 <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009348:	3b01      	subs	r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b09      	cmp	r3, #9
 800934e:	d8ee      	bhi.n	800932e <dhcp_coarse_tmr+0x3e>
 8009350:	fa26 f303 	lsr.w	r3, r6, r3
 8009354:	07db      	lsls	r3, r3, #31
 8009356:	d5ea      	bpl.n	800932e <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009358:	2104      	movs	r1, #4
 800935a:	4620      	mov	r0, r4
 800935c:	f7ff fb00 	bl	8008960 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009360:	2203      	movs	r2, #3
 8009362:	4621      	mov	r1, r4
 8009364:	4628      	mov	r0, r5
 8009366:	f7ff fb93 	bl	8008a90 <dhcp_create_msg>
  if (result == ERR_OK) {
 800936a:	bb60      	cbnz	r0, 80093c6 <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800936c:	2202      	movs	r2, #2
 800936e:	2139      	movs	r1, #57	; 0x39
 8009370:	4620      	mov	r0, r4
 8009372:	f7ff fb1f 	bl	80089b4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009376:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 8009378:	4620      	mov	r0, r4
 800937a:	f7ff faf9 	bl	8008970 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800937e:	2203      	movs	r2, #3
 8009380:	2137      	movs	r1, #55	; 0x37
 8009382:	4620      	mov	r0, r4
 8009384:	f7ff fb16 	bl	80089b4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009388:	4649      	mov	r1, r9
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff fb36 	bl	80089fc <dhcp_option_byte>
 8009390:	2103      	movs	r1, #3
 8009392:	4620      	mov	r0, r4
 8009394:	f7ff fb32 	bl	80089fc <dhcp_option_byte>
 8009398:	211c      	movs	r1, #28
 800939a:	4620      	mov	r0, r4
 800939c:	f7ff fb2e 	bl	80089fc <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7ff fce7 	bl	8008d74 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80093a6:	8aa1      	ldrh	r1, [r4, #20]
 80093a8:	68e0      	ldr	r0, [r4, #12]
 80093aa:	31f0      	adds	r1, #240	; 0xf0
 80093ac:	b289      	uxth	r1, r1
 80093ae:	f001 ffa3 	bl	800b2f8 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80093b2:	9500      	str	r5, [sp, #0]
 80093b4:	2343      	movs	r3, #67	; 0x43
 80093b6:	4642      	mov	r2, r8
 80093b8:	68e1      	ldr	r1, [r4, #12]
 80093ba:	6838      	ldr	r0, [r7, #0]
 80093bc:	f005 fcb0 	bl	800ed20 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff fd13 	bl	8008dec <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80093c6:	7aa3      	ldrb	r3, [r4, #10]
 80093c8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80093ca:	bf1c      	itt	ne
 80093cc:	3301      	addne	r3, #1
 80093ce:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80093d0:	7aa3      	ldrb	r3, [r4, #10]
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	bf96      	itet	ls
 80093d6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80093da:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80093de:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80093e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80093e6:	bf9c      	itt	ls
 80093e8:	00db      	lslls	r3, r3, #3
 80093ea:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80093ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80093f0:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80093f4:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80093f6:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80093f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	dd96      	ble.n	800932e <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8009400:	105b      	asrs	r3, r3, #1
 8009402:	83e3      	strh	r3, [r4, #30]
 8009404:	e793      	b.n	800932e <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009406:	8ba2      	ldrh	r2, [r4, #28]
 8009408:	2a00      	cmp	r2, #0
 800940a:	d090      	beq.n	800932e <dhcp_coarse_tmr+0x3e>
 800940c:	1e51      	subs	r1, r2, #1
 800940e:	2a01      	cmp	r2, #1
 8009410:	83a1      	strh	r1, [r4, #28]
 8009412:	d18c      	bne.n	800932e <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009414:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8009418:	2a01      	cmp	r2, #1
 800941a:	d001      	beq.n	8009420 <dhcp_coarse_tmr+0x130>
 800941c:	2b0a      	cmp	r3, #10
 800941e:	d186      	bne.n	800932e <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8009420:	4628      	mov	r0, r5
 8009422:	f7ff fea7 	bl	8009174 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009426:	8b63      	ldrh	r3, [r4, #26]
 8009428:	8c22      	ldrh	r2, [r4, #32]
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800942e:	bfc4      	itt	gt
 8009430:	105b      	asrgt	r3, r3, #1
 8009432:	83a3      	strhgt	r3, [r4, #28]
 8009434:	e77b      	b.n	800932e <dhcp_coarse_tmr+0x3e>
 8009436:	bf00      	nop
 8009438:	2000bb20 	.word	0x2000bb20
 800943c:	20008210 	.word	0x20008210
 8009440:	08012a3c 	.word	0x08012a3c

08009444 <dhcp_fine_tmr>:
{
 8009444:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 8009446:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 8009448:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 800944a:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800944c:	b904      	cbnz	r4, 8009450 <dhcp_fine_tmr+0xc>
}
 800944e:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009450:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 8009452:	b123      	cbz	r3, 800945e <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8009454:	8ada      	ldrh	r2, [r3, #22]
 8009456:	2a01      	cmp	r2, #1
 8009458:	d903      	bls.n	8009462 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800945a:	3a01      	subs	r2, #1
 800945c:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 800945e:	6824      	ldr	r4, [r4, #0]
 8009460:	e7f4      	b.n	800944c <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 8009462:	d1fc      	bne.n	800945e <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009464:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 8009466:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009468:	2a0c      	cmp	r2, #12
 800946a:	d001      	beq.n	8009470 <dhcp_fine_tmr+0x2c>
 800946c:	2a06      	cmp	r2, #6
 800946e:	d103      	bne.n	8009478 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8009470:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8009472:	f7ff fceb 	bl	8008e4c <dhcp_discover>
 8009476:	e7f2      	b.n	800945e <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009478:	2a01      	cmp	r2, #1
 800947a:	d109      	bne.n	8009490 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 800947c:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 800947e:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8009480:	2b05      	cmp	r3, #5
 8009482:	d802      	bhi.n	800948a <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8009484:	f7ff fd40 	bl	8008f08 <dhcp_select>
 8009488:	e7e9      	b.n	800945e <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800948a:	f7ff fedb 	bl	8009244 <dhcp_release>
 800948e:	e7ef      	b.n	8009470 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009490:	2a08      	cmp	r2, #8
 8009492:	d109      	bne.n	80094a8 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8009494:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 8009496:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8009498:	2b01      	cmp	r3, #1
 800949a:	d802      	bhi.n	80094a2 <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 800949c:	f7ff fbd4 	bl	8008c48 <dhcp_check>
 80094a0:	e7dd      	b.n	800945e <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80094a2:	f7ff fbe7 	bl	8008c74 <dhcp_bind>
 80094a6:	e7da      	b.n	800945e <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80094a8:	2a03      	cmp	r2, #3
 80094aa:	d1d8      	bne.n	800945e <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80094ac:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 80094ae:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d8de      	bhi.n	8009472 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80094b4:	f7ff fd9c 	bl	8008ff0 <dhcp_reboot>
 80094b8:	e7d1      	b.n	800945e <dhcp_fine_tmr+0x1a>
 80094ba:	bf00      	nop
 80094bc:	2000bb20 	.word	0x2000bb20

080094c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80094c0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80094c2:	2618      	movs	r6, #24
 80094c4:	4c07      	ldr	r4, [pc, #28]	; (80094e4 <etharp_free_entry+0x24>)
{
 80094c6:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80094c8:	4346      	muls	r6, r0
 80094ca:	59a0      	ldr	r0, [r4, r6]
 80094cc:	b118      	cbz	r0, 80094d6 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80094ce:	f001 fdcd 	bl	800b06c <pbuf_free>
    arp_table[i].q = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80094d6:	2318      	movs	r3, #24
 80094d8:	fb03 4405 	mla	r4, r3, r5, r4
 80094dc:	2300      	movs	r3, #0
 80094de:	7523      	strb	r3, [r4, #20]
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	bf00      	nop
 80094e4:	20008218 	.word	0x20008218

080094e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80094e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094ee:	4689      	mov	r9, r1
 80094f0:	4692      	mov	sl, r2
 80094f2:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80094f4:	4607      	mov	r7, r0
 80094f6:	b930      	cbnz	r0, 8009506 <etharp_raw+0x1e>
 80094f8:	4b2c      	ldr	r3, [pc, #176]	; (80095ac <etharp_raw+0xc4>)
 80094fa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80094fe:	492c      	ldr	r1, [pc, #176]	; (80095b0 <etharp_raw+0xc8>)
 8009500:	482c      	ldr	r0, [pc, #176]	; (80095b4 <etharp_raw+0xcc>)
 8009502:	f007 fd4d 	bl	8010fa0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009506:	2200      	movs	r2, #0
 8009508:	211c      	movs	r1, #28
 800950a:	2002      	movs	r0, #2
 800950c:	f001 fe18 	bl	800b140 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009510:	4606      	mov	r6, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d047      	beq.n	80095a6 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009516:	8943      	ldrh	r3, [r0, #10]
 8009518:	2b1b      	cmp	r3, #27
 800951a:	d806      	bhi.n	800952a <etharp_raw+0x42>
 800951c:	4b23      	ldr	r3, [pc, #140]	; (80095ac <etharp_raw+0xc4>)
 800951e:	f240 4264 	movw	r2, #1124	; 0x464
 8009522:	4925      	ldr	r1, [pc, #148]	; (80095b8 <etharp_raw+0xd0>)
 8009524:	4823      	ldr	r0, [pc, #140]	; (80095b4 <etharp_raw+0xcc>)
 8009526:	f007 fd3b 	bl	8010fa0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800952a:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800952c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8009530:	f7ff fa00 	bl	8008934 <lwip_htons>
 8009534:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800953a:	2b06      	cmp	r3, #6
 800953c:	d006      	beq.n	800954c <etharp_raw+0x64>
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <etharp_raw+0xc4>)
 8009540:	f240 426b 	movw	r2, #1131	; 0x46b
 8009544:	491d      	ldr	r1, [pc, #116]	; (80095bc <etharp_raw+0xd4>)
 8009546:	481b      	ldr	r0, [pc, #108]	; (80095b4 <etharp_raw+0xcc>)
 8009548:	f007 fd2a 	bl	8010fa0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800954c:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009550:	464a      	mov	r2, r9
 8009552:	4631      	mov	r1, r6
 8009554:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009556:	60a3      	str	r3, [r4, #8]
 8009558:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800955c:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	f8c4 3012 	str.w	r3, [r4, #18]
 8009564:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009566:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009568:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800956a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009574:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009576:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009578:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800957a:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800957c:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800957e:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009580:	2308      	movs	r3, #8
 8009582:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8009584:	2306      	movs	r3, #6
 8009586:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009588:	2304      	movs	r3, #4
 800958a:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800958c:	f640 0306 	movw	r3, #2054	; 0x806
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4653      	mov	r3, sl
 8009594:	f005 fc6e 	bl	800ee74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009598:	4630      	mov	r0, r6
 800959a:	f001 fd67 	bl	800b06c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800959e:	4628      	mov	r0, r5
}
 80095a0:	b002      	add	sp, #8
 80095a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095aa:	e7f9      	b.n	80095a0 <etharp_raw+0xb8>
 80095ac:	08012857 	.word	0x08012857
 80095b0:	0801241f 	.word	0x0801241f
 80095b4:	08011dd4 	.word	0x08011dd4
 80095b8:	0801288e 	.word	0x0801288e
 80095bc:	080128bf 	.word	0x080128bf

080095c0 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80095c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 80095c6:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80095c8:	4605      	mov	r5, r0
 80095ca:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80095cc:	4694      	mov	ip, r2
 80095ce:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80095d0:	4681      	mov	r9, r0
 80095d2:	4680      	mov	r8, r0
 80095d4:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80095d6:	4696      	mov	lr, r2
 80095d8:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80095da:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80095dc:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 80095e0:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80095e2:	d111      	bne.n	8009608 <etharp_find_entry.isra.0+0x48>
 80095e4:	b997      	cbnz	r7, 800960c <etharp_find_entry.isra.0+0x4c>
      empty = i;
 80095e6:	fa4f fe80 	sxtb.w	lr, r0
 80095ea:	3001      	adds	r0, #1
 80095ec:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80095ee:	280a      	cmp	r0, #10
 80095f0:	d1f4      	bne.n	80095dc <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80095f2:	9b01      	ldr	r3, [sp, #4]
 80095f4:	0799      	lsls	r1, r3, #30
 80095f6:	d404      	bmi.n	8009602 <etharp_find_entry.isra.0+0x42>
 80095f8:	f1be 0f0a 	cmp.w	lr, #10
 80095fc:	d11c      	bne.n	8009638 <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80095fe:	07db      	lsls	r3, r3, #31
 8009600:	d435      	bmi.n	800966e <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 8009602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009606:	e009      	b.n	800961c <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009608:	2f00      	cmp	r7, #0
 800960a:	d0ee      	beq.n	80095ea <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800960c:	2d00      	cmp	r5, #0
 800960e:	d04a      	beq.n	80096a6 <etharp_find_entry.isra.0+0xe6>
 8009610:	6829      	ldr	r1, [r5, #0]
 8009612:	468a      	mov	sl, r1
 8009614:	6859      	ldr	r1, [r3, #4]
 8009616:	458a      	cmp	sl, r1
 8009618:	d145      	bne.n	80096a6 <etharp_find_entry.isra.0+0xe6>
        return i;
 800961a:	b240      	sxtb	r0, r0
}
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8009622:	45c2      	cmp	sl, r8
 8009624:	d3e1      	bcc.n	80095ea <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8009626:	fa4f fc80 	sxtb.w	ip, r0
 800962a:	46d0      	mov	r8, sl
 800962c:	e7dd      	b.n	80095ea <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 800962e:	45ca      	cmp	sl, r9
            old_stable = i;
 8009630:	bf24      	itt	cs
 8009632:	b244      	sxtbcs	r4, r0
 8009634:	46d1      	movcs	r9, sl
 8009636:	e7d8      	b.n	80095ea <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8009638:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800963c:	2318      	movs	r3, #24
 800963e:	fb03 6307 	mla	r3, r3, r7, r6
 8009642:	7d1b      	ldrb	r3, [r3, #20]
 8009644:	b133      	cbz	r3, 8009654 <etharp_find_entry.isra.0+0x94>
 8009646:	4b1f      	ldr	r3, [pc, #124]	; (80096c4 <etharp_find_entry.isra.0+0x104>)
 8009648:	f240 1287 	movw	r2, #391	; 0x187
 800964c:	491e      	ldr	r1, [pc, #120]	; (80096c8 <etharp_find_entry.isra.0+0x108>)
 800964e:	481f      	ldr	r0, [pc, #124]	; (80096cc <etharp_find_entry.isra.0+0x10c>)
 8009650:	f007 fca6 	bl	8010fa0 <iprintf>
  if (ipaddr != NULL) {
 8009654:	b125      	cbz	r5, 8009660 <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009656:	2318      	movs	r3, #24
 8009658:	682a      	ldr	r2, [r5, #0]
 800965a:	fb03 6307 	mla	r3, r3, r7, r6
 800965e:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8009660:	2318      	movs	r3, #24
  return (err_t)i;
 8009662:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 8009664:	fb03 6607 	mla	r6, r3, r7, r6
 8009668:	2300      	movs	r3, #0
 800966a:	8273      	strh	r3, [r6, #18]
 800966c:	e7d6      	b.n	800961c <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 800966e:	2c0a      	cmp	r4, #10
 8009670:	d00f      	beq.n	8009692 <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009672:	2318      	movs	r3, #24
      i = old_stable;
 8009674:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009676:	435c      	muls	r4, r3
 8009678:	5933      	ldr	r3, [r6, r4]
 800967a:	b133      	cbz	r3, 800968a <etharp_find_entry.isra.0+0xca>
 800967c:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <etharp_find_entry.isra.0+0x104>)
 800967e:	f240 126f 	movw	r2, #367	; 0x16f
 8009682:	4913      	ldr	r1, [pc, #76]	; (80096d0 <etharp_find_entry.isra.0+0x110>)
 8009684:	4811      	ldr	r0, [pc, #68]	; (80096cc <etharp_find_entry.isra.0+0x10c>)
 8009686:	f007 fc8b 	bl	8010fa0 <iprintf>
    etharp_free_entry(i);
 800968a:	4638      	mov	r0, r7
 800968c:	f7ff ff18 	bl	80094c0 <etharp_free_entry>
 8009690:	e7d4      	b.n	800963c <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009692:	f1bc 0f0a 	cmp.w	ip, #10
 8009696:	d002      	beq.n	800969e <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 8009698:	fa5f f78c 	uxtb.w	r7, ip
 800969c:	e7f5      	b.n	800968a <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800969e:	2a0a      	cmp	r2, #10
 80096a0:	d0af      	beq.n	8009602 <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 80096a2:	b2d7      	uxtb	r7, r2
 80096a4:	e7f1      	b.n	800968a <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 80096a6:	2f01      	cmp	r7, #1
 80096a8:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80096ac:	d1bf      	bne.n	800962e <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 80096ae:	681f      	ldr	r7, [r3, #0]
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	d0b6      	beq.n	8009622 <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 80096b4:	45da      	cmp	sl, fp
 80096b6:	d398      	bcc.n	80095ea <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80096b8:	b242      	sxtb	r2, r0
 80096ba:	46d3      	mov	fp, sl
 80096bc:	e795      	b.n	80095ea <etharp_find_entry.isra.0+0x2a>
 80096be:	bf00      	nop
 80096c0:	20008218 	.word	0x20008218
 80096c4:	08012857 	.word	0x08012857
 80096c8:	08012779 	.word	0x08012779
 80096cc:	08011dd4 	.word	0x08011dd4
 80096d0:	08012762 	.word	0x08012762

080096d4 <etharp_cleanup_netif>:
{
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4606      	mov	r6, r0
 80096d8:	4d07      	ldr	r5, [pc, #28]	; (80096f8 <etharp_cleanup_netif+0x24>)
 80096da:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80096dc:	7d2b      	ldrb	r3, [r5, #20]
 80096de:	b12b      	cbz	r3, 80096ec <etharp_cleanup_netif+0x18>
 80096e0:	68ab      	ldr	r3, [r5, #8]
 80096e2:	42b3      	cmp	r3, r6
 80096e4:	d102      	bne.n	80096ec <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff feea 	bl	80094c0 <etharp_free_entry>
 80096ec:	3401      	adds	r4, #1
 80096ee:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80096f0:	2c0a      	cmp	r4, #10
 80096f2:	d1f3      	bne.n	80096dc <etharp_cleanup_netif+0x8>
}
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	bf00      	nop
 80096f8:	20008218 	.word	0x20008218

080096fc <etharp_input>:
{
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	4680      	mov	r8, r0
 8009702:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009704:	460c      	mov	r4, r1
 8009706:	b949      	cbnz	r1, 800971c <etharp_input+0x20>
 8009708:	4b4a      	ldr	r3, [pc, #296]	; (8009834 <etharp_input+0x138>)
 800970a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800970e:	494a      	ldr	r1, [pc, #296]	; (8009838 <etharp_input+0x13c>)
 8009710:	484a      	ldr	r0, [pc, #296]	; (800983c <etharp_input+0x140>)
 8009712:	f007 fc45 	bl	8010fa0 <iprintf>
}
 8009716:	b006      	add	sp, #24
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800971c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800971e:	882b      	ldrh	r3, [r5, #0]
 8009720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009724:	d108      	bne.n	8009738 <etharp_input+0x3c>
 8009726:	792b      	ldrb	r3, [r5, #4]
 8009728:	2b06      	cmp	r3, #6
 800972a:	d105      	bne.n	8009738 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800972c:	796b      	ldrb	r3, [r5, #5]
 800972e:	2b04      	cmp	r3, #4
 8009730:	d102      	bne.n	8009738 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009732:	886b      	ldrh	r3, [r5, #2]
 8009734:	2b08      	cmp	r3, #8
 8009736:	d003      	beq.n	8009740 <etharp_input+0x44>
  pbuf_free(p);
 8009738:	4640      	mov	r0, r8
 800973a:	f001 fc97 	bl	800b06c <pbuf_free>
 800973e:	e7ea      	b.n	8009716 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8009740:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009744:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8009746:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009748:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800974a:	b116      	cbz	r6, 8009752 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800974c:	1b9b      	subs	r3, r3, r6
 800974e:	425e      	negs	r6, r3
 8009750:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009752:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009754:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009758:	f105 0708 	add.w	r7, r5, #8
 800975c:	bf14      	ite	ne
 800975e:	f04f 0901 	movne.w	r9, #1
 8009762:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009766:	2b06      	cmp	r3, #6
 8009768:	d006      	beq.n	8009778 <etharp_input+0x7c>
 800976a:	4b32      	ldr	r3, [pc, #200]	; (8009834 <etharp_input+0x138>)
 800976c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009770:	4933      	ldr	r1, [pc, #204]	; (8009840 <etharp_input+0x144>)
 8009772:	4832      	ldr	r0, [pc, #200]	; (800983c <etharp_input+0x140>)
 8009774:	f007 fc14 	bl	8010fa0 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8009778:	9805      	ldr	r0, [sp, #20]
 800977a:	2800      	cmp	r0, #0
 800977c:	d03c      	beq.n	80097f8 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800977e:	4621      	mov	r1, r4
 8009780:	f000 fca9 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8009784:	4682      	mov	sl, r0
 8009786:	bbb8      	cbnz	r0, 80097f8 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8009788:	9b05      	ldr	r3, [sp, #20]
 800978a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800978e:	2be0      	cmp	r3, #224	; 0xe0
 8009790:	d032      	beq.n	80097f8 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8009792:	4649      	mov	r1, r9
 8009794:	a805      	add	r0, sp, #20
 8009796:	f7ff ff13 	bl	80095c0 <etharp_find_entry.isra.0>
  if (i < 0) {
 800979a:	2800      	cmp	r0, #0
 800979c:	db2c      	blt.n	80097f8 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800979e:	2218      	movs	r2, #24
 80097a0:	4b28      	ldr	r3, [pc, #160]	; (8009844 <etharp_input+0x148>)
 80097a2:	f04f 0c02 	mov.w	ip, #2
 80097a6:	fb02 f100 	mul.w	r1, r2, r0
 80097aa:	eb03 0e01 	add.w	lr, r3, r1
 80097ae:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80097b2:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80097b6:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80097ba:	fb12 c200 	smlabb	r2, r2, r0, ip
 80097be:	6838      	ldr	r0, [r7, #0]
 80097c0:	eb03 0c02 	add.w	ip, r3, r2
 80097c4:	5098      	str	r0, [r3, r2]
 80097c6:	88ba      	ldrh	r2, [r7, #4]
 80097c8:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80097cc:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 80097d0:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 80097d4:	f1b9 0f00 	cmp.w	r9, #0
 80097d8:	d00e      	beq.n	80097f8 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 80097da:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80097de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097e2:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80097e6:	4649      	mov	r1, r9
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	4620      	mov	r0, r4
 80097ec:	463b      	mov	r3, r7
 80097ee:	f005 fb41 	bl	800ee74 <ethernet_output>
    pbuf_free(p);
 80097f2:	4648      	mov	r0, r9
 80097f4:	f001 fc3a 	bl	800b06c <pbuf_free>
  switch (hdr->opcode) {
 80097f8:	88eb      	ldrh	r3, [r5, #6]
 80097fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fe:	d007      	beq.n	8009810 <etharp_input+0x114>
 8009800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009804:	d198      	bne.n	8009738 <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 8009806:	a905      	add	r1, sp, #20
 8009808:	4620      	mov	r0, r4
 800980a:	f7ff fc5b 	bl	80090c4 <dhcp_arp_reply>
    break;
 800980e:	e793      	b.n	8009738 <etharp_input+0x3c>
    if (for_us) {
 8009810:	2e00      	cmp	r6, #0
 8009812:	d091      	beq.n	8009738 <etharp_input+0x3c>
      etharp_raw(netif,
 8009814:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009816:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800981a:	9701      	str	r7, [sp, #4]
 800981c:	4620      	mov	r0, r4
 800981e:	9203      	str	r2, [sp, #12]
 8009820:	aa05      	add	r2, sp, #20
 8009822:	4619      	mov	r1, r3
 8009824:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009826:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8009828:	9200      	str	r2, [sp, #0]
 800982a:	463a      	mov	r2, r7
 800982c:	f7ff fe5c 	bl	80094e8 <etharp_raw>
 8009830:	e782      	b.n	8009738 <etharp_input+0x3c>
 8009832:	bf00      	nop
 8009834:	08012857 	.word	0x08012857
 8009838:	0801241f 	.word	0x0801241f
 800983c:	08011dd4 	.word	0x08011dd4
 8009840:	080127c1 	.word	0x080127c1
 8009844:	20008218 	.word	0x20008218

08009848 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800984a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800984c:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8009850:	9102      	str	r1, [sp, #8]
 8009852:	2401      	movs	r4, #1
 8009854:	4905      	ldr	r1, [pc, #20]	; (800986c <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009856:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009858:	9403      	str	r4, [sp, #12]
 800985a:	9101      	str	r1, [sp, #4]
 800985c:	4619      	mov	r1, r3
 800985e:	9200      	str	r2, [sp, #0]
 8009860:	4a03      	ldr	r2, [pc, #12]	; (8009870 <etharp_request+0x28>)
 8009862:	f7ff fe41 	bl	80094e8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8009866:	b004      	add	sp, #16
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	08013efe 	.word	0x08013efe
 8009870:	08013e92 	.word	0x08013e92

08009874 <etharp_tmr>:
{
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	4c13      	ldr	r4, [pc, #76]	; (80098c4 <etharp_tmr+0x50>)
 8009878:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800987a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800987c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800987e:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8009880:	b16a      	cbz	r2, 800989e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8009882:	89e3      	ldrh	r3, [r4, #14]
 8009884:	3301      	adds	r3, #1
 8009886:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009888:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800988c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800988e:	d203      	bcs.n	8009898 <etharp_tmr+0x24>
 8009890:	2a01      	cmp	r2, #1
 8009892:	d109      	bne.n	80098a8 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009894:	2b04      	cmp	r3, #4
 8009896:	d90b      	bls.n	80098b0 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8009898:	4628      	mov	r0, r5
 800989a:	f7ff fe11 	bl	80094c0 <etharp_free_entry>
 800989e:	3501      	adds	r5, #1
 80098a0:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80098a2:	2d0a      	cmp	r5, #10
 80098a4:	d1eb      	bne.n	800987e <etharp_tmr+0xa>
 80098a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80098a8:	2a03      	cmp	r2, #3
 80098aa:	d106      	bne.n	80098ba <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80098ac:	7427      	strb	r7, [r4, #16]
 80098ae:	e7f6      	b.n	800989e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80098b0:	4621      	mov	r1, r4
 80098b2:	6860      	ldr	r0, [r4, #4]
 80098b4:	f7ff ffc8 	bl	8009848 <etharp_request>
 80098b8:	e7f1      	b.n	800989e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80098ba:	2a04      	cmp	r2, #4
 80098bc:	d1ef      	bne.n	800989e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80098be:	7426      	strb	r6, [r4, #16]
 80098c0:	e7ed      	b.n	800989e <etharp_tmr+0x2a>
 80098c2:	bf00      	nop
 80098c4:	2000821c 	.word	0x2000821c

080098c8 <etharp_output_to_arp_index>:
{
 80098c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098cc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80098ce:	4d27      	ldr	r5, [pc, #156]	; (800996c <etharp_output_to_arp_index+0xa4>)
 80098d0:	2218      	movs	r2, #24
{
 80098d2:	b085      	sub	sp, #20
 80098d4:	4606      	mov	r6, r0
 80098d6:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80098d8:	fb02 5204 	mla	r2, r2, r4, r5
 80098dc:	7d12      	ldrb	r2, [r2, #20]
 80098de:	2a01      	cmp	r2, #1
 80098e0:	d806      	bhi.n	80098f0 <etharp_output_to_arp_index+0x28>
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <etharp_output_to_arp_index+0xa8>)
 80098e4:	f240 22ed 	movw	r2, #749	; 0x2ed
 80098e8:	4922      	ldr	r1, [pc, #136]	; (8009974 <etharp_output_to_arp_index+0xac>)
 80098ea:	4823      	ldr	r0, [pc, #140]	; (8009978 <etharp_output_to_arp_index+0xb0>)
 80098ec:	f007 fb58 	bl	8010fa0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80098f0:	2118      	movs	r1, #24
 80098f2:	f106 0729 	add.w	r7, r6, #41	; 0x29
 80098f6:	fb01 5904 	mla	r9, r1, r4, r5
 80098fa:	f899 3014 	ldrb.w	r3, [r9, #20]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d10d      	bne.n	800991e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009902:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8009906:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800990a:	d917      	bls.n	800993c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800990c:	4649      	mov	r1, r9
 800990e:	4630      	mov	r0, r6
 8009910:	3104      	adds	r1, #4
 8009912:	f7ff ff99 	bl	8009848 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009916:	b910      	cbnz	r0, 800991e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009918:	2303      	movs	r3, #3
 800991a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800991e:	2318      	movs	r3, #24
 8009920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009924:	4641      	mov	r1, r8
 8009926:	4630      	mov	r0, r6
 8009928:	fb03 5304 	mla	r3, r3, r4, r5
 800992c:	9200      	str	r2, [sp, #0]
 800992e:	463a      	mov	r2, r7
 8009930:	330c      	adds	r3, #12
 8009932:	f005 fa9f 	bl	800ee74 <ethernet_output>
}
 8009936:	b005      	add	sp, #20
 8009938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800993c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009940:	d3ed      	bcc.n	800991e <etharp_output_to_arp_index+0x56>
 8009942:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009946:	2101      	movs	r1, #1
 8009948:	4630      	mov	r0, r6
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	9103      	str	r1, [sp, #12]
 800994e:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009950:	f103 020c 	add.w	r2, r3, #12
 8009954:	3304      	adds	r3, #4
 8009956:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009958:	442a      	add	r2, r5
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <etharp_output_to_arp_index+0xb4>)
 800995e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009960:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	463b      	mov	r3, r7
 8009966:	f7ff fdbf 	bl	80094e8 <etharp_raw>
 800996a:	e7d4      	b.n	8009916 <etharp_output_to_arp_index+0x4e>
 800996c:	20008218 	.word	0x20008218
 8009970:	08012857 	.word	0x08012857
 8009974:	080127e5 	.word	0x080127e5
 8009978:	08011dd4 	.word	0x08011dd4
 800997c:	08013efe 	.word	0x08013efe

08009980 <etharp_query>:
{
 8009980:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	4689      	mov	r9, r1
 8009986:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009988:	4601      	mov	r1, r0
{
 800998a:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800998c:	f8d9 0000 	ldr.w	r0, [r9]
 8009990:	f000 fba1 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 8009994:	4604      	mov	r4, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	d15e      	bne.n	8009a58 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 800999a:	f8d9 3000 	ldr.w	r3, [r9]
 800999e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80099a2:	2ae0      	cmp	r2, #224	; 0xe0
 80099a4:	d058      	beq.n	8009a58 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d056      	beq.n	8009a58 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80099aa:	2101      	movs	r1, #1
 80099ac:	4648      	mov	r0, r9
 80099ae:	f7ff fe07 	bl	80095c0 <etharp_find_entry.isra.0>
  if (i < 0) {
 80099b2:	1e05      	subs	r5, r0, #0
 80099b4:	db53      	blt.n	8009a5e <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80099b6:	4f40      	ldr	r7, [pc, #256]	; (8009ab8 <etharp_query+0x138>)
 80099b8:	2318      	movs	r3, #24
 80099ba:	fb03 7305 	mla	r3, r3, r5, r7
 80099be:	7d1a      	ldrb	r2, [r3, #20]
 80099c0:	b91a      	cbnz	r2, 80099ca <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80099c2:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 80099c4:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80099c8:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80099ca:	2318      	movs	r3, #24
 80099cc:	fb03 7305 	mla	r3, r3, r5, r7
 80099d0:	7d1b      	ldrb	r3, [r3, #20]
 80099d2:	b933      	cbnz	r3, 80099e2 <etharp_query+0x62>
 80099d4:	4b39      	ldr	r3, [pc, #228]	; (8009abc <etharp_query+0x13c>)
 80099d6:	f240 32c9 	movw	r2, #969	; 0x3c9
 80099da:	4939      	ldr	r1, [pc, #228]	; (8009ac0 <etharp_query+0x140>)
 80099dc:	4839      	ldr	r0, [pc, #228]	; (8009ac4 <etharp_query+0x144>)
 80099de:	f007 fadf 	bl	8010fa0 <iprintf>
  if (is_new_entry || (q == NULL)) {
 80099e2:	b90c      	cbnz	r4, 80099e8 <etharp_query+0x68>
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	d13c      	bne.n	8009a62 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 80099e8:	4649      	mov	r1, r9
 80099ea:	4640      	mov	r0, r8
 80099ec:	f7ff ff2c 	bl	8009848 <etharp_request>
    if (q == NULL) {
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	d138      	bne.n	8009a66 <etharp_query+0xe6>
}
 80099f4:	b002      	add	sp, #8
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80099fa:	d1fb      	bne.n	80099f4 <etharp_query+0x74>
 80099fc:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80099fe:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8009abc <etharp_query+0x13c>
 8009a02:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8009acc <etharp_query+0x14c>
 8009a06:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ac4 <etharp_query+0x144>
    while (p) {
 8009a0a:	b99c      	cbnz	r4, 8009a34 <etharp_query+0xb4>
      pbuf_ref(p);
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f001 fceb 	bl	800b3e8 <pbuf_ref>
    if (p != NULL) {
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d04c      	beq.n	8009ab0 <etharp_query+0x130>
 8009a16:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8009a18:	2318      	movs	r3, #24
 8009a1a:	fb03 f205 	mul.w	r2, r3, r5
 8009a1e:	461c      	mov	r4, r3
 8009a20:	58b8      	ldr	r0, [r7, r2]
 8009a22:	b108      	cbz	r0, 8009a28 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8009a24:	f001 fb22 	bl	800b06c <pbuf_free>
      arp_table[i].q = p;
 8009a28:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8009a2c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8009a2e:	f847 8003 	str.w	r8, [r7, r3]
 8009a32:	e7df      	b.n	80099f4 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009a34:	8962      	ldrh	r2, [r4, #10]
 8009a36:	8923      	ldrh	r3, [r4, #8]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d108      	bne.n	8009a4e <etharp_query+0xce>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	b133      	cbz	r3, 8009a4e <etharp_query+0xce>
 8009a40:	4643      	mov	r3, r8
 8009a42:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009a46:	4649      	mov	r1, r9
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f007 faa9 	bl	8010fa0 <iprintf>
      if (p->type != PBUF_ROM) {
 8009a4e:	7b23      	ldrb	r3, [r4, #12]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d11e      	bne.n	8009a92 <etharp_query+0x112>
      p = p->next;
 8009a54:	6824      	ldr	r4, [r4, #0]
 8009a56:	e7d8      	b.n	8009a0a <etharp_query+0x8a>
    return ERR_ARG;
 8009a58:	f06f 000f 	mvn.w	r0, #15
 8009a5c:	e7ca      	b.n	80099f4 <etharp_query+0x74>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	e7c8      	b.n	80099f4 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009a66:	2318      	movs	r3, #24
 8009a68:	fb03 7205 	mla	r2, r3, r5, r7
 8009a6c:	7d12      	ldrb	r2, [r2, #20]
 8009a6e:	2a01      	cmp	r2, #1
 8009a70:	d9c3      	bls.n	80099fa <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8009a72:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009a74:	4631      	mov	r1, r6
 8009a76:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 8009a78:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009a7a:	220c      	movs	r2, #12
 8009a7c:	fb13 2305 	smlabb	r3, r3, r5, r2
 8009a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a84:	443b      	add	r3, r7
 8009a86:	9200      	str	r2, [sp, #0]
 8009a88:	f108 0229 	add.w	r2, r8, #41	; 0x29
 8009a8c:	f005 f9f2 	bl	800ee74 <ethernet_output>
 8009a90:	e7b0      	b.n	80099f4 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8009a92:	2200      	movs	r2, #0
 8009a94:	8921      	ldrh	r1, [r4, #8]
 8009a96:	2002      	movs	r0, #2
 8009a98:	f001 fb52 	bl	800b140 <pbuf_alloc>
      if (p != NULL) {
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	b138      	cbz	r0, 8009ab0 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	f001 fd01 	bl	800b4a8 <pbuf_copy>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d0b6      	beq.n	8009a18 <etharp_query+0x98>
          pbuf_free(p);
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f001 fade 	bl	800b06c <pbuf_free>
      result = ERR_MEM;
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ab4:	e79e      	b.n	80099f4 <etharp_query+0x74>
 8009ab6:	bf00      	nop
 8009ab8:	20008218 	.word	0x20008218
 8009abc:	08012857 	.word	0x08012857
 8009ac0:	08012815 	.word	0x08012815
 8009ac4:	08011dd4 	.word	0x08011dd4
 8009ac8:	20008308 	.word	0x20008308
 8009acc:	0801283d 	.word	0x0801283d

08009ad0 <etharp_output>:
{
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad2:	460e      	mov	r6, r1
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009ad8:	4604      	mov	r4, r0
 8009ada:	b930      	cbnz	r0, 8009aea <etharp_output+0x1a>
 8009adc:	4b3e      	ldr	r3, [pc, #248]	; (8009bd8 <etharp_output+0x108>)
 8009ade:	f240 321b 	movw	r2, #795	; 0x31b
 8009ae2:	493e      	ldr	r1, [pc, #248]	; (8009bdc <etharp_output+0x10c>)
 8009ae4:	483e      	ldr	r0, [pc, #248]	; (8009be0 <etharp_output+0x110>)
 8009ae6:	f007 fa5b 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009aea:	b936      	cbnz	r6, 8009afa <etharp_output+0x2a>
 8009aec:	4b3a      	ldr	r3, [pc, #232]	; (8009bd8 <etharp_output+0x108>)
 8009aee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009af2:	493c      	ldr	r1, [pc, #240]	; (8009be4 <etharp_output+0x114>)
 8009af4:	483a      	ldr	r0, [pc, #232]	; (8009be0 <etharp_output+0x110>)
 8009af6:	f007 fa53 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009afa:	b935      	cbnz	r5, 8009b0a <etharp_output+0x3a>
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <etharp_output+0x108>)
 8009afe:	f240 321d 	movw	r2, #797	; 0x31d
 8009b02:	4939      	ldr	r1, [pc, #228]	; (8009be8 <etharp_output+0x118>)
 8009b04:	4836      	ldr	r0, [pc, #216]	; (8009be0 <etharp_output+0x110>)
 8009b06:	f007 fa4b 	bl	8010fa0 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	6828      	ldr	r0, [r5, #0]
 8009b0e:	f000 fae2 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d15a      	bne.n	8009bcc <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009b1c:	2ae0      	cmp	r2, #224	; 0xe0
 8009b1e:	d11d      	bne.n	8009b5c <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009b20:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009b22:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009b26:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009b2a:	235e      	movs	r3, #94	; 0x5e
 8009b2c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009b30:	786b      	ldrb	r3, [r5, #1]
 8009b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b36:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009b3a:	78ab      	ldrb	r3, [r5, #2]
 8009b3c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009b40:	78eb      	ldrb	r3, [r5, #3]
 8009b42:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8009b46:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8009b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4620      	mov	r0, r4
 8009b50:	9200      	str	r2, [sp, #0]
 8009b52:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8009b56:	f005 f98d 	bl	800ee74 <ethernet_output>
 8009b5a:	e01f      	b.n	8009b9c <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009b5c:	6862      	ldr	r2, [r4, #4]
 8009b5e:	68a1      	ldr	r1, [r4, #8]
 8009b60:	405a      	eors	r2, r3
 8009b62:	420a      	tst	r2, r1
 8009b64:	d008      	beq.n	8009b78 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8009b66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009b68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d003      	beq.n	8009b78 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009b70:	68e3      	ldr	r3, [r4, #12]
 8009b72:	b36b      	cbz	r3, 8009bd0 <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 8009b74:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009b78:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <etharp_output+0x11c>)
 8009b7a:	2018      	movs	r0, #24
 8009b7c:	491c      	ldr	r1, [pc, #112]	; (8009bf0 <etharp_output+0x120>)
 8009b7e:	781a      	ldrb	r2, [r3, #0]
 8009b80:	fb00 1002 	mla	r0, r0, r2, r1
 8009b84:	7d01      	ldrb	r1, [r0, #20]
 8009b86:	2901      	cmp	r1, #1
 8009b88:	4619      	mov	r1, r3
 8009b8a:	d909      	bls.n	8009ba0 <etharp_output+0xd0>
 8009b8c:	682f      	ldr	r7, [r5, #0]
 8009b8e:	6843      	ldr	r3, [r0, #4]
 8009b90:	429f      	cmp	r7, r3
 8009b92:	d105      	bne.n	8009ba0 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8009b94:	4631      	mov	r1, r6
 8009b96:	4620      	mov	r0, r4
 8009b98:	f7ff fe96 	bl	80098c8 <etharp_output_to_arp_index>
}
 8009b9c:	b005      	add	sp, #20
 8009b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba0:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <etharp_output+0x120>)
{
 8009ba2:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009ba4:	7d18      	ldrb	r0, [r3, #20]
 8009ba6:	2801      	cmp	r0, #1
 8009ba8:	d906      	bls.n	8009bb8 <etharp_output+0xe8>
 8009baa:	682f      	ldr	r7, [r5, #0]
 8009bac:	6858      	ldr	r0, [r3, #4]
 8009bae:	4287      	cmp	r7, r0
 8009bb0:	d102      	bne.n	8009bb8 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	700a      	strb	r2, [r1, #0]
 8009bb6:	e7ed      	b.n	8009b94 <etharp_output+0xc4>
 8009bb8:	3201      	adds	r2, #1
 8009bba:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009bbc:	2a0a      	cmp	r2, #10
 8009bbe:	d1f1      	bne.n	8009ba4 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f7ff fedb 	bl	8009980 <etharp_query>
 8009bca:	e7e7      	b.n	8009b9c <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <etharp_output+0x124>)
 8009bce:	e7bb      	b.n	8009b48 <etharp_output+0x78>
            return ERR_RTE;
 8009bd0:	f06f 0003 	mvn.w	r0, #3
 8009bd4:	e7e2      	b.n	8009b9c <etharp_output+0xcc>
 8009bd6:	bf00      	nop
 8009bd8:	08012857 	.word	0x08012857
 8009bdc:	0801241f 	.word	0x0801241f
 8009be0:	08011dd4 	.word	0x08011dd4
 8009be4:	0801328f 	.word	0x0801328f
 8009be8:	080127a2 	.word	0x080127a2
 8009bec:	20008308 	.word	0x20008308
 8009bf0:	20008218 	.word	0x20008218
 8009bf4:	08013e92 	.word	0x08013e92

08009bf8 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8009bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	b087      	sub	sp, #28
 8009bfe:	460f      	mov	r7, r1
 8009c00:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009c02:	2124      	movs	r1, #36	; 0x24
 8009c04:	2200      	movs	r2, #0
 8009c06:	2001      	movs	r0, #1
 8009c08:	f001 fa9a 	bl	800b140 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	b3a0      	cbz	r0, 8009c7a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009c10:	8943      	ldrh	r3, [r0, #10]
 8009c12:	2b23      	cmp	r3, #35	; 0x23
 8009c14:	d806      	bhi.n	8009c24 <icmp_send_response.isra.0+0x2c>
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <icmp_send_response.isra.0+0x88>)
 8009c18:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8009c1c:	4919      	ldr	r1, [pc, #100]	; (8009c84 <icmp_send_response.isra.0+0x8c>)
 8009c1e:	481a      	ldr	r0, [pc, #104]	; (8009c88 <icmp_send_response.isra.0+0x90>)
 8009c20:	f007 f9be 	bl	8010fa0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009c24:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8009c26:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009c28:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009c2a:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8009c2e:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009c30:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8009c34:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8009c36:	71a3      	strb	r3, [r4, #6]
 8009c38:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009c3a:	4613      	mov	r3, r2
  icmphdr->type = type;
 8009c3c:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8009c3e:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009c40:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c44:	4283      	cmp	r3, r0
 8009c46:	f841 6b04 	str.w	r6, [r1], #4
 8009c4a:	d1f9      	bne.n	8009c40 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009c4c:	ae06      	add	r6, sp, #24
 8009c4e:	68d3      	ldr	r3, [r2, #12]
 8009c50:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009c54:	4630      	mov	r0, r6
 8009c56:	f000 f8bb 	bl	8009dd0 <ip4_route>
#endif
  if (netif != NULL) {
 8009c5a:	b158      	cbz	r0, 8009c74 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009c5c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8009c62:	70a1      	strb	r1, [r4, #2]
 8009c64:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009c66:	9002      	str	r0, [sp, #8]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e88d 000a 	stmia.w	sp, {r1, r3}
 8009c6e:	23ff      	movs	r3, #255	; 0xff
 8009c70:	f000 fa20 	bl	800a0b4 <ip4_output_if>
  }
  pbuf_free(q);
 8009c74:	4628      	mov	r0, r5
 8009c76:	f001 f9f9 	bl	800b06c <pbuf_free>
}
 8009c7a:	b007      	add	sp, #28
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	08012967 	.word	0x08012967
 8009c84:	0801299c 	.word	0x0801299c
 8009c88:	08011dd4 	.word	0x08011dd4

08009c8c <icmp_input>:
  iphdr_in = ip4_current_header();
 8009c8c:	4b45      	ldr	r3, [pc, #276]	; (8009da4 <icmp_input+0x118>)
{
 8009c8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8009c92:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8009c96:	b085      	sub	sp, #20
 8009c98:	4604      	mov	r4, r0
 8009c9a:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8009c9c:	f899 5000 	ldrb.w	r5, [r9]
 8009ca0:	461f      	mov	r7, r3
 8009ca2:	f005 050f 	and.w	r5, r5, #15
 8009ca6:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8009ca8:	2d13      	cmp	r5, #19
 8009caa:	d92a      	bls.n	8009d02 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8009cac:	8942      	ldrh	r2, [r0, #10]
 8009cae:	2a03      	cmp	r2, #3
 8009cb0:	d927      	bls.n	8009d02 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8009cb2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	2a08      	cmp	r2, #8
 8009cb8:	d123      	bne.n	8009d02 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009cba:	6958      	ldr	r0, [r3, #20]
 8009cbc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009cc0:	2ae0      	cmp	r2, #224	; 0xe0
 8009cc2:	d01e      	beq.n	8009d02 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009cc4:	6819      	ldr	r1, [r3, #0]
 8009cc6:	f000 fa06 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	b9c8      	cbnz	r0, 8009d02 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009cce:	8923      	ldrh	r3, [r4, #8]
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	d916      	bls.n	8009d02 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009cd4:	f105 010e 	add.w	r1, r5, #14
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f001 f9c1 	bl	800b060 <pbuf_header>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d04f      	beq.n	8009d82 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8009ce2:	8921      	ldrh	r1, [r4, #8]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	2002      	movs	r0, #2
 8009ce8:	4429      	add	r1, r5
 8009cea:	b289      	uxth	r1, r1
 8009cec:	f001 fa28 	bl	800b140 <pbuf_alloc>
      if (r == NULL) {
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	b130      	cbz	r0, 8009d02 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009cf4:	8942      	ldrh	r2, [r0, #10]
 8009cf6:	f105 0308 	add.w	r3, r5, #8
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d207      	bcs.n	8009d0e <icmp_input+0x82>
        pbuf_free(r);
 8009cfe:	f001 f9b5 	bl	800b06c <pbuf_free>
  pbuf_free(p);
 8009d02:	4620      	mov	r0, r4
}
 8009d04:	b005      	add	sp, #20
 8009d06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8009d0a:	f001 b9af 	b.w	800b06c <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8009d0e:	4649      	mov	r1, r9
 8009d10:	462a      	mov	r2, r5
 8009d12:	6840      	ldr	r0, [r0, #4]
 8009d14:	f007 f885 	bl	8010e22 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8009d18:	4269      	negs	r1, r5
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f001 f9a0 	bl	800b060 <pbuf_header>
 8009d20:	b138      	cbz	r0, 8009d32 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009d22:	4b21      	ldr	r3, [pc, #132]	; (8009da8 <icmp_input+0x11c>)
 8009d24:	22af      	movs	r2, #175	; 0xaf
 8009d26:	4921      	ldr	r1, [pc, #132]	; (8009dac <icmp_input+0x120>)
 8009d28:	4821      	ldr	r0, [pc, #132]	; (8009db0 <icmp_input+0x124>)
 8009d2a:	f007 f939 	bl	8010fa0 <iprintf>
        pbuf_free(r);
 8009d2e:	4630      	mov	r0, r6
 8009d30:	e7e5      	b.n	8009cfe <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8009d32:	4621      	mov	r1, r4
 8009d34:	4630      	mov	r0, r6
 8009d36:	f001 fbb7 	bl	800b4a8 <pbuf_copy>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1f7      	bne.n	8009d2e <icmp_input+0xa2>
      pbuf_free(p);
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4634      	mov	r4, r6
 8009d42:	f001 f993 	bl	800b06c <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 8009d46:	4629      	mov	r1, r5
 8009d48:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8009d4a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8009d4c:	f001 f988 	bl	800b060 <pbuf_header>
 8009d50:	4602      	mov	r2, r0
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d1d5      	bne.n	8009d02 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8009d56:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8009d60:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009d62:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8009d64:	70b0      	strb	r0, [r6, #2]
 8009d66:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8009d68:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8009d6a:	7288      	strb	r0, [r1, #10]
 8009d6c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009d6e:	2101      	movs	r1, #1
 8009d70:	9000      	str	r0, [sp, #0]
 8009d72:	4620      	mov	r0, r4
 8009d74:	9101      	str	r1, [sp, #4]
 8009d76:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d7a:	490e      	ldr	r1, [pc, #56]	; (8009db4 <icmp_input+0x128>)
 8009d7c:	f000 f99a 	bl	800a0b4 <ip4_output_if>
 8009d80:	e7bf      	b.n	8009d02 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009d82:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8009d86:	4620      	mov	r0, r4
 8009d88:	31f2      	adds	r1, #242	; 0xf2
 8009d8a:	b209      	sxth	r1, r1
 8009d8c:	f001 f968 	bl	800b060 <pbuf_header>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0d8      	beq.n	8009d46 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <icmp_input+0x11c>)
 8009d96:	22c0      	movs	r2, #192	; 0xc0
 8009d98:	4907      	ldr	r1, [pc, #28]	; (8009db8 <icmp_input+0x12c>)
 8009d9a:	4805      	ldr	r0, [pc, #20]	; (8009db0 <icmp_input+0x124>)
 8009d9c:	f007 f900 	bl	8010fa0 <iprintf>
        goto icmperr;
 8009da0:	e7af      	b.n	8009d02 <icmp_input+0x76>
 8009da2:	bf00      	nop
 8009da4:	2000840c 	.word	0x2000840c
 8009da8:	08012967 	.word	0x08012967
 8009dac:	08012900 	.word	0x08012900
 8009db0:	08011dd4 	.word	0x08011dd4
 8009db4:	20008420 	.word	0x20008420
 8009db8:	08012935 	.word	0x08012935

08009dbc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8009dbc:	460a      	mov	r2, r1
 8009dbe:	3004      	adds	r0, #4
 8009dc0:	2103      	movs	r1, #3
 8009dc2:	f7ff bf19 	b.w	8009bf8 <icmp_send_response.isra.0>

08009dc6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8009dc6:	460a      	mov	r2, r1
 8009dc8:	3004      	adds	r0, #4
 8009dca:	210b      	movs	r1, #11
 8009dcc:	f7ff bf14 	b.w	8009bf8 <icmp_send_response.isra.0>

08009dd0 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8009dd0:	4b13      	ldr	r3, [pc, #76]	; (8009e20 <ip4_route+0x50>)
{
 8009dd2:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	b96b      	cbnz	r3, 8009df4 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009dd8:	4a12      	ldr	r2, [pc, #72]	; (8009e24 <ip4_route+0x54>)
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	b1ea      	cbz	r2, 8009e1a <ip4_route+0x4a>
 8009dde:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8009de2:	f001 0105 	and.w	r1, r1, #5
 8009de6:	2905      	cmp	r1, #5
 8009de8:	d117      	bne.n	8009e1a <ip4_route+0x4a>
 8009dea:	6851      	ldr	r1, [r2, #4]
 8009dec:	2900      	cmp	r1, #0
 8009dee:	bf18      	it	ne
 8009df0:	4613      	movne	r3, r2
 8009df2:	e012      	b.n	8009e1a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009df4:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 8009df8:	f004 0205 	and.w	r2, r4, #5
 8009dfc:	2a05      	cmp	r2, #5
 8009dfe:	d1e9      	bne.n	8009dd4 <ip4_route+0x4>
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	d0e6      	beq.n	8009dd4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009e06:	6801      	ldr	r1, [r0, #0]
 8009e08:	689d      	ldr	r5, [r3, #8]
 8009e0a:	404a      	eors	r2, r1
 8009e0c:	422a      	tst	r2, r5
 8009e0e:	d004      	beq.n	8009e1a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009e10:	07a2      	lsls	r2, r4, #30
 8009e12:	d4df      	bmi.n	8009dd4 <ip4_route+0x4>
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	4291      	cmp	r1, r2
 8009e18:	d1dc      	bne.n	8009dd4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	bd30      	pop	{r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	2000bb20 	.word	0x2000bb20
 8009e24:	2000bb24 	.word	0x2000bb24

08009e28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009e2c:	6847      	ldr	r7, [r0, #4]
{
 8009e2e:	4605      	mov	r5, r0
 8009e30:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8009e32:	f897 9000 	ldrb.w	r9, [r7]
 8009e36:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d005      	beq.n	8009e4a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f001 f914 	bl	800b06c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8009e44:	2000      	movs	r0, #0
 8009e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009e4a:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8009e4c:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009e50:	f7fe fd70 	bl	8008934 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8009e54:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 8009e56:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009e5a:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8009e5c:	4283      	cmp	r3, r0
 8009e5e:	d903      	bls.n	8009e68 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8009e60:	4601      	mov	r1, r0
 8009e62:	4628      	mov	r0, r5
 8009e64:	f001 fa48 	bl	800b2f8 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009e68:	896b      	ldrh	r3, [r5, #10]
 8009e6a:	454b      	cmp	r3, r9
 8009e6c:	d3e7      	bcc.n	8009e3e <ip4_input+0x16>
 8009e6e:	892b      	ldrh	r3, [r5, #8]
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d3e4      	bcc.n	8009e3e <ip4_input+0x16>
 8009e74:	f1b9 0f13 	cmp.w	r9, #19
 8009e78:	d9e1      	bls.n	8009e3e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	4c4f      	ldr	r4, [pc, #316]	; (8009fbc <ip4_input+0x194>)
 8009e7e:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009e84:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009e86:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009e88:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009e8a:	d113      	bne.n	8009eb4 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009e8c:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 8009e90:	07da      	lsls	r2, r3, #31
 8009e92:	d504      	bpl.n	8009e9e <ip4_input+0x76>
 8009e94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f040 808d 	bne.w	8009fb8 <ip4_input+0x190>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8009e9e:	7a7b      	ldrb	r3, [r7, #9]
 8009ea0:	2b11      	cmp	r3, #17
 8009ea2:	d105      	bne.n	8009eb0 <ip4_input+0x88>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8009ea4:	eb07 0309 	add.w	r3, r7, r9
 8009ea8:	885b      	ldrh	r3, [r3, #2]
 8009eaa:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8009eae:	d059      	beq.n	8009f64 <ip4_input+0x13c>
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	e018      	b.n	8009ee6 <ip4_input+0xbe>
 8009eb4:	4646      	mov	r6, r8
 8009eb6:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8009eba:	f8df b104 	ldr.w	fp, [pc, #260]	; 8009fc0 <ip4_input+0x198>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009ebe:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d404      	bmi.n	8009ed0 <ip4_input+0xa8>
      if (first) {
 8009ec6:	f1ba 0f00 	cmp.w	sl, #0
 8009eca:	d13e      	bne.n	8009f4a <ip4_input+0x122>
        netif = netif->next;
 8009ecc:	6836      	ldr	r6, [r6, #0]
 8009ece:	e041      	b.n	8009f54 <ip4_input+0x12c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009ed0:	6873      	ldr	r3, [r6, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f7      	beq.n	8009ec6 <ip4_input+0x9e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009ed6:	6960      	ldr	r0, [r4, #20]
 8009ed8:	4283      	cmp	r3, r0
 8009eda:	d004      	beq.n	8009ee6 <ip4_input+0xbe>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009edc:	4631      	mov	r1, r6
 8009ede:	f000 f8fa 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d0ef      	beq.n	8009ec6 <ip4_input+0x9e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8009ee6:	6920      	ldr	r0, [r4, #16]
 8009ee8:	b148      	cbz	r0, 8009efe <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009eea:	4641      	mov	r1, r8
 8009eec:	f000 f8f3 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1a4      	bne.n	8009e3e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009efa:	2be0      	cmp	r3, #224	; 0xe0
 8009efc:	d09f      	beq.n	8009e3e <ip4_input+0x16>
  if (netif == NULL) {
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d09d      	beq.n	8009e3e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f08:	b133      	cbz	r3, 8009f18 <ip4_input+0xf0>
    p = ip4_reass(p);
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f000 fa12 	bl	800a334 <ip4_reass>
    if (p == NULL) {
 8009f10:	4605      	mov	r5, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d096      	beq.n	8009e44 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8009f16:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8009f18:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8009f1a:	f1c9 0100 	rsb	r1, r9, #0
 8009f1e:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8009f20:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8009f24:	783b      	ldrb	r3, [r7, #0]
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8009f2e:	f001 f897 	bl	800b060 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8009f32:	7a7b      	ldrb	r3, [r7, #9]
 8009f34:	2b06      	cmp	r3, #6
 8009f36:	d023      	beq.n	8009f80 <ip4_input+0x158>
 8009f38:	2b11      	cmp	r3, #17
 8009f3a:	d015      	beq.n	8009f68 <ip4_input+0x140>
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d124      	bne.n	8009f8a <ip4_input+0x162>
      icmp_input(p, inp);
 8009f40:	4641      	mov	r1, r8
 8009f42:	4628      	mov	r0, r5
 8009f44:	f7ff fea2 	bl	8009c8c <icmp_input>
      break;
 8009f48:	e012      	b.n	8009f70 <ip4_input+0x148>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8009f4a:	7d23      	ldrb	r3, [r4, #20]
 8009f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009f4e:	d0a6      	beq.n	8009e9e <ip4_input+0x76>
        netif = netif_list;
 8009f50:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8009f54:	4546      	cmp	r6, r8
 8009f56:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8009f5a:	bf08      	it	eq
 8009f5c:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d1ad      	bne.n	8009ebe <ip4_input+0x96>
 8009f62:	e79c      	b.n	8009e9e <ip4_input+0x76>
 8009f64:	4646      	mov	r6, r8
 8009f66:	e7ca      	b.n	8009efe <ip4_input+0xd6>
      udp_input(p, inp);
 8009f68:	4641      	mov	r1, r8
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f004 fd86 	bl	800ea7c <udp_input>
  ip_data.current_netif = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8009f74:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8009f76:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009f78:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009f7a:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009f7c:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8009f7e:	e761      	b.n	8009e44 <ip4_input+0x1c>
      tcp_input(p, inp);
 8009f80:	4641      	mov	r1, r8
 8009f82:	4628      	mov	r0, r5
 8009f84:	f003 f832 	bl	800cfec <tcp_input>
      break;
 8009f88:	e7f2      	b.n	8009f70 <ip4_input+0x148>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	6960      	ldr	r0, [r4, #20]
 8009f8e:	f000 f8a2 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 8009f92:	b968      	cbnz	r0, 8009fb0 <ip4_input+0x188>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009f94:	6963      	ldr	r3, [r4, #20]
 8009f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009f9a:	2be0      	cmp	r3, #224	; 0xe0
 8009f9c:	d008      	beq.n	8009fb0 <ip4_input+0x188>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f001 f860 	bl	800b066 <pbuf_header_force>
        p->payload = iphdr;
 8009fa6:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009fa8:	2102      	movs	r1, #2
 8009faa:	4628      	mov	r0, r5
 8009fac:	f7ff ff06 	bl	8009dbc <icmp_dest_unreach>
      pbuf_free(p);
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f001 f85b 	bl	800b06c <pbuf_free>
 8009fb6:	e7db      	b.n	8009f70 <ip4_input+0x148>
 8009fb8:	4646      	mov	r6, r8
 8009fba:	e794      	b.n	8009ee6 <ip4_input+0xbe>
 8009fbc:	2000840c 	.word	0x2000840c
 8009fc0:	2000bb20 	.word	0x2000bb20

08009fc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8009fc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009fca:	89c3      	ldrh	r3, [r0, #14]
{
 8009fcc:	4605      	mov	r5, r0
 8009fce:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009fd0:	2b01      	cmp	r3, #1
{
 8009fd2:	4616      	mov	r6, r2
 8009fd4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009fd8:	d006      	beq.n	8009fe8 <ip4_output_if_src+0x24>
 8009fda:	4b30      	ldr	r3, [pc, #192]	; (800a09c <ip4_output_if_src+0xd8>)
 8009fdc:	f240 3233 	movw	r2, #819	; 0x333
 8009fe0:	492f      	ldr	r1, [pc, #188]	; (800a0a0 <ip4_output_if_src+0xdc>)
 8009fe2:	4830      	ldr	r0, [pc, #192]	; (800a0a4 <ip4_output_if_src+0xe0>)
 8009fe4:	f006 ffdc 	bl	8010fa0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009fe8:	2e00      	cmp	r6, #0
 8009fea:	d047      	beq.n	800a07c <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8009fec:	2114      	movs	r1, #20
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f001 f836 	bl	800b060 <pbuf_header>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d14e      	bne.n	800a096 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009ff8:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8009ffa:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009ffc:	2b13      	cmp	r3, #19
 8009ffe:	d806      	bhi.n	800a00e <ip4_output_if_src+0x4a>
 800a000:	4b26      	ldr	r3, [pc, #152]	; (800a09c <ip4_output_if_src+0xd8>)
 800a002:	f240 3261 	movw	r2, #865	; 0x361
 800a006:	4928      	ldr	r1, [pc, #160]	; (800a0a8 <ip4_output_if_src+0xe4>)
 800a008:	4826      	ldr	r0, [pc, #152]	; (800a0a4 <ip4_output_if_src+0xe0>)
 800a00a:	f006 ffc9 	bl	8010fa0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800a00e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800a012:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a014:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800a016:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800a018:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a01a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a0b0 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 800a01e:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a020:	2345      	movs	r3, #69	; 0x45
 800a022:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800a024:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a028:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a02a:	8928      	ldrh	r0, [r5, #8]
 800a02c:	f7fe fc82 	bl	8008934 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800a030:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a032:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800a034:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a036:	f8b9 0000 	ldrh.w	r0, [r9]
 800a03a:	f7fe fc7b 	bl	8008934 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a03e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a042:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800a044:	3301      	adds	r3, #1
 800a046:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800a04a:	f1ba 0f00 	cmp.w	sl, #0
 800a04e:	d112      	bne.n	800a076 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a050:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <ip4_output_if_src+0xe8>)
 800a052:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a054:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a056:	72a7      	strb	r7, [r4, #10]
 800a058:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a05a:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800a05e:	b19b      	cbz	r3, 800a088 <ip4_output_if_src+0xc4>
 800a060:	892a      	ldrh	r2, [r5, #8]
 800a062:	429a      	cmp	r2, r3
 800a064:	d910      	bls.n	800a088 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800a066:	4632      	mov	r2, r6
 800a068:	4641      	mov	r1, r8
 800a06a:	4628      	mov	r0, r5
 800a06c:	f000 fb0c 	bl	800a688 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800a070:	b002      	add	sp, #8
 800a072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800a076:	f8da 3000 	ldr.w	r3, [sl]
 800a07a:	e7eb      	b.n	800a054 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a07c:	686b      	ldr	r3, [r5, #4]
 800a07e:	ae02      	add	r6, sp, #8
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f846 3d04 	str.w	r3, [r6, #-4]!
 800a086:	e7e8      	b.n	800a05a <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800a088:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a08c:	4632      	mov	r2, r6
 800a08e:	4629      	mov	r1, r5
 800a090:	4640      	mov	r0, r8
 800a092:	4798      	blx	r3
 800a094:	e7ec      	b.n	800a070 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800a096:	f06f 0001 	mvn.w	r0, #1
 800a09a:	e7e9      	b.n	800a070 <ip4_output_if_src+0xac>
 800a09c:	080129c8 	.word	0x080129c8
 800a0a0:	080129fc 	.word	0x080129fc
 800a0a4:	08011dd4 	.word	0x08011dd4
 800a0a8:	08012a08 	.word	0x08012a08
 800a0ac:	08012a38 	.word	0x08012a38
 800a0b0:	2000830a 	.word	0x2000830a

0800a0b4 <ip4_output_if>:
{
 800a0b4:	b4f0      	push	{r4, r5, r6, r7}
 800a0b6:	9c06      	ldr	r4, [sp, #24]
 800a0b8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a0bc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a0c0:	b11a      	cbz	r2, 800a0ca <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800a0c2:	b109      	cbz	r1, 800a0c8 <ip4_output_if+0x14>
 800a0c4:	680f      	ldr	r7, [r1, #0]
 800a0c6:	b907      	cbnz	r7, 800a0ca <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800a0c8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a0ca:	9406      	str	r4, [sp, #24]
 800a0cc:	9605      	str	r6, [sp, #20]
 800a0ce:	9504      	str	r5, [sp, #16]
}
 800a0d0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a0d2:	f7ff bf77 	b.w	8009fc4 <ip4_output_if_src>

0800a0d6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a0d6:	1e43      	subs	r3, r0, #1
 800a0d8:	3303      	adds	r3, #3
 800a0da:	d811      	bhi.n	800a100 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a0dc:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800a0e0:	f013 0302 	ands.w	r3, r3, #2
 800a0e4:	d00e      	beq.n	800a104 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a0e6:	684a      	ldr	r2, [r1, #4]
 800a0e8:	4290      	cmp	r0, r2
 800a0ea:	d00b      	beq.n	800a104 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a0ec:	688b      	ldr	r3, [r1, #8]
 800a0ee:	4042      	eors	r2, r0
 800a0f0:	421a      	tst	r2, r3
 800a0f2:	d107      	bne.n	800a104 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	4383      	bics	r3, r0
    return 1;
 800a0f8:	bf0c      	ite	eq
 800a0fa:	2001      	moveq	r0, #1
 800a0fc:	2000      	movne	r0, #0
 800a0fe:	4770      	bx	lr
 800a100:	2001      	movs	r0, #1
 800a102:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800a104:	2000      	movs	r0, #0
  }
}
 800a106:	4770      	bx	lr

0800a108 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a108:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <ip_reass_dequeue_datagram+0x34>)
{
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4282      	cmp	r2, r0
 800a114:	d107      	bne.n	800a126 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a116:	6802      	ldr	r2, [r0, #0]
 800a118:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a11a:	4621      	mov	r1, r4
 800a11c:	2004      	movs	r0, #4
}
 800a11e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800a122:	f000 be1d 	b.w	800ad60 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a126:	b931      	cbnz	r1, 800a136 <ip_reass_dequeue_datagram+0x2e>
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <ip_reass_dequeue_datagram+0x38>)
 800a12a:	f240 1245 	movw	r2, #325	; 0x145
 800a12e:	4905      	ldr	r1, [pc, #20]	; (800a144 <ip_reass_dequeue_datagram+0x3c>)
 800a130:	4805      	ldr	r0, [pc, #20]	; (800a148 <ip_reass_dequeue_datagram+0x40>)
 800a132:	f006 ff35 	bl	8010fa0 <iprintf>
    prev->next = ipr->next;
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7ee      	b.n	800a11a <ip_reass_dequeue_datagram+0x12>
 800a13c:	20008310 	.word	0x20008310
 800a140:	08012b25 	.word	0x08012b25
 800a144:	08012b5e 	.word	0x08012b5e
 800a148:	08011dd4 	.word	0x08011dd4

0800a14c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a14c:	4281      	cmp	r1, r0
{
 800a14e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a156:	d105      	bne.n	800a164 <ip_reass_free_complete_datagram+0x18>
 800a158:	4b2f      	ldr	r3, [pc, #188]	; (800a218 <ip_reass_free_complete_datagram+0xcc>)
 800a15a:	22ab      	movs	r2, #171	; 0xab
 800a15c:	492f      	ldr	r1, [pc, #188]	; (800a21c <ip_reass_free_complete_datagram+0xd0>)
 800a15e:	4830      	ldr	r0, [pc, #192]	; (800a220 <ip_reass_free_complete_datagram+0xd4>)
 800a160:	f006 ff1e 	bl	8010fa0 <iprintf>
  if (prev != NULL) {
 800a164:	b147      	cbz	r7, 800a178 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	429d      	cmp	r5, r3
 800a16a:	d005      	beq.n	800a178 <ip_reass_free_complete_datagram+0x2c>
 800a16c:	4b2a      	ldr	r3, [pc, #168]	; (800a218 <ip_reass_free_complete_datagram+0xcc>)
 800a16e:	22ad      	movs	r2, #173	; 0xad
 800a170:	492c      	ldr	r1, [pc, #176]	; (800a224 <ip_reass_free_complete_datagram+0xd8>)
 800a172:	482b      	ldr	r0, [pc, #172]	; (800a220 <ip_reass_free_complete_datagram+0xd4>)
 800a174:	f006 ff14 	bl	8010fa0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a178:	686e      	ldr	r6, [r5, #4]
 800a17a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800a17c:	889a      	ldrh	r2, [r3, #4]
 800a17e:	bb92      	cbnz	r2, 800a1e6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800a180:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a182:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800a186:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a188:	f105 0208 	add.w	r2, r5, #8
 800a18c:	f852 0b04 	ldr.w	r0, [r2], #4
 800a190:	428a      	cmp	r2, r1
 800a192:	f843 0b04 	str.w	r0, [r3], #4
 800a196:	d1f9      	bne.n	800a18c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a198:	2101      	movs	r1, #1
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff fe13 	bl	8009dc6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f001 f919 	bl	800b3d8 <pbuf_clen>
 800a1a6:	4604      	mov	r4, r0
    pbuf_free(p);
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 ff5f 	bl	800b06c <pbuf_free>
  p = ipr->p;
 800a1ae:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a1b0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800a218 <ip_reass_free_complete_datagram+0xcc>
 800a1b4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a230 <ip_reass_free_complete_datagram+0xe4>
 800a1b8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a220 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800a1bc:	b9ae      	cbnz	r6, 800a1ea <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800a1be:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800a1c0:	4d19      	ldr	r5, [pc, #100]	; (800a228 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7ff ffa0 	bl	800a108 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800a1c8:	882b      	ldrh	r3, [r5, #0]
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	d205      	bcs.n	800a1da <ip_reass_free_complete_datagram+0x8e>
 800a1ce:	4b12      	ldr	r3, [pc, #72]	; (800a218 <ip_reass_free_complete_datagram+0xcc>)
 800a1d0:	22d2      	movs	r2, #210	; 0xd2
 800a1d2:	4916      	ldr	r1, [pc, #88]	; (800a22c <ip_reass_free_complete_datagram+0xe0>)
 800a1d4:	4812      	ldr	r0, [pc, #72]	; (800a220 <ip_reass_free_complete_datagram+0xd4>)
 800a1d6:	f006 fee3 	bl	8010fa0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800a1da:	882b      	ldrh	r3, [r5, #0]
}
 800a1dc:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 800a1de:	1b1b      	subs	r3, r3, r4
 800a1e0:	802b      	strh	r3, [r5, #0]
}
 800a1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800a1e6:	2400      	movs	r4, #0
 800a1e8:	e7e1      	b.n	800a1ae <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800a1ea:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800a1ec:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800a1ee:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800a1f2:	f001 f8f1 	bl	800b3d8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a1f6:	4404      	add	r4, r0
 800a1f8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800a1fc:	db05      	blt.n	800a20a <ip_reass_free_complete_datagram+0xbe>
 800a1fe:	4643      	mov	r3, r8
 800a200:	22cc      	movs	r2, #204	; 0xcc
 800a202:	4649      	mov	r1, r9
 800a204:	4650      	mov	r0, sl
 800a206:	f006 fecb 	bl	8010fa0 <iprintf>
    pbuf_free(pcur);
 800a20a:	4630      	mov	r0, r6
    pbufs_freed += clen;
 800a20c:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800a20e:	f000 ff2d 	bl	800b06c <pbuf_free>
    p = iprh->next_pbuf;
 800a212:	465e      	mov	r6, fp
 800a214:	e7d2      	b.n	800a1bc <ip_reass_free_complete_datagram+0x70>
 800a216:	bf00      	nop
 800a218:	08012b25 	.word	0x08012b25
 800a21c:	08012b77 	.word	0x08012b77
 800a220:	08011dd4 	.word	0x08011dd4
 800a224:	08012b83 	.word	0x08012b83
 800a228:	2000830c 	.word	0x2000830c
 800a22c:	08012bb2 	.word	0x08012bb2
 800a230:	08012b95 	.word	0x08012b95

0800a234 <ip_reass_remove_oldest_datagram>:
{
 800a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800a23c:	2500      	movs	r5, #0
    r = reassdatagrams;
 800a23e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a2a8 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800a242:	2400      	movs	r4, #0
    r = reassdatagrams;
 800a244:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800a248:	4621      	mov	r1, r4
    prev = NULL;
 800a24a:	46a6      	mov	lr, r4
    oldest = NULL;
 800a24c:	4620      	mov	r0, r4
    while (r != NULL) {
 800a24e:	b953      	cbnz	r3, 800a266 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800a250:	b110      	cbz	r0, 800a258 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a252:	f7ff ff7b 	bl	800a14c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800a256:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a258:	42bd      	cmp	r5, r7
 800a25a:	da01      	bge.n	800a260 <ip_reass_remove_oldest_datagram+0x2c>
 800a25c:	2c01      	cmp	r4, #1
 800a25e:	dcf0      	bgt.n	800a242 <ip_reass_remove_oldest_datagram+0xe>
}
 800a260:	4628      	mov	r0, r5
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a266:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800a26a:	695a      	ldr	r2, [r3, #20]
 800a26c:	4562      	cmp	r2, ip
 800a26e:	d109      	bne.n	800a284 <ip_reass_remove_oldest_datagram+0x50>
 800a270:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	4562      	cmp	r2, ip
 800a278:	d104      	bne.n	800a284 <ip_reass_remove_oldest_datagram+0x50>
 800a27a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800a27e:	88b2      	ldrh	r2, [r6, #4]
 800a280:	4594      	cmp	ip, r2
 800a282:	d008      	beq.n	800a296 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800a284:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800a286:	b160      	cbz	r0, 800a2a2 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800a288:	7fc2      	ldrb	r2, [r0, #31]
 800a28a:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 800a28e:	4594      	cmp	ip, r2
 800a290:	bf9c      	itt	ls
 800a292:	4671      	movls	r1, lr
 800a294:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	2a00      	cmp	r2, #0
 800a29a:	bf18      	it	ne
 800a29c:	469e      	movne	lr, r3
 800a29e:	4613      	mov	r3, r2
 800a2a0:	e7d5      	b.n	800a24e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800a2a2:	4671      	mov	r1, lr
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	e7f6      	b.n	800a296 <ip_reass_remove_oldest_datagram+0x62>
 800a2a8:	20008310 	.word	0x20008310

0800a2ac <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800a2ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	b930      	cbnz	r0, 800a2c0 <ip_frag_free_pbuf_custom_ref+0x14>
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <ip_frag_free_pbuf_custom_ref+0x20>)
 800a2b4:	f240 22ae 	movw	r2, #686	; 0x2ae
 800a2b8:	4905      	ldr	r1, [pc, #20]	; (800a2d0 <ip_frag_free_pbuf_custom_ref+0x24>)
 800a2ba:	4806      	ldr	r0, [pc, #24]	; (800a2d4 <ip_frag_free_pbuf_custom_ref+0x28>)
 800a2bc:	f006 fe70 	bl	8010fa0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	2005      	movs	r0, #5
}
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800a2c8:	f000 bd4a 	b.w	800ad60 <memp_free>
 800a2cc:	08012b25 	.word	0x08012b25
 800a2d0:	0801324b 	.word	0x0801324b
 800a2d4:	08011dd4 	.word	0x08011dd4

0800a2d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a2d8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a2da:	4604      	mov	r4, r0
 800a2dc:	b930      	cbnz	r0, 800a2ec <ipfrag_free_pbuf_custom+0x14>
 800a2de:	4b08      	ldr	r3, [pc, #32]	; (800a300 <ipfrag_free_pbuf_custom+0x28>)
 800a2e0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800a2e4:	4907      	ldr	r1, [pc, #28]	; (800a304 <ipfrag_free_pbuf_custom+0x2c>)
 800a2e6:	4808      	ldr	r0, [pc, #32]	; (800a308 <ipfrag_free_pbuf_custom+0x30>)
 800a2e8:	f006 fe5a 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800a2ec:	6960      	ldr	r0, [r4, #20]
 800a2ee:	b108      	cbz	r0, 800a2f4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800a2f0:	f000 febc 	bl	800b06c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a2f4:	4620      	mov	r0, r4
}
 800a2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800a2fa:	f7ff bfd7 	b.w	800a2ac <ip_frag_free_pbuf_custom_ref>
 800a2fe:	bf00      	nop
 800a300:	08012b25 	.word	0x08012b25
 800a304:	08012bcd 	.word	0x08012bcd
 800a308:	08011dd4 	.word	0x08011dd4

0800a30c <ip_reass_tmr>:
{
 800a30c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800a30e:	4b08      	ldr	r3, [pc, #32]	; (800a330 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 800a310:	2400      	movs	r4, #0
  r = reassdatagrams;
 800a312:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800a314:	b900      	cbnz	r0, 800a318 <ip_reass_tmr+0xc>
}
 800a316:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800a318:	7fc3      	ldrb	r3, [r0, #31]
 800a31a:	6805      	ldr	r5, [r0, #0]
 800a31c:	b123      	cbz	r3, 800a328 <ip_reass_tmr+0x1c>
      r->timer--;
 800a31e:	3b01      	subs	r3, #1
 800a320:	4604      	mov	r4, r0
 800a322:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800a324:	4628      	mov	r0, r5
 800a326:	e7f5      	b.n	800a314 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 800a328:	4621      	mov	r1, r4
 800a32a:	f7ff ff0f 	bl	800a14c <ip_reass_free_complete_datagram>
 800a32e:	e7f9      	b.n	800a324 <ip_reass_tmr+0x18>
 800a330:	20008310 	.word	0x20008310

0800a334 <ip4_reass>:
{
 800a334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800a338:	6845      	ldr	r5, [r0, #4]
{
 800a33a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800a33c:	782b      	ldrb	r3, [r5, #0]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	2b05      	cmp	r3, #5
 800a344:	f040 808c 	bne.w	800a460 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800a348:	88e8      	ldrh	r0, [r5, #6]
 800a34a:	f7fe faf3 	bl	8008934 <lwip_htons>
 800a34e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a352:	4cb2      	ldr	r4, [pc, #712]	; (800a61c <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800a354:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800a358:	8868      	ldrh	r0, [r5, #2]
 800a35a:	f7fe faeb 	bl	8008934 <lwip_htons>
 800a35e:	782b      	ldrb	r3, [r5, #0]
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800a368:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800a36a:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800a36c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800a36e:	f001 f833 	bl	800b3d8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a372:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800a374:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a376:	4403      	add	r3, r0
 800a378:	2b0a      	cmp	r3, #10
 800a37a:	dc68      	bgt.n	800a44e <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a37c:	4ea8      	ldr	r6, [pc, #672]	; (800a620 <ip4_reass+0x2ec>)
 800a37e:	6834      	ldr	r4, [r6, #0]
 800a380:	2c00      	cmp	r4, #0
 800a382:	d172      	bne.n	800a46a <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a384:	2004      	movs	r0, #4
 800a386:	f000 fccf 	bl	800ad28 <memp_malloc>
  if (ipr == NULL) {
 800a38a:	4604      	mov	r4, r0
 800a38c:	b958      	cbnz	r0, 800a3a6 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a38e:	4651      	mov	r1, sl
 800a390:	4628      	mov	r0, r5
 800a392:	f7ff ff4f 	bl	800a234 <ip_reass_remove_oldest_datagram>
 800a396:	4582      	cmp	sl, r0
 800a398:	dc62      	bgt.n	800a460 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a39a:	2004      	movs	r0, #4
 800a39c:	f000 fcc4 	bl	800ad28 <memp_malloc>
    if (ipr == NULL)
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d05c      	beq.n	800a460 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f006 fd44 	bl	8010e38 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a3b0:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a3b2:	f104 0208 	add.w	r2, r4, #8
 800a3b6:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800a3ba:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800a3bc:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800a3be:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800a3c0:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	f853 0b04 	ldr.w	r0, [r3], #4
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	f842 0b04 	str.w	r0, [r2], #4
 800a3ce:	d1f9      	bne.n	800a3c4 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a3d0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800a3d4:	f01b 0b20 	ands.w	fp, fp, #32
 800a3d8:	d108      	bne.n	800a3ec <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	444b      	add	r3, r9
 800a3de:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a3e0:	4599      	cmp	r9, r3
 800a3e2:	d83d      	bhi.n	800a460 <ip4_reass+0x12c>
 800a3e4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d839      	bhi.n	800a460 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800a3ec:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800a3ee:	8868      	ldrh	r0, [r5, #2]
 800a3f0:	f7fe faa0 	bl	8008934 <lwip_htons>
 800a3f4:	f895 8000 	ldrb.w	r8, [r5]
 800a3f8:	f008 080f 	and.w	r8, r8, #15
 800a3fc:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800a400:	88e8      	ldrh	r0, [r5, #6]
 800a402:	f7fe fa97 	bl	8008934 <lwip_htons>
 800a406:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800a40a:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 800a40e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800a412:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800a414:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800a416:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 800a418:	4672      	mov	r2, lr
  iprh->end = offset + len;
 800a41a:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 800a41e:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 800a422:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 800a424:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800a426:	7075      	strb	r5, [r6, #1]
 800a428:	70b5      	strb	r5, [r6, #2]
 800a42a:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800a42c:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800a42e:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800a430:	bb52      	cbnz	r2, 800a488 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800a432:	2d00      	cmp	r5, #0
 800a434:	f040 8092 	bne.w	800a55c <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a438:	f1be 0f00 	cmp.w	lr, #0
 800a43c:	d07d      	beq.n	800a53a <ip4_reass+0x206>
 800a43e:	4b79      	ldr	r3, [pc, #484]	; (800a624 <ip4_reass+0x2f0>)
 800a440:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800a444:	4978      	ldr	r1, [pc, #480]	; (800a628 <ip4_reass+0x2f4>)
 800a446:	4879      	ldr	r0, [pc, #484]	; (800a62c <ip4_reass+0x2f8>)
 800a448:	f006 fdaa 	bl	8010fa0 <iprintf>
 800a44c:	e075      	b.n	800a53a <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a44e:	4601      	mov	r1, r0
 800a450:	4628      	mov	r0, r5
 800a452:	f7ff feef 	bl	800a234 <ip_reass_remove_oldest_datagram>
 800a456:	b118      	cbz	r0, 800a460 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a458:	8823      	ldrh	r3, [r4, #0]
 800a45a:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a45c:	2b0a      	cmp	r3, #10
 800a45e:	dd8d      	ble.n	800a37c <ip4_reass+0x48>
  pbuf_free(p);
 800a460:	4638      	mov	r0, r7
 800a462:	f000 fe03 	bl	800b06c <pbuf_free>
  return NULL;
 800a466:	2500      	movs	r5, #0
 800a468:	e0d4      	b.n	800a614 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a46a:	68eb      	ldr	r3, [r5, #12]
 800a46c:	6962      	ldr	r2, [r4, #20]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d108      	bne.n	800a484 <ip4_reass+0x150>
 800a472:	692b      	ldr	r3, [r5, #16]
 800a474:	69a2      	ldr	r2, [r4, #24]
 800a476:	429a      	cmp	r2, r3
 800a478:	d104      	bne.n	800a484 <ip4_reass+0x150>
 800a47a:	89a2      	ldrh	r2, [r4, #12]
 800a47c:	88ab      	ldrh	r3, [r5, #4]
 800a47e:	429a      	cmp	r2, r3
 800a480:	f000 80dc 	beq.w	800a63c <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a484:	6824      	ldr	r4, [r4, #0]
 800a486:	e77b      	b.n	800a380 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800a488:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800a48c:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800a490:	4288      	cmp	r0, r1
 800a492:	d254      	bcs.n	800a53e <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800a494:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800a496:	2d00      	cmp	r5, #0
 800a498:	d04d      	beq.n	800a536 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a49a:	88ea      	ldrh	r2, [r5, #6]
 800a49c:	4290      	cmp	r0, r2
 800a49e:	f0c0 8091 	bcc.w	800a5c4 <ip4_reass+0x290>
 800a4a2:	428b      	cmp	r3, r1
 800a4a4:	f200 808e 	bhi.w	800a5c4 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 800a4a8:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 800a4aa:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800a4ac:	f040 80e4 	bne.w	800a678 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a4b0:	f1bb 0f00 	cmp.w	fp, #0
 800a4b4:	d004      	beq.n	800a4c0 <ip4_reass+0x18c>
 800a4b6:	7fa3      	ldrb	r3, [r4, #30]
 800a4b8:	f013 0301 	ands.w	r3, r3, #1
 800a4bc:	f000 80da 	beq.w	800a674 <ip4_reass+0x340>
    if (valid) {
 800a4c0:	f1b8 0f00 	cmp.w	r8, #0
 800a4c4:	d159      	bne.n	800a57a <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800a4c6:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a4ca:	4e54      	ldr	r6, [pc, #336]	; (800a61c <ip4_reass+0x2e8>)
 800a4cc:	8833      	ldrh	r3, [r6, #0]
 800a4ce:	449a      	add	sl, r3
 800a4d0:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 800a4d4:	f1bb 0f00 	cmp.w	fp, #0
 800a4d8:	d107      	bne.n	800a4ea <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a4de:	7fa3      	ldrb	r3, [r4, #30]
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800a4e4:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a4e8:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a4ea:	f1b8 0f01 	cmp.w	r8, #1
 800a4ee:	d1ba      	bne.n	800a466 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 800a4f0:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a4f2:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a4fe:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800a502:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a504:	462a      	mov	r2, r5
 800a506:	f853 0b04 	ldr.w	r0, [r3], #4
 800a50a:	428b      	cmp	r3, r1
 800a50c:	f842 0b04 	str.w	r0, [r2], #4
 800a510:	d1f9      	bne.n	800a506 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800a512:	8ba0      	ldrh	r0, [r4, #28]
 800a514:	f7fe fa0e 	bl	8008934 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800a518:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800a51a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a51c:	71ab      	strb	r3, [r5, #6]
 800a51e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a520:	72ab      	strb	r3, [r5, #10]
 800a522:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800a524:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800a526:	2f00      	cmp	r7, #0
 800a528:	d157      	bne.n	800a5da <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800a52a:	4b3d      	ldr	r3, [pc, #244]	; (800a620 <ip4_reass+0x2ec>)
 800a52c:	6819      	ldr	r1, [r3, #0]
 800a52e:	428c      	cmp	r4, r1
 800a530:	d165      	bne.n	800a5fe <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800a532:	4639      	mov	r1, r7
 800a534:	e065      	b.n	800a602 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800a536:	428b      	cmp	r3, r1
 800a538:	d844      	bhi.n	800a5c4 <ip4_reass+0x290>
      ipr->p = new_p;
 800a53a:	6067      	str	r7, [r4, #4]
 800a53c:	e7b8      	b.n	800a4b0 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800a53e:	d041      	beq.n	800a5c4 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800a540:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800a544:	4282      	cmp	r2, r0
 800a546:	d83d      	bhi.n	800a5c4 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800a548:	b125      	cbz	r5, 800a554 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800a54a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800a54c:	428a      	cmp	r2, r1
 800a54e:	bf18      	it	ne
 800a550:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800a554:	f8dc 2000 	ldr.w	r2, [ip]
 800a558:	4665      	mov	r5, ip
 800a55a:	e769      	b.n	800a430 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a55c:	88eb      	ldrh	r3, [r5, #6]
 800a55e:	4283      	cmp	r3, r0
 800a560:	d906      	bls.n	800a570 <ip4_reass+0x23c>
 800a562:	4b30      	ldr	r3, [pc, #192]	; (800a624 <ip4_reass+0x2f0>)
 800a564:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a568:	4931      	ldr	r1, [pc, #196]	; (800a630 <ip4_reass+0x2fc>)
 800a56a:	4830      	ldr	r0, [pc, #192]	; (800a62c <ip4_reass+0x2f8>)
 800a56c:	f006 fd18 	bl	8010fa0 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800a570:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800a572:	88ea      	ldrh	r2, [r5, #6]
 800a574:	88b3      	ldrh	r3, [r6, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	e798      	b.n	800a4ac <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0a2      	beq.n	800a4c6 <ip4_reass+0x192>
 800a580:	6859      	ldr	r1, [r3, #4]
 800a582:	888b      	ldrh	r3, [r1, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d19e      	bne.n	800a4c6 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800a588:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800a58a:	b99b      	cbnz	r3, 800a5b4 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 800a58c:	42b1      	cmp	r1, r6
 800a58e:	d106      	bne.n	800a59e <ip4_reass+0x26a>
 800a590:	4b24      	ldr	r3, [pc, #144]	; (800a624 <ip4_reass+0x2f0>)
 800a592:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800a596:	4927      	ldr	r1, [pc, #156]	; (800a634 <ip4_reass+0x300>)
 800a598:	4824      	ldr	r0, [pc, #144]	; (800a62c <ip4_reass+0x2f8>)
 800a59a:	f006 fd01 	bl	8010fa0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a59e:	6833      	ldr	r3, [r6, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d092      	beq.n	800a4ca <ip4_reass+0x196>
 800a5a4:	4b1f      	ldr	r3, [pc, #124]	; (800a624 <ip4_reass+0x2f0>)
 800a5a6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800a5aa:	4923      	ldr	r1, [pc, #140]	; (800a638 <ip4_reass+0x304>)
 800a5ac:	481f      	ldr	r0, [pc, #124]	; (800a62c <ip4_reass+0x2f8>)
 800a5ae:	f006 fcf7 	bl	8010fa0 <iprintf>
 800a5b2:	e78a      	b.n	800a4ca <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800a5b4:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800a5b6:	88f0      	ldrh	r0, [r6, #6]
 800a5b8:	8893      	ldrh	r3, [r2, #4]
 800a5ba:	4298      	cmp	r0, r3
 800a5bc:	d183      	bne.n	800a4c6 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	e7e2      	b.n	800a58a <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f000 ff07 	bl	800b3d8 <pbuf_clen>
 800a5ca:	4a14      	ldr	r2, [pc, #80]	; (800a61c <ip4_reass+0x2e8>)
 800a5cc:	8813      	ldrh	r3, [r2, #0]
 800a5ce:	1a18      	subs	r0, r3, r0
 800a5d0:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f000 fd4a 	bl	800b06c <pbuf_free>
 800a5d8:	e742      	b.n	800a460 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800a5da:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800a5de:	f06f 0113 	mvn.w	r1, #19
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f000 fd3c 	bl	800b060 <pbuf_header>
      pbuf_cat(p, r);
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 ff18 	bl	800b420 <pbuf_cat>
      r = iprh->next_pbuf;
 800a5f0:	f8d8 7000 	ldr.w	r7, [r8]
 800a5f4:	e797      	b.n	800a526 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800a5f6:	680b      	ldr	r3, [r1, #0]
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	d002      	beq.n	800a602 <ip4_reass+0x2ce>
 800a5fc:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d1f9      	bne.n	800a5f6 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff fd80 	bl	800a108 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800a608:	4628      	mov	r0, r5
 800a60a:	f000 fee5 	bl	800b3d8 <pbuf_clen>
 800a60e:	8833      	ldrh	r3, [r6, #0]
 800a610:	1a18      	subs	r0, r3, r0
 800a612:	8030      	strh	r0, [r6, #0]
}
 800a614:	4628      	mov	r0, r5
 800a616:	b003      	add	sp, #12
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	2000830c 	.word	0x2000830c
 800a620:	20008310 	.word	0x20008310
 800a624:	08012b25 	.word	0x08012b25
 800a628:	08012abf 	.word	0x08012abf
 800a62c:	08011dd4 	.word	0x08011dd4
 800a630:	08012aa1 	.word	0x08012aa1
 800a634:	08012af6 	.word	0x08012af6
 800a638:	08012b03 	.word	0x08012b03
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a63c:	88e8      	ldrh	r0, [r5, #6]
 800a63e:	f7fe f979 	bl	8008934 <lwip_htons>
 800a642:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a646:	2800      	cmp	r0, #0
 800a648:	f47f aec2 	bne.w	800a3d0 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a64c:	89e0      	ldrh	r0, [r4, #14]
 800a64e:	f7fe f971 	bl	8008934 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a652:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f aeba 	beq.w	800a3d0 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a65c:	462b      	mov	r3, r5
 800a65e:	f104 0208 	add.w	r2, r4, #8
 800a662:	f105 0114 	add.w	r1, r5, #20
 800a666:	f853 0b04 	ldr.w	r0, [r3], #4
 800a66a:	428b      	cmp	r3, r1
 800a66c:	f842 0b04 	str.w	r0, [r2], #4
 800a670:	d1f9      	bne.n	800a666 <ip4_reass+0x332>
 800a672:	e6ad      	b.n	800a3d0 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a674:	4698      	mov	r8, r3
 800a676:	e728      	b.n	800a4ca <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a678:	f1bb 0f00 	cmp.w	fp, #0
 800a67c:	f43f af23 	beq.w	800a4c6 <ip4_reass+0x192>
 800a680:	f04f 0800 	mov.w	r8, #0
 800a684:	e717      	b.n	800a4b6 <ip4_reass+0x182>
 800a686:	bf00      	nop

0800a688 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800a68c:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 800a690:	2308      	movs	r3, #8
{
 800a692:	b08b      	sub	sp, #44	; 0x2c
 800a694:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800a696:	f1a8 0814 	sub.w	r8, r8, #20
{
 800a69a:	468b      	mov	fp, r1
 800a69c:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800a69e:	fb98 f8f3 	sdiv	r8, r8, r3
 800a6a2:	fa1f f388 	uxth.w	r3, r8
 800a6a6:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a6a8:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800a6aa:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800a6ac:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800a6ae:	f006 060f 	and.w	r6, r6, #15
 800a6b2:	00b6      	lsls	r6, r6, #2
 800a6b4:	2e14      	cmp	r6, #20
 800a6b6:	d00b      	beq.n	800a6d0 <ip4_frag+0x48>
 800a6b8:	4b5a      	ldr	r3, [pc, #360]	; (800a824 <ip4_frag+0x19c>)
 800a6ba:	f240 22e1 	movw	r2, #737	; 0x2e1
 800a6be:	495a      	ldr	r1, [pc, #360]	; (800a828 <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800a6c0:	485a      	ldr	r0, [pc, #360]	; (800a82c <ip4_frag+0x1a4>)
 800a6c2:	f006 fc6d 	bl	8010fa0 <iprintf>
 800a6c6:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800a6ca:	b00b      	add	sp, #44	; 0x2c
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a6d0:	9b02      	ldr	r3, [sp, #8]
 800a6d2:	88d8      	ldrh	r0, [r3, #6]
 800a6d4:	f7fe f92e 	bl	8008934 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800a6d8:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800a6dc:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800a6e0:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800a6e2:	d004      	beq.n	800a6ee <ip4_frag+0x66>
 800a6e4:	4b4f      	ldr	r3, [pc, #316]	; (800a824 <ip4_frag+0x19c>)
 800a6e6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a6ea:	4951      	ldr	r1, [pc, #324]	; (800a830 <ip4_frag+0x1a8>)
 800a6ec:	e7e8      	b.n	800a6c0 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800a6ee:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800a6f0:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800a6f4:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800a6f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800a6fa:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800a6fc:	9307      	str	r3, [sp, #28]
  while (left) {
 800a6fe:	b90d      	cbnz	r5, 800a704 <ip4_frag+0x7c>
  return ERR_OK;
 800a700:	4628      	mov	r0, r5
 800a702:	e7e2      	b.n	800a6ca <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800a704:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a706:	2200      	movs	r2, #0
 800a708:	2114      	movs	r1, #20
 800a70a:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	bfa8      	it	ge
 800a710:	462b      	movge	r3, r5
 800a712:	b29b      	uxth	r3, r3
 800a714:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a716:	f000 fd13 	bl	800b140 <pbuf_alloc>
    if (rambuf == NULL) {
 800a71a:	4680      	mov	r8, r0
 800a71c:	b370      	cbz	r0, 800a77c <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a71e:	897b      	ldrh	r3, [r7, #10]
 800a720:	2b13      	cmp	r3, #19
 800a722:	d806      	bhi.n	800a732 <ip4_frag+0xaa>
 800a724:	4b3f      	ldr	r3, [pc, #252]	; (800a824 <ip4_frag+0x19c>)
 800a726:	f240 3209 	movw	r2, #777	; 0x309
 800a72a:	4942      	ldr	r1, [pc, #264]	; (800a834 <ip4_frag+0x1ac>)
 800a72c:	483f      	ldr	r0, [pc, #252]	; (800a82c <ip4_frag+0x1a4>)
 800a72e:	f006 fc37 	bl	8010fa0 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a738:	4619      	mov	r1, r3
 800a73a:	3114      	adds	r1, #20
 800a73c:	f853 0b04 	ldr.w	r0, [r3], #4
 800a740:	428b      	cmp	r3, r1
 800a742:	f842 0b04 	str.w	r0, [r2], #4
 800a746:	d1f9      	bne.n	800a73c <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a748:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800a74c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a750:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800a752:	f1b9 0f00 	cmp.w	r9, #0
 800a756:	d037      	beq.n	800a7c8 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800a758:	897c      	ldrh	r4, [r7, #10]
 800a75a:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a75c:	b2a4      	uxth	r4, r4
 800a75e:	454c      	cmp	r4, r9
 800a760:	bf28      	it	cs
 800a762:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800a764:	b914      	cbnz	r4, 800a76c <ip4_frag+0xe4>
        p = p->next;
 800a766:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800a768:	2600      	movs	r6, #0
 800a76a:	e7f2      	b.n	800a752 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800a76c:	2005      	movs	r0, #5
 800a76e:	f000 fadb 	bl	800ad28 <memp_malloc>
      if (pcr == NULL) {
 800a772:	4682      	mov	sl, r0
 800a774:	b928      	cbnz	r0, 800a782 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800a776:	4640      	mov	r0, r8
 800a778:	f000 fc78 	bl	800b06c <pbuf_free>
  return ERR_MEM;
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a780:	e7a3      	b.n	800a6ca <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a782:	9401      	str	r4, [sp, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4621      	mov	r1, r4
 800a78a:	4433      	add	r3, r6
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4603      	mov	r3, r0
 800a790:	2004      	movs	r0, #4
 800a792:	f000 fc2d 	bl	800aff0 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800a796:	b918      	cbnz	r0, 800a7a0 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a798:	4650      	mov	r0, sl
 800a79a:	f7ff fd87 	bl	800a2ac <ip_frag_free_pbuf_custom_ref>
 800a79e:	e7ea      	b.n	800a776 <ip4_frag+0xee>
 800a7a0:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 800a7a2:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f000 fe1e 	bl	800b3e8 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a7ac:	4b22      	ldr	r3, [pc, #136]	; (800a838 <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 800a7ae:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 800a7b2:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a7b6:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7be:	f000 fe2f 	bl	800b420 <pbuf_cat>
      if (left_to_copy) {
 800a7c2:	f1b9 0f00 	cmp.w	r9, #0
 800a7c6:	d1ce      	bne.n	800a766 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800a7c8:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800a7ca:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 800a7cc:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800a7d0:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 800a7d4:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 800a7d6:	3b13      	subs	r3, #19
    if (!last) {
 800a7d8:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800a7da:	bfa8      	it	ge
 800a7dc:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a7e0:	f7fe f8a8 	bl	8008934 <lwip_htons>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	f103 0014 	add.w	r0, r3, #20
 800a7ee:	b280      	uxth	r0, r0
 800a7f0:	f7fe f8a0 	bl	8008934 <lwip_htons>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800a7f6:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 800a7f8:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800a7fa:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a7fc:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800a7fe:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 800a800:	7293      	strb	r3, [r2, #10]
 800a802:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800a804:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a808:	9a08      	ldr	r2, [sp, #32]
 800a80a:	4798      	blx	r3
    pbuf_free(rambuf);
 800a80c:	4640      	mov	r0, r8
 800a80e:	f000 fc2d 	bl	800b06c <pbuf_free>
    left -= fragsize;
 800a812:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800a814:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800a816:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	4413      	add	r3, r2
    left -= fragsize;
 800a81c:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800a81e:	b29b      	uxth	r3, r3
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	e76c      	b.n	800a6fe <ip4_frag+0x76>
 800a824:	08012b25 	.word	0x08012b25
 800a828:	08012a40 	.word	0x08012a40
 800a82c:	08011dd4 	.word	0x08011dd4
 800a830:	08012a67 	.word	0x08012a67
 800a834:	08012a81 	.word	0x08012a81
 800a838:	0800a2d9 	.word	0x0800a2d9

0800a83c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a83c:	4b12      	ldr	r3, [pc, #72]	; (800a888 <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800a83e:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a840:	4a12      	ldr	r2, [pc, #72]	; (800a88c <mem_init+0x50>)
 800a842:	f023 0303 	bic.w	r3, r3, #3
{
 800a846:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a848:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800a84a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 800a84e:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a850:	1898      	adds	r0, r3, r2
  mem->used = 0;
 800a852:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a854:	490e      	ldr	r1, [pc, #56]	; (800a890 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 800a856:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a858:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 800a85a:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800a85c:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a860:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a864:	4a0b      	ldr	r2, [pc, #44]	; (800a894 <mem_init+0x58>)
  ram_end->used = 1;
 800a866:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a86a:	480b      	ldr	r0, [pc, #44]	; (800a898 <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 800a86c:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a86e:	f004 fbf1 	bl	800f054 <sys_mutex_new>
 800a872:	b140      	cbz	r0, 800a886 <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <mem_init+0x60>)
 800a876:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a87a:	4909      	ldr	r1, [pc, #36]	; (800a8a0 <mem_init+0x64>)
 800a87c:	4809      	ldr	r0, [pc, #36]	; (800a8a4 <mem_init+0x68>)
  }
}
 800a87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a882:	f006 bb8d 	b.w	8010fa0 <iprintf>
 800a886:	bd10      	pop	{r4, pc}
 800a888:	20008427 	.word	0x20008427
 800a88c:	2000831c 	.word	0x2000831c
 800a890:	20008320 	.word	0x20008320
 800a894:	20008314 	.word	0x20008314
 800a898:	20008318 	.word	0x20008318
 800a89c:	08012c9b 	.word	0x08012c9b
 800a8a0:	08012cca 	.word	0x08012cca
 800a8a4:	08011dd4 	.word	0x08011dd4

0800a8a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f000 8097 	beq.w	800a9e2 <mem_free+0x13a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800a8b4:	0783      	lsls	r3, r0, #30
 800a8b6:	d006      	beq.n	800a8c6 <mem_free+0x1e>
 800a8b8:	4b4b      	ldr	r3, [pc, #300]	; (800a9e8 <mem_free+0x140>)
 800a8ba:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800a8be:	494b      	ldr	r1, [pc, #300]	; (800a9ec <mem_free+0x144>)
 800a8c0:	484b      	ldr	r0, [pc, #300]	; (800a9f0 <mem_free+0x148>)
 800a8c2:	f006 fb6d 	bl	8010fa0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a8c6:	4f4b      	ldr	r7, [pc, #300]	; (800a9f4 <mem_free+0x14c>)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d303      	bcc.n	800a8d6 <mem_free+0x2e>
 800a8ce:	4b4a      	ldr	r3, [pc, #296]	; (800a9f8 <mem_free+0x150>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d306      	bcc.n	800a8e4 <mem_free+0x3c>
 800a8d6:	4b44      	ldr	r3, [pc, #272]	; (800a9e8 <mem_free+0x140>)
 800a8d8:	f240 12af 	movw	r2, #431	; 0x1af
 800a8dc:	4947      	ldr	r1, [pc, #284]	; (800a9fc <mem_free+0x154>)
 800a8de:	4844      	ldr	r0, [pc, #272]	; (800a9f0 <mem_free+0x148>)
 800a8e0:	f006 fb5e 	bl	8010fa0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d304      	bcc.n	800a8f4 <mem_free+0x4c>
 800a8ea:	4b43      	ldr	r3, [pc, #268]	; (800a9f8 <mem_free+0x150>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	4294      	cmp	r4, r2
 800a8f2:	d305      	bcc.n	800a900 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800a8f4:	f004 fbd6 	bl	800f0a4 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 800a8fc:	f004 bbde 	b.w	800f0bc <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800a900:	483f      	ldr	r0, [pc, #252]	; (800aa00 <mem_free+0x158>)
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a902:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_MEM_FREE_PROTECT();
 800a906:	f004 fbb4 	bl	800f072 <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800a90a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a90e:	b933      	cbnz	r3, 800a91e <mem_free+0x76>
 800a910:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <mem_free+0x140>)
 800a912:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800a916:	493b      	ldr	r1, [pc, #236]	; (800aa04 <mem_free+0x15c>)
 800a918:	4835      	ldr	r0, [pc, #212]	; (800a9f0 <mem_free+0x148>)
 800a91a:	f006 fb41 	bl	8010fa0 <iprintf>
  mem->used = 0;
 800a91e:	2300      	movs	r3, #0
  if (mem < lfree) {
 800a920:	4e39      	ldr	r6, [pc, #228]	; (800aa08 <mem_free+0x160>)
  mem->used = 0;
 800a922:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a92a:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 800a92c:	bf38      	it	cc
 800a92e:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a930:	429d      	cmp	r5, r3
 800a932:	d206      	bcs.n	800a942 <mem_free+0x9a>
 800a934:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <mem_free+0x140>)
 800a936:	f240 125d 	movw	r2, #349	; 0x15d
 800a93a:	4934      	ldr	r1, [pc, #208]	; (800aa0c <mem_free+0x164>)
 800a93c:	482c      	ldr	r0, [pc, #176]	; (800a9f0 <mem_free+0x148>)
 800a93e:	f006 fb2f 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a942:	f8d8 3000 	ldr.w	r3, [r8]
 800a946:	429d      	cmp	r5, r3
 800a948:	d306      	bcc.n	800a958 <mem_free+0xb0>
 800a94a:	4b27      	ldr	r3, [pc, #156]	; (800a9e8 <mem_free+0x140>)
 800a94c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a950:	492f      	ldr	r1, [pc, #188]	; (800aa10 <mem_free+0x168>)
 800a952:	4827      	ldr	r0, [pc, #156]	; (800a9f0 <mem_free+0x148>)
 800a954:	f006 fb24 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a958:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a95c:	b133      	cbz	r3, 800a96c <mem_free+0xc4>
 800a95e:	4b22      	ldr	r3, [pc, #136]	; (800a9e8 <mem_free+0x140>)
 800a960:	f240 125f 	movw	r2, #351	; 0x15f
 800a964:	492b      	ldr	r1, [pc, #172]	; (800aa14 <mem_free+0x16c>)
 800a966:	4822      	ldr	r0, [pc, #136]	; (800a9f0 <mem_free+0x148>)
 800a968:	f006 fb1a 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a96c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800a970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a974:	d906      	bls.n	800a984 <mem_free+0xdc>
 800a976:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <mem_free+0x140>)
 800a978:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a97c:	4926      	ldr	r1, [pc, #152]	; (800aa18 <mem_free+0x170>)
 800a97e:	481c      	ldr	r0, [pc, #112]	; (800a9f0 <mem_free+0x148>)
 800a980:	f006 fb0e 	bl	8010fa0 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a98a:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a98c:	4295      	cmp	r5, r2
 800a98e:	d011      	beq.n	800a9b4 <mem_free+0x10c>
 800a990:	7910      	ldrb	r0, [r2, #4]
 800a992:	b978      	cbnz	r0, 800a9b4 <mem_free+0x10c>
 800a994:	f8d8 0000 	ldr.w	r0, [r8]
 800a998:	4282      	cmp	r2, r0
 800a99a:	d00b      	beq.n	800a9b4 <mem_free+0x10c>
    if (lfree == nmem) {
 800a99c:	6830      	ldr	r0, [r6, #0]
 800a99e:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800a9a0:	5a5a      	ldrh	r2, [r3, r1]
 800a9a2:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a9a6:	5a5a      	ldrh	r2, [r3, r1]
 800a9a8:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 800a9ac:	bf08      	it	eq
 800a9ae:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a9b0:	441a      	add	r2, r3
 800a9b2:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800a9b4:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 800a9b8:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800a9ba:	428d      	cmp	r5, r1
 800a9bc:	d00c      	beq.n	800a9d8 <mem_free+0x130>
 800a9be:	7908      	ldrb	r0, [r1, #4]
 800a9c0:	b950      	cbnz	r0, 800a9d8 <mem_free+0x130>
    if (lfree == mem) {
 800a9c2:	6830      	ldr	r0, [r6, #0]
 800a9c4:	4285      	cmp	r5, r0
      lfree = pmem;
 800a9c6:	bf08      	it	eq
 800a9c8:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 800a9ca:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a9ce:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800a9d0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a9d4:	440b      	add	r3, r1
 800a9d6:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800a9d8:	4809      	ldr	r0, [pc, #36]	; (800aa00 <mem_free+0x158>)
}
 800a9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800a9de:	f004 bb4d 	b.w	800f07c <sys_mutex_unlock>
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e6:	bf00      	nop
 800a9e8:	08012c9b 	.word	0x08012c9b
 800a9ec:	08012bd9 	.word	0x08012bd9
 800a9f0:	08011dd4 	.word	0x08011dd4
 800a9f4:	2000831c 	.word	0x2000831c
 800a9f8:	20008320 	.word	0x20008320
 800a9fc:	08012bfa 	.word	0x08012bfa
 800aa00:	20008318 	.word	0x20008318
 800aa04:	08012c11 	.word	0x08012c11
 800aa08:	20008314 	.word	0x20008314
 800aa0c:	08012c25 	.word	0x08012c25
 800aa10:	08012c3c 	.word	0x08012c3c
 800aa14:	08012c56 	.word	0x08012c56
 800aa18:	08012c71 	.word	0x08012c71

0800aa1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800aa20:	3103      	adds	r1, #3
 800aa22:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 800aa26:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800aa28:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800aa2a:	2d0b      	cmp	r5, #11
 800aa2c:	d904      	bls.n	800aa38 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800aa2e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800aa32:	d902      	bls.n	800aa3a <mem_trim+0x1e>
    return NULL;
 800aa34:	2400      	movs	r4, #0
 800aa36:	e01c      	b.n	800aa72 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 800aa38:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aa3a:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <mem_trim+0xf8>)
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4698      	mov	r8, r3
 800aa40:	42a2      	cmp	r2, r4
 800aa42:	d803      	bhi.n	800aa4c <mem_trim+0x30>
 800aa44:	4b34      	ldr	r3, [pc, #208]	; (800ab18 <mem_trim+0xfc>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	429c      	cmp	r4, r3
 800aa4a:	d306      	bcc.n	800aa5a <mem_trim+0x3e>
 800aa4c:	4b33      	ldr	r3, [pc, #204]	; (800ab1c <mem_trim+0x100>)
 800aa4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aa52:	4933      	ldr	r1, [pc, #204]	; (800ab20 <mem_trim+0x104>)
 800aa54:	4833      	ldr	r0, [pc, #204]	; (800ab24 <mem_trim+0x108>)
 800aa56:	f006 faa3 	bl	8010fa0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aa5a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d303      	bcc.n	800aa6a <mem_trim+0x4e>
 800aa62:	4a2d      	ldr	r2, [pc, #180]	; (800ab18 <mem_trim+0xfc>)
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	4294      	cmp	r4, r2
 800aa68:	d306      	bcc.n	800aa78 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800aa6a:	f004 fb1b 	bl	800f0a4 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800aa6e:	f004 fb25 	bl	800f0bc <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800aa78:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800aa7c:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800aa80:	1af6      	subs	r6, r6, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800aa82:	3f08      	subs	r7, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800aa84:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800aa86:	1bbf      	subs	r7, r7, r6
 800aa88:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aa8a:	42af      	cmp	r7, r5
 800aa8c:	d219      	bcs.n	800aac2 <mem_trim+0xa6>
 800aa8e:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <mem_trim+0x100>)
 800aa90:	f240 2206 	movw	r2, #518	; 0x206
 800aa94:	4924      	ldr	r1, [pc, #144]	; (800ab28 <mem_trim+0x10c>)
 800aa96:	4823      	ldr	r0, [pc, #140]	; (800ab24 <mem_trim+0x108>)
 800aa98:	f006 fa82 	bl	8010fa0 <iprintf>
 800aa9c:	e7ca      	b.n	800aa34 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aa9e:	f105 0214 	add.w	r2, r5, #20
 800aaa2:	42ba      	cmp	r2, r7
 800aaa4:	d831      	bhi.n	800ab0a <mem_trim+0xee>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aaa6:	f106 0208 	add.w	r2, r6, #8
    if (mem2 < lfree) {
 800aaaa:	4820      	ldr	r0, [pc, #128]	; (800ab2c <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aaac:	4415      	add	r5, r2
    if (mem2 < lfree) {
 800aaae:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aab0:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800aab2:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 800aab4:	42ba      	cmp	r2, r7
      lfree = mem2;
 800aab6:	bf38      	it	cc
 800aab8:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 800aaba:	2000      	movs	r0, #0
 800aabc:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 800aabe:	5359      	strh	r1, [r3, r5]
 800aac0:	e01a      	b.n	800aaf8 <mem_trim+0xdc>
  if (newsize == size) {
 800aac2:	d0d6      	beq.n	800aa72 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 800aac4:	481a      	ldr	r0, [pc, #104]	; (800ab30 <mem_trim+0x114>)
 800aac6:	f004 fad4 	bl	800f072 <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800aaca:	f8d8 3000 	ldr.w	r3, [r8]
 800aace:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800aad2:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 800aad4:	7902      	ldrb	r2, [r0, #4]
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	d1e1      	bne.n	800aa9e <mem_trim+0x82>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aada:	f106 0208 	add.w	r2, r6, #8
    next = mem2->next;
 800aade:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 800aae0:	4912      	ldr	r1, [pc, #72]	; (800ab2c <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aae2:	4415      	add	r5, r2
    if (lfree == mem2) {
 800aae4:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800aae6:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800aae8:	4290      	cmp	r0, r2
 800aaea:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 800aaee:	bf08      	it	eq
 800aaf0:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 800aaf6:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 800aaf8:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800aafa:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aafe:	5b5a      	ldrh	r2, [r3, r5]
 800ab00:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ab04:	bf1c      	itt	ne
 800ab06:	189b      	addne	r3, r3, r2
 800ab08:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800ab0a:	4809      	ldr	r0, [pc, #36]	; (800ab30 <mem_trim+0x114>)
 800ab0c:	f004 fab6 	bl	800f07c <sys_mutex_unlock>
  return rmem;
 800ab10:	e7af      	b.n	800aa72 <mem_trim+0x56>
 800ab12:	bf00      	nop
 800ab14:	2000831c 	.word	0x2000831c
 800ab18:	20008320 	.word	0x20008320
 800ab1c:	08012c9b 	.word	0x08012c9b
 800ab20:	08012d80 	.word	0x08012d80
 800ab24:	08011dd4 	.word	0x08011dd4
 800ab28:	08012d97 	.word	0x08012d97
 800ab2c:	20008314 	.word	0x20008314
 800ab30:	20008318 	.word	0x20008318

0800ab34 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ab38:	b148      	cbz	r0, 800ab4e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ab3a:	3003      	adds	r0, #3
 800ab3c:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800ab40:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 800ab42:	2d0b      	cmp	r5, #11
 800ab44:	d905      	bls.n	800ab52 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ab46:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800ab4a:	d903      	bls.n	800ab54 <mem_malloc+0x20>
    return NULL;
 800ab4c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800ab4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 800ab52:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 800ab54:	483c      	ldr	r0, [pc, #240]	; (800ac48 <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ab56:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
  sys_mutex_lock(&mem_mutex);
 800ab5a:	f004 fa8a 	bl	800f072 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ab5e:	4e3b      	ldr	r6, [pc, #236]	; (800ac4c <mem_malloc+0x118>)
 800ab60:	483b      	ldr	r0, [pc, #236]	; (800ac50 <mem_malloc+0x11c>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab62:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	6807      	ldr	r7, [r0, #0]
 800ab6a:	1a7b      	subs	r3, r7, r1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	4543      	cmp	r3, r8
 800ab70:	d303      	bcc.n	800ab7a <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 800ab72:	4835      	ldr	r0, [pc, #212]	; (800ac48 <mem_malloc+0x114>)
 800ab74:	f004 fa82 	bl	800f07c <sys_mutex_unlock>
 800ab78:	e7e8      	b.n	800ab4c <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800ab7a:	18cc      	adds	r4, r1, r3
 800ab7c:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 800ab80:	f894 c004 	ldrb.w	ip, [r4, #4]
 800ab84:	f1bc 0f00 	cmp.w	ip, #0
 800ab88:	d15b      	bne.n	800ac42 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab8a:	eba9 0203 	sub.w	r2, r9, r3
 800ab8e:	4472      	add	r2, lr
      if ((!mem->used) &&
 800ab90:	4295      	cmp	r5, r2
 800ab92:	d856      	bhi.n	800ac42 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab94:	f105 0814 	add.w	r8, r5, #20
 800ab98:	4542      	cmp	r2, r8
 800ab9a:	d34c      	bcc.n	800ac36 <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800ab9c:	f105 0208 	add.w	r2, r5, #8
 800aba0:	441a      	add	r2, r3
 800aba2:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800aba4:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800aba8:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800abac:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800abb0:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800abb4:	2301      	movs	r3, #1
          mem->next = ptr2;
 800abb6:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800abb8:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800abba:	5a8b      	ldrh	r3, [r1, r2]
 800abbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abc0:	d001      	beq.n	800abc6 <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800abc2:	4419      	add	r1, r3
 800abc4:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 800abc6:	42a7      	cmp	r7, r4
 800abc8:	4f22      	ldr	r7, [pc, #136]	; (800ac54 <mem_malloc+0x120>)
 800abca:	d111      	bne.n	800abf0 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 800abcc:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800abce:	4623      	mov	r3, r4
 800abd0:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 800abd2:	791a      	ldrb	r2, [r3, #4]
 800abd4:	b10a      	cbz	r2, 800abda <mem_malloc+0xa6>
 800abd6:	428b      	cmp	r3, r1
 800abd8:	d130      	bne.n	800ac3c <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800abda:	428b      	cmp	r3, r1
          lfree = cur;
 800abdc:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800abde:	d007      	beq.n	800abf0 <mem_malloc+0xbc>
 800abe0:	b132      	cbz	r2, 800abf0 <mem_malloc+0xbc>
 800abe2:	4b1d      	ldr	r3, [pc, #116]	; (800ac58 <mem_malloc+0x124>)
 800abe4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800abe8:	491c      	ldr	r1, [pc, #112]	; (800ac5c <mem_malloc+0x128>)
 800abea:	481d      	ldr	r0, [pc, #116]	; (800ac60 <mem_malloc+0x12c>)
 800abec:	f006 f9d8 	bl	8010fa0 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800abf0:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 800abf2:	4815      	ldr	r0, [pc, #84]	; (800ac48 <mem_malloc+0x114>)
 800abf4:	f004 fa42 	bl	800f07c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	4425      	add	r5, r4
 800abfc:	42ab      	cmp	r3, r5
 800abfe:	d206      	bcs.n	800ac0e <mem_malloc+0xda>
 800ac00:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <mem_malloc+0x124>)
 800ac02:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ac06:	4917      	ldr	r1, [pc, #92]	; (800ac64 <mem_malloc+0x130>)
 800ac08:	4815      	ldr	r0, [pc, #84]	; (800ac60 <mem_malloc+0x12c>)
 800ac0a:	f006 f9c9 	bl	8010fa0 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac0e:	07a3      	lsls	r3, r4, #30
 800ac10:	d00d      	beq.n	800ac2e <mem_malloc+0xfa>
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <mem_malloc+0x124>)
 800ac14:	f240 22d6 	movw	r2, #726	; 0x2d6
 800ac18:	4913      	ldr	r1, [pc, #76]	; (800ac68 <mem_malloc+0x134>)
 800ac1a:	4811      	ldr	r0, [pc, #68]	; (800ac60 <mem_malloc+0x12c>)
 800ac1c:	f006 f9c0 	bl	8010fa0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ac20:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <mem_malloc+0x124>)
 800ac22:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800ac26:	4911      	ldr	r1, [pc, #68]	; (800ac6c <mem_malloc+0x138>)
 800ac28:	480d      	ldr	r0, [pc, #52]	; (800ac60 <mem_malloc+0x12c>)
 800ac2a:	f006 f9b9 	bl	8010fa0 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800ac2e:	f104 0008 	add.w	r0, r4, #8
 800ac32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	7123      	strb	r3, [r4, #4]
 800ac3a:	e7c4      	b.n	800abc6 <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	4433      	add	r3, r6
 800ac40:	e7c7      	b.n	800abd2 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800ac42:	4673      	mov	r3, lr
 800ac44:	e793      	b.n	800ab6e <mem_malloc+0x3a>
 800ac46:	bf00      	nop
 800ac48:	20008318 	.word	0x20008318
 800ac4c:	2000831c 	.word	0x2000831c
 800ac50:	20008314 	.word	0x20008314
 800ac54:	20008320 	.word	0x20008320
 800ac58:	08012c9b 	.word	0x08012c9b
 800ac5c:	08012ce5 	.word	0x08012ce5
 800ac60:	08011dd4 	.word	0x08011dd4
 800ac64:	08012cfe 	.word	0x08012cfe
 800ac68:	08012d2e 	.word	0x08012d2e
 800ac6c:	08012d5d 	.word	0x08012d5d

0800ac70 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac74:	f004 fa16 	bl	800f0a4 <sys_arch_protect>
 800ac78:	4605      	mov	r5, r0

  memp = *desc->tab;
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac7e:	b15c      	cbz	r4, 800ac98 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac80:	6822      	ldr	r2, [r4, #0]
 800ac82:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac84:	07a3      	lsls	r3, r4, #30
 800ac86:	d006      	beq.n	800ac96 <do_memp_malloc_pool.isra.0+0x26>
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <do_memp_malloc_pool.isra.0+0x30>)
 800ac8a:	f240 1249 	movw	r2, #329	; 0x149
 800ac8e:	4905      	ldr	r1, [pc, #20]	; (800aca4 <do_memp_malloc_pool.isra.0+0x34>)
 800ac90:	4805      	ldr	r0, [pc, #20]	; (800aca8 <do_memp_malloc_pool.isra.0+0x38>)
 800ac92:	f006 f985 	bl	8010fa0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac96:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800ac98:	f004 fa10 	bl	800f0bc <sys_arch_unprotect>
  return NULL;
}
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	08012dd7 	.word	0x08012dd7
 800aca4:	08012e07 	.word	0x08012e07
 800aca8:	08011dd4 	.word	0x08011dd4

0800acac <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800acac:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800acae:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800acb4:	d006      	beq.n	800acc4 <do_memp_free_pool.isra.1+0x18>
 800acb6:	4b08      	ldr	r3, [pc, #32]	; (800acd8 <do_memp_free_pool.isra.1+0x2c>)
 800acb8:	f240 129d 	movw	r2, #413	; 0x19d
 800acbc:	4907      	ldr	r1, [pc, #28]	; (800acdc <do_memp_free_pool.isra.1+0x30>)
 800acbe:	4808      	ldr	r0, [pc, #32]	; (800ace0 <do_memp_free_pool.isra.1+0x34>)
 800acc0:	f006 f96e 	bl	8010fa0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800acc4:	f004 f9ee 	bl	800f0a4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800acce:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800acd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800acd4:	f004 b9f2 	b.w	800f0bc <sys_arch_unprotect>
 800acd8:	08012dd7 	.word	0x08012dd7
 800acdc:	08012db7 	.word	0x08012db7
 800ace0:	08011dd4 	.word	0x08011dd4

0800ace4 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ace4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800ace6:	2200      	movs	r2, #0
 800ace8:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800acea:	3303      	adds	r3, #3
{
 800acec:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800acee:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800acf2:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800acf4:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800acf6:	42a2      	cmp	r2, r4
 800acf8:	db00      	blt.n	800acfc <memp_init_pool+0x18>
}
 800acfa:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800acfc:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800acfe:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800ad00:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ad02:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800ad04:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ad06:	442b      	add	r3, r5
 800ad08:	e7f5      	b.n	800acf6 <memp_init_pool+0x12>
	...

0800ad0c <memp_init>:
{
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800ad10:	4d04      	ldr	r5, [pc, #16]	; (800ad24 <memp_init+0x18>)
 800ad12:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800ad16:	3401      	adds	r4, #1
 800ad18:	f7ff ffe4 	bl	800ace4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad1c:	2c0d      	cmp	r4, #13
 800ad1e:	d1f8      	bne.n	800ad12 <memp_init+0x6>
}
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	bf00      	nop
 800ad24:	08012f00 	.word	0x08012f00

0800ad28 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad28:	280c      	cmp	r0, #12
{
 800ad2a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad2c:	d807      	bhi.n	800ad3e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad2e:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <memp_malloc+0x28>)
 800ad30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800ad34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad38:	3008      	adds	r0, #8
 800ad3a:	f7ff bf99 	b.w	800ac70 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad3e:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <memp_malloc+0x2c>)
 800ad40:	f240 1287 	movw	r2, #391	; 0x187
 800ad44:	4904      	ldr	r1, [pc, #16]	; (800ad58 <memp_malloc+0x30>)
 800ad46:	4805      	ldr	r0, [pc, #20]	; (800ad5c <memp_malloc+0x34>)
 800ad48:	f006 f92a 	bl	8010fa0 <iprintf>
}
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	bd08      	pop	{r3, pc}
 800ad50:	08012f00 	.word	0x08012f00
 800ad54:	08012dd7 	.word	0x08012dd7
 800ad58:	08012ee3 	.word	0x08012ee3
 800ad5c:	08011dd4 	.word	0x08011dd4

0800ad60 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad60:	280c      	cmp	r0, #12
 800ad62:	d906      	bls.n	800ad72 <memp_free+0x12>
 800ad64:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <memp_free+0x24>)
 800ad66:	f240 12db 	movw	r2, #475	; 0x1db
 800ad6a:	4907      	ldr	r1, [pc, #28]	; (800ad88 <memp_free+0x28>)
 800ad6c:	4807      	ldr	r0, [pc, #28]	; (800ad8c <memp_free+0x2c>)
 800ad6e:	f006 b917 	b.w	8010fa0 <iprintf>

  if (mem == NULL) {
 800ad72:	b129      	cbz	r1, 800ad80 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <memp_free+0x30>)
 800ad76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ad7a:	3008      	adds	r0, #8
 800ad7c:	f7ff bf96 	b.w	800acac <do_memp_free_pool.isra.1>
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	08012dd7 	.word	0x08012dd7
 800ad88:	08012ec8 	.word	0x08012ec8
 800ad8c:	08011dd4 	.word	0x08011dd4
 800ad90:	08012f00 	.word	0x08012f00

0800ad94 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad94:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 800ad98:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad9a:	071b      	lsls	r3, r3, #28
 800ad9c:	d502      	bpl.n	800ada4 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800ad9e:	3104      	adds	r1, #4
 800ada0:	f7fe bd52 	b.w	8009848 <etharp_request>
 800ada4:	4770      	bx	lr

0800ada6 <netif_init>:
{
 800ada6:	4770      	bx	lr

0800ada8 <netif_set_ipaddr>:
{
 800ada8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adaa:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800adac:	460c      	mov	r4, r1
 800adae:	b1b9      	cbz	r1, 800ade0 <netif_set_ipaddr+0x38>
 800adb0:	680b      	ldr	r3, [r1, #0]
 800adb2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800adb4:	9a01      	ldr	r2, [sp, #4]
 800adb6:	686b      	ldr	r3, [r5, #4]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d00f      	beq.n	800addc <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800adbc:	1d2e      	adds	r6, r5, #4
 800adbe:	a901      	add	r1, sp, #4
 800adc0:	4630      	mov	r0, r6
 800adc2:	f001 fb63 	bl	800c48c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800adc6:	a901      	add	r1, sp, #4
 800adc8:	4630      	mov	r0, r6
 800adca:	f003 fff1 	bl	800edb0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800adce:	b104      	cbz	r4, 800add2 <netif_set_ipaddr+0x2a>
 800add0:	6824      	ldr	r4, [r4, #0]
 800add2:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800add4:	b114      	cbz	r4, 800addc <netif_set_ipaddr+0x34>
 800add6:	4628      	mov	r0, r5
 800add8:	f7ff ffdc 	bl	800ad94 <netif_issue_reports.part.0>
}
 800addc:	b002      	add	sp, #8
 800adde:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ade0:	4b01      	ldr	r3, [pc, #4]	; (800ade8 <netif_set_ipaddr+0x40>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	e7e5      	b.n	800adb2 <netif_set_ipaddr+0xa>
 800ade6:	bf00      	nop
 800ade8:	08012a38 	.word	0x08012a38

0800adec <netif_set_addr>:
{
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	4606      	mov	r6, r0
 800adf0:	4615      	mov	r5, r2
 800adf2:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 800adf4:	b109      	cbz	r1, 800adfa <netif_set_addr+0xe>
 800adf6:	680b      	ldr	r3, [r1, #0]
 800adf8:	b94b      	cbnz	r3, 800ae0e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffd4 	bl	800ada8 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae00:	b105      	cbz	r5, 800ae04 <netif_set_addr+0x18>
 800ae02:	682d      	ldr	r5, [r5, #0]
 800ae04:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae06:	b104      	cbz	r4, 800ae0a <netif_set_addr+0x1e>
 800ae08:	6824      	ldr	r4, [r4, #0]
 800ae0a:	60f4      	str	r4, [r6, #12]
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae0e:	b102      	cbz	r2, 800ae12 <netif_set_addr+0x26>
 800ae10:	6815      	ldr	r5, [r2, #0]
 800ae12:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae14:	b104      	cbz	r4, 800ae18 <netif_set_addr+0x2c>
 800ae16:	6824      	ldr	r4, [r4, #0]
 800ae18:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800ae1a:	4630      	mov	r0, r6
}
 800ae1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 800ae20:	f7ff bfc2 	b.w	800ada8 <netif_set_ipaddr>

0800ae24 <netif_add>:
{
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	4690      	mov	r8, r2
 800ae30:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 800ae32:	b92e      	cbnz	r6, 800ae40 <netif_add+0x1c>
 800ae34:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <netif_add+0x68>)
 800ae36:	22fb      	movs	r2, #251	; 0xfb
 800ae38:	4915      	ldr	r1, [pc, #84]	; (800ae90 <netif_add+0x6c>)
 800ae3a:	4816      	ldr	r0, [pc, #88]	; (800ae94 <netif_add+0x70>)
 800ae3c:	f006 f8b0 	bl	8010fa0 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800ae40:	2303      	movs	r3, #3
  netif->num = netif_num++;
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae44:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae46:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800ae48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 800ae4c:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae4e:	6065      	str	r5, [r4, #4]
  netif->state = state;
 800ae50:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 800ae52:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae54:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 800ae56:	1c59      	adds	r1, r3, #1
 800ae58:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 800ae5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 800ae5e:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae60:	4642      	mov	r2, r8
  netif->input = input;
 800ae62:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae64:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 800ae66:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae68:	464b      	mov	r3, r9
  netif->flags = 0;
 800ae6a:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ae6e:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae70:	f7ff ffbc 	bl	800adec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800ae74:	4620      	mov	r0, r4
 800ae76:	47b0      	blx	r6
 800ae78:	b930      	cbnz	r0, 800ae88 <netif_add+0x64>
  netif->next = netif_list;
 800ae7a:	4b08      	ldr	r3, [pc, #32]	; (800ae9c <netif_add+0x78>)
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800ae80:	601c      	str	r4, [r3, #0]
}
 800ae82:	4620      	mov	r0, r4
 800ae84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800ae88:	462c      	mov	r4, r5
 800ae8a:	e7fa      	b.n	800ae82 <netif_add+0x5e>
 800ae8c:	08012f34 	.word	0x08012f34
 800ae90:	08012f65 	.word	0x08012f65
 800ae94:	08011dd4 	.word	0x08011dd4
 800ae98:	20008358 	.word	0x20008358
 800ae9c:	2000bb20 	.word	0x2000bb20

0800aea0 <netif_set_default>:
  netif_default = netif;
 800aea0:	4b01      	ldr	r3, [pc, #4]	; (800aea8 <netif_set_default+0x8>)
 800aea2:	6018      	str	r0, [r3, #0]
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	2000bb24 	.word	0x2000bb24

0800aeac <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aeac:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 800aeb0:	07d1      	lsls	r1, r2, #31
 800aeb2:	d409      	bmi.n	800aec8 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800aeb4:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800aeb8:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800aeba:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800aebe:	d503      	bpl.n	800aec8 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aec0:	6843      	ldr	r3, [r0, #4]
 800aec2:	b10b      	cbz	r3, 800aec8 <netif_set_up+0x1c>
 800aec4:	f7ff bf66 	b.w	800ad94 <netif_issue_reports.part.0>
 800aec8:	4770      	bx	lr

0800aeca <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800aeca:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800aece:	07d9      	lsls	r1, r3, #31
 800aed0:	d507      	bpl.n	800aee2 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800aed2:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aed6:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800aed8:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aedc:	d501      	bpl.n	800aee2 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800aede:	f7fe bbf9 	b.w	80096d4 <etharp_cleanup_netif>
 800aee2:	4770      	bx	lr

0800aee4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800aee4:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aee6:	f004 f8dd 	bl	800f0a4 <sys_arch_protect>
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <pbuf_free_ooseq_callback+0x2c>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
 800aef0:	f004 f8e4 	bl	800f0bc <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aef4:	4b07      	ldr	r3, [pc, #28]	; (800af14 <pbuf_free_ooseq_callback+0x30>)
 800aef6:	681c      	ldr	r4, [r3, #0]
 800aef8:	b904      	cbnz	r4, 800aefc <pbuf_free_ooseq_callback+0x18>
 800aefa:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 800aefc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800aefe:	b120      	cbz	r0, 800af0a <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 800af00:	f000 fd18 	bl	800b934 <tcp_segs_free>
      pcb->ooseq = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	6723      	str	r3, [r4, #112]	; 0x70
 800af08:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af0a:	68e4      	ldr	r4, [r4, #12]
 800af0c:	e7f4      	b.n	800aef8 <pbuf_free_ooseq_callback+0x14>
 800af0e:	bf00      	nop
 800af10:	2000bb28 	.word	0x2000bb28
 800af14:	2000bb30 	.word	0x2000bb30

0800af18 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800af18:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800af1a:	4604      	mov	r4, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d12f      	bne.n	800af80 <pbuf_header_impl+0x68>
 800af20:	4b1f      	ldr	r3, [pc, #124]	; (800afa0 <pbuf_header_impl+0x88>)
 800af22:	f240 223f 	movw	r2, #575	; 0x23f
 800af26:	491f      	ldr	r1, [pc, #124]	; (800afa4 <pbuf_header_impl+0x8c>)
 800af28:	481f      	ldr	r0, [pc, #124]	; (800afa8 <pbuf_header_impl+0x90>)
 800af2a:	f006 f839 	bl	8010fa0 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800af2e:	2000      	movs	r0, #0
 800af30:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800af32:	b288      	uxth	r0, r1
  type = p->type;
 800af34:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800af36:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800af38:	b10d      	cbz	r5, 800af3e <pbuf_header_impl+0x26>
 800af3a:	2d03      	cmp	r5, #3
 800af3c:	d106      	bne.n	800af4c <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800af3e:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800af40:	f104 0210 	add.w	r2, r4, #16
 800af44:	4293      	cmp	r3, r2
 800af46:	d20a      	bcs.n	800af5e <pbuf_header_impl+0x46>
      return 1;
 800af48:	2001      	movs	r0, #1
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800af4c:	3d01      	subs	r5, #1
 800af4e:	2d01      	cmp	r5, #1
 800af50:	d811      	bhi.n	800af76 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800af52:	2900      	cmp	r1, #0
 800af54:	da0c      	bge.n	800af70 <pbuf_header_impl+0x58>
 800af56:	8962      	ldrh	r2, [r4, #10]
 800af58:	4282      	cmp	r2, r0
 800af5a:	d3f5      	bcc.n	800af48 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800af5c:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 800af5e:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 800af60:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 800af62:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 800af64:	8963      	ldrh	r3, [r4, #10]
 800af66:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 800af68:	4401      	add	r1, r0
  p->len += header_size_increment;
 800af6a:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 800af6c:	8121      	strh	r1, [r4, #8]
 800af6e:	e7de      	b.n	800af2e <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 800af70:	2a00      	cmp	r2, #0
 800af72:	d1f3      	bne.n	800af5c <pbuf_header_impl+0x44>
 800af74:	e7e8      	b.n	800af48 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800af76:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <pbuf_header_impl+0x88>)
 800af78:	f240 2277 	movw	r2, #631	; 0x277
 800af7c:	490b      	ldr	r1, [pc, #44]	; (800afac <pbuf_header_impl+0x94>)
 800af7e:	e00b      	b.n	800af98 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 800af80:	2900      	cmp	r1, #0
 800af82:	d0d4      	beq.n	800af2e <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 800af84:	dad5      	bge.n	800af32 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 800af86:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800af88:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800af8a:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800af8c:	4283      	cmp	r3, r0
 800af8e:	d2d1      	bcs.n	800af34 <pbuf_header_impl+0x1c>
 800af90:	4b03      	ldr	r3, [pc, #12]	; (800afa0 <pbuf_header_impl+0x88>)
 800af92:	f240 2247 	movw	r2, #583	; 0x247
 800af96:	4906      	ldr	r1, [pc, #24]	; (800afb0 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 800af98:	4803      	ldr	r0, [pc, #12]	; (800afa8 <pbuf_header_impl+0x90>)
 800af9a:	f006 f801 	bl	8010fa0 <iprintf>
 800af9e:	e7d3      	b.n	800af48 <pbuf_header_impl+0x30>
 800afa0:	080131e1 	.word	0x080131e1
 800afa4:	0801324b 	.word	0x0801324b
 800afa8:	08011dd4 	.word	0x08011dd4
 800afac:	0801322f 	.word	0x0801322f
 800afb0:	08013211 	.word	0x08013211

0800afb4 <pbuf_pool_is_empty>:
{
 800afb4:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 800afb6:	4d0c      	ldr	r5, [pc, #48]	; (800afe8 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 800afb8:	f004 f874 	bl	800f0a4 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 800afbc:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800afbe:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 800afc0:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 800afc2:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 800afc4:	f004 f87a 	bl	800f0bc <sys_arch_unprotect>
  if (!queued) {
 800afc8:	b964      	cbnz	r4, 800afe4 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800afca:	4622      	mov	r2, r4
 800afcc:	4621      	mov	r1, r4
 800afce:	4807      	ldr	r0, [pc, #28]	; (800afec <pbuf_pool_is_empty+0x38>)
 800afd0:	f7fd fc30 	bl	8008834 <tcpip_callback_with_block>
 800afd4:	b130      	cbz	r0, 800afe4 <pbuf_pool_is_empty+0x30>
 800afd6:	f004 f865 	bl	800f0a4 <sys_arch_protect>
 800afda:	702c      	strb	r4, [r5, #0]
}
 800afdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800afe0:	f004 b86c 	b.w	800f0bc <sys_arch_unprotect>
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	2000bb28 	.word	0x2000bb28
 800afec:	0800aee5 	.word	0x0800aee5

0800aff0 <pbuf_alloced_custom>:
{
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 800aff4:	2804      	cmp	r0, #4
 800aff6:	d81e      	bhi.n	800b036 <pbuf_alloced_custom+0x46>
 800aff8:	e8df f000 	tbb	[pc, r0]
 800affc:	1b280326 	.word	0x1b280326
 800b000:	1b          	.byte	0x1b
 800b001:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b002:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b004:	3403      	adds	r4, #3
 800b006:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800b00a:	f024 0403 	bic.w	r4, r4, #3
 800b00e:	190e      	adds	r6, r1, r4
 800b010:	4286      	cmp	r6, r0
 800b012:	f04f 0000 	mov.w	r0, #0
 800b016:	d80b      	bhi.n	800b030 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 800b018:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800b01a:	b1cd      	cbz	r5, 800b050 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b01c:	442c      	add	r4, r5
 800b01e:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800b020:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800b022:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800b024:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 800b026:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800b028:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 800b02a:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 800b02c:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 800b02e:	81da      	strh	r2, [r3, #14]
}
 800b030:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 800b032:	2400      	movs	r4, #0
    break;
 800b034:	e7e6      	b.n	800b004 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <pbuf_alloced_custom+0x64>)
 800b038:	f240 12c5 	movw	r2, #453	; 0x1c5
 800b03c:	4906      	ldr	r1, [pc, #24]	; (800b058 <pbuf_alloced_custom+0x68>)
 800b03e:	4807      	ldr	r0, [pc, #28]	; (800b05c <pbuf_alloced_custom+0x6c>)
 800b040:	f005 ffae 	bl	8010fa0 <iprintf>
    return NULL;
 800b044:	2000      	movs	r0, #0
 800b046:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b048:	2436      	movs	r4, #54	; 0x36
 800b04a:	e7db      	b.n	800b004 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b04c:	240e      	movs	r4, #14
 800b04e:	e7d9      	b.n	800b004 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 800b050:	605d      	str	r5, [r3, #4]
 800b052:	e7e5      	b.n	800b020 <pbuf_alloced_custom+0x30>
 800b054:	080131e1 	.word	0x080131e1
 800b058:	08013024 	.word	0x08013024
 800b05c:	08011dd4 	.word	0x08011dd4

0800b060 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 800b060:	2200      	movs	r2, #0
 800b062:	f7ff bf59 	b.w	800af18 <pbuf_header_impl>

0800b066 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800b066:	2201      	movs	r2, #1
 800b068:	f7ff bf56 	b.w	800af18 <pbuf_header_impl>

0800b06c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b070:	4604      	mov	r4, r0
 800b072:	b950      	cbnz	r0, 800b08a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b074:	4627      	mov	r7, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800b076:	4b2c      	ldr	r3, [pc, #176]	; (800b128 <pbuf_free+0xbc>)
 800b078:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b07c:	492b      	ldr	r1, [pc, #172]	; (800b12c <pbuf_free+0xc0>)
 800b07e:	482c      	ldr	r0, [pc, #176]	; (800b130 <pbuf_free+0xc4>)
 800b080:	f005 ff8e 	bl	8010fa0 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800b084:	4638      	mov	r0, r7
 800b086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800b08a:	7b03      	ldrb	r3, [r0, #12]
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d906      	bls.n	800b09e <pbuf_free+0x32>
 800b090:	4b25      	ldr	r3, [pc, #148]	; (800b128 <pbuf_free+0xbc>)
 800b092:	f240 22de 	movw	r2, #734	; 0x2de
 800b096:	4927      	ldr	r1, [pc, #156]	; (800b134 <pbuf_free+0xc8>)
 800b098:	4825      	ldr	r0, [pc, #148]	; (800b130 <pbuf_free+0xc4>)
 800b09a:	f005 ff81 	bl	8010fa0 <iprintf>
{
 800b09e:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b0a0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800b128 <pbuf_free+0xbc>
 800b0a4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800b13c <pbuf_free+0xd0>
 800b0a8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800b130 <pbuf_free+0xc4>
 800b0ac:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d0e8      	beq.n	800b084 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 800b0b2:	f003 fff7 	bl	800f0a4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b0b6:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800b0b8:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b0ba:	b933      	cbnz	r3, 800b0ca <pbuf_free+0x5e>
 800b0bc:	4643      	mov	r3, r8
 800b0be:	f240 22eb 	movw	r2, #747	; 0x2eb
 800b0c2:	4651      	mov	r1, sl
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	f005 ff6b 	bl	8010fa0 <iprintf>
    ref = --(p->ref);
 800b0ca:	89e5      	ldrh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800b0cc:	4658      	mov	r0, fp
    ref = --(p->ref);
 800b0ce:	3d01      	subs	r5, #1
 800b0d0:	b2ad      	uxth	r5, r5
 800b0d2:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800b0d4:	f003 fff2 	bl	800f0bc <sys_arch_unprotect>
    if (ref == 0) {
 800b0d8:	2d00      	cmp	r5, #0
 800b0da:	d1d3      	bne.n	800b084 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b0dc:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800b0de:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b0e0:	079b      	lsls	r3, r3, #30
 800b0e2:	d50e      	bpl.n	800b102 <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	b933      	cbnz	r3, 800b0f6 <pbuf_free+0x8a>
 800b0e8:	4643      	mov	r3, r8
 800b0ea:	f240 22f9 	movw	r2, #761	; 0x2f9
 800b0ee:	4912      	ldr	r1, [pc, #72]	; (800b138 <pbuf_free+0xcc>)
 800b0f0:	4648      	mov	r0, r9
 800b0f2:	f005 ff55 	bl	8010fa0 <iprintf>
        pc->custom_free_function(p);
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	4798      	blx	r3
 800b0fc:	3601      	adds	r6, #1
      p = q;
 800b0fe:	462c      	mov	r4, r5
 800b100:	e7d4      	b.n	800b0ac <pbuf_free+0x40>
      type = p->type;
 800b102:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800b104:	2b03      	cmp	r3, #3
 800b106:	d104      	bne.n	800b112 <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 800b108:	4621      	mov	r1, r4
 800b10a:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800b10c:	f7ff fe28 	bl	800ad60 <memp_free>
 800b110:	e7f4      	b.n	800b0fc <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800b112:	3b01      	subs	r3, #1
 800b114:	2b01      	cmp	r3, #1
 800b116:	d802      	bhi.n	800b11e <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 800b118:	4621      	mov	r1, r4
 800b11a:	200b      	movs	r0, #11
 800b11c:	e7f6      	b.n	800b10c <pbuf_free+0xa0>
          mem_free(p);
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff fbc2 	bl	800a8a8 <mem_free>
 800b124:	e7ea      	b.n	800b0fc <pbuf_free+0x90>
 800b126:	bf00      	nop
 800b128:	080131e1 	.word	0x080131e1
 800b12c:	0801324b 	.word	0x0801324b
 800b130:	08011dd4 	.word	0x08011dd4
 800b134:	08013195 	.word	0x08013195
 800b138:	080131c0 	.word	0x080131c0
 800b13c:	080131aa 	.word	0x080131aa

0800b140 <pbuf_alloc>:
{
 800b140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	460e      	mov	r6, r1
 800b146:	4617      	mov	r7, r2
  switch (layer) {
 800b148:	2804      	cmp	r0, #4
 800b14a:	d80e      	bhi.n	800b16a <pbuf_alloc+0x2a>
 800b14c:	e8df f000 	tbb	[pc, r0]
 800b150:	0b170315 	.word	0x0b170315
 800b154:	0b          	.byte	0x0b
 800b155:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b156:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800b158:	2f03      	cmp	r7, #3
 800b15a:	f200 80b9 	bhi.w	800b2d0 <pbuf_alloc+0x190>
 800b15e:	e8df f007 	tbb	[pc, r7]
 800b162:	aa8f      	.short	0xaa8f
 800b164:	10aa      	.short	0x10aa
    offset = 0;
 800b166:	2500      	movs	r5, #0
    break;
 800b168:	e7f6      	b.n	800b158 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800b16a:	4b5c      	ldr	r3, [pc, #368]	; (800b2dc <pbuf_alloc+0x19c>)
 800b16c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800b170:	495b      	ldr	r1, [pc, #364]	; (800b2e0 <pbuf_alloc+0x1a0>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b172:	485c      	ldr	r0, [pc, #368]	; (800b2e4 <pbuf_alloc+0x1a4>)
 800b174:	f005 ff14 	bl	8010fa0 <iprintf>
 800b178:	e049      	b.n	800b20e <pbuf_alloc+0xce>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b17a:	2536      	movs	r5, #54	; 0x36
 800b17c:	e7ec      	b.n	800b158 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b17e:	250e      	movs	r5, #14
 800b180:	e7ea      	b.n	800b158 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b182:	200c      	movs	r0, #12
 800b184:	f7ff fdd0 	bl	800ad28 <memp_malloc>
    if (p == NULL) {
 800b188:	4604      	mov	r4, r0
 800b18a:	b920      	cbnz	r0, 800b196 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 800b18c:	f7ff ff12 	bl	800afb4 <pbuf_pool_is_empty>
}
 800b190:	4620      	mov	r0, r4
 800b192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800b196:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b198:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 800b19c:	8106      	strh	r6, [r0, #8]
    p->type = type;
 800b19e:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b1a4:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1a6:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b1a8:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1aa:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1b2:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b1b6:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1b8:	42b5      	cmp	r5, r6
 800b1ba:	bf28      	it	cs
 800b1bc:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b1be:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b1c0:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b1c2:	429f      	cmp	r7, r3
 800b1c4:	d206      	bcs.n	800b1d4 <pbuf_alloc+0x94>
 800b1c6:	4b45      	ldr	r3, [pc, #276]	; (800b2dc <pbuf_alloc+0x19c>)
 800b1c8:	f44f 7298 	mov.w	r2, #304	; 0x130
 800b1cc:	4946      	ldr	r1, [pc, #280]	; (800b2e8 <pbuf_alloc+0x1a8>)
 800b1ce:	4845      	ldr	r0, [pc, #276]	; (800b2e4 <pbuf_alloc+0x1a4>)
 800b1d0:	f005 fee6 	bl	8010fa0 <iprintf>
    p->ref = 1;
 800b1d4:	2301      	movs	r3, #1
    while (rem_len > 0) {
 800b1d6:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b1d8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800b2dc <pbuf_alloc+0x19c>
    p->ref = 1;
 800b1dc:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800b1de:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b1e0:	f8df a110 	ldr.w	sl, [pc, #272]	; 800b2f4 <pbuf_alloc+0x1b4>
    rem_len = length - p->len;
 800b1e4:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b1e6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800b2e4 <pbuf_alloc+0x1a4>
    while (rem_len > 0) {
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	dc04      	bgt.n	800b1f8 <pbuf_alloc+0xb8>
  p->ref = 1;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	7363      	strb	r3, [r4, #13]
  return p;
 800b1f6:	e7cb      	b.n	800b190 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b1f8:	200c      	movs	r0, #12
 800b1fa:	f7ff fd95 	bl	800ad28 <memp_malloc>
 800b1fe:	2300      	movs	r3, #0
      if (q == NULL) {
 800b200:	4605      	mov	r5, r0
 800b202:	b930      	cbnz	r0, 800b212 <pbuf_alloc+0xd2>
        PBUF_POOL_IS_EMPTY();
 800b204:	f7ff fed6 	bl	800afb4 <pbuf_pool_is_empty>
        pbuf_free(p);
 800b208:	4620      	mov	r0, r4
 800b20a:	f7ff ff2f 	bl	800b06c <pbuf_free>
    return NULL;
 800b20e:	2400      	movs	r4, #0
 800b210:	e7be      	b.n	800b190 <pbuf_alloc+0x50>
      q->flags = 0;
 800b212:	7343      	strb	r3, [r0, #13]
      q->type = type;
 800b214:	2203      	movs	r2, #3
      q->next = NULL;
 800b216:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b218:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 800b21c:	7302      	strb	r2, [r0, #12]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b21e:	429e      	cmp	r6, r3
      r->next = q;
 800b220:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b224:	d106      	bne.n	800b234 <pbuf_alloc+0xf4>
 800b226:	4643      	mov	r3, r8
 800b228:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800b22c:	4651      	mov	r1, sl
 800b22e:	4648      	mov	r0, r9
 800b230:	f005 feb6 	bl	8010fa0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800b234:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b236:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800b23a:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b23c:	bf28      	it	cs
 800b23e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800b242:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b244:	f105 0310 	add.w	r3, r5, #16
 800b248:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b24a:	079b      	lsls	r3, r3, #30
 800b24c:	d006      	beq.n	800b25c <pbuf_alloc+0x11c>
 800b24e:	4643      	mov	r3, r8
 800b250:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800b254:	4925      	ldr	r1, [pc, #148]	; (800b2ec <pbuf_alloc+0x1ac>)
 800b256:	4648      	mov	r0, r9
 800b258:	f005 fea2 	bl	8010fa0 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b25c:	8962      	ldrh	r2, [r4, #10]
 800b25e:	6863      	ldr	r3, [r4, #4]
 800b260:	4413      	add	r3, r2
 800b262:	429f      	cmp	r7, r3
 800b264:	d206      	bcs.n	800b274 <pbuf_alloc+0x134>
 800b266:	4643      	mov	r3, r8
 800b268:	f240 1255 	movw	r2, #341	; 0x155
 800b26c:	491e      	ldr	r1, [pc, #120]	; (800b2e8 <pbuf_alloc+0x1a8>)
 800b26e:	4648      	mov	r0, r9
 800b270:	f005 fe96 	bl	8010fa0 <iprintf>
      q->ref = 1;
 800b274:	2301      	movs	r3, #1
      rem_len -= q->len;
 800b276:	46ab      	mov	fp, r5
      q->ref = 1;
 800b278:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800b27a:	896b      	ldrh	r3, [r5, #10]
 800b27c:	1af6      	subs	r6, r6, r3
 800b27e:	e7b4      	b.n	800b1ea <pbuf_alloc+0xaa>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800b280:	f105 0013 	add.w	r0, r5, #19
 800b284:	1cf3      	adds	r3, r6, #3
 800b286:	f020 0003 	bic.w	r0, r0, #3
 800b28a:	f023 0303 	bic.w	r3, r3, #3
 800b28e:	4418      	add	r0, r3
 800b290:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800b292:	4298      	cmp	r0, r3
 800b294:	d3bb      	bcc.n	800b20e <pbuf_alloc+0xce>
      p = (struct pbuf*)mem_malloc(alloc_len);
 800b296:	f7ff fc4d 	bl	800ab34 <mem_malloc>
    if (p == NULL) {
 800b29a:	4604      	mov	r4, r0
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d0b6      	beq.n	800b20e <pbuf_alloc+0xce>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b2a0:	4405      	add	r5, r0
    p->next = NULL;
 800b2a2:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800b2a4:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b2a6:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 800b2a8:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800b2aa:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b2ac:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 800b2b0:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b2b2:	6045      	str	r5, [r0, #4]
 800b2b4:	e79b      	b.n	800b1ee <pbuf_alloc+0xae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b2b6:	200b      	movs	r0, #11
 800b2b8:	f7ff fd36 	bl	800ad28 <memp_malloc>
    if (p == NULL) {
 800b2bc:	4604      	mov	r4, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0a5      	beq.n	800b20e <pbuf_alloc+0xce>
    p->payload = NULL;
 800b2c2:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800b2c4:	8106      	strh	r6, [r0, #8]
 800b2c6:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 800b2c8:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 800b2ca:	6003      	str	r3, [r0, #0]
    p->type = type;
 800b2cc:	7307      	strb	r7, [r0, #12]
    break;
 800b2ce:	e78e      	b.n	800b1ee <pbuf_alloc+0xae>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b2d0:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <pbuf_alloc+0x19c>)
 800b2d2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b2d6:	4906      	ldr	r1, [pc, #24]	; (800b2f0 <pbuf_alloc+0x1b0>)
 800b2d8:	e74b      	b.n	800b172 <pbuf_alloc+0x32>
 800b2da:	bf00      	nop
 800b2dc:	080131e1 	.word	0x080131e1
 800b2e0:	08012f7c 	.word	0x08012f7c
 800b2e4:	08011dd4 	.word	0x08011dd4
 800b2e8:	08012f97 	.word	0x08012f97
 800b2ec:	08012fdc 	.word	0x08012fdc
 800b2f0:	08013009 	.word	0x08013009
 800b2f4:	08012fc8 	.word	0x08012fc8

0800b2f8 <pbuf_realloc>:
{
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b2fe:	4604      	mov	r4, r0
 800b300:	b930      	cbnz	r0, 800b310 <pbuf_realloc+0x18>
 800b302:	4b2e      	ldr	r3, [pc, #184]	; (800b3bc <pbuf_realloc+0xc4>)
 800b304:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b308:	492d      	ldr	r1, [pc, #180]	; (800b3c0 <pbuf_realloc+0xc8>)
 800b30a:	482e      	ldr	r0, [pc, #184]	; (800b3c4 <pbuf_realloc+0xcc>)
 800b30c:	f005 fe48 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800b310:	7b23      	ldrb	r3, [r4, #12]
 800b312:	2b03      	cmp	r3, #3
 800b314:	d906      	bls.n	800b324 <pbuf_realloc+0x2c>
 800b316:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <pbuf_realloc+0xc4>)
 800b318:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b31c:	492a      	ldr	r1, [pc, #168]	; (800b3c8 <pbuf_realloc+0xd0>)
 800b31e:	4829      	ldr	r0, [pc, #164]	; (800b3c4 <pbuf_realloc+0xcc>)
 800b320:	f005 fe3e 	bl	8010fa0 <iprintf>
  if (new_len >= p->tot_len) {
 800b324:	8926      	ldrh	r6, [r4, #8]
 800b326:	42ae      	cmp	r6, r5
 800b328:	d945      	bls.n	800b3b6 <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 800b32a:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b32c:	4f23      	ldr	r7, [pc, #140]	; (800b3bc <pbuf_realloc+0xc4>)
 800b32e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800b3d4 <pbuf_realloc+0xdc>
 800b332:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800b3c4 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 800b336:	8963      	ldrh	r3, [r4, #10]
 800b338:	429d      	cmp	r5, r3
 800b33a:	d819      	bhi.n	800b370 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b33c:	7b22      	ldrb	r2, [r4, #12]
 800b33e:	2a00      	cmp	r2, #0
 800b340:	d131      	bne.n	800b3a6 <pbuf_realloc+0xae>
 800b342:	429d      	cmp	r5, r3
 800b344:	d02f      	beq.n	800b3a6 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b346:	7b63      	ldrb	r3, [r4, #13]
 800b348:	079b      	lsls	r3, r3, #30
 800b34a:	d42c      	bmi.n	800b3a6 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	4620      	mov	r0, r4
 800b350:	1b09      	subs	r1, r1, r4
 800b352:	4429      	add	r1, r5
 800b354:	b289      	uxth	r1, r1
 800b356:	f7ff fb61 	bl	800aa1c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b35a:	4604      	mov	r4, r0
 800b35c:	bb18      	cbnz	r0, 800b3a6 <pbuf_realloc+0xae>
 800b35e:	4b17      	ldr	r3, [pc, #92]	; (800b3bc <pbuf_realloc+0xc4>)
 800b360:	f240 221d 	movw	r2, #541	; 0x21d
 800b364:	4919      	ldr	r1, [pc, #100]	; (800b3cc <pbuf_realloc+0xd4>)
 800b366:	4817      	ldr	r0, [pc, #92]	; (800b3c4 <pbuf_realloc+0xcc>)
 800b368:	f005 fe1a 	bl	8010fa0 <iprintf>
  q->len = rem_len;
 800b36c:	8164      	strh	r4, [r4, #10]
 800b36e:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 800b370:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b372:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b376:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800b378:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b37a:	dd06      	ble.n	800b38a <pbuf_realloc+0x92>
 800b37c:	463b      	mov	r3, r7
 800b37e:	f240 220b 	movw	r2, #523	; 0x20b
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	f005 fe0b 	bl	8010fa0 <iprintf>
    q->tot_len += (u16_t)grow;
 800b38a:	8923      	ldrh	r3, [r4, #8]
 800b38c:	4433      	add	r3, r6
 800b38e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800b390:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b392:	2c00      	cmp	r4, #0
 800b394:	d1cf      	bne.n	800b336 <pbuf_realloc+0x3e>
 800b396:	463b      	mov	r3, r7
 800b398:	f240 220f 	movw	r2, #527	; 0x20f
 800b39c:	490c      	ldr	r1, [pc, #48]	; (800b3d0 <pbuf_realloc+0xd8>)
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f005 fdfe 	bl	8010fa0 <iprintf>
 800b3a4:	e7c7      	b.n	800b336 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800b3a6:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800b3a8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800b3aa:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800b3ac:	b108      	cbz	r0, 800b3b2 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 800b3ae:	f7ff fe5d 	bl	800b06c <pbuf_free>
  q->next = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	bf00      	nop
 800b3bc:	080131e1 	.word	0x080131e1
 800b3c0:	0801323d 	.word	0x0801323d
 800b3c4:	08011dd4 	.word	0x08011dd4
 800b3c8:	08013255 	.word	0x08013255
 800b3cc:	08013299 	.word	0x08013299
 800b3d0:	08013281 	.word	0x08013281
 800b3d4:	08013270 	.word	0x08013270

0800b3d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b3d8:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800b3da:	2200      	movs	r2, #0
 800b3dc:	b290      	uxth	r0, r2
 800b3de:	3201      	adds	r2, #1
 800b3e0:	b903      	cbnz	r3, 800b3e4 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800b3e2:	4770      	bx	lr
    p = p->next;
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	e7f9      	b.n	800b3dc <pbuf_clen+0x4>

0800b3e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b3e8:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	b188      	cbz	r0, 800b412 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 800b3ee:	f003 fe59 	bl	800f0a4 <sys_arch_protect>
 800b3f2:	89e3      	ldrh	r3, [r4, #14]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	81e3      	strh	r3, [r4, #14]
 800b3f8:	f003 fe60 	bl	800f0bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b3fc:	89e3      	ldrh	r3, [r4, #14]
 800b3fe:	b943      	cbnz	r3, 800b412 <pbuf_ref+0x2a>
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <pbuf_ref+0x2c>)
 800b402:	f240 3239 	movw	r2, #825	; 0x339
 800b406:	4904      	ldr	r1, [pc, #16]	; (800b418 <pbuf_ref+0x30>)
 800b408:	4804      	ldr	r0, [pc, #16]	; (800b41c <pbuf_ref+0x34>)
  }
}
 800b40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b40e:	f005 bdc7 	b.w	8010fa0 <iprintf>
 800b412:	bd10      	pop	{r4, pc}
 800b414:	080131e1 	.word	0x080131e1
 800b418:	080132b5 	.word	0x080132b5
 800b41c:	08011dd4 	.word	0x08011dd4

0800b420 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b424:	4604      	mov	r4, r0
 800b426:	b100      	cbz	r0, 800b42a <pbuf_cat+0xa>
 800b428:	b969      	cbnz	r1, 800b446 <pbuf_cat+0x26>
 800b42a:	4b15      	ldr	r3, [pc, #84]	; (800b480 <pbuf_cat+0x60>)
 800b42c:	f240 324d 	movw	r2, #845	; 0x34d
 800b430:	4914      	ldr	r1, [pc, #80]	; (800b484 <pbuf_cat+0x64>)
 800b432:	4815      	ldr	r0, [pc, #84]	; (800b488 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b438:	f005 bdb2 	b.w	8010fa0 <iprintf>
    p->tot_len += t->tot_len;
 800b43c:	8923      	ldrh	r3, [r4, #8]
 800b43e:	8929      	ldrh	r1, [r5, #8]
 800b440:	440b      	add	r3, r1
 800b442:	8123      	strh	r3, [r4, #8]
 800b444:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	2a00      	cmp	r2, #0
 800b44a:	d1f7      	bne.n	800b43c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b44c:	8922      	ldrh	r2, [r4, #8]
 800b44e:	8963      	ldrh	r3, [r4, #10]
 800b450:	429a      	cmp	r2, r3
 800b452:	d006      	beq.n	800b462 <pbuf_cat+0x42>
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <pbuf_cat+0x60>)
 800b456:	f240 3255 	movw	r2, #853	; 0x355
 800b45a:	490c      	ldr	r1, [pc, #48]	; (800b48c <pbuf_cat+0x6c>)
 800b45c:	480a      	ldr	r0, [pc, #40]	; (800b488 <pbuf_cat+0x68>)
 800b45e:	f005 fd9f 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	b133      	cbz	r3, 800b474 <pbuf_cat+0x54>
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <pbuf_cat+0x60>)
 800b468:	f240 3256 	movw	r2, #854	; 0x356
 800b46c:	4908      	ldr	r1, [pc, #32]	; (800b490 <pbuf_cat+0x70>)
 800b46e:	4806      	ldr	r0, [pc, #24]	; (800b488 <pbuf_cat+0x68>)
 800b470:	f005 fd96 	bl	8010fa0 <iprintf>
  p->tot_len += t->tot_len;
 800b474:	892a      	ldrh	r2, [r5, #8]
 800b476:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800b478:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800b47a:	4413      	add	r3, r2
 800b47c:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	080131e1 	.word	0x080131e1
 800b484:	08013048 	.word	0x08013048
 800b488:	08011dd4 	.word	0x08011dd4
 800b48c:	0801307d 	.word	0x0801307d
 800b490:	080130aa 	.word	0x080130aa

0800b494 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b494:	b510      	push	{r4, lr}
 800b496:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800b498:	f7ff ffc2 	bl	800b420 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b49c:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800b4a2:	f7ff bfa1 	b.w	800b3e8 <pbuf_ref>
	...

0800b4a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	b120      	cbz	r0, 800b4bc <pbuf_copy+0x14>
 800b4b2:	b119      	cbz	r1, 800b4bc <pbuf_copy+0x14>
 800b4b4:	8902      	ldrh	r2, [r0, #8]
 800b4b6:	890b      	ldrh	r3, [r1, #8]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d20a      	bcs.n	800b4d2 <pbuf_copy+0x2a>
 800b4bc:	4b38      	ldr	r3, [pc, #224]	; (800b5a0 <pbuf_copy+0xf8>)
 800b4be:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b4c2:	4938      	ldr	r1, [pc, #224]	; (800b5a4 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b4c4:	4838      	ldr	r0, [pc, #224]	; (800b5a8 <pbuf_copy+0x100>)
 800b4c6:	f005 fd6b 	bl	8010fa0 <iprintf>
 800b4ca:	f06f 000f 	mvn.w	r0, #15
 800b4ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4d6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800b5a0 <pbuf_copy+0xf8>
 800b4da:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800b5b8 <pbuf_copy+0x110>
 800b4de:	465f      	mov	r7, fp
 800b4e0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800b5a8 <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b4e4:	896e      	ldrh	r6, [r5, #10]
 800b4e6:	8963      	ldrh	r3, [r4, #10]
 800b4e8:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b4ea:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b4ec:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b4f0:	6861      	ldr	r1, [r4, #4]
 800b4f2:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b4f4:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b4f6:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 800b4f8:	bfac      	ite	ge
 800b4fa:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800b4fc:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 800b4fe:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b500:	4632      	mov	r2, r6
 800b502:	f005 fc8e 	bl	8010e22 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b506:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800b508:	b2bf      	uxth	r7, r7
    offset_from += len;
 800b50a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b50c:	42bb      	cmp	r3, r7
    offset_from += len;
 800b50e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b512:	d206      	bcs.n	800b522 <pbuf_copy+0x7a>
 800b514:	4643      	mov	r3, r8
 800b516:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b51a:	4651      	mov	r1, sl
 800b51c:	4648      	mov	r0, r9
 800b51e:	f005 fd3f 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b522:	8963      	ldrh	r3, [r4, #10]
 800b524:	455b      	cmp	r3, fp
 800b526:	d206      	bcs.n	800b536 <pbuf_copy+0x8e>
 800b528:	4643      	mov	r3, r8
 800b52a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800b52e:	491f      	ldr	r1, [pc, #124]	; (800b5ac <pbuf_copy+0x104>)
 800b530:	4648      	mov	r0, r9
 800b532:	f005 fd35 	bl	8010fa0 <iprintf>
    if (offset_from >= p_from->len) {
 800b536:	8963      	ldrh	r3, [r4, #10]
 800b538:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800b53a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800b53c:	bf9c      	itt	ls
 800b53e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800b540:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 800b544:	42bb      	cmp	r3, r7
 800b546:	d11e      	bne.n	800b586 <pbuf_copy+0xde>
      p_to = p_to->next;
 800b548:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b54a:	b9dd      	cbnz	r5, 800b584 <pbuf_copy+0xdc>
 800b54c:	b1bc      	cbz	r4, 800b57e <pbuf_copy+0xd6>
 800b54e:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <pbuf_copy+0xf8>)
 800b550:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b554:	4916      	ldr	r1, [pc, #88]	; (800b5b0 <pbuf_copy+0x108>)
 800b556:	e7b5      	b.n	800b4c4 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b558:	8962      	ldrh	r2, [r4, #10]
 800b55a:	8923      	ldrh	r3, [r4, #8]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d114      	bne.n	800b58a <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	b193      	cbz	r3, 800b58a <pbuf_copy+0xe2>
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <pbuf_copy+0xf8>)
 800b566:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b56a:	4912      	ldr	r1, [pc, #72]	; (800b5b4 <pbuf_copy+0x10c>)
 800b56c:	480e      	ldr	r0, [pc, #56]	; (800b5a8 <pbuf_copy+0x100>)
 800b56e:	f005 fd17 	bl	8010fa0 <iprintf>
 800b572:	f06f 0005 	mvn.w	r0, #5
 800b576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d1b2      	bne.n	800b4e4 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b57e:	4620      	mov	r0, r4
 800b580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 800b584:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b586:	2c00      	cmp	r4, #0
 800b588:	d1e6      	bne.n	800b558 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b58a:	896a      	ldrh	r2, [r5, #10]
 800b58c:	892b      	ldrh	r3, [r5, #8]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d1f3      	bne.n	800b57a <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d0f0      	beq.n	800b57a <pbuf_copy+0xd2>
 800b598:	4b01      	ldr	r3, [pc, #4]	; (800b5a0 <pbuf_copy+0xf8>)
 800b59a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b59e:	e7e4      	b.n	800b56a <pbuf_copy+0xc2>
 800b5a0:	080131e1 	.word	0x080131e1
 800b5a4:	080130ba 	.word	0x080130ba
 800b5a8:	08011dd4 	.word	0x08011dd4
 800b5ac:	08013101 	.word	0x08013101
 800b5b0:	0801311c 	.word	0x0801311c
 800b5b4:	08013129 	.word	0x08013129
 800b5b8:	080130ea 	.word	0x080130ea

0800b5bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	460f      	mov	r7, r1
 800b5c2:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	b950      	cbnz	r0, 800b5de <pbuf_copy_partial+0x22>
 800b5c8:	4635      	mov	r5, r6
 800b5ca:	4b1b      	ldr	r3, [pc, #108]	; (800b638 <pbuf_copy_partial+0x7c>)
 800b5cc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b5d0:	491a      	ldr	r1, [pc, #104]	; (800b63c <pbuf_copy_partial+0x80>)
 800b5d2:	481b      	ldr	r0, [pc, #108]	; (800b640 <pbuf_copy_partial+0x84>)
 800b5d4:	f005 fce4 	bl	8010fa0 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800b5d8:	4628      	mov	r0, r5
 800b5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b5de:	b169      	cbz	r1, 800b5fc <pbuf_copy_partial+0x40>
 800b5e0:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b5e2:	f1b8 0f00 	cmp.w	r8, #0
 800b5e6:	d0f7      	beq.n	800b5d8 <pbuf_copy_partial+0x1c>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	d0f5      	beq.n	800b5d8 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800b5ec:	b17b      	cbz	r3, 800b60e <pbuf_copy_partial+0x52>
 800b5ee:	8971      	ldrh	r1, [r6, #10]
 800b5f0:	428b      	cmp	r3, r1
 800b5f2:	d30c      	bcc.n	800b60e <pbuf_copy_partial+0x52>
      offset -= p->len;
 800b5f4:	1a5b      	subs	r3, r3, r1
 800b5f6:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b5f8:	6836      	ldr	r6, [r6, #0]
 800b5fa:	e7f2      	b.n	800b5e2 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b5fc:	4b0e      	ldr	r3, [pc, #56]	; (800b638 <pbuf_copy_partial+0x7c>)
 800b5fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b602:	4910      	ldr	r1, [pc, #64]	; (800b644 <pbuf_copy_partial+0x88>)
 800b604:	463d      	mov	r5, r7
 800b606:	480e      	ldr	r0, [pc, #56]	; (800b640 <pbuf_copy_partial+0x84>)
 800b608:	f005 fcca 	bl	8010fa0 <iprintf>
 800b60c:	e7e4      	b.n	800b5d8 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800b60e:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b610:	1978      	adds	r0, r7, r5
 800b612:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 800b614:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b616:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 800b618:	b2a4      	uxth	r4, r4
 800b61a:	4544      	cmp	r4, r8
 800b61c:	bf28      	it	cs
 800b61e:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b620:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 800b622:	4425      	add	r5, r4
      len -= buf_copy_len;
 800b624:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b628:	f005 fbfb 	bl	8010e22 <memcpy>
      copied_total += buf_copy_len;
 800b62c:	b2ad      	uxth	r5, r5
      offset = 0;
 800b62e:	2300      	movs	r3, #0
      len -= buf_copy_len;
 800b630:	fa1f f884 	uxth.w	r8, r4
 800b634:	e7e0      	b.n	800b5f8 <pbuf_copy_partial+0x3c>
 800b636:	bf00      	nop
 800b638:	080131e1 	.word	0x080131e1
 800b63c:	08013153 	.word	0x08013153
 800b640:	08011dd4 	.word	0x08011dd4
 800b644:	08013172 	.word	0x08013172

0800b648 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b648:	4a12      	ldr	r2, [pc, #72]	; (800b694 <tcp_new_port+0x4c>)
 800b64a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b64e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b650:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b652:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b656:	4e10      	ldr	r6, [pc, #64]	; (800b698 <tcp_new_port+0x50>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b658:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b65a:	f04f 0100 	mov.w	r1, #0
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b65e:	bf16      	itet	ne
 800b660:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b662:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b666:	b280      	uxthne	r0, r0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b668:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800b66c:	6824      	ldr	r4, [r4, #0]
 800b66e:	b924      	cbnz	r4, 800b67a <tcp_new_port+0x32>
 800b670:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b672:	2904      	cmp	r1, #4
 800b674:	d1f8      	bne.n	800b668 <tcp_new_port+0x20>
 800b676:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 800b67a:	8ae7      	ldrh	r7, [r4, #22]
 800b67c:	4287      	cmp	r7, r0
 800b67e:	d106      	bne.n	800b68e <tcp_new_port+0x46>
 800b680:	3b01      	subs	r3, #1
 800b682:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e7      	bne.n	800b658 <tcp_new_port+0x10>
 800b688:	8010      	strh	r0, [r2, #0]
          return 0;
 800b68a:	4618      	mov	r0, r3
 800b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b68e:	68e4      	ldr	r4, [r4, #12]
 800b690:	e7ed      	b.n	800b66e <tcp_new_port+0x26>
 800b692:	bf00      	nop
 800b694:	2000002c 	.word	0x2000002c
 800b698:	080133d8 	.word	0x080133d8

0800b69c <tcp_close_shutdown_fin>:
{
 800b69c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b69e:	4604      	mov	r4, r0
 800b6a0:	b930      	cbnz	r0, 800b6b0 <tcp_close_shutdown_fin+0x14>
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <tcp_close_shutdown_fin+0x54>)
 800b6a4:	f240 124d 	movw	r2, #333	; 0x14d
 800b6a8:	4912      	ldr	r1, [pc, #72]	; (800b6f4 <tcp_close_shutdown_fin+0x58>)
 800b6aa:	4813      	ldr	r0, [pc, #76]	; (800b6f8 <tcp_close_shutdown_fin+0x5c>)
 800b6ac:	f005 fc78 	bl	8010fa0 <iprintf>
  switch (pcb->state) {
 800b6b0:	7d23      	ldrb	r3, [r4, #20]
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d003      	beq.n	800b6be <tcp_close_shutdown_fin+0x22>
 800b6b6:	2b07      	cmp	r3, #7
 800b6b8:	d00c      	beq.n	800b6d4 <tcp_close_shutdown_fin+0x38>
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d108      	bne.n	800b6d0 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f002 fda2 	bl	800e208 <tcp_send_fin>
    if (err == ERR_OK) {
 800b6c4:	b988      	cbnz	r0, 800b6ea <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 800b6c6:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800b6c8:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f002 fdf4 	bl	800e2b8 <tcp_output>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f002 fd97 	bl	800e208 <tcp_send_fin>
    if (err == ERR_OK) {
 800b6da:	b930      	cbnz	r0, 800b6ea <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 800b6dc:	2309      	movs	r3, #9
 800b6de:	e7f3      	b.n	800b6c8 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 800b6e0:	7ea3      	ldrb	r3, [r4, #26]
 800b6e2:	f043 0308 	orr.w	r3, r3, #8
 800b6e6:	76a3      	strb	r3, [r4, #26]
 800b6e8:	e7f2      	b.n	800b6d0 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d0f8      	beq.n	800b6e0 <tcp_close_shutdown_fin+0x44>
}
 800b6ee:	bd10      	pop	{r4, pc}
 800b6f0:	08013346 	.word	0x08013346
 800b6f4:	08013375 	.word	0x08013375
 800b6f8:	08011dd4 	.word	0x08011dd4

0800b6fc <tcp_init>:
{
 800b6fc:	4770      	bx	lr
	...

0800b700 <tcp_bind>:
{
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800b702:	4d1e      	ldr	r5, [pc, #120]	; (800b77c <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b704:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800b706:	2900      	cmp	r1, #0
 800b708:	bf18      	it	ne
 800b70a:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b70c:	b140      	cbz	r0, 800b720 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b70e:	7d03      	ldrb	r3, [r0, #20]
 800b710:	b14b      	cbz	r3, 800b726 <tcp_bind+0x26>
 800b712:	4b1b      	ldr	r3, [pc, #108]	; (800b780 <tcp_bind+0x80>)
 800b714:	f44f 7211 	mov.w	r2, #580	; 0x244
 800b718:	491a      	ldr	r1, [pc, #104]	; (800b784 <tcp_bind+0x84>)
 800b71a:	481b      	ldr	r0, [pc, #108]	; (800b788 <tcp_bind+0x88>)
 800b71c:	f005 fc40 	bl	8010fa0 <iprintf>
    return ERR_VAL;
 800b720:	f06f 0005 	mvn.w	r0, #5
}
 800b724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 800b726:	b932      	cbnz	r2, 800b736 <tcp_bind+0x36>
    port = tcp_new_port();
 800b728:	f7ff ff8e 	bl	800b648 <tcp_new_port>
    if (port == 0) {
 800b72c:	4602      	mov	r2, r0
 800b72e:	b950      	cbnz	r0, 800b746 <tcp_bind+0x46>
      return ERR_BUF;
 800b730:	f06f 0001 	mvn.w	r0, #1
 800b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b736:	4f15      	ldr	r7, [pc, #84]	; (800b78c <tcp_bind+0x8c>)
 800b738:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b73c:	6808      	ldr	r0, [r1, #0]
 800b73e:	b970      	cbnz	r0, 800b75e <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 800b740:	3301      	adds	r3, #1
 800b742:	2b04      	cmp	r3, #4
 800b744:	d1f8      	bne.n	800b738 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	b103      	cbz	r3, 800b74c <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b74a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <tcp_bind+0x90>)
  pcb->local_port = port;
 800b74e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	601c      	str	r4, [r3, #0]
 800b754:	60e2      	str	r2, [r4, #12]
 800b756:	f003 f8cf 	bl	800e8f8 <tcp_timer_needed>
  return ERR_OK;
 800b75a:	2000      	movs	r0, #0
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800b75e:	8ac1      	ldrh	r1, [r0, #22]
 800b760:	4291      	cmp	r1, r2
 800b762:	d105      	bne.n	800b770 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b764:	6806      	ldr	r6, [r0, #0]
 800b766:	b12e      	cbz	r6, 800b774 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800b768:	6829      	ldr	r1, [r5, #0]
 800b76a:	b119      	cbz	r1, 800b774 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b76c:	428e      	cmp	r6, r1
 800b76e:	d001      	beq.n	800b774 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b770:	68c0      	ldr	r0, [r0, #12]
 800b772:	e7e4      	b.n	800b73e <tcp_bind+0x3e>
              return ERR_USE;
 800b774:	f06f 0007 	mvn.w	r0, #7
 800b778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	08012a38 	.word	0x08012a38
 800b780:	08013346 	.word	0x08013346
 800b784:	08013305 	.word	0x08013305
 800b788:	08011dd4 	.word	0x08011dd4
 800b78c:	080133d8 	.word	0x080133d8
 800b790:	2000bb3c 	.word	0x2000bb3c

0800b794 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b794:	7d03      	ldrb	r3, [r0, #20]
{
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	4605      	mov	r5, r0
 800b79a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b79c:	b16b      	cbz	r3, 800b7ba <tcp_listen_with_backlog_and_err+0x26>
 800b79e:	4b23      	ldr	r3, [pc, #140]	; (800b82c <tcp_listen_with_backlog_and_err+0x98>)
 800b7a0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800b7a4:	4922      	ldr	r1, [pc, #136]	; (800b830 <tcp_listen_with_backlog_and_err+0x9c>)
  struct tcp_pcb_listen *lpcb = NULL;
 800b7a6:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b7a8:	4822      	ldr	r0, [pc, #136]	; (800b834 <tcp_listen_with_backlog_and_err+0xa0>)
 800b7aa:	f005 fbf9 	bl	8010fa0 <iprintf>
 800b7ae:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 800b7b2:	b106      	cbz	r6, 800b7b6 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 800b7b4:	7033      	strb	r3, [r6, #0]
}
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b7ba:	2002      	movs	r0, #2
 800b7bc:	f7ff fab4 	bl	800ad28 <memp_malloc>
  if (lpcb == NULL) {
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d02f      	beq.n	800b826 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 800b7c6:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800b7c8:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800b7ca:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800b7cc:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800b7ce:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800b7d0:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800b7d2:	7d6a      	ldrb	r2, [r5, #21]
 800b7d4:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800b7d6:	7a2a      	ldrb	r2, [r5, #8]
 800b7d8:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800b7da:	7aaa      	ldrb	r2, [r5, #10]
 800b7dc:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 800b7de:	7a6a      	ldrb	r2, [r5, #9]
 800b7e0:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b7e2:	682a      	ldr	r2, [r5, #0]
 800b7e4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800b7e6:	b13b      	cbz	r3, 800b7f8 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7e8:	4a13      	ldr	r2, [pc, #76]	; (800b838 <tcp_listen_with_backlog_and_err+0xa4>)
 800b7ea:	6813      	ldr	r3, [r2, #0]
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	d112      	bne.n	800b816 <tcp_listen_with_backlog_and_err+0x82>
 800b7f0:	68eb      	ldr	r3, [r5, #12]
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	f7ff fab0 	bl	800ad60 <memp_free>
  lpcb->accept = tcp_accept_null;
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <tcp_listen_with_backlog_and_err+0xa8>)
 800b802:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b804:	4b0e      	ldr	r3, [pc, #56]	; (800b840 <tcp_listen_with_backlog_and_err+0xac>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	601c      	str	r4, [r3, #0]
 800b80a:	60e2      	str	r2, [r4, #12]
 800b80c:	f003 f874 	bl	800e8f8 <tcp_timer_needed>
  res = ERR_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	e7ce      	b.n	800b7b2 <tcp_listen_with_backlog_and_err+0x1e>
 800b814:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0ec      	beq.n	800b7f4 <tcp_listen_with_backlog_and_err+0x60>
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	4295      	cmp	r5, r2
 800b81e:	d1f9      	bne.n	800b814 <tcp_listen_with_backlog_and_err+0x80>
 800b820:	68ea      	ldr	r2, [r5, #12]
 800b822:	60da      	str	r2, [r3, #12]
 800b824:	e7e6      	b.n	800b7f4 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 800b826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b82a:	e7c2      	b.n	800b7b2 <tcp_listen_with_backlog_and_err+0x1e>
 800b82c:	08013346 	.word	0x08013346
 800b830:	080133b5 	.word	0x080133b5
 800b834:	08011dd4 	.word	0x08011dd4
 800b838:	2000bb3c 	.word	0x2000bb3c
 800b83c:	0800c2b3 	.word	0x0800c2b3
 800b840:	2000bb38 	.word	0x2000bb38

0800b844 <tcp_update_rcv_ann_wnd>:
{
 800b844:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b846:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 800b848:	4604      	mov	r4, r0
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b84a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b84c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b850:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b852:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b856:	4428      	add	r0, r5
 800b858:	bf94      	ite	ls
 800b85a:	1a82      	subls	r2, r0, r2
 800b85c:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 800b860:	2a00      	cmp	r2, #0
 800b862:	db01      	blt.n	800b868 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b864:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b866:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b868:	1aea      	subs	r2, r5, r3
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	dd02      	ble.n	800b874 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800b86e:	2000      	movs	r0, #0
 800b870:	8560      	strh	r0, [r4, #42]	; 0x2a
 800b872:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b874:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b876:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800b87a:	d306      	bcc.n	800b88a <tcp_update_rcv_ann_wnd+0x46>
 800b87c:	4b04      	ldr	r3, [pc, #16]	; (800b890 <tcp_update_rcv_ann_wnd+0x4c>)
 800b87e:	f44f 7242 	mov.w	r2, #776	; 0x308
 800b882:	4904      	ldr	r1, [pc, #16]	; (800b894 <tcp_update_rcv_ann_wnd+0x50>)
 800b884:	4804      	ldr	r0, [pc, #16]	; (800b898 <tcp_update_rcv_ann_wnd+0x54>)
 800b886:	f005 fb8b 	bl	8010fa0 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b88a:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800b88c:	2000      	movs	r0, #0
}
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	08013346 	.word	0x08013346
 800b894:	0801363c 	.word	0x0801363c
 800b898:	08011dd4 	.word	0x08011dd4

0800b89c <tcp_recved>:
{
 800b89c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b89e:	7d03      	ldrb	r3, [r0, #20]
{
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d106      	bne.n	800b8b6 <tcp_recved+0x1a>
 800b8a8:	4b17      	ldr	r3, [pc, #92]	; (800b908 <tcp_recved+0x6c>)
 800b8aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b8ae:	4917      	ldr	r1, [pc, #92]	; (800b90c <tcp_recved+0x70>)
 800b8b0:	4817      	ldr	r0, [pc, #92]	; (800b910 <tcp_recved+0x74>)
 800b8b2:	f005 fb75 	bl	8010fa0 <iprintf>
  pcb->rcv_wnd += len;
 800b8b6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b8b8:	4429      	add	r1, r5
 800b8ba:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b8bc:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800b8c0:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b8c2:	d911      	bls.n	800b8e8 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b8c4:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800b8c8:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff ffba 	bl	800b844 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b8d0:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800b8d4:	db17      	blt.n	800b906 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800b8d6:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800b8d8:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b8da:	f043 0302 	orr.w	r3, r3, #2
 800b8de:	76a3      	strb	r3, [r4, #26]
}
 800b8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800b8e4:	f002 bce8 	b.w	800e2b8 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d1ee      	bne.n	800b8ca <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b8ec:	7d23      	ldrb	r3, [r4, #20]
 800b8ee:	2b07      	cmp	r3, #7
 800b8f0:	d0e8      	beq.n	800b8c4 <tcp_recved+0x28>
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d0e6      	beq.n	800b8c4 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b8f6:	4b04      	ldr	r3, [pc, #16]	; (800b908 <tcp_recved+0x6c>)
 800b8f8:	f240 322d 	movw	r2, #813	; 0x32d
 800b8fc:	4905      	ldr	r1, [pc, #20]	; (800b914 <tcp_recved+0x78>)
 800b8fe:	4804      	ldr	r0, [pc, #16]	; (800b910 <tcp_recved+0x74>)
 800b900:	f005 fb4e 	bl	8010fa0 <iprintf>
 800b904:	e7e1      	b.n	800b8ca <tcp_recved+0x2e>
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	08013346 	.word	0x08013346
 800b90c:	0801347c 	.word	0x0801347c
 800b910:	08011dd4 	.word	0x08011dd4
 800b914:	080134a2 	.word	0x080134a2

0800b918 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b918:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800b91a:	4604      	mov	r4, r0
 800b91c:	b148      	cbz	r0, 800b932 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800b91e:	6840      	ldr	r0, [r0, #4]
 800b920:	b108      	cbz	r0, 800b926 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b922:	f7ff fba3 	bl	800b06c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b926:	4621      	mov	r1, r4
 800b928:	2003      	movs	r0, #3
  }
}
 800b92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800b92e:	f7ff ba17 	b.w	800ad60 <memp_free>
 800b932:	bd10      	pop	{r4, pc}

0800b934 <tcp_segs_free>:
{
 800b934:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800b936:	b900      	cbnz	r0, 800b93a <tcp_segs_free+0x6>
}
 800b938:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800b93a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800b93c:	f7ff ffec 	bl	800b918 <tcp_seg_free>
    seg = next;
 800b940:	4620      	mov	r0, r4
 800b942:	e7f8      	b.n	800b936 <tcp_segs_free+0x2>

0800b944 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b948:	2003      	movs	r0, #3
 800b94a:	f7ff f9ed 	bl	800ad28 <memp_malloc>
  if (cseg == NULL) {
 800b94e:	4605      	mov	r5, r0
 800b950:	b160      	cbz	r0, 800b96c <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b952:	4620      	mov	r0, r4
 800b954:	462b      	mov	r3, r5
 800b956:	f104 0210 	add.w	r2, r4, #16
 800b95a:	f850 1b04 	ldr.w	r1, [r0], #4
 800b95e:	4290      	cmp	r0, r2
 800b960:	f843 1b04 	str.w	r1, [r3], #4
 800b964:	d1f9      	bne.n	800b95a <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800b966:	6868      	ldr	r0, [r5, #4]
 800b968:	f7ff fd3e 	bl	800b3e8 <pbuf_ref>
  return cseg;
}
 800b96c:	4628      	mov	r0, r5
 800b96e:	bd38      	pop	{r3, r4, r5, pc}

0800b970 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b970:	b100      	cbz	r0, 800b974 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800b972:	6101      	str	r1, [r0, #16]
 800b974:	4770      	bx	lr
	...

0800b978 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800b97c:	4604      	mov	r4, r0
 800b97e:	b158      	cbz	r0, 800b998 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b980:	7d03      	ldrb	r3, [r0, #20]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d106      	bne.n	800b994 <tcp_recv+0x1c>
 800b986:	4b05      	ldr	r3, [pc, #20]	; (800b99c <tcp_recv+0x24>)
 800b988:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800b98c:	4904      	ldr	r1, [pc, #16]	; (800b9a0 <tcp_recv+0x28>)
 800b98e:	4805      	ldr	r0, [pc, #20]	; (800b9a4 <tcp_recv+0x2c>)
 800b990:	f005 fb06 	bl	8010fa0 <iprintf>
    pcb->recv = recv;
 800b994:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800b998:	bd38      	pop	{r3, r4, r5, pc}
 800b99a:	bf00      	nop
 800b99c:	08013346 	.word	0x08013346
 800b9a0:	08013455 	.word	0x08013455
 800b9a4:	08011dd4 	.word	0x08011dd4

0800b9a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	b150      	cbz	r0, 800b9c6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b9b0:	7d03      	ldrb	r3, [r0, #20]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d106      	bne.n	800b9c4 <tcp_sent+0x1c>
 800b9b6:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <tcp_sent+0x20>)
 800b9b8:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800b9bc:	4903      	ldr	r1, [pc, #12]	; (800b9cc <tcp_sent+0x24>)
 800b9be:	4804      	ldr	r0, [pc, #16]	; (800b9d0 <tcp_sent+0x28>)
 800b9c0:	f005 faee 	bl	8010fa0 <iprintf>
    pcb->sent = sent;
 800b9c4:	67e5      	str	r5, [r4, #124]	; 0x7c
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	08013346 	.word	0x08013346
 800b9cc:	080134c3 	.word	0x080134c3
 800b9d0:	08011dd4 	.word	0x08011dd4

0800b9d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800b9d8:	4604      	mov	r4, r0
 800b9da:	b158      	cbz	r0, 800b9f4 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b9dc:	7d03      	ldrb	r3, [r0, #20]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d106      	bne.n	800b9f0 <tcp_err+0x1c>
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <tcp_err+0x24>)
 800b9e4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800b9e8:	4904      	ldr	r1, [pc, #16]	; (800b9fc <tcp_err+0x28>)
 800b9ea:	4805      	ldr	r0, [pc, #20]	; (800ba00 <tcp_err+0x2c>)
 800b9ec:	f005 fad8 	bl	8010fa0 <iprintf>
    pcb->errf = err;
 800b9f0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800b9f4:	bd38      	pop	{r3, r4, r5, pc}
 800b9f6:	bf00      	nop
 800b9f8:	08013346 	.word	0x08013346
 800b9fc:	08013381 	.word	0x08013381
 800ba00:	08011dd4 	.word	0x08011dd4

0800ba04 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ba04:	b118      	cbz	r0, 800ba0e <tcp_accept+0xa>
 800ba06:	7d03      	ldrb	r3, [r0, #20]
 800ba08:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800ba0a:	bf08      	it	eq
 800ba0c:	6181      	streq	r1, [r0, #24]
 800ba0e:	4770      	bx	lr

0800ba10 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ba10:	7d03      	ldrb	r3, [r0, #20]
 800ba12:	2b01      	cmp	r3, #1
{
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	4604      	mov	r4, r0
 800ba18:	460e      	mov	r6, r1
 800ba1a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ba1c:	d106      	bne.n	800ba2c <tcp_poll+0x1c>
 800ba1e:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <tcp_poll+0x24>)
 800ba20:	f240 7203 	movw	r2, #1795	; 0x703
 800ba24:	4904      	ldr	r1, [pc, #16]	; (800ba38 <tcp_poll+0x28>)
 800ba26:	4805      	ldr	r0, [pc, #20]	; (800ba3c <tcp_poll+0x2c>)
 800ba28:	f005 faba 	bl	8010fa0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ba2c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ba30:	7725      	strb	r5, [r4, #28]
 800ba32:	bd70      	pop	{r4, r5, r6, pc}
 800ba34:	08013346 	.word	0x08013346
 800ba38:	08013437 	.word	0x08013437
 800ba3c:	08011dd4 	.word	0x08011dd4

0800ba40 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ba40:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800ba42:	7d03      	ldrb	r3, [r0, #20]
{
 800ba44:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d919      	bls.n	800ba7e <tcp_pcb_purge+0x3e>
 800ba4a:	2b0a      	cmp	r3, #10
 800ba4c:	d017      	beq.n	800ba7e <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ba4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ba50:	b118      	cbz	r0, 800ba5a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ba52:	f7ff fb0b 	bl	800b06c <pbuf_free>
      pcb->refused_data = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800ba5a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 800ba5c:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800ba5e:	f7ff ff69 	bl	800b934 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ba62:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 800ba66:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 800ba68:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 800ba6a:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800ba6c:	f7ff ff62 	bl	800b934 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ba70:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ba72:	f7ff ff5f 	bl	800b934 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ba76:	66a5      	str	r5, [r4, #104]	; 0x68
 800ba78:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ba7a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}

0800ba80 <tcp_slowtmr>:
{
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800ba84:	4eb0      	ldr	r6, [pc, #704]	; (800bd48 <tcp_slowtmr+0x2c8>)
{
 800ba86:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 800ba88:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800bd7c <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 800ba8c:	6833      	ldr	r3, [r6, #0]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800ba92:	4bae      	ldr	r3, [pc, #696]	; (800bd4c <tcp_slowtmr+0x2cc>)
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	3201      	adds	r2, #1
 800ba9a:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800ba9c:	4fac      	ldr	r7, [pc, #688]	; (800bd50 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 800ba9e:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800baa2:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800bd80 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 800baa6:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800baa8:	b96c      	cbnz	r4, 800bac6 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 800baaa:	4faa      	ldr	r7, [pc, #680]	; (800bd54 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800baac:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800bd80 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 800bab0:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bab2:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 800bd84 <tcp_slowtmr+0x304>
 800bab6:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 800bd5c <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 800baba:	2d00      	cmp	r5, #0
 800babc:	f040 8185 	bne.w	800bdca <tcp_slowtmr+0x34a>
}
 800bac0:	b005      	add	sp, #20
 800bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bac6:	7d23      	ldrb	r3, [r4, #20]
 800bac8:	b933      	cbnz	r3, 800bad8 <tcp_slowtmr+0x58>
 800baca:	464b      	mov	r3, r9
 800bacc:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800bad0:	49a1      	ldr	r1, [pc, #644]	; (800bd58 <tcp_slowtmr+0x2d8>)
 800bad2:	48a2      	ldr	r0, [pc, #648]	; (800bd5c <tcp_slowtmr+0x2dc>)
 800bad4:	f005 fa64 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bad8:	7d23      	ldrb	r3, [r4, #20]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d106      	bne.n	800baec <tcp_slowtmr+0x6c>
 800bade:	464b      	mov	r3, r9
 800bae0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800bae4:	499e      	ldr	r1, [pc, #632]	; (800bd60 <tcp_slowtmr+0x2e0>)
 800bae6:	489d      	ldr	r0, [pc, #628]	; (800bd5c <tcp_slowtmr+0x2dc>)
 800bae8:	f005 fa5a 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800baec:	7d23      	ldrb	r3, [r4, #20]
 800baee:	2b0a      	cmp	r3, #10
 800baf0:	d106      	bne.n	800bb00 <tcp_slowtmr+0x80>
 800baf2:	464b      	mov	r3, r9
 800baf4:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800baf8:	499a      	ldr	r1, [pc, #616]	; (800bd64 <tcp_slowtmr+0x2e4>)
 800bafa:	4898      	ldr	r0, [pc, #608]	; (800bd5c <tcp_slowtmr+0x2dc>)
 800bafc:	f005 fa50 	bl	8010fa0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	7f62      	ldrb	r2, [r4, #29]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d104      	bne.n	800bb14 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800bb0a:	68e5      	ldr	r5, [r4, #12]
 800bb0c:	4644      	mov	r4, r8
      continue;
 800bb0e:	46a0      	mov	r8, r4
 800bb10:	462c      	mov	r4, r5
 800bb12:	e7c9      	b.n	800baa8 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb14:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800bb16:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb18:	2902      	cmp	r1, #2
 800bb1a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800bb1e:	d102      	bne.n	800bb26 <tcp_slowtmr+0xa6>
 800bb20:	2a05      	cmp	r2, #5
 800bb22:	f200 80e6 	bhi.w	800bcf2 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800bb26:	2a0b      	cmp	r2, #11
 800bb28:	f200 80e3 	bhi.w	800bcf2 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 800bb2c:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	f000 80a6 	beq.w	800bc84 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800bb38:	488b      	ldr	r0, [pc, #556]	; (800bd68 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 800bb3a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800bb3e:	4483      	add	fp, r0
 800bb40:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800bb44:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800bb46:	bf84      	itt	hi
 800bb48:	3301      	addhi	r3, #1
 800bb4a:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800bb4e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800bb52:	4293      	cmp	r3, r2
 800bb54:	f080 8085 	bcs.w	800bc62 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 800bb58:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 800bb5c:	7d23      	ldrb	r3, [r4, #20]
 800bb5e:	2b06      	cmp	r3, #6
 800bb60:	d10b      	bne.n	800bb7a <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 800bb62:	7ea2      	ldrb	r2, [r4, #26]
 800bb64:	06d2      	lsls	r2, r2, #27
 800bb66:	d508      	bpl.n	800bb7a <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb68:	6832      	ldr	r2, [r6, #0]
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	1a52      	subs	r2, r2, r1
 800bb6e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800bb70:	bf84      	itt	hi
 800bb72:	f10b 0b01 	addhi.w	fp, fp, #1
 800bb76:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb7a:	7a25      	ldrb	r5, [r4, #8]
 800bb7c:	f015 0508 	ands.w	r5, r5, #8
 800bb80:	d019      	beq.n	800bbb6 <tcp_slowtmr+0x136>
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d002      	beq.n	800bb8c <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 800bb86:	2b07      	cmp	r3, #7
 800bb88:	f040 80c8 	bne.w	800bd1c <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800bb8c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800bb90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb94:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800bb96:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb9a:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800bb9c:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bba0:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800bba2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bba6:	4291      	cmp	r1, r2
 800bba8:	f240 80a6 	bls.w	800bcf8 <tcp_slowtmr+0x278>
        ++pcb_remove;
 800bbac:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800bbb0:	2501      	movs	r5, #1
        ++pcb_remove;
 800bbb2:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 800bbb6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bbb8:	b168      	cbz	r0, 800bbd6 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800bbba:	6833      	ldr	r3, [r6, #0]
 800bbbc:	6a22      	ldr	r2, [r4, #32]
 800bbbe:	1a9a      	subs	r2, r3, r2
 800bbc0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800bbc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800bbc8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bbcc:	d303      	bcc.n	800bbd6 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 800bbce:	f7ff feb1 	bl	800b934 <tcp_segs_free>
      pcb->ooseq = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800bbd6:	7d23      	ldrb	r3, [r4, #20]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	f040 80a1 	bne.w	800bd20 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbde:	6833      	ldr	r3, [r6, #0]
 800bbe0:	6a22      	ldr	r2, [r4, #32]
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bbe6:	d803      	bhi.n	800bbf0 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 800bbe8:	f1bb 0f00 	cmp.w	fp, #0
 800bbec:	f000 80cc 	beq.w	800bd88 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 800bbf0:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800bbf2:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800bbf6:	f7ff ff23 	bl	800ba40 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bbfa:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 800bbfc:	f1b8 0f00 	cmp.w	r8, #0
 800bc00:	f000 8096 	beq.w	800bd30 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc04:	429c      	cmp	r4, r3
 800bc06:	d106      	bne.n	800bc16 <tcp_slowtmr+0x196>
 800bc08:	464b      	mov	r3, r9
 800bc0a:	f240 4289 	movw	r2, #1161	; 0x489
 800bc0e:	4957      	ldr	r1, [pc, #348]	; (800bd6c <tcp_slowtmr+0x2ec>)
 800bc10:	4852      	ldr	r0, [pc, #328]	; (800bd5c <tcp_slowtmr+0x2dc>)
 800bc12:	f005 f9c5 	bl	8010fa0 <iprintf>
        prev->next = pcb->next;
 800bc16:	68e3      	ldr	r3, [r4, #12]
 800bc18:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 800bc1c:	b14d      	cbz	r5, 800bc32 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bc1e:	8b23      	ldrh	r3, [r4, #24]
 800bc20:	4622      	mov	r2, r4
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	8ae3      	ldrh	r3, [r4, #22]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	1d23      	adds	r3, r4, #4
 800bc2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bc2e:	f002 fcc1 	bl	800e5b4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800bc32:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 800bc34:	4621      	mov	r1, r4
 800bc36:	2001      	movs	r0, #1
      pcb = pcb->next;
 800bc38:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800bc3a:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800bc3c:	f7ff f890 	bl	800ad60 <memp_free>
      tcp_active_pcbs_changed = 0;
 800bc40:	2200      	movs	r2, #0
 800bc42:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bc46:	f1bb 0f00 	cmp.w	fp, #0
 800bc4a:	d004      	beq.n	800bc56 <tcp_slowtmr+0x1d6>
 800bc4c:	9b03      	ldr	r3, [sp, #12]
 800bc4e:	f06f 010c 	mvn.w	r1, #12
 800bc52:	4618      	mov	r0, r3
 800bc54:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800bc56:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f43f af56 	beq.w	800bb0c <tcp_slowtmr+0x8c>
 800bc60:	e71c      	b.n	800ba9c <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800bc62:	4620      	mov	r0, r4
 800bc64:	f002 fd96 	bl	800e794 <tcp_zero_window_probe>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f47f af75 	bne.w	800bb58 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bc6e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800bc72:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bc76:	2b06      	cmp	r3, #6
 800bc78:	f63f af6e 	bhi.w	800bb58 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800bc82:	e769      	b.n	800bb58 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 800bc84:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bc88:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800bc8a:	bfa4      	itt	ge
 800bc8c:	3301      	addge	r3, #1
 800bc8e:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800bc90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f43f af60 	beq.w	800bb58 <tcp_slowtmr+0xd8>
 800bc98:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800bc9c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800bca0:	4298      	cmp	r0, r3
 800bca2:	f6ff af59 	blt.w	800bb58 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 800bca6:	2902      	cmp	r1, #2
 800bca8:	d00a      	beq.n	800bcc0 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bcaa:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800bcae:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800bcb2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800bcb6:	492e      	ldr	r1, [pc, #184]	; (800bd70 <tcp_slowtmr+0x2f0>)
 800bcb8:	5c8a      	ldrb	r2, [r1, r2]
 800bcba:	4093      	lsls	r3, r2
 800bcbc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800bcc0:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bcc2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bcc6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 800bcc8:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800bcca:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bccc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 800bcd0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	bf28      	it	cs
 800bcd8:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bcda:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 800bcdc:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bcde:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 800bce0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bce4:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800bce6:	bf38      	it	cc
 800bce8:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 800bcec:	f002 fcbc 	bl	800e668 <tcp_rexmit_rto>
 800bcf0:	e734      	b.n	800bb5c <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800bcf2:	f04f 0b01 	mov.w	fp, #1
 800bcf6:	e731      	b.n	800bb5c <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bcf8:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800bcfc:	4a1d      	ldr	r2, [pc, #116]	; (800bd74 <tcp_slowtmr+0x2f4>)
 800bcfe:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800bd02:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd06:	4299      	cmp	r1, r3
 800bd08:	d908      	bls.n	800bd1c <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f002 fd18 	bl	800e740 <tcp_keepalive>
        if (err == ERR_OK) {
 800bd10:	b920      	cbnz	r0, 800bd1c <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 800bd12:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800bd16:	3301      	adds	r3, #1
 800bd18:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800bd1c:	2500      	movs	r5, #0
 800bd1e:	e74a      	b.n	800bbb6 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 800bd20:	2b09      	cmp	r3, #9
 800bd22:	f47f af61 	bne.w	800bbe8 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bd26:	6833      	ldr	r3, [r6, #0]
 800bd28:	6a22      	ldr	r2, [r4, #32]
 800bd2a:	1a9b      	subs	r3, r3, r2
 800bd2c:	2bf0      	cmp	r3, #240	; 0xf0
 800bd2e:	e75a      	b.n	800bbe6 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bd30:	429c      	cmp	r4, r3
 800bd32:	d006      	beq.n	800bd42 <tcp_slowtmr+0x2c2>
 800bd34:	464b      	mov	r3, r9
 800bd36:	f240 428d 	movw	r2, #1165	; 0x48d
 800bd3a:	490f      	ldr	r1, [pc, #60]	; (800bd78 <tcp_slowtmr+0x2f8>)
 800bd3c:	4807      	ldr	r0, [pc, #28]	; (800bd5c <tcp_slowtmr+0x2dc>)
 800bd3e:	f005 f92f 	bl	8010fa0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bd42:	68e3      	ldr	r3, [r4, #12]
 800bd44:	603b      	str	r3, [r7, #0]
 800bd46:	e769      	b.n	800bc1c <tcp_slowtmr+0x19c>
 800bd48:	2000bb34 	.word	0x2000bb34
 800bd4c:	2000835a 	.word	0x2000835a
 800bd50:	2000bb30 	.word	0x2000bb30
 800bd54:	2000bb40 	.word	0x2000bb40
 800bd58:	080134ea 	.word	0x080134ea
 800bd5c:	08011dd4 	.word	0x08011dd4
 800bd60:	08013514 	.word	0x08013514
 800bd64:	0801353e 	.word	0x0801353e
 800bd68:	08013430 	.word	0x08013430
 800bd6c:	0801356b 	.word	0x0801356b
 800bd70:	080132f8 	.word	0x080132f8
 800bd74:	000124f8 	.word	0x000124f8
 800bd78:	08013596 	.word	0x08013596
 800bd7c:	2000bb2c 	.word	0x2000bb2c
 800bd80:	08013346 	.word	0x08013346
 800bd84:	080135c0 	.word	0x080135c0
      ++prev->polltmr;
 800bd88:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800bd8a:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 800bd8c:	3301      	adds	r3, #1
      pcb = pcb->next;
 800bd8e:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800bd90:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800bd92:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800bd94:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800bd96:	f63f aeba 	bhi.w	800bb0e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800bd9a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800bd9e:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800bda2:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 800bda6:	b173      	cbz	r3, 800bdc6 <tcp_slowtmr+0x346>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	6920      	ldr	r0, [r4, #16]
 800bdac:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800bdae:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f47f ae72 	bne.w	800ba9c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f47f aea8 	bne.w	800bb0e <tcp_slowtmr+0x8e>
          tcp_output(prev);
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f002 fa7a 	bl	800e2b8 <tcp_output>
 800bdc4:	e6a3      	b.n	800bb0e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	e7f1      	b.n	800bdae <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bdca:	7d2b      	ldrb	r3, [r5, #20]
 800bdcc:	2b0a      	cmp	r3, #10
 800bdce:	d006      	beq.n	800bdde <tcp_slowtmr+0x35e>
 800bdd0:	4643      	mov	r3, r8
 800bdd2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800bdd6:	4651      	mov	r1, sl
 800bdd8:	4648      	mov	r0, r9
 800bdda:	f005 f8e1 	bl	8010fa0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bdde:	6833      	ldr	r3, [r6, #0]
 800bde0:	6a2a      	ldr	r2, [r5, #32]
 800bde2:	1a9b      	subs	r3, r3, r2
 800bde4:	2bf0      	cmp	r3, #240	; 0xf0
 800bde6:	d816      	bhi.n	800be16 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 800bde8:	462c      	mov	r4, r5
 800bdea:	68ed      	ldr	r5, [r5, #12]
 800bdec:	e665      	b.n	800baba <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	d106      	bne.n	800be02 <tcp_slowtmr+0x382>
 800bdf4:	4643      	mov	r3, r8
 800bdf6:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800bdfa:	4910      	ldr	r1, [pc, #64]	; (800be3c <tcp_slowtmr+0x3bc>)
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f005 f8cf 	bl	8010fa0 <iprintf>
        prev->next = pcb->next;
 800be02:	68eb      	ldr	r3, [r5, #12]
 800be04:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800be06:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800be0a:	4629      	mov	r1, r5
 800be0c:	2001      	movs	r0, #1
 800be0e:	f7fe ffa7 	bl	800ad60 <memp_free>
      pcb = pcb->next;
 800be12:	465d      	mov	r5, fp
 800be14:	e651      	b.n	800baba <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800be16:	4628      	mov	r0, r5
 800be18:	f7ff fe12 	bl	800ba40 <tcp_pcb_purge>
      if (prev != NULL) {
 800be1c:	2c00      	cmp	r4, #0
 800be1e:	d1e6      	bne.n	800bdee <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	429d      	cmp	r5, r3
 800be24:	d006      	beq.n	800be34 <tcp_slowtmr+0x3b4>
 800be26:	4643      	mov	r3, r8
 800be28:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800be2c:	4904      	ldr	r1, [pc, #16]	; (800be40 <tcp_slowtmr+0x3c0>)
 800be2e:	4648      	mov	r0, r9
 800be30:	f005 f8b6 	bl	8010fa0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be34:	68eb      	ldr	r3, [r5, #12]
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	e7e5      	b.n	800be06 <tcp_slowtmr+0x386>
 800be3a:	bf00      	nop
 800be3c:	080135ef 	.word	0x080135ef
 800be40:	08013616 	.word	0x08013616

0800be44 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800be44:	6803      	ldr	r3, [r0, #0]
 800be46:	428b      	cmp	r3, r1
{
 800be48:	b510      	push	{r4, lr}
 800be4a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800be4c:	d137      	bne.n	800bebe <tcp_pcb_remove+0x7a>
 800be4e:	68cb      	ldr	r3, [r1, #12]
 800be50:	6003      	str	r3, [r0, #0]
 800be52:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800be54:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800be56:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800be58:	f7ff fdf2 	bl	800ba40 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800be5c:	7d23      	ldrb	r3, [r4, #20]
 800be5e:	2b0a      	cmp	r3, #10
 800be60:	d00a      	beq.n	800be78 <tcp_pcb_remove+0x34>
 800be62:	2b01      	cmp	r3, #1
 800be64:	d008      	beq.n	800be78 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800be66:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800be68:	07da      	lsls	r2, r3, #31
 800be6a:	d505      	bpl.n	800be78 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 800be6c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800be70:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 800be72:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800be74:	f002 fa20 	bl	800e2b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800be78:	7d23      	ldrb	r3, [r4, #20]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d01a      	beq.n	800beb4 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800be7e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be80:	b133      	cbz	r3, 800be90 <tcp_pcb_remove+0x4c>
 800be82:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <tcp_pcb_remove+0x8c>)
 800be84:	f240 7253 	movw	r2, #1875	; 0x753
 800be88:	4912      	ldr	r1, [pc, #72]	; (800bed4 <tcp_pcb_remove+0x90>)
 800be8a:	4813      	ldr	r0, [pc, #76]	; (800bed8 <tcp_pcb_remove+0x94>)
 800be8c:	f005 f888 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800be90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be92:	b133      	cbz	r3, 800bea2 <tcp_pcb_remove+0x5e>
 800be94:	4b0e      	ldr	r3, [pc, #56]	; (800bed0 <tcp_pcb_remove+0x8c>)
 800be96:	f240 7254 	movw	r2, #1876	; 0x754
 800be9a:	4910      	ldr	r1, [pc, #64]	; (800bedc <tcp_pcb_remove+0x98>)
 800be9c:	480e      	ldr	r0, [pc, #56]	; (800bed8 <tcp_pcb_remove+0x94>)
 800be9e:	f005 f87f 	bl	8010fa0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bea2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bea4:	b133      	cbz	r3, 800beb4 <tcp_pcb_remove+0x70>
 800bea6:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <tcp_pcb_remove+0x8c>)
 800bea8:	f240 7256 	movw	r2, #1878	; 0x756
 800beac:	490c      	ldr	r1, [pc, #48]	; (800bee0 <tcp_pcb_remove+0x9c>)
 800beae:	480a      	ldr	r0, [pc, #40]	; (800bed8 <tcp_pcb_remove+0x94>)
 800beb0:	f005 f876 	bl	8010fa0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800beb4:	2300      	movs	r3, #0
 800beb6:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800beb8:	82e3      	strh	r3, [r4, #22]
 800beba:	bd10      	pop	{r4, pc}
 800bebc:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0c7      	beq.n	800be52 <tcp_pcb_remove+0xe>
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	4294      	cmp	r4, r2
 800bec6:	d1f9      	bne.n	800bebc <tcp_pcb_remove+0x78>
 800bec8:	68e2      	ldr	r2, [r4, #12]
 800beca:	60da      	str	r2, [r3, #12]
 800becc:	e7c1      	b.n	800be52 <tcp_pcb_remove+0xe>
 800bece:	bf00      	nop
 800bed0:	08013346 	.word	0x08013346
 800bed4:	080133e8 	.word	0x080133e8
 800bed8:	08011dd4 	.word	0x08011dd4
 800bedc:	08013400 	.word	0x08013400
 800bee0:	08013419 	.word	0x08013419

0800bee4 <tcp_close_shutdown>:
{
 800bee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bee6:	7d03      	ldrb	r3, [r0, #20]
 800bee8:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800beea:	2900      	cmp	r1, #0
 800beec:	d049      	beq.n	800bf82 <tcp_close_shutdown+0x9e>
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d001      	beq.n	800bef6 <tcp_close_shutdown+0x12>
 800bef2:	2b07      	cmp	r3, #7
 800bef4:	d145      	bne.n	800bf82 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bef6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800bef8:	b91a      	cbnz	r2, 800bf02 <tcp_close_shutdown+0x1e>
 800befa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800befc:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800bf00:	d03f      	beq.n	800bf82 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf02:	7ea3      	ldrb	r3, [r4, #26]
 800bf04:	06db      	lsls	r3, r3, #27
 800bf06:	d406      	bmi.n	800bf16 <tcp_close_shutdown+0x32>
 800bf08:	4b3f      	ldr	r3, [pc, #252]	; (800c008 <tcp_close_shutdown+0x124>)
 800bf0a:	f240 120f 	movw	r2, #271	; 0x10f
 800bf0e:	493f      	ldr	r1, [pc, #252]	; (800c00c <tcp_close_shutdown+0x128>)
 800bf10:	483f      	ldr	r0, [pc, #252]	; (800c010 <tcp_close_shutdown+0x12c>)
 800bf12:	f005 f845 	bl	8010fa0 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf16:	8b23      	ldrh	r3, [r4, #24]
 800bf18:	4622      	mov	r2, r4
 800bf1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	8ae3      	ldrh	r3, [r4, #22]
 800bf20:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	1d23      	adds	r3, r4, #4
 800bf26:	f002 fb45 	bl	800e5b4 <tcp_rst>
      tcp_pcb_purge(pcb);
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff fd88 	bl	800ba40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bf30:	4a38      	ldr	r2, [pc, #224]	; (800c014 <tcp_close_shutdown+0x130>)
 800bf32:	6813      	ldr	r3, [r2, #0]
 800bf34:	429c      	cmp	r4, r3
 800bf36:	d115      	bne.n	800bf64 <tcp_close_shutdown+0x80>
 800bf38:	68e3      	ldr	r3, [r4, #12]
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2201      	movs	r2, #1
 800bf40:	60e3      	str	r3, [r4, #12]
 800bf42:	4b35      	ldr	r3, [pc, #212]	; (800c018 <tcp_close_shutdown+0x134>)
 800bf44:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800bf46:	7d23      	ldrb	r3, [r4, #20]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d113      	bne.n	800bf74 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 800bf4c:	230a      	movs	r3, #10
 800bf4e:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bf50:	4b32      	ldr	r3, [pc, #200]	; (800c01c <tcp_close_shutdown+0x138>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	601c      	str	r4, [r3, #0]
 800bf56:	60e2      	str	r2, [r4, #12]
 800bf58:	f002 fcce 	bl	800e8f8 <tcp_timer_needed>
}
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	b003      	add	sp, #12
 800bf60:	bd30      	pop	{r4, r5, pc}
 800bf62:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0e9      	beq.n	800bf3c <tcp_close_shutdown+0x58>
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	4294      	cmp	r4, r2
 800bf6c:	d1f9      	bne.n	800bf62 <tcp_close_shutdown+0x7e>
 800bf6e:	68e2      	ldr	r2, [r4, #12]
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	e7e3      	b.n	800bf3c <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 800bf74:	4b2a      	ldr	r3, [pc, #168]	; (800c020 <tcp_close_shutdown+0x13c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	429c      	cmp	r4, r3
 800bf7a:	d117      	bne.n	800bfac <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 800bf7c:	f001 fd34 	bl	800d9e8 <tcp_trigger_input_pcb_close>
 800bf80:	e7ec      	b.n	800bf5c <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d020      	beq.n	800bfc8 <tcp_close_shutdown+0xe4>
 800bf86:	d307      	bcc.n	800bf98 <tcp_close_shutdown+0xb4>
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d033      	beq.n	800bff4 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 800bf8c:	4620      	mov	r0, r4
}
 800bf8e:	b003      	add	sp, #12
 800bf90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 800bf94:	f7ff bb82 	b.w	800b69c <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 800bf98:	8ae3      	ldrh	r3, [r4, #22]
 800bf9a:	b13b      	cbz	r3, 800bfac <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf9c:	4a21      	ldr	r2, [pc, #132]	; (800c024 <tcp_close_shutdown+0x140>)
 800bf9e:	6813      	ldr	r3, [r2, #0]
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	d109      	bne.n	800bfb8 <tcp_close_shutdown+0xd4>
 800bfa4:	68e3      	ldr	r3, [r4, #12]
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800bfac:	4621      	mov	r1, r4
 800bfae:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 800bfb0:	f7fe fed6 	bl	800ad60 <memp_free>
    break;
 800bfb4:	e7d2      	b.n	800bf5c <tcp_close_shutdown+0x78>
 800bfb6:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0f5      	beq.n	800bfa8 <tcp_close_shutdown+0xc4>
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	4294      	cmp	r4, r2
 800bfc0:	d1f9      	bne.n	800bfb6 <tcp_close_shutdown+0xd2>
 800bfc2:	68e2      	ldr	r2, [r4, #12]
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	e7ef      	b.n	800bfa8 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800bfc8:	4917      	ldr	r1, [pc, #92]	; (800c028 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 800bfca:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800bfcc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800bfd0:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bfd2:	b94a      	cbnz	r2, 800bfe8 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d1f8      	bne.n	800bfcc <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4813      	ldr	r0, [pc, #76]	; (800c02c <tcp_close_shutdown+0x148>)
 800bfde:	f7ff ff31 	bl	800be44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	2002      	movs	r0, #2
 800bfe6:	e7e3      	b.n	800bfb0 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 800bfe8:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800bfea:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 800bfec:	bf08      	it	eq
 800bfee:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bff0:	68d2      	ldr	r2, [r2, #12]
 800bff2:	e7ee      	b.n	800bfd2 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800bff4:	4621      	mov	r1, r4
 800bff6:	4807      	ldr	r0, [pc, #28]	; (800c014 <tcp_close_shutdown+0x130>)
 800bff8:	f7ff ff24 	bl	800be44 <tcp_pcb_remove>
 800bffc:	2001      	movs	r0, #1
 800bffe:	4b06      	ldr	r3, [pc, #24]	; (800c018 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 800c000:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c002:	7018      	strb	r0, [r3, #0]
 800c004:	e7d4      	b.n	800bfb0 <tcp_close_shutdown+0xcc>
 800c006:	bf00      	nop
 800c008:	08013346 	.word	0x08013346
 800c00c:	0801332d 	.word	0x0801332d
 800c010:	08011dd4 	.word	0x08011dd4
 800c014:	2000bb30 	.word	0x2000bb30
 800c018:	2000bb2c 	.word	0x2000bb2c
 800c01c:	2000bb40 	.word	0x2000bb40
 800c020:	2000bb44 	.word	0x2000bb44
 800c024:	2000bb3c 	.word	0x2000bb3c
 800c028:	080133d8 	.word	0x080133d8
 800c02c:	2000bb38 	.word	0x2000bb38

0800c030 <tcp_close>:
  if (pcb->state != LISTEN) {
 800c030:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800c032:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800c034:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800c036:	bf1e      	ittt	ne
 800c038:	7e83      	ldrbne	r3, [r0, #26]
 800c03a:	f043 0310 	orrne.w	r3, r3, #16
 800c03e:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800c040:	f7ff bf50 	b.w	800bee4 <tcp_close_shutdown>

0800c044 <tcp_recv_null>:
{
 800c044:	b510      	push	{r4, lr}
 800c046:	4608      	mov	r0, r1
  if (p != NULL) {
 800c048:	4614      	mov	r4, r2
 800c04a:	b13a      	cbz	r2, 800c05c <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 800c04c:	8911      	ldrh	r1, [r2, #8]
 800c04e:	f7ff fc25 	bl	800b89c <tcp_recved>
    pbuf_free(p);
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff f80a 	bl	800b06c <pbuf_free>
}
 800c058:	2000      	movs	r0, #0
 800c05a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1fb      	bne.n	800c058 <tcp_recv_null+0x14>
}
 800c060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800c064:	f7ff bfe4 	b.w	800c030 <tcp_close>

0800c068 <tcp_process_refused_data>:
{
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 800c06a:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800c06c:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c06e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 800c072:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800c074:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800c076:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c078:	b1dd      	cbz	r5, 800c0b2 <tcp_process_refused_data+0x4a>
 800c07a:	4601      	mov	r1, r0
 800c07c:	4632      	mov	r2, r6
 800c07e:	6900      	ldr	r0, [r0, #16]
 800c080:	47a8      	blx	r5
 800c082:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800c084:	b9e0      	cbnz	r0, 800c0c0 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800c086:	06bb      	lsls	r3, r7, #26
 800c088:	d511      	bpl.n	800c0ae <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c08a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800c08c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c090:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 800c094:	bf1c      	itt	ne
 800c096:	3301      	addne	r3, #1
 800c098:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800c09a:	b146      	cbz	r6, 800c0ae <tcp_process_refused_data+0x46>
 800c09c:	2300      	movs	r3, #0
 800c09e:	4621      	mov	r1, r4
 800c0a0:	6920      	ldr	r0, [r4, #16]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800c0a6:	300d      	adds	r0, #13
 800c0a8:	d101      	bne.n	800c0ae <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 800c0aa:	f06f 050c 	mvn.w	r5, #12
}
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f7ff ffc3 	bl	800c044 <tcp_recv_null>
 800c0be:	e7e0      	b.n	800c082 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 800c0c0:	f110 050d 	adds.w	r5, r0, #13
 800c0c4:	d0f1      	beq.n	800c0aa <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800c0c6:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800c0c8:	f06f 0504 	mvn.w	r5, #4
 800c0cc:	e7ef      	b.n	800c0ae <tcp_process_refused_data+0x46>
	...

0800c0d0 <tcp_fasttmr>:
{
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800c0d4:	4d1b      	ldr	r5, [pc, #108]	; (800c144 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800c0d6:	4f1c      	ldr	r7, [pc, #112]	; (800c148 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800c0d8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800c0da:	4e1c      	ldr	r6, [pc, #112]	; (800c14c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800c0dc:	3301      	adds	r3, #1
 800c0de:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800c0e0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800c0e2:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800c0e6:	b90c      	cbnz	r4, 800c0ec <tcp_fasttmr+0x1c>
}
 800c0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800c0ec:	782b      	ldrb	r3, [r5, #0]
 800c0ee:	7f62      	ldrb	r2, [r4, #29]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d024      	beq.n	800c13e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800c0f4:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800c0f6:	7ea3      	ldrb	r3, [r4, #26]
 800c0f8:	07d9      	lsls	r1, r3, #31
 800c0fa:	d509      	bpl.n	800c110 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800c0fc:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800c100:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c102:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800c104:	f002 f8d8 	bl	800e2b8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c108:	7ea3      	ldrb	r3, [r4, #26]
 800c10a:	f023 0303 	bic.w	r3, r3, #3
 800c10e:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800c110:	7ea3      	ldrb	r3, [r4, #26]
 800c112:	071a      	lsls	r2, r3, #28
 800c114:	d505      	bpl.n	800c122 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800c116:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800c11a:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 800c11c:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800c11e:	f7ff fabd 	bl	800b69c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800c122:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800c124:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800c128:	b13b      	cbz	r3, 800c13a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800c12a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800c12c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800c130:	f7ff ff9a 	bl	800c068 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c134:	7833      	ldrb	r3, [r6, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1d2      	bne.n	800c0e0 <tcp_fasttmr+0x10>
{
 800c13a:	464c      	mov	r4, r9
 800c13c:	e7d3      	b.n	800c0e6 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800c13e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800c142:	e7fa      	b.n	800c13a <tcp_fasttmr+0x6a>
 800c144:	2000835a 	.word	0x2000835a
 800c148:	2000bb30 	.word	0x2000bb30
 800c14c:	2000bb2c 	.word	0x2000bb2c

0800c150 <tcp_tmr>:
{
 800c150:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800c152:	f7ff ffbd 	bl	800c0d0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800c156:	4a06      	ldr	r2, [pc, #24]	; (800c170 <tcp_tmr+0x20>)
 800c158:	7813      	ldrb	r3, [r2, #0]
 800c15a:	3301      	adds	r3, #1
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	7013      	strb	r3, [r2, #0]
 800c160:	07db      	lsls	r3, r3, #31
 800c162:	d503      	bpl.n	800c16c <tcp_tmr+0x1c>
}
 800c164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800c168:	f7ff bc8a 	b.w	800ba80 <tcp_slowtmr>
 800c16c:	bd08      	pop	{r3, pc}
 800c16e:	bf00      	nop
 800c170:	20008359 	.word	0x20008359

0800c174 <tcp_shutdown>:
{
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4614      	mov	r4, r2
  if (pcb->state == LISTEN) {
 800c178:	7d02      	ldrb	r2, [r0, #20]
{
 800c17a:	4605      	mov	r5, r0
  if (pcb->state == LISTEN) {
 800c17c:	2a01      	cmp	r2, #1
 800c17e:	d01b      	beq.n	800c1b8 <tcp_shutdown+0x44>
  if (shut_rx) {
 800c180:	b189      	cbz	r1, 800c1a6 <tcp_shutdown+0x32>
    pcb->flags |= TF_RXCLOSED;
 800c182:	7e83      	ldrb	r3, [r0, #26]
 800c184:	f043 0310 	orr.w	r3, r3, #16
 800c188:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 800c18a:	b124      	cbz	r4, 800c196 <tcp_shutdown+0x22>
      return tcp_close_shutdown(pcb, 1);
 800c18c:	2101      	movs	r1, #1
}
 800c18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c192:	f7ff bea7 	b.w	800bee4 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800c196:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c198:	b908      	cbnz	r0, 800c19e <tcp_shutdown+0x2a>
  return ERR_OK;
 800c19a:	2000      	movs	r0, #0
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
      pbuf_free(pcb->refused_data);
 800c19e:	f7fe ff65 	bl	800b06c <pbuf_free>
      pcb->refused_data = NULL;
 800c1a2:	676c      	str	r4, [r5, #116]	; 0x74
 800c1a4:	e7f9      	b.n	800c19a <tcp_shutdown+0x26>
  if (shut_tx) {
 800c1a6:	2c00      	cmp	r4, #0
 800c1a8:	d0f7      	beq.n	800c19a <tcp_shutdown+0x26>
 800c1aa:	2a07      	cmp	r2, #7
 800c1ac:	d804      	bhi.n	800c1b8 <tcp_shutdown+0x44>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4093      	lsls	r3, r2
 800c1b2:	f013 0f98 	tst.w	r3, #152	; 0x98
 800c1b6:	d1ea      	bne.n	800c18e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800c1b8:	f06f 000a 	mvn.w	r0, #10
}
 800c1bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c1c0 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c1c0:	7d03      	ldrb	r3, [r0, #20]
 800c1c2:	2b01      	cmp	r3, #1
{
 800c1c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c1cc:	d106      	bne.n	800c1dc <tcp_abandon+0x1c>
 800c1ce:	4b30      	ldr	r3, [pc, #192]	; (800c290 <tcp_abandon+0xd0>)
 800c1d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c1d4:	492f      	ldr	r1, [pc, #188]	; (800c294 <tcp_abandon+0xd4>)
 800c1d6:	4830      	ldr	r0, [pc, #192]	; (800c298 <tcp_abandon+0xd8>)
 800c1d8:	f004 fee2 	bl	8010fa0 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800c1dc:	7d23      	ldrb	r3, [r4, #20]
 800c1de:	2b0a      	cmp	r3, #10
 800c1e0:	d10a      	bne.n	800c1f8 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	482d      	ldr	r0, [pc, #180]	; (800c29c <tcp_abandon+0xdc>)
 800c1e6:	f7ff fe2d 	bl	800be44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	2001      	movs	r0, #1
}
 800c1ee:	b002      	add	sp, #8
 800c1f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 800c1f4:	f7fe bdb4 	b.w	800ad60 <memp_free>
    seqno = pcb->snd_nxt;
 800c1f8:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 800c1fc:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800c200:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800c204:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c208:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800c20a:	b99b      	cbnz	r3, 800c234 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 800c20c:	b13d      	cbz	r5, 800c21e <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c20e:	4a24      	ldr	r2, [pc, #144]	; (800c2a0 <tcp_abandon+0xe0>)
 800c210:	6813      	ldr	r3, [r2, #0]
 800c212:	429c      	cmp	r4, r3
 800c214:	d106      	bne.n	800c224 <tcp_abandon+0x64>
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	2500      	movs	r5, #0
 800c21c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800c21e:	462e      	mov	r6, r5
 800c220:	e00f      	b.n	800c242 <tcp_abandon+0x82>
 800c222:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c224:	2b00      	cmp	r3, #0
 800c226:	d0f8      	beq.n	800c21a <tcp_abandon+0x5a>
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	4294      	cmp	r4, r2
 800c22c:	d1f9      	bne.n	800c222 <tcp_abandon+0x62>
 800c22e:	68e2      	ldr	r2, [r4, #12]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e7f2      	b.n	800c21a <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c234:	4621      	mov	r1, r4
 800c236:	481b      	ldr	r0, [pc, #108]	; (800c2a4 <tcp_abandon+0xe4>)
 800c238:	f7ff fe04 	bl	800be44 <tcp_pcb_remove>
 800c23c:	2201      	movs	r2, #1
 800c23e:	4b1a      	ldr	r3, [pc, #104]	; (800c2a8 <tcp_abandon+0xe8>)
 800c240:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800c242:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c244:	b108      	cbz	r0, 800c24a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800c246:	f7ff fb75 	bl	800b934 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c24a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c24c:	b108      	cbz	r0, 800c252 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800c24e:	f7ff fb71 	bl	800b934 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800c252:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c254:	b108      	cbz	r0, 800c25a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800c256:	f7ff fb6d 	bl	800b934 <tcp_segs_free>
    if (send_rst) {
 800c25a:	b146      	cbz	r6, 800c26e <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c25c:	8b23      	ldrh	r3, [r4, #24]
 800c25e:	4622      	mov	r2, r4
 800c260:	9500      	str	r5, [sp, #0]
 800c262:	4651      	mov	r1, sl
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	4648      	mov	r0, r9
 800c268:	1d23      	adds	r3, r4, #4
 800c26a:	f002 f9a3 	bl	800e5b4 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800c26e:	4621      	mov	r1, r4
 800c270:	2001      	movs	r0, #1
 800c272:	f7fe fd75 	bl	800ad60 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c276:	b13f      	cbz	r7, 800c288 <tcp_abandon+0xc8>
 800c278:	f06f 010c 	mvn.w	r1, #12
 800c27c:	4640      	mov	r0, r8
 800c27e:	463b      	mov	r3, r7
}
 800c280:	b002      	add	sp, #8
 800c282:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c286:	4718      	bx	r3
}
 800c288:	b002      	add	sp, #8
 800c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28e:	bf00      	nop
 800c290:	08013346 	.word	0x08013346
 800c294:	080132c7 	.word	0x080132c7
 800c298:	08011dd4 	.word	0x08011dd4
 800c29c:	2000bb40 	.word	0x2000bb40
 800c2a0:	2000bb3c 	.word	0x2000bb3c
 800c2a4:	2000bb30 	.word	0x2000bb30
 800c2a8:	2000bb2c 	.word	0x2000bb2c

0800c2ac <tcp_abort>:
  tcp_abandon(pcb, 1);
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	f7ff bf87 	b.w	800c1c0 <tcp_abandon>

0800c2b2 <tcp_accept_null>:
  tcp_abort(pcb);
 800c2b2:	4608      	mov	r0, r1
{
 800c2b4:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 800c2b6:	f7ff fff9 	bl	800c2ac <tcp_abort>
}
 800c2ba:	f06f 000c 	mvn.w	r0, #12
 800c2be:	bd08      	pop	{r3, pc}

0800c2c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800c2c4:	b901      	cbnz	r1, 800c2c8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c2c8:	680a      	ldr	r2, [r1, #0]
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	68cc      	ldr	r4, [r1, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d102      	bne.n	800c2d8 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	f7ff ffea 	bl	800c2ac <tcp_abort>
      pcb = pcb->next;
 800c2d8:	4621      	mov	r1, r4
 800c2da:	e7f3      	b.n	800c2c4 <tcp_netif_ip_addr_changed_pcblist+0x4>

0800c2dc <tcp_kill_state>:
{
 800c2dc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c2de:	f1a0 0308 	sub.w	r3, r0, #8
{
 800c2e2:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d906      	bls.n	800c2f6 <tcp_kill_state+0x1a>
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <tcp_kill_state+0x4c>)
 800c2ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c2ee:	490f      	ldr	r1, [pc, #60]	; (800c32c <tcp_kill_state+0x50>)
 800c2f0:	480f      	ldr	r0, [pc, #60]	; (800c330 <tcp_kill_state+0x54>)
 800c2f2:	f004 fe55 	bl	8010fa0 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <tcp_kill_state+0x58>)
  inactivity = 0;
 800c2f8:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2fa:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 800c2fc:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c2fe:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <tcp_kill_state+0x5c>)
 800c300:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c302:	b921      	cbnz	r1, 800c30e <tcp_kill_state+0x32>
  if (inactive != NULL) {
 800c304:	b170      	cbz	r0, 800c324 <tcp_kill_state+0x48>
}
 800c306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 800c30a:	f7ff bf59 	b.w	800c1c0 <tcp_abandon>
    if (pcb->state == state) {
 800c30e:	7d0b      	ldrb	r3, [r1, #20]
 800c310:	42a3      	cmp	r3, r4
 800c312:	d105      	bne.n	800c320 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c314:	6a0b      	ldr	r3, [r1, #32]
 800c316:	1aeb      	subs	r3, r5, r3
 800c318:	429a      	cmp	r2, r3
 800c31a:	bf9c      	itt	ls
 800c31c:	461a      	movls	r2, r3
 800c31e:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c320:	68c9      	ldr	r1, [r1, #12]
 800c322:	e7ee      	b.n	800c302 <tcp_kill_state+0x26>
 800c324:	bd38      	pop	{r3, r4, r5, pc}
 800c326:	bf00      	nop
 800c328:	08013346 	.word	0x08013346
 800c32c:	080133a7 	.word	0x080133a7
 800c330:	08011dd4 	.word	0x08011dd4
 800c334:	2000bb30 	.word	0x2000bb30
 800c338:	2000bb34 	.word	0x2000bb34

0800c33c <tcp_alloc>:
{
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c340:	2001      	movs	r0, #1
 800c342:	f7fe fcf1 	bl	800ad28 <memp_malloc>
 800c346:	4d3b      	ldr	r5, [pc, #236]	; (800c434 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 800c348:	4604      	mov	r4, r0
 800c34a:	bb90      	cbnz	r0, 800c3b2 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c34c:	4b3a      	ldr	r3, [pc, #232]	; (800c438 <tcp_alloc+0xfc>)
  inactivity = 0;
 800c34e:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c350:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d158      	bne.n	800c40a <tcp_alloc+0xce>
  if (inactive != NULL) {
 800c358:	b114      	cbz	r4, 800c360 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff ffa6 	bl	800c2ac <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c360:	2001      	movs	r0, #1
 800c362:	f7fe fce1 	bl	800ad28 <memp_malloc>
    if (pcb == NULL) {
 800c366:	4604      	mov	r4, r0
 800c368:	bb18      	cbnz	r0, 800c3b2 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800c36a:	2009      	movs	r0, #9
 800c36c:	f7ff ffb6 	bl	800c2dc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c370:	2001      	movs	r0, #1
 800c372:	f7fe fcd9 	bl	800ad28 <memp_malloc>
      if (pcb == NULL) {
 800c376:	4604      	mov	r4, r0
 800c378:	b9d8      	cbnz	r0, 800c3b2 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 800c37a:	2008      	movs	r0, #8
 800c37c:	f7ff ffae 	bl	800c2dc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c380:	2001      	movs	r0, #1
 800c382:	f7fe fcd1 	bl	800ad28 <memp_malloc>
        if (pcb == NULL) {
 800c386:	4604      	mov	r4, r0
 800c388:	b998      	cbnz	r0, 800c3b2 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c38a:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c38e:	4b2b      	ldr	r3, [pc, #172]	; (800c43c <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c390:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c394:	bf0c      	ite	eq
 800c396:	4631      	moveq	r1, r6
 800c398:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d13c      	bne.n	800c41a <tcp_alloc+0xde>
  if (inactive != NULL) {
 800c3a0:	b114      	cbz	r4, 800c3a8 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f7ff ff82 	bl	800c2ac <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	f7fe fcbd 	bl	800ad28 <memp_malloc>
  if (pcb != NULL) {
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	b348      	cbz	r0, 800c406 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c3b2:	2298      	movs	r2, #152	; 0x98
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f004 fd3e 	bl	8010e38 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c3bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 800c3c0:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 800c3c4:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c3c6:	8562      	strh	r2, [r4, #42]	; 0x2a
 800c3c8:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c3ca:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 800c3cc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 800c3d0:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 800c3d2:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 800c3d6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 800c3da:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c3dc:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 800c3de:	4b18      	ldr	r3, [pc, #96]	; (800c440 <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c3e0:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c3e4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800c3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 800c3ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 800c3ee:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800c3f0:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c3f2:	4b14      	ldr	r3, [pc, #80]	; (800c444 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 800c3f4:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c3f8:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c3fa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 800c3fe:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c400:	4a11      	ldr	r2, [pc, #68]	; (800c448 <tcp_alloc+0x10c>)
 800c402:	7812      	ldrb	r2, [r2, #0]
 800c404:	7762      	strb	r2, [r4, #29]
}
 800c406:	4620      	mov	r0, r4
 800c408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c40a:	6a1a      	ldr	r2, [r3, #32]
 800c40c:	1a82      	subs	r2, r0, r2
 800c40e:	428a      	cmp	r2, r1
 800c410:	bf24      	itt	cs
 800c412:	461c      	movcs	r4, r3
 800c414:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	e79c      	b.n	800c354 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 800c41a:	7d5f      	ldrb	r7, [r3, #21]
 800c41c:	428f      	cmp	r7, r1
 800c41e:	d807      	bhi.n	800c430 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c420:	6a1a      	ldr	r2, [r3, #32]
 800c422:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 800c426:	4282      	cmp	r2, r0
 800c428:	bf22      	ittt	cs
 800c42a:	4639      	movcs	r1, r7
 800c42c:	4610      	movcs	r0, r2
 800c42e:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	e7b3      	b.n	800c39c <tcp_alloc+0x60>
 800c434:	2000bb34 	.word	0x2000bb34
 800c438:	2000bb40 	.word	0x2000bb40
 800c43c:	2000bb30 	.word	0x2000bb30
 800c440:	0800c045 	.word	0x0800c045
 800c444:	006ddd00 	.word	0x006ddd00
 800c448:	2000835a 	.word	0x2000835a

0800c44c <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c44c:	2040      	movs	r0, #64	; 0x40
 800c44e:	f7ff bf75 	b.w	800c33c <tcp_alloc>
	...

0800c454 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800c454:	4b03      	ldr	r3, [pc, #12]	; (800c464 <tcp_next_iss+0x10>)
 800c456:	4a04      	ldr	r2, [pc, #16]	; (800c468 <tcp_next_iss+0x14>)
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	6812      	ldr	r2, [r2, #0]
 800c45c:	4410      	add	r0, r2
 800c45e:	6018      	str	r0, [r3, #0]
}
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20000028 	.word	0x20000028
 800c468:	2000bb34 	.word	0x2000bb34

0800c46c <tcp_eff_send_mss_impl>:
{
 800c46c:	b510      	push	{r4, lr}
 800c46e:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800c470:	4608      	mov	r0, r1
 800c472:	f7fd fcad 	bl	8009dd0 <ip4_route>
    if (outif == NULL) {
 800c476:	b130      	cbz	r0, 800c486 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800c478:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 800c47a:	b123      	cbz	r3, 800c486 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800c47c:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c47e:	b29b      	uxth	r3, r3
 800c480:	429c      	cmp	r4, r3
 800c482:	bf28      	it	cs
 800c484:	461c      	movcs	r4, r3
}
 800c486:	4620      	mov	r0, r4
 800c488:	bd10      	pop	{r4, pc}
	...

0800c48c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800c490:	4604      	mov	r4, r0
 800c492:	b180      	cbz	r0, 800c4b6 <tcp_netif_ip_addr_changed+0x2a>
 800c494:	6803      	ldr	r3, [r0, #0]
 800c496:	b173      	cbz	r3, 800c4b6 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c498:	4b0c      	ldr	r3, [pc, #48]	; (800c4cc <tcp_netif_ip_addr_changed+0x40>)
 800c49a:	6819      	ldr	r1, [r3, #0]
 800c49c:	f7ff ff10 	bl	800c2c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <tcp_netif_ip_addr_changed+0x44>)
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	6819      	ldr	r1, [r3, #0]
 800c4a6:	f7ff ff0b 	bl	800c2c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c4aa:	b125      	cbz	r5, 800c4b6 <tcp_netif_ip_addr_changed+0x2a>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b113      	cbz	r3, 800c4b6 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c4b0:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <tcp_netif_ip_addr_changed+0x48>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	b903      	cbnz	r3, 800c4b8 <tcp_netif_ip_addr_changed+0x2c>
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 800c4bc:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c4be:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c4c0:	bf04      	itt	eq
 800c4c2:	6829      	ldreq	r1, [r5, #0]
 800c4c4:	6019      	streq	r1, [r3, #0]
{
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	e7f4      	b.n	800c4b4 <tcp_netif_ip_addr_changed+0x28>
 800c4ca:	bf00      	nop
 800c4cc:	2000bb30 	.word	0x2000bb30
 800c4d0:	2000bb3c 	.word	0x2000bb3c
 800c4d4:	2000bb38 	.word	0x2000bb38

0800c4d8 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c4d8:	68c3      	ldr	r3, [r0, #12]
{
 800c4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4de:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c4e0:	8998      	ldrh	r0, [r3, #12]
{
 800c4e2:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c4e4:	f7fc fa26 	bl	8008934 <lwip_htons>
 800c4e8:	07c2      	lsls	r2, r0, #31
 800c4ea:	d415      	bmi.n	800c518 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c4ec:	4e18      	ldr	r6, [pc, #96]	; (800c550 <tcp_oos_insert_segment+0x78>)
    while (next &&
 800c4ee:	b1bc      	cbz	r4, 800c520 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c4f0:	68e7      	ldr	r7, [r4, #12]
 800c4f2:	6830      	ldr	r0, [r6, #0]
 800c4f4:	892b      	ldrh	r3, [r5, #8]
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	8922      	ldrh	r2, [r4, #8]
 800c4fa:	4403      	add	r3, r0
 800c4fc:	440a      	add	r2, r1
 800c4fe:	1a9a      	subs	r2, r3, r2
    while (next &&
 800c500:	2a00      	cmp	r2, #0
 800c502:	da10      	bge.n	800c526 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c504:	1a5b      	subs	r3, r3, r1
    if (next &&
 800c506:	2b00      	cmp	r3, #0
 800c508:	dd0a      	ble.n	800c520 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c50a:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 800c50c:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c50e:	b289      	uxth	r1, r1
 800c510:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c512:	f7fe fef1 	bl	800b2f8 <pbuf_realloc>
 800c516:	e003      	b.n	800c520 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 800c518:	4620      	mov	r0, r4
    next = NULL;
 800c51a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800c51c:	f7ff fa0a 	bl	800b934 <tcp_segs_free>
    }
  }
  cseg->next = next;
 800c520:	602c      	str	r4, [r5, #0]
}
 800c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c526:	89b8      	ldrh	r0, [r7, #12]
 800c528:	f7fc fa04 	bl	8008934 <lwip_htons>
 800c52c:	07c3      	lsls	r3, r0, #31
 800c52e:	d509      	bpl.n	800c544 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c530:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800c534:	2001      	movs	r0, #1
 800c536:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800c53a:	f7fc f9fb 	bl	8008934 <lwip_htons>
 800c53e:	4338      	orrs	r0, r7
 800c540:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 800c544:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800c546:	4620      	mov	r0, r4
 800c548:	f7ff f9e6 	bl	800b918 <tcp_seg_free>
      next = next->next;
 800c54c:	463c      	mov	r4, r7
 800c54e:	e7ce      	b.n	800c4ee <tcp_oos_insert_segment+0x16>
 800c550:	20008380 	.word	0x20008380

0800c554 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c554:	7d03      	ldrb	r3, [r0, #20]
 800c556:	2b03      	cmp	r3, #3
{
 800c558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c55e:	d806      	bhi.n	800c56e <tcp_receive+0x1a>
 800c560:	4b89      	ldr	r3, [pc, #548]	; (800c788 <tcp_receive+0x234>)
 800c562:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c566:	4989      	ldr	r1, [pc, #548]	; (800c78c <tcp_receive+0x238>)
 800c568:	4889      	ldr	r0, [pc, #548]	; (800c790 <tcp_receive+0x23c>)
 800c56a:	f004 fd19 	bl	8010fa0 <iprintf>

  if (flags & TCP_ACK) {
 800c56e:	4b89      	ldr	r3, [pc, #548]	; (800c794 <tcp_receive+0x240>)
 800c570:	4e89      	ldr	r6, [pc, #548]	; (800c798 <tcp_receive+0x244>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	f013 0f10 	tst.w	r3, #16
 800c578:	f000 8180 	beq.w	800c87c <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c57c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c57e:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c580:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c584:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c586:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c588:	2d00      	cmp	r5, #0
 800c58a:	4d84      	ldr	r5, [pc, #528]	; (800c79c <tcp_receive+0x248>)
 800c58c:	db0d      	blt.n	800c5aa <tcp_receive+0x56>
 800c58e:	4283      	cmp	r3, r0
 800c590:	d103      	bne.n	800c59a <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c592:	682b      	ldr	r3, [r5, #0]
 800c594:	1acb      	subs	r3, r1, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	db07      	blt.n	800c5aa <tcp_receive+0x56>
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	4299      	cmp	r1, r3
 800c59e:	d11c      	bne.n	800c5da <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5a0:	4b7f      	ldr	r3, [pc, #508]	; (800c7a0 <tcp_receive+0x24c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	89db      	ldrh	r3, [r3, #14]
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d917      	bls.n	800c5da <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5aa:	4b7d      	ldr	r3, [pc, #500]	; (800c7a0 <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5ac:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 800c5b4:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5b6:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 800c5b8:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5ba:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 800c5be:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5c0:	bf38      	it	cc
 800c5c2:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 800c5c6:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d13c      	bne.n	800c648 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 800c5ce:	b920      	cbnz	r0, 800c5da <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 800c5d0:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 800c5d2:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c5d6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5da:	682b      	ldr	r3, [r5, #0]
 800c5dc:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800c5e0:	4f70      	ldr	r7, [pc, #448]	; (800c7a4 <tcp_receive+0x250>)
 800c5e2:	eba3 000e 	sub.w	r0, r3, lr
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	dc37      	bgt.n	800c65a <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 800c5ea:	486f      	ldr	r0, [pc, #444]	; (800c7a8 <tcp_receive+0x254>)
 800c5ec:	8800      	ldrh	r0, [r0, #0]
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f040 8476 	bne.w	800cee0 <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5f4:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c5f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5f8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c5fc:	4401      	add	r1, r0
 800c5fe:	428a      	cmp	r2, r1
 800c600:	f040 846e 	bne.w	800cee0 <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c604:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800c608:	2a00      	cmp	r2, #0
 800c60a:	f2c0 8469 	blt.w	800cee0 <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c60e:	4573      	cmp	r3, lr
 800c610:	f040 8466 	bne.w	800cee0 <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c618:	1c53      	adds	r3, r2, #1
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800c61e:	bf38      	it	cc
 800c620:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c624:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d911      	bls.n	800c650 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c62c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c630:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c632:	4413      	add	r3, r2
 800c634:	b29b      	uxth	r3, r3
 800c636:	429a      	cmp	r2, r3
 800c638:	d201      	bcs.n	800c63e <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 800c63a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c63e:	f8df a148 	ldr.w	sl, [pc, #328]	; 800c788 <tcp_receive+0x234>
 800c642:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800c790 <tcp_receive+0x23c>
 800c646:	e10c      	b.n	800c862 <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 800c648:	2800      	cmp	r0, #0
 800c64a:	d0c6      	beq.n	800c5da <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e7c2      	b.n	800c5d6 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 800c650:	d1f5      	bne.n	800c63e <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 800c652:	4620      	mov	r0, r4
 800c654:	f002 f84d 	bl	800e6f2 <tcp_rexmit_fast>
 800c658:	e7f1      	b.n	800c63e <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c65a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c65c:	1a9a      	subs	r2, r3, r2
 800c65e:	2a00      	cmp	r2, #0
 800c660:	f300 808d 	bgt.w	800c77e <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 800c664:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c666:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 800c66a:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 800c66c:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800c66e:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 800c670:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 800c674:	bf48      	it	mi
 800c676:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 800c67a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 800c67e:	bf44      	itt	mi
 800c680:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c682:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 800c686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 800c68a:	bf48      	it	mi
 800c68c:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800c690:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c692:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c694:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 800c698:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800c69c:	d90f      	bls.n	800c6be <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 800c69e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c6a2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800c6a6:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c6a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c6aa:	bf9c      	itt	ls
 800c6ac:	435b      	mulls	r3, r3
 800c6ae:	fb93 f3f2 	sdivls	r3, r3, r2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800c6b6:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 800c6b8:	bf38      	it	cc
 800c6ba:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c6be:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800c788 <tcp_receive+0x234>
 800c6c2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800c790 <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 800c6c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c6c8:	b943      	cbnz	r3, 800c6dc <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 800c6ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	d153      	bne.n	800c77a <tcp_receive+0x226>
        pcb->rtime = -1;
 800c6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6d6:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800c6d8:	76e3      	strb	r3, [r4, #27]
 800c6da:	e7b0      	b.n	800c63e <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	6858      	ldr	r0, [r3, #4]
 800c6e0:	f7fc f92b 	bl	800893a <lwip_htonl>
 800c6e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c6e6:	4683      	mov	fp, r0
 800c6e8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	8998      	ldrh	r0, [r3, #12]
 800c6f0:	f7fc f920 	bl	8008934 <lwip_htons>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	f010 0003 	ands.w	r0, r0, #3
 800c6fa:	eba8 0803 	sub.w	r8, r8, r3
 800c6fe:	bf18      	it	ne
 800c700:	2001      	movne	r0, #1
 800c702:	44d8      	add	r8, fp
 800c704:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 800c706:	f1b8 0f00 	cmp.w	r8, #0
 800c70a:	dcde      	bgt.n	800c6ca <tcp_receive+0x176>
        next = pcb->unacked;
 800c70c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c710:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 800c714:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c718:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 800c71c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c71e:	f7fe fe5b 	bl	800b3d8 <pbuf_clen>
 800c722:	4583      	cmp	fp, r0
 800c724:	d206      	bcs.n	800c734 <tcp_receive+0x1e0>
 800c726:	464b      	mov	r3, r9
 800c728:	f240 429e 	movw	r2, #1182	; 0x49e
 800c72c:	491f      	ldr	r1, [pc, #124]	; (800c7ac <tcp_receive+0x258>)
 800c72e:	4650      	mov	r0, sl
 800c730:	f004 fc36 	bl	8010fa0 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c734:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c738:	f7fe fe4e 	bl	800b3d8 <pbuf_clen>
 800c73c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800c740:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c742:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 800c744:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c748:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c74a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800c74e:	4640      	mov	r0, r8
        recv_acked += next->len;
 800c750:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 800c752:	f7ff f8e1 	bl	800b918 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800c756:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0b3      	beq.n	800c6c6 <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c75e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1b0      	bne.n	800c6c6 <tcp_receive+0x172>
 800c764:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1ad      	bne.n	800c6c6 <tcp_receive+0x172>
 800c76a:	464b      	mov	r3, r9
 800c76c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800c770:	490f      	ldr	r1, [pc, #60]	; (800c7b0 <tcp_receive+0x25c>)
 800c772:	4650      	mov	r0, sl
 800c774:	f004 fc14 	bl	8010fa0 <iprintf>
 800c778:	e7a5      	b.n	800c6c6 <tcp_receive+0x172>
        pcb->rtime = 0;
 800c77a:	8623      	strh	r3, [r4, #48]	; 0x30
 800c77c:	e7ac      	b.n	800c6d8 <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 800c77e:	4620      	mov	r0, r4
 800c780:	f001 fd64 	bl	800e24c <tcp_send_empty_ack>
 800c784:	e75b      	b.n	800c63e <tcp_receive+0xea>
 800c786:	bf00      	nop
 800c788:	0801380c 	.word	0x0801380c
 800c78c:	0801383e 	.word	0x0801383e
 800c790:	08011dd4 	.word	0x08011dd4
 800c794:	20008360 	.word	0x20008360
 800c798:	20008380 	.word	0x20008380
 800c79c:	2000835c 	.word	0x2000835c
 800c7a0:	20008388 	.word	0x20008388
 800c7a4:	20008374 	.word	0x20008374
 800c7a8:	20008396 	.word	0x20008396
 800c7ac:	08013857 	.word	0x08013857
 800c7b0:	0801387f 	.word	0x0801387f
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c7b4:	682a      	ldr	r2, [r5, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	9201      	str	r2, [sp, #4]
 800c7ba:	6858      	ldr	r0, [r3, #4]
 800c7bc:	f7fc f8bd 	bl	800893a <lwip_htonl>
 800c7c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c7c2:	4683      	mov	fp, r0
 800c7c4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	8998      	ldrh	r0, [r3, #12]
 800c7cc:	f7fc f8b2 	bl	8008934 <lwip_htons>
 800c7d0:	9a01      	ldr	r2, [sp, #4]
 800c7d2:	f010 0003 	ands.w	r0, r0, #3
 800c7d6:	eba2 0808 	sub.w	r8, r2, r8
 800c7da:	bf18      	it	ne
 800c7dc:	2001      	movne	r0, #1
 800c7de:	eba8 080b 	sub.w	r8, r8, fp
 800c7e2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800c7e6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ea:	db3d      	blt.n	800c868 <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dc38      	bgt.n	800c868 <tcp_receive+0x314>
      next = pcb->unsent;
 800c7f6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800c7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c7fe:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800c800:	b90b      	cbnz	r3, 800c806 <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 800c802:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c806:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800c80a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c80e:	f7fe fde3 	bl	800b3d8 <pbuf_clen>
 800c812:	4583      	cmp	fp, r0
 800c814:	d206      	bcs.n	800c824 <tcp_receive+0x2d0>
 800c816:	4653      	mov	r3, sl
 800c818:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c81c:	49ba      	ldr	r1, [pc, #744]	; (800cb08 <tcp_receive+0x5b4>)
 800c81e:	4648      	mov	r0, r9
 800c820:	f004 fbbe 	bl	8010fa0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c824:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c828:	f7fe fdd6 	bl	800b3d8 <pbuf_clen>
 800c82c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800c830:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c832:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 800c834:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c838:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c83a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800c83e:	4640      	mov	r0, r8
      recv_acked += next->len;
 800c840:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800c842:	f7ff f869 	bl	800b918 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c846:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800c84a:	b153      	cbz	r3, 800c862 <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c84c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c84e:	b943      	cbnz	r3, 800c862 <tcp_receive+0x30e>
 800c850:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c852:	b933      	cbnz	r3, 800c862 <tcp_receive+0x30e>
 800c854:	4653      	mov	r3, sl
 800c856:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800c85a:	49ac      	ldr	r1, [pc, #688]	; (800cb0c <tcp_receive+0x5b8>)
 800c85c:	4648      	mov	r0, r9
 800c85e:	f004 fb9f 	bl	8010fa0 <iprintf>
    while (pcb->unsent != NULL &&
 800c862:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1a5      	bne.n	800c7b4 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800c868:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c86c:	883a      	ldrh	r2, [r7, #0]
 800c86e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c870:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800c872:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c876:	2a00      	cmp	r2, #0
 800c878:	f040 8117 	bne.w	800caaa <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c87c:	4fa4      	ldr	r7, [pc, #656]	; (800cb10 <tcp_receive+0x5bc>)
 800c87e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c880:	8838      	ldrh	r0, [r7, #0]
 800c882:	2800      	cmp	r0, #0
 800c884:	f000 831f 	beq.w	800cec6 <tcp_receive+0x972>
 800c888:	7d23      	ldrb	r3, [r4, #20]
 800c88a:	2b06      	cmp	r3, #6
 800c88c:	f200 831b 	bhi.w	800cec6 <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c890:	6833      	ldr	r3, [r6, #0]
 800c892:	1ad5      	subs	r5, r2, r3
 800c894:	2d01      	cmp	r5, #1
 800c896:	f100 815c 	bmi.w	800cb52 <tcp_receive+0x5fe>
 800c89a:	f1c3 0101 	rsb	r1, r3, #1
 800c89e:	1a09      	subs	r1, r1, r0
 800c8a0:	4411      	add	r1, r2
 800c8a2:	2900      	cmp	r1, #0
 800c8a4:	f300 8155 	bgt.w	800cb52 <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c8a8:	4b9a      	ldr	r3, [pc, #616]	; (800cb14 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 800c8aa:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 800c8ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c8b0:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c8b2:	f1b9 0f00 	cmp.w	r9, #0
 800c8b6:	d106      	bne.n	800c8c6 <tcp_receive+0x372>
 800c8b8:	4b97      	ldr	r3, [pc, #604]	; (800cb18 <tcp_receive+0x5c4>)
 800c8ba:	f240 523c 	movw	r2, #1340	; 0x53c
 800c8be:	4997      	ldr	r1, [pc, #604]	; (800cb1c <tcp_receive+0x5c8>)
 800c8c0:	4897      	ldr	r0, [pc, #604]	; (800cb20 <tcp_receive+0x5cc>)
 800c8c2:	f004 fb6d 	bl	8010fa0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800c8c6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800c8ca:	429d      	cmp	r5, r3
 800c8cc:	dd06      	ble.n	800c8dc <tcp_receive+0x388>
 800c8ce:	4b92      	ldr	r3, [pc, #584]	; (800cb18 <tcp_receive+0x5c4>)
 800c8d0:	f240 523d 	movw	r2, #1341	; 0x53d
 800c8d4:	4993      	ldr	r1, [pc, #588]	; (800cb24 <tcp_receive+0x5d0>)
 800c8d6:	4892      	ldr	r0, [pc, #584]	; (800cb20 <tcp_receive+0x5cc>)
 800c8d8:	f004 fb62 	bl	8010fa0 <iprintf>
      if (inseg.p->len < off) {
 800c8dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8e0:	8943      	ldrh	r3, [r0, #10]
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	f340 812a 	ble.w	800cb3c <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c8e8:	8903      	ldrh	r3, [r0, #8]
 800c8ea:	429d      	cmp	r5, r3
 800c8ec:	dd06      	ble.n	800c8fc <tcp_receive+0x3a8>
 800c8ee:	4b8a      	ldr	r3, [pc, #552]	; (800cb18 <tcp_receive+0x5c4>)
 800c8f0:	f240 523f 	movw	r2, #1343	; 0x53f
 800c8f4:	498c      	ldr	r1, [pc, #560]	; (800cb28 <tcp_receive+0x5d4>)
 800c8f6:	488a      	ldr	r0, [pc, #552]	; (800cb20 <tcp_receive+0x5cc>)
 800c8f8:	f004 fb52 	bl	8010fa0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c8fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800c900:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c902:	8919      	ldrh	r1, [r3, #8]
 800c904:	1b4d      	subs	r5, r1, r5
 800c906:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 800c908:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c90c:	459a      	cmp	sl, r3
 800c90e:	f300 80f1 	bgt.w	800caf4 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c912:	f1ca 0100 	rsb	r1, sl, #0
 800c916:	4648      	mov	r0, r9
 800c918:	b209      	sxth	r1, r1
 800c91a:	f7fe fba1 	bl	800b060 <pbuf_header>
 800c91e:	b130      	cbz	r0, 800c92e <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c920:	4b7d      	ldr	r3, [pc, #500]	; (800cb18 <tcp_receive+0x5c4>)
 800c922:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c926:	4981      	ldr	r1, [pc, #516]	; (800cb2c <tcp_receive+0x5d8>)
 800c928:	487d      	ldr	r0, [pc, #500]	; (800cb20 <tcp_receive+0x5cc>)
 800c92a:	f004 fb39 	bl	8010fa0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c92e:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800c932:	6833      	ldr	r3, [r6, #0]
 800c934:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c936:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c938:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c93a:	1a9b      	subs	r3, r3, r2
 800c93c:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c940:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c944:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c946:	6831      	ldr	r1, [r6, #0]
 800c948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c94a:	1a8b      	subs	r3, r1, r2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f2c0 82b4 	blt.w	800ceba <tcp_receive+0x966>
 800c952:	1c4b      	adds	r3, r1, #1
 800c954:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	1a1b      	subs	r3, r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f300 82ad 	bgt.w	800ceba <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c960:	4291      	cmp	r1, r2
 800c962:	f040 81ca 	bne.w	800ccfa <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c966:	4d6b      	ldr	r5, [pc, #428]	; (800cb14 <tcp_receive+0x5c0>)
 800c968:	68eb      	ldr	r3, [r5, #12]
 800c96a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c96e:	8998      	ldrh	r0, [r3, #12]
 800c970:	f7fb ffe0 	bl	8008934 <lwip_htons>
 800c974:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 800c978:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c97a:	bf18      	it	ne
 800c97c:	2001      	movne	r0, #1
 800c97e:	4440      	add	r0, r8
 800c980:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800c982:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800c984:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c986:	d241      	bcs.n	800ca0c <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c988:	68eb      	ldr	r3, [r5, #12]
 800c98a:	8998      	ldrh	r0, [r3, #12]
 800c98c:	f7fb ffd2 	bl	8008934 <lwip_htons>
 800c990:	07c2      	lsls	r2, r0, #31
 800c992:	d510      	bpl.n	800c9b6 <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c994:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800c998:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800c99c:	4640      	mov	r0, r8
 800c99e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800c9a2:	f7fb ffc7 	bl	8008934 <lwip_htons>
 800c9a6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c9aa:	f7fb ffc3 	bl	8008934 <lwip_htons>
 800c9ae:	ea40 0808 	orr.w	r8, r0, r8
 800c9b2:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c9b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c9b8:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c9ba:	68eb      	ldr	r3, [r5, #12]
 800c9bc:	8998      	ldrh	r0, [r3, #12]
 800c9be:	f7fb ffb9 	bl	8008934 <lwip_htons>
 800c9c2:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c9c4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800c9c6:	bf42      	ittt	mi
 800c9c8:	892b      	ldrhmi	r3, [r5, #8]
 800c9ca:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800c9ce:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800c9d0:	8929      	ldrh	r1, [r5, #8]
 800c9d2:	f7fe fc91 	bl	800b2f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c9d6:	68eb      	ldr	r3, [r5, #12]
 800c9d8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c9dc:	8998      	ldrh	r0, [r3, #12]
 800c9de:	f7fb ffa9 	bl	8008934 <lwip_htons>
 800c9e2:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c9e6:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800c9e8:	bf18      	it	ne
 800c9ea:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c9ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800c9ee:	4440      	add	r0, r8
 800c9f0:	b280      	uxth	r0, r0
 800c9f2:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c9f4:	4418      	add	r0, r3
 800c9f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c9f8:	4413      	add	r3, r2
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	d006      	beq.n	800ca0c <tcp_receive+0x4b8>
 800c9fe:	4b46      	ldr	r3, [pc, #280]	; (800cb18 <tcp_receive+0x5c4>)
 800ca00:	f240 527f 	movw	r2, #1407	; 0x57f
 800ca04:	494a      	ldr	r1, [pc, #296]	; (800cb30 <tcp_receive+0x5dc>)
 800ca06:	4846      	ldr	r0, [pc, #280]	; (800cb20 <tcp_receive+0x5cc>)
 800ca08:	f004 faca 	bl	8010fa0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ca0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f000 80ae 	beq.w	800cb70 <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca14:	68eb      	ldr	r3, [r5, #12]
 800ca16:	8998      	ldrh	r0, [r3, #12]
 800ca18:	f7fb ff8c 	bl	8008934 <lwip_htons>
 800ca1c:	07c0      	lsls	r0, r0, #31
 800ca1e:	f100 80a4 	bmi.w	800cb6a <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 800ca22:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ca26:	f1b8 0f00 	cmp.w	r8, #0
 800ca2a:	d03b      	beq.n	800caa4 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ca2c:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800ca30:	6830      	ldr	r0, [r6, #0]
 800ca32:	883b      	ldrh	r3, [r7, #0]
 800ca34:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ca38:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800ca3c:	4403      	add	r3, r0
 800ca3e:	4411      	add	r1, r2
 800ca40:	1a59      	subs	r1, r3, r1
            while (next &&
 800ca42:	2900      	cmp	r1, #0
 800ca44:	f280 80d1 	bge.w	800cbea <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800ca48:	1a9b      	subs	r3, r3, r2
            if (next &&
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dd2a      	ble.n	800caa4 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ca4e:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ca50:	1a12      	subs	r2, r2, r0
 800ca52:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ca54:	8998      	ldrh	r0, [r3, #12]
 800ca56:	f7fb ff6d 	bl	8008934 <lwip_htons>
 800ca5a:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ca5c:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800ca5e:	bf42      	ittt	mi
 800ca60:	892b      	ldrhmi	r3, [r5, #8]
 800ca62:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800ca66:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800ca68:	8929      	ldrh	r1, [r5, #8]
 800ca6a:	f7fe fc45 	bl	800b2f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ca6e:	68eb      	ldr	r3, [r5, #12]
 800ca70:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800ca74:	8998      	ldrh	r0, [r3, #12]
 800ca76:	f7fb ff5d 	bl	8008934 <lwip_htons>
 800ca7a:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ca7e:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800ca80:	bf18      	it	ne
 800ca82:	2001      	movne	r0, #1
 800ca84:	4448      	add	r0, r9
 800ca86:	b280      	uxth	r0, r0
 800ca88:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ca8a:	4418      	add	r0, r3
 800ca8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	4298      	cmp	r0, r3
 800ca94:	d006      	beq.n	800caa4 <tcp_receive+0x550>
 800ca96:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <tcp_receive+0x5c4>)
 800ca98:	f240 52af 	movw	r2, #1455	; 0x5af
 800ca9c:	4925      	ldr	r1, [pc, #148]	; (800cb34 <tcp_receive+0x5e0>)
 800ca9e:	4820      	ldr	r0, [pc, #128]	; (800cb20 <tcp_receive+0x5cc>)
 800caa0:	f004 fa7e 	bl	8010fa0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800caa4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 800caa8:	e062      	b.n	800cb70 <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800caaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800caac:	6829      	ldr	r1, [r5, #0]
 800caae:	1a5b      	subs	r3, r3, r1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f6bf aee3 	bge.w	800c87c <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cab6:	4b20      	ldr	r3, [pc, #128]	; (800cb38 <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 800cab8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cabc:	6819      	ldr	r1, [r3, #0]
 800cabe:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 800cac0:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 800cac4:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 800cac8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 800cacc:	b289      	uxth	r1, r1
 800cace:	b20b      	sxth	r3, r1
      pcb->sa += m;
 800cad0:	4408      	add	r0, r1
      if (m < 0) {
 800cad2:	2b00      	cmp	r3, #0
      pcb->sa += m;
 800cad4:	b200      	sxth	r0, r0
        m = -m;
 800cad6:	bfb8      	it	lt
 800cad8:	4249      	neglt	r1, r1
      pcb->sa += m;
 800cada:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 800cadc:	bfb8      	it	lt
 800cade:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 800cae0:	4413      	add	r3, r2
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800cae6:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 800caea:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	6363      	str	r3, [r4, #52]	; 0x34
 800caf2:	e6c3      	b.n	800c87c <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 800caf4:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 800caf8:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 800cafc:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 800cb00:	f8d9 9000 	ldr.w	r9, [r9]
 800cb04:	e700      	b.n	800c908 <tcp_receive+0x3b4>
 800cb06:	bf00      	nop
 800cb08:	08013857 	.word	0x08013857
 800cb0c:	0801387f 	.word	0x0801387f
 800cb10:	20008396 	.word	0x20008396
 800cb14:	20008364 	.word	0x20008364
 800cb18:	0801380c 	.word	0x0801380c
 800cb1c:	0801389f 	.word	0x0801389f
 800cb20:	08011dd4 	.word	0x08011dd4
 800cb24:	080138af 	.word	0x080138af
 800cb28:	080138be 	.word	0x080138be
 800cb2c:	080138ce 	.word	0x080138ce
 800cb30:	080138e1 	.word	0x080138e1
 800cb34:	08013918 	.word	0x08013918
 800cb38:	2000bb34 	.word	0x2000bb34
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800cb3c:	4269      	negs	r1, r5
 800cb3e:	b209      	sxth	r1, r1
 800cb40:	f7fe fa8e 	bl	800b060 <pbuf_header>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f aef2 	beq.w	800c92e <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 800cb4a:	4b9d      	ldr	r3, [pc, #628]	; (800cdc0 <tcp_receive+0x86c>)
 800cb4c:	f240 5251 	movw	r2, #1361	; 0x551
 800cb50:	e6e9      	b.n	800c926 <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800cb56:	bfbe      	ittt	lt
 800cb58:	7ea3      	ldrblt	r3, [r4, #26]
 800cb5a:	f043 0302 	orrlt.w	r3, r3, #2
 800cb5e:	76a3      	strblt	r3, [r4, #26]
 800cb60:	e6f1      	b.n	800c946 <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 800cb62:	6803      	ldr	r3, [r0, #0]
 800cb64:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800cb66:	f7fe fed7 	bl	800b918 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cb6a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d1f8      	bne.n	800cb62 <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cb70:	883a      	ldrh	r2, [r7, #0]
 800cb72:	6833      	ldr	r3, [r6, #0]
 800cb74:	4413      	add	r3, r2
 800cb76:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cb78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d206      	bcs.n	800cb8c <tcp_receive+0x638>
 800cb7e:	4b90      	ldr	r3, [pc, #576]	; (800cdc0 <tcp_receive+0x86c>)
 800cb80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cb84:	498f      	ldr	r1, [pc, #572]	; (800cdc4 <tcp_receive+0x870>)
 800cb86:	4890      	ldr	r0, [pc, #576]	; (800cdc8 <tcp_receive+0x874>)
 800cb88:	f004 fa0a 	bl	8010fa0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cb8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cb8e:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800cb90:	883a      	ldrh	r2, [r7, #0]
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800cb96:	f7fe fe55 	bl	800b844 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cb9a:	686b      	ldr	r3, [r5, #4]
 800cb9c:	891a      	ldrh	r2, [r3, #8]
 800cb9e:	b11a      	cbz	r2, 800cba8 <tcp_receive+0x654>
          recv_data = inseg.p;
 800cba0:	4a8a      	ldr	r2, [pc, #552]	; (800cdcc <tcp_receive+0x878>)
 800cba2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cba4:	2300      	movs	r3, #0
 800cba6:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cba8:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cbaa:	4f85      	ldr	r7, [pc, #532]	; (800cdc0 <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cbac:	8998      	ldrh	r0, [r3, #12]
 800cbae:	f7fb fec1 	bl	8008934 <lwip_htons>
 800cbb2:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cbb4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800cdd8 <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 800cbb8:	bf48      	it	mi
 800cbba:	4a85      	ldrmi	r2, [pc, #532]	; (800cdd0 <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cbbc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800cdc8 <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 800cbc0:	bf42      	ittt	mi
 800cbc2:	7813      	ldrbmi	r3, [r2, #0]
 800cbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800cbc8:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800cbca:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800cbcc:	b125      	cbz	r5, 800cbd8 <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cbce:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800cbd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cbd2:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800cbd4:	428b      	cmp	r3, r1
 800cbd6:	d033      	beq.n	800cc40 <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cbd8:	7ea3      	ldrb	r3, [r4, #26]
 800cbda:	07d9      	lsls	r1, r3, #31
 800cbdc:	f140 8087 	bpl.w	800ccee <tcp_receive+0x79a>
 800cbe0:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 800cbe4:	f043 0302 	orr.w	r3, r3, #2
 800cbe8:	e083      	b.n	800ccf2 <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cbea:	f8be 000c 	ldrh.w	r0, [lr, #12]
 800cbee:	f7fb fea1 	bl	8008934 <lwip_htons>
 800cbf2:	07c1      	lsls	r1, r0, #31
 800cbf4:	d51d      	bpl.n	800cc32 <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cbf6:	68eb      	ldr	r3, [r5, #12]
 800cbf8:	8998      	ldrh	r0, [r3, #12]
 800cbfa:	f7fb fe9b 	bl	8008934 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cbfe:	0782      	lsls	r2, r0, #30
 800cc00:	d417      	bmi.n	800cc32 <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cc02:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800cc06:	2001      	movs	r0, #1
 800cc08:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800cc0c:	f7fb fe92 	bl	8008934 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800cc10:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cc12:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 800cc16:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cc1a:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cc1e:	8998      	ldrh	r0, [r3, #12]
 800cc20:	f7fb fe88 	bl	8008934 <lwip_htons>
 800cc24:	f010 0003 	ands.w	r0, r0, #3
 800cc28:	bf18      	it	ne
 800cc2a:	2001      	movne	r0, #1
 800cc2c:	4481      	add	r9, r0
 800cc2e:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 800cc32:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7fe fe6e 	bl	800b918 <tcp_seg_free>
              next = next->next;
 800cc3c:	46c8      	mov	r8, r9
 800cc3e:	e6f2      	b.n	800ca26 <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 800cc40:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cc42:	8990      	ldrh	r0, [r2, #12]
 800cc44:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800cc48:	f7fb fe74 	bl	8008934 <lwip_htons>
 800cc4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc4e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cc52:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cc56:	bf18      	it	ne
 800cc58:	2001      	movne	r0, #1
 800cc5a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cc5c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cc5e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cc60:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cc64:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cc66:	8998      	ldrh	r0, [r3, #12]
 800cc68:	f7fb fe64 	bl	8008934 <lwip_htons>
 800cc6c:	f010 0003 	ands.w	r0, r0, #3
 800cc70:	bf18      	it	ne
 800cc72:	2001      	movne	r0, #1
 800cc74:	4458      	add	r0, fp
 800cc76:	4582      	cmp	sl, r0
 800cc78:	d206      	bcs.n	800cc88 <tcp_receive+0x734>
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	f240 52de 	movw	r2, #1502	; 0x5de
 800cc80:	4641      	mov	r1, r8
 800cc82:	4648      	mov	r0, r9
 800cc84:	f004 f98c 	bl	8010fa0 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cc88:	68eb      	ldr	r3, [r5, #12]
 800cc8a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800cc8e:	8998      	ldrh	r0, [r3, #12]
 800cc90:	f7fb fe50 	bl	8008934 <lwip_htons>
 800cc94:	f010 0003 	ands.w	r0, r0, #3
 800cc98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cc9a:	bf18      	it	ne
 800cc9c:	2001      	movne	r0, #1
 800cc9e:	4450      	add	r0, sl
 800cca0:	1a18      	subs	r0, r3, r0
 800cca2:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7fe fdcd 	bl	800b844 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800ccaa:	6869      	ldr	r1, [r5, #4]
 800ccac:	890b      	ldrh	r3, [r1, #8]
 800ccae:	b133      	cbz	r3, 800ccbe <tcp_receive+0x76a>
            if (recv_data) {
 800ccb0:	4b46      	ldr	r3, [pc, #280]	; (800cdcc <tcp_receive+0x878>)
 800ccb2:	6818      	ldr	r0, [r3, #0]
 800ccb4:	b1c8      	cbz	r0, 800ccea <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 800ccb6:	f7fe fbb3 	bl	800b420 <pbuf_cat>
            cseg->p = NULL;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ccbe:	68eb      	ldr	r3, [r5, #12]
 800ccc0:	8998      	ldrh	r0, [r3, #12]
 800ccc2:	f7fb fe37 	bl	8008934 <lwip_htons>
 800ccc6:	07c0      	lsls	r0, r0, #31
 800ccc8:	d509      	bpl.n	800ccde <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 800ccca:	4a41      	ldr	r2, [pc, #260]	; (800cdd0 <tcp_receive+0x87c>)
 800cccc:	7813      	ldrb	r3, [r2, #0]
 800ccce:	f043 0320 	orr.w	r3, r3, #32
 800ccd2:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ccd4:	7d23      	ldrb	r3, [r4, #20]
 800ccd6:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800ccd8:	bf04      	itt	eq
 800ccda:	2307      	moveq	r3, #7
 800ccdc:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800ccde:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800cce0:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800cce2:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800cce4:	f7fe fe18 	bl	800b918 <tcp_seg_free>
 800cce8:	e76f      	b.n	800cbca <tcp_receive+0x676>
              recv_data = cseg->p;
 800ccea:	6019      	str	r1, [r3, #0]
 800ccec:	e7e5      	b.n	800ccba <tcp_receive+0x766>
        tcp_ack(pcb);
 800ccee:	f043 0301 	orr.w	r3, r3, #1
 800ccf2:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800ccf4:	b003      	add	sp, #12
 800ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f001 faa6 	bl	800e24c <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800cd00:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800cd02:	b925      	cbnz	r5, 800cd0e <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cd04:	4833      	ldr	r0, [pc, #204]	; (800cdd4 <tcp_receive+0x880>)
 800cd06:	f7fe fe1d 	bl	800b944 <tcp_seg_copy>
 800cd0a:	6720      	str	r0, [r4, #112]	; 0x70
 800cd0c:	e7f2      	b.n	800ccf4 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 800cd0e:	6833      	ldr	r3, [r6, #0]
 800cd10:	f04f 0800 	mov.w	r8, #0
 800cd14:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800cd18:	f103 0c01 	add.w	ip, r3, #1
 800cd1c:	68e8      	ldr	r0, [r5, #12]
 800cd1e:	6842      	ldr	r2, [r0, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d117      	bne.n	800cd54 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 800cd24:	482b      	ldr	r0, [pc, #172]	; (800cdd4 <tcp_receive+0x880>)
 800cd26:	892b      	ldrh	r3, [r5, #8]
 800cd28:	8902      	ldrh	r2, [r0, #8]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d9e2      	bls.n	800ccf4 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 800cd2e:	f7fe fe09 	bl	800b944 <tcp_seg_copy>
                if (cseg != NULL) {
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0de      	beq.n	800ccf4 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 800cd36:	f1b8 0f00 	cmp.w	r8, #0
 800cd3a:	d009      	beq.n	800cd50 <tcp_receive+0x7fc>
                    prev->next = cseg;
 800cd3c:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800cd40:	4629      	mov	r1, r5
}
 800cd42:	b003      	add	sp, #12
 800cd44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800cd48:	f7ff bbc6 	b.w	800c4d8 <tcp_oos_insert_segment>
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	e7e5      	b.n	800cd1c <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 800cd50:	6720      	str	r0, [r4, #112]	; 0x70
 800cd52:	e7f5      	b.n	800cd40 <tcp_receive+0x7ec>
              if (prev == NULL) {
 800cd54:	f1b8 0f00 	cmp.w	r8, #0
 800cd58:	d109      	bne.n	800cd6e <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cd5a:	1a99      	subs	r1, r3, r2
 800cd5c:	2900      	cmp	r1, #0
 800cd5e:	da3d      	bge.n	800cddc <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 800cd60:	481c      	ldr	r0, [pc, #112]	; (800cdd4 <tcp_receive+0x880>)
 800cd62:	f7fe fdef 	bl	800b944 <tcp_seg_copy>
                  if (cseg != NULL) {
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d0c4      	beq.n	800ccf4 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 800cd6a:	6720      	str	r0, [r4, #112]	; 0x70
 800cd6c:	e7e8      	b.n	800cd40 <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800cd6e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800cd72:	6849      	ldr	r1, [r1, #4]
 800cd74:	ebae 0101 	sub.w	r1, lr, r1
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	db2f      	blt.n	800cddc <tcp_receive+0x888>
 800cd7c:	ebac 0102 	sub.w	r1, ip, r2
 800cd80:	2900      	cmp	r1, #0
 800cd82:	dc2b      	bgt.n	800cddc <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 800cd84:	4813      	ldr	r0, [pc, #76]	; (800cdd4 <tcp_receive+0x880>)
 800cd86:	f7fe fddd 	bl	800b944 <tcp_seg_copy>
                  if (cseg != NULL) {
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d0b1      	beq.n	800ccf4 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cd90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd94:	6831      	ldr	r1, [r6, #0]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	1a5b      	subs	r3, r3, r1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	dd07      	ble.n	800cdb4 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cda4:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 800cda6:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cdaa:	b289      	uxth	r1, r1
 800cdac:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cdb0:	f7fe faa2 	bl	800b2f8 <pbuf_realloc>
                    prev->next = cseg;
 800cdb4:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800cdb8:	4629      	mov	r1, r5
 800cdba:	4620      	mov	r0, r4
 800cdbc:	e7c1      	b.n	800cd42 <tcp_receive+0x7ee>
 800cdbe:	bf00      	nop
 800cdc0:	0801380c 	.word	0x0801380c
 800cdc4:	08013953 	.word	0x08013953
 800cdc8:	08011dd4 	.word	0x08011dd4
 800cdcc:	20008378 	.word	0x20008378
 800cdd0:	2000837c 	.word	0x2000837c
 800cdd4:	20008364 	.word	0x20008364
 800cdd8:	08013972 	.word	0x08013972
              if (next->next == NULL &&
 800cddc:	6829      	ldr	r1, [r5, #0]
 800cdde:	46a8      	mov	r8, r5
 800cde0:	2900      	cmp	r1, #0
 800cde2:	d1b3      	bne.n	800cd4c <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cde4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dd84      	ble.n	800ccf4 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cdea:	8980      	ldrh	r0, [r0, #12]
 800cdec:	f7fb fda2 	bl	8008934 <lwip_htons>
 800cdf0:	07c2      	lsls	r2, r0, #31
 800cdf2:	f53f af7f 	bmi.w	800ccf4 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 800cdf6:	483d      	ldr	r0, [pc, #244]	; (800ceec <tcp_receive+0x998>)
 800cdf8:	f7fe fda4 	bl	800b944 <tcp_seg_copy>
 800cdfc:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	f43f af78 	beq.w	800ccf4 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ce04:	68eb      	ldr	r3, [r5, #12]
 800ce06:	6831      	ldr	r1, [r6, #0]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	892b      	ldrh	r3, [r5, #8]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	1a5b      	subs	r3, r3, r1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dd05      	ble.n	800ce20 <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ce14:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800ce16:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ce18:	b289      	uxth	r1, r1
 800ce1a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800ce1c:	f7fe fa6c 	bl	800b2f8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ce20:	6832      	ldr	r2, [r6, #0]
 800ce22:	883b      	ldrh	r3, [r7, #0]
 800ce24:	4413      	add	r3, r2
 800ce26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f77f af60 	ble.w	800ccf4 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	8998      	ldrh	r0, [r3, #12]
 800ce3a:	f7fb fd7b 	bl	8008934 <lwip_htons>
 800ce3e:	07c3      	lsls	r3, r0, #31
 800ce40:	d511      	bpl.n	800ce66 <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ce42:	682b      	ldr	r3, [r5, #0]
 800ce44:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800ce48:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800ce52:	f7fb fd6f 	bl	8008934 <lwip_htons>
 800ce56:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ce5a:	f7fb fd6b 	bl	8008934 <lwip_htons>
 800ce5e:	ea40 0808 	orr.w	r8, r0, r8
 800ce62:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ce66:	6832      	ldr	r2, [r6, #0]
 800ce68:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800ce6a:	682b      	ldr	r3, [r5, #0]
 800ce6c:	1a89      	subs	r1, r1, r2
 800ce6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800ce70:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ce72:	4411      	add	r1, r2
 800ce74:	b289      	uxth	r1, r1
 800ce76:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ce78:	f7fe fa3e 	bl	800b2f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	891d      	ldrh	r5, [r3, #8]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	8998      	ldrh	r0, [r3, #12]
 800ce84:	f7fb fd56 	bl	8008934 <lwip_htons>
 800ce88:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce8c:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800ce8e:	bf18      	it	ne
 800ce90:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce92:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800ce94:	4428      	add	r0, r5
 800ce96:	b280      	uxth	r0, r0
 800ce98:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce9a:	4418      	add	r0, r3
 800ce9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ce9e:	4413      	add	r3, r2
 800cea0:	4298      	cmp	r0, r3
 800cea2:	f43f af27 	beq.w	800ccf4 <tcp_receive+0x7a0>
 800cea6:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <tcp_receive+0x99c>)
 800cea8:	f240 627b 	movw	r2, #1659	; 0x67b
 800ceac:	4911      	ldr	r1, [pc, #68]	; (800cef4 <tcp_receive+0x9a0>)
 800ceae:	4812      	ldr	r0, [pc, #72]	; (800cef8 <tcp_receive+0x9a4>)
}
 800ceb0:	b003      	add	sp, #12
 800ceb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ceb6:	f004 b873 	b.w	8010fa0 <iprintf>
      tcp_send_empty_ack(pcb);
 800ceba:	4620      	mov	r0, r4
}
 800cebc:	b003      	add	sp, #12
 800cebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800cec2:	f001 b9c3 	b.w	800e24c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cec6:	6833      	ldr	r3, [r6, #0]
 800cec8:	1a99      	subs	r1, r3, r2
 800ceca:	2900      	cmp	r1, #0
 800cecc:	db06      	blt.n	800cedc <tcp_receive+0x988>
 800cece:	3301      	adds	r3, #1
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ced4:	1a9b      	subs	r3, r3, r2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f77f af0c 	ble.w	800ccf4 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 800cedc:	7ea3      	ldrb	r3, [r4, #26]
 800cede:	e681      	b.n	800cbe4 <tcp_receive+0x690>
        pcb->dupacks = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cee6:	f7ff bbaa 	b.w	800c63e <tcp_receive+0xea>
 800ceea:	bf00      	nop
 800ceec:	20008364 	.word	0x20008364
 800cef0:	0801380c 	.word	0x0801380c
 800cef4:	080138e1 	.word	0x080138e1
 800cef8:	08011dd4 	.word	0x08011dd4

0800cefc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800cefc:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <tcp_getoptbyte+0x30>)
 800cefe:	4a0c      	ldr	r2, [pc, #48]	; (800cf30 <tcp_getoptbyte+0x34>)
 800cf00:	6819      	ldr	r1, [r3, #0]
{
 800cf02:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800cf04:	b121      	cbz	r1, 800cf10 <tcp_getoptbyte+0x14>
 800cf06:	480b      	ldr	r0, [pc, #44]	; (800cf34 <tcp_getoptbyte+0x38>)
 800cf08:	8813      	ldrh	r3, [r2, #0]
 800cf0a:	8800      	ldrh	r0, [r0, #0]
 800cf0c:	4283      	cmp	r3, r0
 800cf0e:	d207      	bcs.n	800cf20 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800cf10:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800cf12:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800cf14:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800cf16:	1c48      	adds	r0, r1, #1
 800cf18:	440b      	add	r3, r1
 800cf1a:	8010      	strh	r0, [r2, #0]
 800cf1c:	7d18      	ldrb	r0, [r3, #20]
 800cf1e:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800cf20:	1c5c      	adds	r4, r3, #1
 800cf22:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800cf24:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800cf26:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 800cf28:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800cf2a:	bd10      	pop	{r4, pc}
 800cf2c:	20008390 	.word	0x20008390
 800cf30:	20008384 	.word	0x20008384
 800cf34:	2000838c 	.word	0x2000838c
 800cf38:	20008388 	.word	0x20008388

0800cf3c <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf3e:	4d19      	ldr	r5, [pc, #100]	; (800cfa4 <tcp_parseopt.isra.1.part.2+0x68>)
 800cf40:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 800cf42:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf44:	4e18      	ldr	r6, [pc, #96]	; (800cfa8 <tcp_parseopt.isra.1.part.2+0x6c>)
 800cf46:	802b      	strh	r3, [r5, #0]
 800cf48:	8834      	ldrh	r4, [r6, #0]
 800cf4a:	882b      	ldrh	r3, [r5, #0]
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d300      	bcc.n	800cf52 <tcp_parseopt.isra.1.part.2+0x16>
 800cf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800cf52:	f7ff ffd3 	bl	800cefc <tcp_getoptbyte>
      switch (opt) {
 800cf56:	2801      	cmp	r0, #1
 800cf58:	d0f6      	beq.n	800cf48 <tcp_parseopt.isra.1.part.2+0xc>
 800cf5a:	d3f9      	bcc.n	800cf50 <tcp_parseopt.isra.1.part.2+0x14>
 800cf5c:	2802      	cmp	r0, #2
 800cf5e:	d117      	bne.n	800cf90 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cf60:	f7ff ffcc 	bl	800cefc <tcp_getoptbyte>
 800cf64:	2804      	cmp	r0, #4
 800cf66:	d1f3      	bne.n	800cf50 <tcp_parseopt.isra.1.part.2+0x14>
 800cf68:	882b      	ldrh	r3, [r5, #0]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	42a3      	cmp	r3, r4
 800cf6e:	daef      	bge.n	800cf50 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800cf70:	f7ff ffc4 	bl	800cefc <tcp_getoptbyte>
 800cf74:	0200      	lsls	r0, r0, #8
 800cf76:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 800cf78:	f7ff ffc0 	bl	800cefc <tcp_getoptbyte>
 800cf7c:	4320      	orrs	r0, r4
 800cf7e:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cf80:	1e43      	subs	r3, r0, #1
 800cf82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cf86:	bf28      	it	cs
 800cf88:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800cf8c:	8038      	strh	r0, [r7, #0]
 800cf8e:	e7db      	b.n	800cf48 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800cf90:	f7ff ffb4 	bl	800cefc <tcp_getoptbyte>
        if (data < 2) {
 800cf94:	2801      	cmp	r0, #1
 800cf96:	d9db      	bls.n	800cf50 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800cf98:	882b      	ldrh	r3, [r5, #0]
 800cf9a:	3b02      	subs	r3, #2
 800cf9c:	4418      	add	r0, r3
 800cf9e:	8028      	strh	r0, [r5, #0]
 800cfa0:	e7d2      	b.n	800cf48 <tcp_parseopt.isra.1.part.2+0xc>
 800cfa2:	bf00      	nop
 800cfa4:	20008384 	.word	0x20008384
 800cfa8:	20008394 	.word	0x20008394

0800cfac <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <tcp_input_delayed_close+0x38>)
{
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800cfb2:	7818      	ldrb	r0, [r3, #0]
 800cfb4:	f010 0010 	ands.w	r0, r0, #16
 800cfb8:	d012      	beq.n	800cfe0 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cfba:	7ea3      	ldrb	r3, [r4, #26]
 800cfbc:	06db      	lsls	r3, r3, #27
 800cfbe:	d406      	bmi.n	800cfce <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cfc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800cfc4:	b11b      	cbz	r3, 800cfce <tcp_input_delayed_close+0x22>
 800cfc6:	f06f 010e 	mvn.w	r1, #14
 800cfca:	6920      	ldr	r0, [r4, #16]
 800cfcc:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4805      	ldr	r0, [pc, #20]	; (800cfe8 <tcp_input_delayed_close+0x3c>)
 800cfd2:	f7fe ff37 	bl	800be44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	4621      	mov	r1, r4
 800cfda:	f7fd fec1 	bl	800ad60 <memp_free>
 800cfde:	2001      	movs	r0, #1
}
 800cfe0:	bd10      	pop	{r4, pc}
 800cfe2:	bf00      	nop
 800cfe4:	2000837c 	.word	0x2000837c
 800cfe8:	2000bb30 	.word	0x2000bb30

0800cfec <tcp_input>:
{
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 800cff0:	6843      	ldr	r3, [r0, #4]
{
 800cff2:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 800cff4:	4e9e      	ldr	r6, [pc, #632]	; (800d270 <tcp_input+0x284>)
{
 800cff6:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800cff8:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800cffa:	8943      	ldrh	r3, [r0, #10]
 800cffc:	2b13      	cmp	r3, #19
 800cffe:	f240 81b2 	bls.w	800d366 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d002:	4f9c      	ldr	r7, [pc, #624]	; (800d274 <tcp_input+0x288>)
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	46b8      	mov	r8, r7
 800d008:	6978      	ldr	r0, [r7, #20]
 800d00a:	f7fd f864 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 800d00e:	4604      	mov	r4, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	f040 81a8 	bne.w	800d366 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d01c:	2be0      	cmp	r3, #224	; 0xe0
 800d01e:	f000 81a2 	beq.w	800d366 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800d022:	6833      	ldr	r3, [r6, #0]
 800d024:	8998      	ldrh	r0, [r3, #12]
 800d026:	f7fb fc85 	bl	8008934 <lwip_htons>
 800d02a:	0a81      	lsrs	r1, r0, #10
 800d02c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d030:	2913      	cmp	r1, #19
 800d032:	f240 8198 	bls.w	800d366 <tcp_input+0x37a>
 800d036:	b289      	uxth	r1, r1
 800d038:	892b      	ldrh	r3, [r5, #8]
 800d03a:	428b      	cmp	r3, r1
 800d03c:	f0c0 8193 	bcc.w	800d366 <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d040:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800d044:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d046:	4a8c      	ldr	r2, [pc, #560]	; (800d278 <tcp_input+0x28c>)
 800d048:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800d04a:	4f8c      	ldr	r7, [pc, #560]	; (800d27c <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 800d04c:	4288      	cmp	r0, r1
 800d04e:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 800d050:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d052:	8013      	strh	r3, [r2, #0]
 800d054:	4c8a      	ldr	r4, [pc, #552]	; (800d280 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 800d056:	d344      	bcc.n	800d0e2 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800d058:	4249      	negs	r1, r1
 800d05a:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800d05c:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800d05e:	f7fd ffff 	bl	800b060 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d062:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 800d064:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d068:	f8df b268 	ldr.w	fp, [pc, #616]	; 800d2d4 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d06c:	8820      	ldrh	r0, [r4, #0]
 800d06e:	f7fb fc61 	bl	8008934 <lwip_htons>
 800d072:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d074:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d076:	4f83      	ldr	r7, [pc, #524]	; (800d284 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d078:	8860      	ldrh	r0, [r4, #2]
 800d07a:	f7fb fc5b 	bl	8008934 <lwip_htons>
 800d07e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d080:	6834      	ldr	r4, [r6, #0]
 800d082:	6860      	ldr	r0, [r4, #4]
 800d084:	f7fb fc59 	bl	800893a <lwip_htonl>
 800d088:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d08a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d08c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d090:	68a0      	ldr	r0, [r4, #8]
 800d092:	f7fb fc52 	bl	800893a <lwip_htonl>
 800d096:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d098:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d09a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d09c:	89e0      	ldrh	r0, [r4, #14]
 800d09e:	f7fb fc49 	bl	8008934 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800d0a2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d0a4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800d0a6:	8998      	ldrh	r0, [r3, #12]
 800d0a8:	f7fb fc44 	bl	8008934 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d0ac:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 800d0ae:	b2c0      	uxtb	r0, r0
 800d0b0:	4a75      	ldr	r2, [pc, #468]	; (800d288 <tcp_input+0x29c>)
 800d0b2:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d0b6:	f010 0003 	ands.w	r0, r0, #3
 800d0ba:	9203      	str	r2, [sp, #12]
 800d0bc:	bf18      	it	ne
 800d0be:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 800d0c0:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d0c2:	4b72      	ldr	r3, [pc, #456]	; (800d28c <tcp_input+0x2a0>)
 800d0c4:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0c6:	4972      	ldr	r1, [pc, #456]	; (800d290 <tcp_input+0x2a4>)
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	680c      	ldr	r4, [r1, #0]
 800d0cc:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d0ce:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	d140      	bne.n	800d156 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0d4:	4b6f      	ldr	r3, [pc, #444]	; (800d294 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0d6:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800d298 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0da:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0dc:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 800d2d8 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0e0:	e148      	b.n	800d374 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	b92b      	cbnz	r3, 800d0f2 <tcp_input+0x106>
 800d0e6:	4b6c      	ldr	r3, [pc, #432]	; (800d298 <tcp_input+0x2ac>)
 800d0e8:	22b2      	movs	r2, #178	; 0xb2
 800d0ea:	496c      	ldr	r1, [pc, #432]	; (800d29c <tcp_input+0x2b0>)
 800d0ec:	486c      	ldr	r0, [pc, #432]	; (800d2a0 <tcp_input+0x2b4>)
 800d0ee:	f003 ff57 	bl	8010fa0 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 800d0f2:	f06f 0113 	mvn.w	r1, #19
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f7fd ffb2 	bl	800b060 <pbuf_header>
    tcphdr_opt1len = p->len;
 800d0fc:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d0fe:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800d100:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800d102:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d104:	881c      	ldrh	r4, [r3, #0]
 800d106:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800d108:	4249      	negs	r1, r1
 800d10a:	b209      	sxth	r1, r1
 800d10c:	f7fd ffa8 	bl	800b060 <pbuf_header>
    if (opt2len > p->next->len) {
 800d110:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d112:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800d114:	8943      	ldrh	r3, [r0, #10]
 800d116:	42a3      	cmp	r3, r4
 800d118:	f0c0 8125 	bcc.w	800d366 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 800d11c:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800d11e:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 800d120:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800d122:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800d124:	f7fd ff9c 	bl	800b060 <pbuf_header>
    p->tot_len -= opt2len;
 800d128:	892b      	ldrh	r3, [r5, #8]
 800d12a:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d12c:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 800d12e:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d130:	b12b      	cbz	r3, 800d13e <tcp_input+0x152>
 800d132:	4b59      	ldr	r3, [pc, #356]	; (800d298 <tcp_input+0x2ac>)
 800d134:	22cf      	movs	r2, #207	; 0xcf
 800d136:	495b      	ldr	r1, [pc, #364]	; (800d2a4 <tcp_input+0x2b8>)
 800d138:	4859      	ldr	r0, [pc, #356]	; (800d2a0 <tcp_input+0x2b4>)
 800d13a:	f003 ff31 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	892a      	ldrh	r2, [r5, #8]
 800d142:	891b      	ldrh	r3, [r3, #8]
 800d144:	429a      	cmp	r2, r3
 800d146:	d08c      	beq.n	800d062 <tcp_input+0x76>
 800d148:	4b53      	ldr	r3, [pc, #332]	; (800d298 <tcp_input+0x2ac>)
 800d14a:	22d0      	movs	r2, #208	; 0xd0
 800d14c:	4956      	ldr	r1, [pc, #344]	; (800d2a8 <tcp_input+0x2bc>)
 800d14e:	4854      	ldr	r0, [pc, #336]	; (800d2a0 <tcp_input+0x2b4>)
 800d150:	f003 ff26 	bl	8010fa0 <iprintf>
 800d154:	e785      	b.n	800d062 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d156:	7d23      	ldrb	r3, [r4, #20]
 800d158:	b92b      	cbnz	r3, 800d166 <tcp_input+0x17a>
 800d15a:	4b4f      	ldr	r3, [pc, #316]	; (800d298 <tcp_input+0x2ac>)
 800d15c:	22e2      	movs	r2, #226	; 0xe2
 800d15e:	4953      	ldr	r1, [pc, #332]	; (800d2ac <tcp_input+0x2c0>)
 800d160:	484f      	ldr	r0, [pc, #316]	; (800d2a0 <tcp_input+0x2b4>)
 800d162:	f003 ff1d 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d166:	7d23      	ldrb	r3, [r4, #20]
 800d168:	2b0a      	cmp	r3, #10
 800d16a:	d105      	bne.n	800d178 <tcp_input+0x18c>
 800d16c:	4b4a      	ldr	r3, [pc, #296]	; (800d298 <tcp_input+0x2ac>)
 800d16e:	22e3      	movs	r2, #227	; 0xe3
 800d170:	494f      	ldr	r1, [pc, #316]	; (800d2b0 <tcp_input+0x2c4>)
 800d172:	484b      	ldr	r0, [pc, #300]	; (800d2a0 <tcp_input+0x2b4>)
 800d174:	f003 ff14 	bl	8010fa0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d178:	7d23      	ldrb	r3, [r4, #20]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d105      	bne.n	800d18a <tcp_input+0x19e>
 800d17e:	4b46      	ldr	r3, [pc, #280]	; (800d298 <tcp_input+0x2ac>)
 800d180:	22e4      	movs	r2, #228	; 0xe4
 800d182:	494c      	ldr	r1, [pc, #304]	; (800d2b4 <tcp_input+0x2c8>)
 800d184:	4846      	ldr	r0, [pc, #280]	; (800d2a0 <tcp_input+0x2b4>)
 800d186:	f003 ff0b 	bl	8010fa0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800d18a:	6832      	ldr	r2, [r6, #0]
 800d18c:	8b21      	ldrh	r1, [r4, #24]
 800d18e:	8813      	ldrh	r3, [r2, #0]
 800d190:	4299      	cmp	r1, r3
 800d192:	68e3      	ldr	r3, [r4, #12]
 800d194:	d169      	bne.n	800d26a <tcp_input+0x27e>
 800d196:	8ae1      	ldrh	r1, [r4, #22]
 800d198:	8852      	ldrh	r2, [r2, #2]
 800d19a:	4291      	cmp	r1, r2
 800d19c:	d165      	bne.n	800d26a <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 800d19e:	6861      	ldr	r1, [r4, #4]
 800d1a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d1a4:	4291      	cmp	r1, r2
 800d1a6:	d160      	bne.n	800d26a <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d1a8:	6821      	ldr	r1, [r4, #0]
 800d1aa:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800d1ae:	4291      	cmp	r1, r2
 800d1b0:	d15b      	bne.n	800d26a <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	f040 8406 	bne.w	800d9c4 <tcp_input+0x9d8>
 800d1b8:	4b37      	ldr	r3, [pc, #220]	; (800d298 <tcp_input+0x2ac>)
 800d1ba:	22ec      	movs	r2, #236	; 0xec
 800d1bc:	493e      	ldr	r1, [pc, #248]	; (800d2b8 <tcp_input+0x2cc>)
 800d1be:	4838      	ldr	r0, [pc, #224]	; (800d2a0 <tcp_input+0x2b4>)
 800d1c0:	f003 feee 	bl	8010fa0 <iprintf>
      if (prev != NULL) {
 800d1c4:	f1ba 0f00 	cmp.w	sl, #0
 800d1c8:	d007      	beq.n	800d1da <tcp_input+0x1ee>
        prev->next = pcb->next;
 800d1ca:	68e3      	ldr	r3, [r4, #12]
 800d1cc:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 800d1d0:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800d1d4:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800d1d8:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	429c      	cmp	r4, r3
 800d1de:	d105      	bne.n	800d1ec <tcp_input+0x200>
 800d1e0:	4b2d      	ldr	r3, [pc, #180]	; (800d298 <tcp_input+0x2ac>)
 800d1e2:	22f4      	movs	r2, #244	; 0xf4
 800d1e4:	4935      	ldr	r1, [pc, #212]	; (800d2bc <tcp_input+0x2d0>)
 800d1e6:	482e      	ldr	r0, [pc, #184]	; (800d2a0 <tcp_input+0x2b4>)
 800d1e8:	f003 feda 	bl	8010fa0 <iprintf>
    inseg.next = NULL;
 800d1ec:	4b34      	ldr	r3, [pc, #208]	; (800d2c0 <tcp_input+0x2d4>)
 800d1ee:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 800d1f0:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 800d1f2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d1f4:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 800d1f6:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 800d1f8:	4832      	ldr	r0, [pc, #200]	; (800d2c4 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 800d1fa:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 800d1fc:	605d      	str	r5, [r3, #4]
 800d1fe:	4680      	mov	r8, r0
    recv_data = NULL;
 800d200:	4b31      	ldr	r3, [pc, #196]	; (800d2c8 <tcp_input+0x2dc>)
    recv_acked = 0;
 800d202:	4932      	ldr	r1, [pc, #200]	; (800d2cc <tcp_input+0x2e0>)
    recv_data = NULL;
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	469a      	mov	sl, r3
    recv_flags = 0;
 800d208:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 800d20a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 800d20c:	9a03      	ldr	r2, [sp, #12]
 800d20e:	9105      	str	r1, [sp, #20]
 800d210:	7812      	ldrb	r2, [r2, #0]
 800d212:	f012 0f08 	tst.w	r2, #8
 800d216:	d003      	beq.n	800d220 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 800d218:	7b6b      	ldrb	r3, [r5, #13]
 800d21a:	f043 0301 	orr.w	r3, r3, #1
 800d21e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800d220:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d222:	4d2b      	ldr	r5, [pc, #172]	; (800d2d0 <tcp_input+0x2e4>)
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 8137 	beq.w	800d498 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7fe ff1c 	bl	800c068 <tcp_process_refused_data>
 800d230:	300d      	adds	r0, #13
 800d232:	d008      	beq.n	800d246 <tcp_input+0x25a>
 800d234:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 812e 	beq.w	800d498 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 8129 	beq.w	800d498 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800d246:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d248:	b913      	cbnz	r3, 800d250 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fffe 	bl	800e24c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800d250:	2400      	movs	r4, #0
 800d252:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 800d254:	4d1a      	ldr	r5, [pc, #104]	; (800d2c0 <tcp_input+0x2d4>)
    recv_data = NULL;
 800d256:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 800d25a:	6868      	ldr	r0, [r5, #4]
 800d25c:	b110      	cbz	r0, 800d264 <tcp_input+0x278>
      pbuf_free(inseg.p);
 800d25e:	f7fd ff05 	bl	800b06c <pbuf_free>
      inseg.p = NULL;
 800d262:	606c      	str	r4, [r5, #4]
}
 800d264:	b009      	add	sp, #36	; 0x24
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d26a:	46a2      	mov	sl, r4
 800d26c:	461c      	mov	r4, r3
 800d26e:	e72f      	b.n	800d0d0 <tcp_input+0xe4>
 800d270:	20008388 	.word	0x20008388
 800d274:	2000840c 	.word	0x2000840c
 800d278:	20008394 	.word	0x20008394
 800d27c:	20008390 	.word	0x20008390
 800d280:	2000838c 	.word	0x2000838c
 800d284:	2000835c 	.word	0x2000835c
 800d288:	20008360 	.word	0x20008360
 800d28c:	20008396 	.word	0x20008396
 800d290:	2000bb30 	.word	0x2000bb30
 800d294:	2000bb40 	.word	0x2000bb40
 800d298:	0801380c 	.word	0x0801380c
 800d29c:	08013656 	.word	0x08013656
 800d2a0:	08011dd4 	.word	0x08011dd4
 800d2a4:	08013666 	.word	0x08013666
 800d2a8:	08013672 	.word	0x08013672
 800d2ac:	08013691 	.word	0x08013691
 800d2b0:	080136b8 	.word	0x080136b8
 800d2b4:	080136e2 	.word	0x080136e2
 800d2b8:	08013709 	.word	0x08013709
 800d2bc:	08013734 	.word	0x08013734
 800d2c0:	20008364 	.word	0x20008364
 800d2c4:	2000837c 	.word	0x2000837c
 800d2c8:	20008378 	.word	0x20008378
 800d2cc:	20008374 	.word	0x20008374
 800d2d0:	2000bb44 	.word	0x2000bb44
 800d2d4:	20008380 	.word	0x20008380
 800d2d8:	0801375e 	.word	0x0801375e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d2dc:	7d23      	ldrb	r3, [r4, #20]
 800d2de:	2b0a      	cmp	r3, #10
 800d2e0:	d005      	beq.n	800d2ee <tcp_input+0x302>
 800d2e2:	4653      	mov	r3, sl
 800d2e4:	22fe      	movs	r2, #254	; 0xfe
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	489d      	ldr	r0, [pc, #628]	; (800d560 <tcp_input+0x574>)
 800d2ea:	f003 fe59 	bl	8010fa0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800d2ee:	6833      	ldr	r3, [r6, #0]
 800d2f0:	8b22      	ldrh	r2, [r4, #24]
 800d2f2:	8818      	ldrh	r0, [r3, #0]
 800d2f4:	4290      	cmp	r0, r2
 800d2f6:	d13c      	bne.n	800d372 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 800d2f8:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 800d2fa:	885a      	ldrh	r2, [r3, #2]
 800d2fc:	428a      	cmp	r2, r1
 800d2fe:	d138      	bne.n	800d372 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 800d300:	6861      	ldr	r1, [r4, #4]
 800d302:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d306:	4299      	cmp	r1, r3
 800d308:	d133      	bne.n	800d372 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d30a:	6821      	ldr	r1, [r4, #0]
 800d30c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d310:	4299      	cmp	r1, r3
 800d312:	d12e      	bne.n	800d372 <tcp_input+0x386>
  if (flags & TCP_RST) {
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	0759      	lsls	r1, r3, #29
 800d31a:	d424      	bmi.n	800d366 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 800d31c:	079e      	lsls	r6, r3, #30
 800d31e:	d513      	bpl.n	800d348 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d320:	f8db 1000 	ldr.w	r1, [fp]
 800d324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d326:	1acb      	subs	r3, r1, r3
 800d328:	d413      	bmi.n	800d352 <tcp_input+0x366>
 800d32a:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800d32c:	1b9b      	subs	r3, r3, r6
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dc0f      	bgt.n	800d352 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d332:	9b04      	ldr	r3, [sp, #16]
 800d334:	881c      	ldrh	r4, [r3, #0]
 800d336:	9001      	str	r0, [sp, #4]
 800d338:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d33a:	4b8a      	ldr	r3, [pc, #552]	; (800d564 <tcp_input+0x578>)
 800d33c:	4421      	add	r1, r4
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	6838      	ldr	r0, [r7, #0]
 800d342:	f001 f937 	bl	800e5b4 <tcp_rst>
 800d346:	e00e      	b.n	800d366 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 800d348:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 800d34a:	bf42      	ittt	mi
 800d34c:	4b86      	ldrmi	r3, [pc, #536]	; (800d568 <tcp_input+0x57c>)
 800d34e:	681b      	ldrmi	r3, [r3, #0]
 800d350:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	b133      	cbz	r3, 800d366 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 800d358:	7ea3      	ldrb	r3, [r4, #26]
 800d35a:	f043 0302 	orr.w	r3, r3, #2
 800d35e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800d360:	4620      	mov	r0, r4
 800d362:	f000 ffa9 	bl	800e2b8 <tcp_output>
  pbuf_free(p);
 800d366:	4628      	mov	r0, r5
}
 800d368:	b009      	add	sp, #36	; 0x24
 800d36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800d36e:	f7fd be7d 	b.w	800b06c <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d372:	68e4      	ldr	r4, [r4, #12]
 800d374:	2c00      	cmp	r4, #0
 800d376:	d1b1      	bne.n	800d2dc <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d378:	4b7c      	ldr	r3, [pc, #496]	; (800d56c <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 800d37a:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d37c:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d37e:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d382:	4689      	mov	r9, r1
 800d384:	f1b9 0f00 	cmp.w	r9, #0
 800d388:	d111      	bne.n	800d3ae <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d38a:	8990      	ldrh	r0, [r2, #12]
 800d38c:	f7fb fad2 	bl	8008934 <lwip_htons>
 800d390:	0743      	lsls	r3, r0, #29
 800d392:	d4e8      	bmi.n	800d366 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d394:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d396:	9a04      	ldr	r2, [sp, #16]
 800d398:	f8db 1000 	ldr.w	r1, [fp]
 800d39c:	8810      	ldrh	r0, [r2, #0]
 800d39e:	881a      	ldrh	r2, [r3, #0]
 800d3a0:	4401      	add	r1, r0
 800d3a2:	9201      	str	r2, [sp, #4]
 800d3a4:	885b      	ldrh	r3, [r3, #2]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	4b6e      	ldr	r3, [pc, #440]	; (800d564 <tcp_input+0x578>)
 800d3aa:	1d1a      	adds	r2, r3, #4
 800d3ac:	e7c8      	b.n	800d340 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 800d3ae:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800d3b2:	8853      	ldrh	r3, [r2, #2]
 800d3b4:	4283      	cmp	r3, r0
 800d3b6:	d107      	bne.n	800d3c8 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d3b8:	f8d9 3000 	ldr.w	r3, [r9]
 800d3bc:	4573      	cmp	r3, lr
 800d3be:	f000 82dd 	beq.w	800d97c <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 82da 	beq.w	800d97c <tcp_input+0x990>
 800d3c8:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3ca:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800d3ce:	e7d9      	b.n	800d384 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 800d3d0:	0798      	lsls	r0, r3, #30
 800d3d2:	d5c8      	bpl.n	800d366 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 800d3d4:	f899 0015 	ldrb.w	r0, [r9, #21]
 800d3d8:	f7fe ffb0 	bl	800c33c <tcp_alloc>
    if (npcb == NULL) {
 800d3dc:	4604      	mov	r4, r0
 800d3de:	b950      	cbnz	r0, 800d3f6 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d3e0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0be      	beq.n	800d366 <tcp_input+0x37a>
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d3f2:	4798      	blx	r3
 800d3f4:	e7b7      	b.n	800d366 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d3f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800d3fa:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d3fc:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d3fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d402:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800d404:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800d408:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800d40a:	7813      	ldrb	r3, [r2, #0]
 800d40c:	7852      	ldrb	r2, [r2, #1]
 800d40e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d412:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800d414:	2303      	movs	r3, #3
 800d416:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800d418:	f8db 3000 	ldr.w	r3, [fp]
 800d41c:	3301      	adds	r3, #1
 800d41e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d420:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d422:	f7ff f817 	bl	800c454 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d426:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800d42a:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d42c:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800d42e:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800d430:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d432:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800d434:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800d438:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800d43a:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800d43c:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d440:	f899 3008 	ldrb.w	r3, [r9, #8]
 800d444:	f003 030c 	and.w	r3, r3, #12
 800d448:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800d44a:	4b49      	ldr	r3, [pc, #292]	; (800d570 <tcp_input+0x584>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	601c      	str	r4, [r3, #0]
 800d450:	60e2      	str	r2, [r4, #12]
 800d452:	f001 fa51 	bl	800e8f8 <tcp_timer_needed>
 800d456:	4b47      	ldr	r3, [pc, #284]	; (800d574 <tcp_input+0x588>)
 800d458:	2201      	movs	r2, #1
 800d45a:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 800d45c:	9b06      	ldr	r3, [sp, #24]
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b11b      	cbz	r3, 800d46a <tcp_input+0x47e>
 800d462:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800d466:	f7ff fd69 	bl	800cf3c <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 800d46a:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d46c:	1d21      	adds	r1, r4, #4
 800d46e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800d470:	89db      	ldrh	r3, [r3, #14]
 800d472:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d476:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d47a:	f7fe fff7 	bl	800c46c <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d47e:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d480:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d482:	4620      	mov	r0, r4
 800d484:	f000 fe2a 	bl	800e0dc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800d488:	2800      	cmp	r0, #0
 800d48a:	f43f af69 	beq.w	800d360 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 800d48e:	2100      	movs	r1, #0
 800d490:	4620      	mov	r0, r4
 800d492:	f7fe fe95 	bl	800c1c0 <tcp_abandon>
 800d496:	e766      	b.n	800d366 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 800d498:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 800d49a:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	0759      	lsls	r1, r3, #29
 800d4a0:	d535      	bpl.n	800d50e <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 800d4a2:	7d21      	ldrb	r1, [r4, #20]
 800d4a4:	2902      	cmp	r1, #2
 800d4a6:	d122      	bne.n	800d4ee <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 800d4a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d109      	bne.n	800d4c4 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 800d4b0:	f898 3000 	ldrb.w	r3, [r8]
 800d4b4:	f043 0308 	orr.w	r3, r3, #8
 800d4b8:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 800d4bc:	7ea3      	ldrb	r3, [r4, #26]
 800d4be:	f023 0301 	bic.w	r3, r3, #1
 800d4c2:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800d4c4:	f898 3000 	ldrb.w	r3, [r8]
 800d4c8:	0719      	lsls	r1, r3, #28
 800d4ca:	f140 81ed 	bpl.w	800d8a8 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d4ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d4d2:	b11b      	cbz	r3, 800d4dc <tcp_input+0x4f0>
 800d4d4:	f06f 010d 	mvn.w	r1, #13
 800d4d8:	6920      	ldr	r0, [r4, #16]
 800d4da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4824      	ldr	r0, [pc, #144]	; (800d570 <tcp_input+0x584>)
 800d4e0:	f7fe fcb0 	bl	800be44 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	f7fd fc3a 	bl	800ad60 <memp_free>
 800d4ec:	e6b0      	b.n	800d250 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 800d4ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d4f0:	f8db 3000 	ldr.w	r3, [fp]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	f000 825a 	beq.w	800d9ae <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4fa:	1a9b      	subs	r3, r3, r2
 800d4fc:	d4e2      	bmi.n	800d4c4 <tcp_input+0x4d8>
 800d4fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	2b00      	cmp	r3, #0
 800d504:	dcde      	bgt.n	800d4c4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800d506:	7ea3      	ldrb	r3, [r4, #26]
 800d508:	f043 0302 	orr.w	r3, r3, #2
 800d50c:	e7d9      	b.n	800d4c2 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d50e:	f013 0102 	ands.w	r1, r3, #2
 800d512:	d003      	beq.n	800d51c <tcp_input+0x530>
 800d514:	7d22      	ldrb	r2, [r4, #20]
 800d516:	3a02      	subs	r2, #2
 800d518:	2a01      	cmp	r2, #1
 800d51a:	d8f4      	bhi.n	800d506 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d51c:	7ea2      	ldrb	r2, [r4, #26]
 800d51e:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 800d520:	bf5e      	ittt	pl
 800d522:	4a11      	ldrpl	r2, [pc, #68]	; (800d568 <tcp_input+0x57c>)
 800d524:	6812      	ldrpl	r2, [r2, #0]
 800d526:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800d528:	2200      	movs	r2, #0
 800d52a:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 800d52e:	9a06      	ldr	r2, [sp, #24]
 800d530:	8812      	ldrh	r2, [r2, #0]
 800d532:	b13a      	cbz	r2, 800d544 <tcp_input+0x558>
 800d534:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800d538:	9107      	str	r1, [sp, #28]
 800d53a:	9306      	str	r3, [sp, #24]
 800d53c:	f7ff fcfe 	bl	800cf3c <tcp_parseopt.isra.1.part.2>
 800d540:	9907      	ldr	r1, [sp, #28]
 800d542:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 800d544:	7d22      	ldrb	r2, [r4, #20]
 800d546:	3a02      	subs	r2, #2
 800d548:	2a07      	cmp	r2, #7
 800d54a:	d8bb      	bhi.n	800d4c4 <tcp_input+0x4d8>
 800d54c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d550:	00940014 	.word	0x00940014
 800d554:	010000fc 	.word	0x010000fc
 800d558:	00fc014a 	.word	0x00fc014a
 800d55c:	01830164 	.word	0x01830164
 800d560:	08011dd4 	.word	0x08011dd4
 800d564:	2000841c 	.word	0x2000841c
 800d568:	2000bb34 	.word	0x2000bb34
 800d56c:	2000bb38 	.word	0x2000bb38
 800d570:	2000bb30 	.word	0x2000bb30
 800d574:	2000bb2c 	.word	0x2000bb2c
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d578:	f003 0212 	and.w	r2, r3, #18
 800d57c:	2a12      	cmp	r2, #18
 800d57e:	d15e      	bne.n	800d63e <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 800d580:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	3201      	adds	r2, #1
 800d586:	428a      	cmp	r2, r1
 800d588:	d159      	bne.n	800d63e <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 800d58a:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 800d58e:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800d590:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800d592:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d594:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d596:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 800d598:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d59a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 800d59c:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d59e:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800d5a0:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 800d5a2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800d5a6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d5aa:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 800d5ac:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d5ae:	f7fe ff5d 	bl	800c46c <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d5b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d5b6:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d5b8:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d5ba:	0080      	lsls	r0, r0, #2
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	bf38      	it	cc
 800d5c0:	4613      	movcc	r3, r2
 800d5c2:	4283      	cmp	r3, r0
 800d5c4:	bf28      	it	cs
 800d5c6:	4603      	movcs	r3, r0
 800d5c8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d5cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d5d0:	b933      	cbnz	r3, 800d5e0 <tcp_input+0x5f4>
 800d5d2:	4bad      	ldr	r3, [pc, #692]	; (800d888 <tcp_input+0x89c>)
 800d5d4:	f240 321a 	movw	r2, #794	; 0x31a
 800d5d8:	49ac      	ldr	r1, [pc, #688]	; (800d88c <tcp_input+0x8a0>)
 800d5da:	48ad      	ldr	r0, [pc, #692]	; (800d890 <tcp_input+0x8a4>)
 800d5dc:	f003 fce0 	bl	8010fa0 <iprintf>
      --pcb->snd_queuelen;
 800d5e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800d5e4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 800d5ec:	b9fe      	cbnz	r6, 800d62e <tcp_input+0x642>
        rseg = pcb->unsent;
 800d5ee:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800d5f0:	b936      	cbnz	r6, 800d600 <tcp_input+0x614>
 800d5f2:	4ba5      	ldr	r3, [pc, #660]	; (800d888 <tcp_input+0x89c>)
 800d5f4:	f240 3222 	movw	r2, #802	; 0x322
 800d5f8:	49a6      	ldr	r1, [pc, #664]	; (800d894 <tcp_input+0x8a8>)
 800d5fa:	48a5      	ldr	r0, [pc, #660]	; (800d890 <tcp_input+0x8a4>)
 800d5fc:	f003 fcd0 	bl	8010fa0 <iprintf>
        pcb->unsent = rseg->next;
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 800d604:	4630      	mov	r0, r6
 800d606:	f7fe f987 	bl	800b918 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800d60a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d60c:	b993      	cbnz	r3, 800d634 <tcp_input+0x648>
        pcb->rtime = -1;
 800d60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d612:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d614:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f43f af74 	beq.w	800d506 <tcp_input+0x51a>
 800d61e:	2200      	movs	r2, #0
 800d620:	4621      	mov	r1, r4
 800d622:	6920      	ldr	r0, [r4, #16]
 800d624:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800d626:	300d      	adds	r0, #13
 800d628:	f47f af6d 	bne.w	800d506 <tcp_input+0x51a>
 800d62c:	e610      	b.n	800d250 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 800d62e:	6833      	ldr	r3, [r6, #0]
 800d630:	66e3      	str	r3, [r4, #108]	; 0x6c
 800d632:	e7e7      	b.n	800d604 <tcp_input+0x618>
        pcb->rtime = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800d638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d63c:	e7ea      	b.n	800d614 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 800d63e:	06db      	lsls	r3, r3, #27
 800d640:	f57f af40 	bpl.w	800d4c4 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d644:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d646:	9a04      	ldr	r2, [sp, #16]
 800d648:	f8db 1000 	ldr.w	r1, [fp]
 800d64c:	8810      	ldrh	r0, [r2, #0]
 800d64e:	881a      	ldrh	r2, [r3, #0]
 800d650:	4401      	add	r1, r0
 800d652:	9201      	str	r2, [sp, #4]
 800d654:	885b      	ldrh	r3, [r3, #2]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	4b8f      	ldr	r3, [pc, #572]	; (800d898 <tcp_input+0x8ac>)
 800d65a:	6838      	ldr	r0, [r7, #0]
 800d65c:	1d1a      	adds	r2, r3, #4
 800d65e:	f000 ffa9 	bl	800e5b4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d662:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d666:	2b05      	cmp	r3, #5
 800d668:	f63f af2c 	bhi.w	800d4c4 <tcp_input+0x4d8>
        pcb->rtime = 0;
 800d66c:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 800d66e:	4620      	mov	r0, r4
        pcb->rtime = 0;
 800d670:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800d672:	f000 fff9 	bl	800e668 <tcp_rexmit_rto>
 800d676:	e725      	b.n	800d4c4 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 800d678:	06d8      	lsls	r0, r3, #27
 800d67a:	d557      	bpl.n	800d72c <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d67c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d67e:	6838      	ldr	r0, [r7, #0]
 800d680:	43db      	mvns	r3, r3
 800d682:	42c3      	cmn	r3, r0
 800d684:	d443      	bmi.n	800d70e <tcp_input+0x722>
 800d686:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d688:	1ac3      	subs	r3, r0, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dc3f      	bgt.n	800d70e <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 800d68e:	2304      	movs	r3, #4
 800d690:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800d692:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d694:	b143      	cbz	r3, 800d6a8 <tcp_input+0x6bc>
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	b933      	cbnz	r3, 800d6a8 <tcp_input+0x6bc>
 800d69a:	4b7b      	ldr	r3, [pc, #492]	; (800d888 <tcp_input+0x89c>)
 800d69c:	f240 3251 	movw	r2, #849	; 0x351
 800d6a0:	497e      	ldr	r1, [pc, #504]	; (800d89c <tcp_input+0x8b0>)
 800d6a2:	487b      	ldr	r0, [pc, #492]	; (800d890 <tcp_input+0x8a4>)
 800d6a4:	f003 fc7c 	bl	8010fa0 <iprintf>
        if (pcb->listener == NULL) {
 800d6a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d6aa:	b91b      	cbnz	r3, 800d6b4 <tcp_input+0x6c8>
            tcp_abort(pcb);
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f7fe fdfd 	bl	800c2ac <tcp_abort>
            goto aborted;
 800d6b2:	e5cd      	b.n	800d250 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0f8      	beq.n	800d6ac <tcp_input+0x6c0>
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4621      	mov	r1, r4
 800d6be:	6920      	ldr	r0, [r4, #16]
 800d6c0:	4798      	blx	r3
        if (err != ERR_OK) {
 800d6c2:	b110      	cbz	r0, 800d6ca <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 800d6c4:	300d      	adds	r0, #13
 800d6c6:	d1f1      	bne.n	800d6ac <tcp_input+0x6c0>
 800d6c8:	e5c2      	b.n	800d250 <tcp_input+0x264>
        tcp_receive(pcb);
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f7fe ff42 	bl	800c554 <tcp_receive>
        if (recv_acked != 0) {
 800d6d0:	9b05      	ldr	r3, [sp, #20]
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	b113      	cbz	r3, 800d6dc <tcp_input+0x6f0>
          recv_acked--;
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	9a05      	ldr	r2, [sp, #20]
 800d6da:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d6dc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800d6de:	f241 111c 	movw	r1, #4380	; 0x111c
 800d6e2:	0053      	lsls	r3, r2, #1
 800d6e4:	0092      	lsls	r2, r2, #2
 800d6e6:	428b      	cmp	r3, r1
 800d6e8:	bf38      	it	cc
 800d6ea:	460b      	movcc	r3, r1
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	bf28      	it	cs
 800d6f0:	4613      	movcs	r3, r2
 800d6f2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d6f6:	f898 3000 	ldrb.w	r3, [r8]
 800d6fa:	069a      	lsls	r2, r3, #26
 800d6fc:	f57f aee2 	bpl.w	800d4c4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800d700:	7ea3      	ldrb	r3, [r4, #26]
 800d702:	f043 0302 	orr.w	r3, r3, #2
 800d706:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800d708:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 800d70a:	7523      	strb	r3, [r4, #20]
 800d70c:	e6da      	b.n	800d4c4 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d70e:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d710:	9a04      	ldr	r2, [sp, #16]
 800d712:	f8db 1000 	ldr.w	r1, [fp]
 800d716:	8816      	ldrh	r6, [r2, #0]
 800d718:	881a      	ldrh	r2, [r3, #0]
 800d71a:	4431      	add	r1, r6
 800d71c:	9201      	str	r2, [sp, #4]
 800d71e:	885b      	ldrh	r3, [r3, #2]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4b5d      	ldr	r3, [pc, #372]	; (800d898 <tcp_input+0x8ac>)
 800d724:	1d1a      	adds	r2, r3, #4
 800d726:	f000 ff45 	bl	800e5b4 <tcp_rst>
 800d72a:	e6cb      	b.n	800d4c4 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d72c:	2900      	cmp	r1, #0
 800d72e:	f43f aec9 	beq.w	800d4c4 <tcp_input+0x4d8>
 800d732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d734:	f8db 2000 	ldr.w	r2, [fp]
 800d738:	3b01      	subs	r3, #1
 800d73a:	4293      	cmp	r3, r2
 800d73c:	f47f aec2 	bne.w	800d4c4 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 800d740:	4620      	mov	r0, r4
 800d742:	f000 ffad 	bl	800e6a0 <tcp_rexmit>
 800d746:	e6bd      	b.n	800d4c4 <tcp_input+0x4d8>
    tcp_receive(pcb);
 800d748:	4620      	mov	r0, r4
 800d74a:	f7fe ff03 	bl	800c554 <tcp_receive>
 800d74e:	e7d2      	b.n	800d6f6 <tcp_input+0x70a>
    tcp_receive(pcb);
 800d750:	4620      	mov	r0, r4
 800d752:	f7fe feff 	bl	800c554 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d756:	f898 3000 	ldrb.w	r3, [r8]
 800d75a:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d75e:	9b03      	ldr	r3, [sp, #12]
 800d760:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800d762:	d031      	beq.n	800d7c8 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d764:	f013 0f10 	tst.w	r3, #16
 800d768:	7ea3      	ldrb	r3, [r4, #26]
 800d76a:	d028      	beq.n	800d7be <tcp_input+0x7d2>
 800d76c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	4291      	cmp	r1, r2
 800d772:	d124      	bne.n	800d7be <tcp_input+0x7d2>
 800d774:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800d776:	bb12      	cbnz	r2, 800d7be <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 800d778:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 800d77c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800d77e:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800d780:	f7fe f95e 	bl	800ba40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d784:	f8d9 3000 	ldr.w	r3, [r9]
 800d788:	429c      	cmp	r4, r3
 800d78a:	d10a      	bne.n	800d7a2 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 800d78c:	68e3      	ldr	r3, [r4, #12]
 800d78e:	f8c9 3000 	str.w	r3, [r9]
 800d792:	e008      	b.n	800d7a6 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	4294      	cmp	r4, r2
 800d798:	d102      	bne.n	800d7a0 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 800d79a:	68e2      	ldr	r2, [r4, #12]
 800d79c:	60da      	str	r2, [r3, #12]
 800d79e:	e002      	b.n	800d7a6 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1f6      	bne.n	800d794 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4b3d      	ldr	r3, [pc, #244]	; (800d8a0 <tcp_input+0x8b4>)
 800d7aa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d7ac:	230a      	movs	r3, #10
 800d7ae:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d7b0:	4b3c      	ldr	r3, [pc, #240]	; (800d8a4 <tcp_input+0x8b8>)
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	601c      	str	r4, [r3, #0]
 800d7b6:	60e2      	str	r2, [r4, #12]
 800d7b8:	f001 f89e 	bl	800e8f8 <tcp_timer_needed>
 800d7bc:	e682      	b.n	800d4c4 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 800d7be:	f043 0302 	orr.w	r3, r3, #2
 800d7c2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800d7c4:	2308      	movs	r3, #8
 800d7c6:	e7a0      	b.n	800d70a <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7c8:	06db      	lsls	r3, r3, #27
 800d7ca:	f57f ae7b 	bpl.w	800d4c4 <tcp_input+0x4d8>
 800d7ce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	f47f ae76 	bne.w	800d4c4 <tcp_input+0x4d8>
 800d7d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f47f ae72 	bne.w	800d4c4 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 800d7e0:	2306      	movs	r3, #6
 800d7e2:	e792      	b.n	800d70a <tcp_input+0x71e>
    tcp_receive(pcb);
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7fe feb5 	bl	800c554 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d7ea:	f898 3000 	ldrb.w	r3, [r8]
 800d7ee:	069f      	lsls	r7, r3, #26
 800d7f0:	f57f ae68 	bpl.w	800d4c4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800d7f4:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800d7f6:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 800d7f8:	f043 0302 	orr.w	r3, r3, #2
 800d7fc:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800d7fe:	f7fe f91f 	bl	800ba40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d802:	f8d9 3000 	ldr.w	r3, [r9]
 800d806:	429c      	cmp	r4, r3
 800d808:	d0c0      	beq.n	800d78c <tcp_input+0x7a0>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d0cb      	beq.n	800d7a6 <tcp_input+0x7ba>
 800d80e:	68da      	ldr	r2, [r3, #12]
 800d810:	4294      	cmp	r4, r2
 800d812:	d0c2      	beq.n	800d79a <tcp_input+0x7ae>
 800d814:	4613      	mov	r3, r2
 800d816:	e7f8      	b.n	800d80a <tcp_input+0x81e>
    tcp_receive(pcb);
 800d818:	4620      	mov	r0, r4
 800d81a:	f7fe fe9b 	bl	800c554 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	06de      	lsls	r6, r3, #27
 800d824:	f57f ae4e 	bpl.w	800d4c4 <tcp_input+0x4d8>
 800d828:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	f47f ae49 	bne.w	800d4c4 <tcp_input+0x4d8>
 800d832:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d834:	2b00      	cmp	r3, #0
 800d836:	f47f ae45 	bne.w	800d4c4 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7fe f900 	bl	800ba40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d840:	f8d9 3000 	ldr.w	r3, [r9]
 800d844:	429c      	cmp	r4, r3
 800d846:	d0a1      	beq.n	800d78c <tcp_input+0x7a0>
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0ac      	beq.n	800d7a6 <tcp_input+0x7ba>
 800d84c:	68da      	ldr	r2, [r3, #12]
 800d84e:	4294      	cmp	r4, r2
 800d850:	d0a3      	beq.n	800d79a <tcp_input+0x7ae>
 800d852:	4613      	mov	r3, r2
 800d854:	e7f8      	b.n	800d848 <tcp_input+0x85c>
    tcp_receive(pcb);
 800d856:	4620      	mov	r0, r4
 800d858:	f7fe fe7c 	bl	800c554 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d85c:	9b03      	ldr	r3, [sp, #12]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	06d8      	lsls	r0, r3, #27
 800d862:	f57f ae2f 	bpl.w	800d4c4 <tcp_input+0x4d8>
 800d866:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	f47f ae2a 	bne.w	800d4c4 <tcp_input+0x4d8>
 800d870:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d872:	2b00      	cmp	r3, #0
 800d874:	f47f ae26 	bne.w	800d4c4 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 800d878:	f898 3000 	ldrb.w	r3, [r8]
 800d87c:	f043 0310 	orr.w	r3, r3, #16
 800d880:	f888 3000 	strb.w	r3, [r8]
 800d884:	e61e      	b.n	800d4c4 <tcp_input+0x4d8>
 800d886:	bf00      	nop
 800d888:	0801380c 	.word	0x0801380c
 800d88c:	080137ab 	.word	0x080137ab
 800d890:	08011dd4 	.word	0x08011dd4
 800d894:	080137c1 	.word	0x080137c1
 800d898:	2000841c 	.word	0x2000841c
 800d89c:	080137d4 	.word	0x080137d4
 800d8a0:	2000bb2c 	.word	0x2000bb2c
 800d8a4:	2000bb40 	.word	0x2000bb40
        if (recv_acked > 0) {
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	881a      	ldrh	r2, [r3, #0]
 800d8ac:	b122      	cbz	r2, 800d8b8 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d8ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d8b0:	b9eb      	cbnz	r3, 800d8ee <tcp_input+0x902>
          recv_acked = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	9a05      	ldr	r2, [sp, #20]
 800d8b6:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7ff fb77 	bl	800cfac <tcp_input_delayed_close>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	f47f acc6 	bne.w	800d250 <tcp_input+0x264>
        if (recv_data != NULL) {
 800d8c4:	f8da 3000 	ldr.w	r3, [sl]
 800d8c8:	b33b      	cbz	r3, 800d91a <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d8ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d8cc:	b133      	cbz	r3, 800d8dc <tcp_input+0x8f0>
 800d8ce:	4b40      	ldr	r3, [pc, #256]	; (800d9d0 <tcp_input+0x9e4>)
 800d8d0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800d8d4:	493f      	ldr	r1, [pc, #252]	; (800d9d4 <tcp_input+0x9e8>)
 800d8d6:	4840      	ldr	r0, [pc, #256]	; (800d9d8 <tcp_input+0x9ec>)
 800d8d8:	f003 fb62 	bl	8010fa0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d8dc:	7ea3      	ldrb	r3, [r4, #26]
 800d8de:	f013 0310 	ands.w	r3, r3, #16
 800d8e2:	d00a      	beq.n	800d8fa <tcp_input+0x90e>
            pbuf_free(recv_data);
 800d8e4:	f8da 0000 	ldr.w	r0, [sl]
 800d8e8:	f7fd fbc0 	bl	800b06c <pbuf_free>
 800d8ec:	e6de      	b.n	800d6ac <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	6920      	ldr	r0, [r4, #16]
 800d8f2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d8f4:	300d      	adds	r0, #13
 800d8f6:	d1dc      	bne.n	800d8b2 <tcp_input+0x8c6>
 800d8f8:	e4aa      	b.n	800d250 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8fa:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800d8fe:	b31e      	cbz	r6, 800d948 <tcp_input+0x95c>
 800d900:	f8da 2000 	ldr.w	r2, [sl]
 800d904:	4621      	mov	r1, r4
 800d906:	6920      	ldr	r0, [r4, #16]
 800d908:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d90a:	f110 0f0d 	cmn.w	r0, #13
 800d90e:	f43f ac9f 	beq.w	800d250 <tcp_input+0x264>
          if (err != ERR_OK) {
 800d912:	b110      	cbz	r0, 800d91a <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 800d914:	f8da 3000 	ldr.w	r3, [sl]
 800d918:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800d91a:	f898 3000 	ldrb.w	r3, [r8]
 800d91e:	069a      	lsls	r2, r3, #26
 800d920:	d505      	bpl.n	800d92e <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 800d922:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d924:	b1c3      	cbz	r3, 800d958 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d926:	7b5a      	ldrb	r2, [r3, #13]
 800d928:	f042 0220 	orr.w	r2, r2, #32
 800d92c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d92e:	2200      	movs	r2, #0
 800d930:	4b2a      	ldr	r3, [pc, #168]	; (800d9dc <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 800d932:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800d934:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d936:	f7ff fb39 	bl	800cfac <tcp_input_delayed_close>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f47f ac88 	bne.w	800d250 <tcp_input+0x264>
        tcp_output(pcb);
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fcb9 	bl	800e2b8 <tcp_output>
 800d946:	e483      	b.n	800d250 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d948:	4633      	mov	r3, r6
 800d94a:	f8da 2000 	ldr.w	r2, [sl]
 800d94e:	4621      	mov	r1, r4
 800d950:	4630      	mov	r0, r6
 800d952:	f7fe fb77 	bl	800c044 <tcp_recv_null>
 800d956:	e7d8      	b.n	800d90a <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d958:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d95a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d95e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800d962:	bf1c      	itt	ne
 800d964:	3301      	addne	r3, #1
 800d966:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d968:	2e00      	cmp	r6, #0
 800d96a:	d0e0      	beq.n	800d92e <tcp_input+0x942>
 800d96c:	2300      	movs	r3, #0
 800d96e:	4621      	mov	r1, r4
 800d970:	6920      	ldr	r0, [r4, #16]
 800d972:	461a      	mov	r2, r3
 800d974:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d976:	300d      	adds	r0, #13
 800d978:	d1d9      	bne.n	800d92e <tcp_input+0x942>
 800d97a:	e469      	b.n	800d250 <tcp_input+0x264>
      if (prev != NULL) {
 800d97c:	b13c      	cbz	r4, 800d98e <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d97e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d982:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d984:	4b16      	ldr	r3, [pc, #88]	; (800d9e0 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d986:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d98a:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800d98e:	9b03      	ldr	r3, [sp, #12]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	0759      	lsls	r1, r3, #29
 800d994:	f53f ace7 	bmi.w	800d366 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 800d998:	06dc      	lsls	r4, r3, #27
 800d99a:	f57f ad19 	bpl.w	800d3d0 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d99e:	9b04      	ldr	r3, [sp, #16]
 800d9a0:	f8db 1000 	ldr.w	r1, [fp]
 800d9a4:	881c      	ldrh	r4, [r3, #0]
 800d9a6:	8813      	ldrh	r3, [r2, #0]
 800d9a8:	e88d 0009 	stmia.w	sp, {r0, r3}
 800d9ac:	e4c5      	b.n	800d33a <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	f47f ad7e 	bne.w	800d4b0 <tcp_input+0x4c4>
 800d9b4:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <tcp_input+0x9e4>)
 800d9b6:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d9ba:	490a      	ldr	r1, [pc, #40]	; (800d9e4 <tcp_input+0x9f8>)
 800d9bc:	4806      	ldr	r0, [pc, #24]	; (800d9d8 <tcp_input+0x9ec>)
 800d9be:	f003 faef 	bl	8010fa0 <iprintf>
 800d9c2:	e575      	b.n	800d4b0 <tcp_input+0x4c4>
      if (prev != NULL) {
 800d9c4:	f1ba 0f00 	cmp.w	sl, #0
 800d9c8:	f47f abff 	bne.w	800d1ca <tcp_input+0x1de>
 800d9cc:	e40e      	b.n	800d1ec <tcp_input+0x200>
 800d9ce:	bf00      	nop
 800d9d0:	0801380c 	.word	0x0801380c
 800d9d4:	080137f2 	.word	0x080137f2
 800d9d8:	08011dd4 	.word	0x08011dd4
 800d9dc:	2000bb44 	.word	0x2000bb44
 800d9e0:	2000bb38 	.word	0x2000bb38
 800d9e4:	0801378b 	.word	0x0801378b

0800d9e8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d9e8:	4a02      	ldr	r2, [pc, #8]	; (800d9f4 <tcp_trigger_input_pcb_close+0xc>)
 800d9ea:	7813      	ldrb	r3, [r2, #0]
 800d9ec:	f043 0310 	orr.w	r3, r3, #16
 800d9f0:	7013      	strb	r3, [r2, #0]
 800d9f2:	4770      	bx	lr
 800d9f4:	2000837c 	.word	0x2000837c

0800d9f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	461e      	mov	r6, r3
 800d9fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800da02:	4294      	cmp	r4, r2
{
 800da04:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 800da06:	d228      	bcs.n	800da5a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800da08:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800da0c:	07ad      	lsls	r5, r5, #30
 800da0e:	d407      	bmi.n	800da20 <tcp_pbuf_prealloc+0x28>
 800da10:	7e9d      	ldrb	r5, [r3, #26]
 800da12:	066d      	lsls	r5, r5, #25
 800da14:	d421      	bmi.n	800da5a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 800da16:	b119      	cbz	r1, 800da20 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 800da18:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800da1a:	b909      	cbnz	r1, 800da20 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800da1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1e:	b1e3      	cbz	r3, 800da5a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800da20:	f204 231b 	addw	r3, r4, #539	; 0x21b
 800da24:	f023 0103 	bic.w	r1, r3, #3
 800da28:	428a      	cmp	r2, r1
 800da2a:	bf28      	it	cs
 800da2c:	460a      	movcs	r2, r1
 800da2e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800da30:	2200      	movs	r2, #0
 800da32:	f7fd fb85 	bl	800b140 <pbuf_alloc>
  if (p == NULL) {
 800da36:	4605      	mov	r5, r0
 800da38:	b168      	cbz	r0, 800da56 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800da3a:	6803      	ldr	r3, [r0, #0]
 800da3c:	b133      	cbz	r3, 800da4c <tcp_pbuf_prealloc+0x54>
 800da3e:	4b08      	ldr	r3, [pc, #32]	; (800da60 <tcp_pbuf_prealloc+0x68>)
 800da40:	f44f 7288 	mov.w	r2, #272	; 0x110
 800da44:	4907      	ldr	r1, [pc, #28]	; (800da64 <tcp_pbuf_prealloc+0x6c>)
 800da46:	4808      	ldr	r0, [pc, #32]	; (800da68 <tcp_pbuf_prealloc+0x70>)
 800da48:	f003 faaa 	bl	8010fa0 <iprintf>
  *oversize = p->len - length;
 800da4c:	896b      	ldrh	r3, [r5, #10]
 800da4e:	1b1b      	subs	r3, r3, r4
 800da50:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800da52:	812c      	strh	r4, [r5, #8]
 800da54:	816c      	strh	r4, [r5, #10]
  return p;
}
 800da56:	4628      	mov	r0, r5
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	4621      	mov	r1, r4
 800da5c:	e7e8      	b.n	800da30 <tcp_pbuf_prealloc+0x38>
 800da5e:	bf00      	nop
 800da60:	08013b0f 	.word	0x08013b0f
 800da64:	08013b42 	.word	0x08013b42
 800da68:	08011dd4 	.word	0x08011dd4

0800da6c <tcp_create_segment>:
{
 800da6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	f89d a020 	ldrb.w	sl, [sp, #32]
 800da74:	4680      	mov	r8, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800da76:	2003      	movs	r0, #3
{
 800da78:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800da7a:	f01a 0f01 	tst.w	sl, #1
{
 800da7e:	4616      	mov	r6, r2
 800da80:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800da82:	bf14      	ite	ne
 800da84:	2504      	movne	r5, #4
 800da86:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800da88:	f7fd f94e 	bl	800ad28 <memp_malloc>
 800da8c:	4604      	mov	r4, r0
 800da8e:	b928      	cbnz	r0, 800da9c <tcp_create_segment+0x30>
    pbuf_free(p);
 800da90:	4638      	mov	r0, r7
 800da92:	f7fd faeb 	bl	800b06c <pbuf_free>
}
 800da96:	4620      	mov	r0, r4
 800da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800da9c:	2300      	movs	r3, #0
  seg->flags = optflags;
 800da9e:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800daa2:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800daa6:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800daaa:	893b      	ldrh	r3, [r7, #8]
 800daac:	4553      	cmp	r3, sl
 800daae:	d205      	bcs.n	800dabc <tcp_create_segment+0x50>
 800dab0:	4b1e      	ldr	r3, [pc, #120]	; (800db2c <tcp_create_segment+0xc0>)
 800dab2:	22ba      	movs	r2, #186	; 0xba
 800dab4:	491e      	ldr	r1, [pc, #120]	; (800db30 <tcp_create_segment+0xc4>)
 800dab6:	481f      	ldr	r0, [pc, #124]	; (800db34 <tcp_create_segment+0xc8>)
 800dab8:	f003 fa72 	bl	8010fa0 <iprintf>
  seg->len = p->tot_len - optlen;
 800dabc:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800dabe:	4638      	mov	r0, r7
 800dac0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800dac2:	eba3 030a 	sub.w	r3, r3, sl
 800dac6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800dac8:	f7fd faca 	bl	800b060 <pbuf_header>
 800dacc:	4607      	mov	r7, r0
 800dace:	b120      	cbz	r0, 800dada <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 800dad0:	4620      	mov	r0, r4
    return NULL;
 800dad2:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800dad4:	f7fd ff20 	bl	800b918 <tcp_seg_free>
    return NULL;
 800dad8:	e7dd      	b.n	800da96 <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dada:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800dadc:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dade:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dae2:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800dae6:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dae8:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800daec:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800daf0:	f7fa ff20 	bl	8008934 <lwip_htons>
 800daf4:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800daf8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800dafc:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800db00:	f7fa ff18 	bl	8008934 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800db04:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800db08:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800db0c:	4648      	mov	r0, r9
 800db0e:	f7fa ff14 	bl	800893a <lwip_htonl>
 800db12:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800db16:	b2a8      	uxth	r0, r5
 800db18:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800db1c:	f7fa ff0a 	bl	8008934 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800db20:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800db22:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800db26:	749f      	strb	r7, [r3, #18]
 800db28:	74df      	strb	r7, [r3, #19]
  return seg;
 800db2a:	e7b4      	b.n	800da96 <tcp_create_segment+0x2a>
 800db2c:	08013b0f 	.word	0x08013b0f
 800db30:	08013997 	.word	0x08013997
 800db34:	08011dd4 	.word	0x08011dd4

0800db38 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db38:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800db3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db3c:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800db3e:	4605      	mov	r5, r0
 800db40:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db42:	2001      	movs	r0, #1
 800db44:	2200      	movs	r2, #0
 800db46:	f7fd fafb 	bl	800b140 <pbuf_alloc>
  if (p != NULL) {
 800db4a:	4606      	mov	r6, r0
 800db4c:	b340      	cbz	r0, 800dba0 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800db4e:	8943      	ldrh	r3, [r0, #10]
 800db50:	2b13      	cmp	r3, #19
 800db52:	dc05      	bgt.n	800db60 <tcp_output_alloc_header.constprop.0+0x28>
 800db54:	4b13      	ldr	r3, [pc, #76]	; (800dba4 <tcp_output_alloc_header.constprop.0+0x6c>)
 800db56:	2273      	movs	r2, #115	; 0x73
 800db58:	4913      	ldr	r1, [pc, #76]	; (800dba8 <tcp_output_alloc_header.constprop.0+0x70>)
 800db5a:	4814      	ldr	r0, [pc, #80]	; (800dbac <tcp_output_alloc_header.constprop.0+0x74>)
 800db5c:	f003 fa20 	bl	8010fa0 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 800db60:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800db62:	8ae8      	ldrh	r0, [r5, #22]
 800db64:	f7fa fee6 	bl	8008934 <lwip_htons>
 800db68:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800db6a:	8b28      	ldrh	r0, [r5, #24]
 800db6c:	f7fa fee2 	bl	8008934 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800db70:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800db72:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800db74:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800db76:	f7fa fee0 	bl	800893a <lwip_htonl>
 800db7a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800db7c:	f245 0010 	movw	r0, #20496	; 0x5010
 800db80:	f7fa fed8 	bl	8008934 <lwip_htons>
 800db84:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800db86:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800db88:	f7fa fed4 	bl	8008934 <lwip_htons>
    tcphdr->chksum = 0;
 800db8c:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db8e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 800db90:	7423      	strb	r3, [r4, #16]
 800db92:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800db94:	74a3      	strb	r3, [r4, #18]
 800db96:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800db9a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db9c:	4413      	add	r3, r2
 800db9e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800dba0:	4630      	mov	r0, r6
 800dba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba4:	08013b0f 	.word	0x08013b0f
 800dba8:	08013ae1 	.word	0x08013ae1
 800dbac:	08011dd4 	.word	0x08011dd4

0800dbb0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb4:	b091      	sub	sp, #68	; 0x44
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dbba:	2300      	movs	r3, #0
{
 800dbbc:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800dbbe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800dbc2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800dbc6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800dbc8:	085b      	lsrs	r3, r3, #1
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dbca:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	bf28      	it	cs
 800dbd0:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	bf08      	it	eq
 800dbd6:	4613      	moveq	r3, r2
 800dbd8:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dbda:	b959      	cbnz	r1, 800dbf4 <tcp_write+0x44>
 800dbdc:	4ba1      	ldr	r3, [pc, #644]	; (800de64 <tcp_write+0x2b4>)
 800dbde:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800dbe2:	49a1      	ldr	r1, [pc, #644]	; (800de68 <tcp_write+0x2b8>)
 800dbe4:	48a1      	ldr	r0, [pc, #644]	; (800de6c <tcp_write+0x2bc>)
 800dbe6:	f003 f9db 	bl	8010fa0 <iprintf>
 800dbea:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800dbee:	b011      	add	sp, #68	; 0x44
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 800dbf4:	7d2b      	ldrb	r3, [r5, #20]
 800dbf6:	2b07      	cmp	r3, #7
 800dbf8:	d003      	beq.n	800dc02 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 800dbfa:	3b02      	subs	r3, #2
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	f200 8254 	bhi.w	800e0aa <tcp_write+0x4fa>
  } else if (len == 0) {
 800dc02:	9b05      	ldr	r3, [sp, #20]
 800dc04:	b1db      	cbz	r3, 800dc3e <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 800dc06:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800dc0a:	9a05      	ldr	r2, [sp, #20]
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d206      	bcs.n	800dc1e <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 800dc10:	7eab      	ldrb	r3, [r5, #26]
 800dc12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc16:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 800dc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc1c:	e7e7      	b.n	800dbee <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800dc1e:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800dc22:	2a08      	cmp	r2, #8
 800dc24:	d8f4      	bhi.n	800dc10 <tcp_write+0x60>
 800dc26:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800dc28:	b30a      	cbz	r2, 800dc6e <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dc2a:	b943      	cbnz	r3, 800dc3e <tcp_write+0x8e>
 800dc2c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800dc2e:	b933      	cbnz	r3, 800dc3e <tcp_write+0x8e>
 800dc30:	4b8c      	ldr	r3, [pc, #560]	; (800de64 <tcp_write+0x2b4>)
 800dc32:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800dc36:	498e      	ldr	r1, [pc, #568]	; (800de70 <tcp_write+0x2c0>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dc38:	488c      	ldr	r0, [pc, #560]	; (800de6c <tcp_write+0x2bc>)
 800dc3a:	f003 f9b1 	bl	8010fa0 <iprintf>
  queuelen = pcb->snd_queuelen;
 800dc3e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800dc42:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 800dc44:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800dc46:	b9dc      	cbnz	r4, 800dc80 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc48:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 800dc4c:	f1b8 0f00 	cmp.w	r8, #0
 800dc50:	f000 8103 	beq.w	800de5a <tcp_write+0x2aa>
 800dc54:	4b83      	ldr	r3, [pc, #524]	; (800de64 <tcp_write+0x2b4>)
 800dc56:	f240 2225 	movw	r2, #549	; 0x225
 800dc5a:	4986      	ldr	r1, [pc, #536]	; (800de74 <tcp_write+0x2c4>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dc5c:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc5e:	4883      	ldr	r0, [pc, #524]	; (800de6c <tcp_write+0x2bc>)
  u16_t extendlen = 0;
 800dc60:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc62:	f003 f99d 	bl	8010fa0 <iprintf>
  u16_t oversize_used = 0;
 800dc66:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800dc68:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800dc6a:	46a1      	mov	r9, r4
 800dc6c:	e094      	b.n	800dd98 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dc6e:	b913      	cbnz	r3, 800dc76 <tcp_write+0xc6>
 800dc70:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0e3      	beq.n	800dc3e <tcp_write+0x8e>
 800dc76:	4b7b      	ldr	r3, [pc, #492]	; (800de64 <tcp_write+0x2b4>)
 800dc78:	f240 1259 	movw	r2, #345	; 0x159
 800dc7c:	497e      	ldr	r1, [pc, #504]	; (800de78 <tcp_write+0x2c8>)
 800dc7e:	e7db      	b.n	800dc38 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 800dc80:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dc82:	f8d7 b000 	ldr.w	fp, [r7]
 800dc86:	f1bb 0f00 	cmp.w	fp, #0
 800dc8a:	f040 80b6 	bne.w	800ddfa <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800dc8e:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dc90:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800dc92:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dc96:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800dc98:	bf14      	ite	ne
 800dc9a:	2404      	movne	r4, #4
 800dc9c:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dc9e:	4423      	add	r3, r4
 800dca0:	429a      	cmp	r2, r3
 800dca2:	da06      	bge.n	800dcb2 <tcp_write+0x102>
 800dca4:	4b6f      	ldr	r3, [pc, #444]	; (800de64 <tcp_write+0x2b4>)
 800dca6:	f240 12c7 	movw	r2, #455	; 0x1c7
 800dcaa:	4974      	ldr	r1, [pc, #464]	; (800de7c <tcp_write+0x2cc>)
 800dcac:	486f      	ldr	r0, [pc, #444]	; (800de6c <tcp_write+0x2bc>)
 800dcae:	f003 f977 	bl	8010fa0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dcb2:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 800dcb6:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800dcb8:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dcbc:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 800dcc0:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dcc4:	eba9 0904 	sub.w	r9, r9, r4
 800dcc8:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	f000 8096 	beq.w	800ddfe <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dcd2:	45b1      	cmp	r9, r6
 800dcd4:	d206      	bcs.n	800dce4 <tcp_write+0x134>
 800dcd6:	4b63      	ldr	r3, [pc, #396]	; (800de64 <tcp_write+0x2b4>)
 800dcd8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800dcdc:	4968      	ldr	r1, [pc, #416]	; (800de80 <tcp_write+0x2d0>)
 800dcde:	4863      	ldr	r0, [pc, #396]	; (800de6c <tcp_write+0x2bc>)
 800dce0:	f003 f95e 	bl	8010fa0 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dce4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800dce8:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dcea:	9a05      	ldr	r2, [sp, #20]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	bf28      	it	cs
 800dcf0:	461a      	movcs	r2, r3
 800dcf2:	454a      	cmp	r2, r9
 800dcf4:	4616      	mov	r6, r2
 800dcf6:	bfa8      	it	ge
 800dcf8:	464e      	movge	r6, r9
      space -= oversize_used;
 800dcfa:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800dcfe:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800dd00:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 800dd04:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dd08:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dd0c:	b153      	cbz	r3, 800dd24 <tcp_write+0x174>
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	429e      	cmp	r6, r3
 800dd12:	f000 81cd 	beq.w	800e0b0 <tcp_write+0x500>
 800dd16:	4b53      	ldr	r3, [pc, #332]	; (800de64 <tcp_write+0x2b4>)
 800dd18:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dd1c:	4959      	ldr	r1, [pc, #356]	; (800de84 <tcp_write+0x2d4>)
 800dd1e:	4853      	ldr	r0, [pc, #332]	; (800de6c <tcp_write+0x2bc>)
 800dd20:	f003 f93e 	bl	8010fa0 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800dd24:	9b05      	ldr	r3, [sp, #20]
 800dd26:	429e      	cmp	r6, r3
 800dd28:	f080 81c2 	bcs.w	800e0b0 <tcp_write+0x500>
 800dd2c:	f1b9 0f00 	cmp.w	r9, #0
 800dd30:	f000 808f 	beq.w	800de52 <tcp_write+0x2a2>
 800dd34:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800dd38:	f1ba 0f00 	cmp.w	sl, #0
 800dd3c:	f000 808a 	beq.w	800de54 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dd40:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dd44:	454c      	cmp	r4, r9
 800dd46:	bfa8      	it	ge
 800dd48:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dd4a:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dd4c:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dd50:	d557      	bpl.n	800de02 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dd52:	2301      	movs	r3, #1
 800dd54:	464a      	mov	r2, r9
 800dd56:	9500      	str	r5, [sp, #0]
 800dd58:	4641      	mov	r1, r8
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	2004      	movs	r0, #4
 800dd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800dd66:	f7ff fe47 	bl	800d9f8 <tcp_pbuf_prealloc>
 800dd6a:	4681      	mov	r9, r0
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	f000 8199 	beq.w	800e0a4 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	4642      	mov	r2, r8
 800dd76:	6840      	ldr	r0, [r0, #4]
 800dd78:	1999      	adds	r1, r3, r6
 800dd7a:	f003 f852 	bl	8010e22 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800dd7e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800dd80:	f7fd fb2a 	bl	800b3d8 <pbuf_clen>
 800dd84:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800dd86:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 800dd8a:	4403      	add	r3, r0
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	9306      	str	r3, [sp, #24]
      pos += seglen;
 800dd90:	44b0      	add	r8, r6
 800dd92:	463c      	mov	r4, r7
 800dd94:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd9a:	f04f 0b00 	mov.w	fp, #0
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dda6:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 800dda8:	9b05      	ldr	r3, [sp, #20]
 800ddaa:	4598      	cmp	r8, r3
 800ddac:	d370      	bcc.n	800de90 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 800ddae:	b146      	cbz	r6, 800ddc2 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 800ddb0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800ddb4:	f1b8 0f00 	cmp.w	r8, #0
 800ddb8:	f040 8110 	bne.w	800dfdc <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 800ddbc:	893b      	ldrh	r3, [r7, #8]
 800ddbe:	441e      	add	r6, r3
 800ddc0:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800ddc2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ddc6:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 800ddca:	f1b9 0f00 	cmp.w	r9, #0
 800ddce:	f000 811e 	beq.w	800e00e <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ddd2:	b937      	cbnz	r7, 800dde2 <tcp_write+0x232>
 800ddd4:	4b23      	ldr	r3, [pc, #140]	; (800de64 <tcp_write+0x2b4>)
 800ddd6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ddda:	492b      	ldr	r1, [pc, #172]	; (800de88 <tcp_write+0x2d8>)
 800dddc:	4823      	ldr	r0, [pc, #140]	; (800de6c <tcp_write+0x2bc>)
 800ddde:	f003 f8df 	bl	8010fa0 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800dde2:	4649      	mov	r1, r9
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7fd fb1b 	bl	800b420 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ddea:	893b      	ldrh	r3, [r7, #8]
 800ddec:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800ddf4:	f8c7 b000 	str.w	fp, [r7]
 800ddf8:	e12b      	b.n	800e052 <tcp_write+0x4a2>
 800ddfa:	465f      	mov	r7, fp
 800ddfc:	e741      	b.n	800dc82 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ddfe:	4634      	mov	r4, r6
 800de00:	e782      	b.n	800dd08 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 9000 	ldr.w	r9, [r3]
 800de08:	f1b9 0f00 	cmp.w	r9, #0
 800de0c:	d112      	bne.n	800de34 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800de0e:	7b1a      	ldrb	r2, [r3, #12]
 800de10:	2a01      	cmp	r2, #1
 800de12:	d111      	bne.n	800de38 <tcp_write+0x288>
 800de14:	895a      	ldrh	r2, [r3, #10]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	9a08      	ldr	r2, [sp, #32]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d10b      	bne.n	800de38 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800de20:	b136      	cbz	r6, 800de30 <tcp_write+0x280>
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <tcp_write+0x2b4>)
 800de24:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800de28:	4918      	ldr	r1, [pc, #96]	; (800de8c <tcp_write+0x2dc>)
 800de2a:	4810      	ldr	r0, [pc, #64]	; (800de6c <tcp_write+0x2bc>)
 800de2c:	f003 f8b8 	bl	8010fa0 <iprintf>
          extendlen = seglen;
 800de30:	46c2      	mov	sl, r8
 800de32:	e7ad      	b.n	800dd90 <tcp_write+0x1e0>
 800de34:	464b      	mov	r3, r9
 800de36:	e7e5      	b.n	800de04 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800de38:	2201      	movs	r2, #1
 800de3a:	4641      	mov	r1, r8
 800de3c:	2004      	movs	r0, #4
 800de3e:	f7fd f97f 	bl	800b140 <pbuf_alloc>
 800de42:	4681      	mov	r9, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	f000 812d 	beq.w	800e0a4 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800de4a:	9b08      	ldr	r3, [sp, #32]
 800de4c:	4433      	add	r3, r6
 800de4e:	6043      	str	r3, [r0, #4]
 800de50:	e796      	b.n	800dd80 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 800de52:	46ca      	mov	sl, r9
 800de54:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800de56:	46d1      	mov	r9, sl
 800de58:	e79e      	b.n	800dd98 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800de5a:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800de5c:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800de5e:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800de60:	46c1      	mov	r9, r8
 800de62:	e799      	b.n	800dd98 <tcp_write+0x1e8>
 800de64:	08013b0f 	.word	0x08013b0f
 800de68:	08013b56 	.word	0x08013b56
 800de6c:	08011dd4 	.word	0x08011dd4
 800de70:	08013b87 	.word	0x08013b87
 800de74:	08013c71 	.word	0x08013c71
 800de78:	08013bc1 	.word	0x08013bc1
 800de7c:	08013bf3 	.word	0x08013bf3
 800de80:	08013c0a 	.word	0x08013c0a
 800de84:	08013c2a 	.word	0x08013c2a
 800de88:	08013cfd 	.word	0x08013cfd
 800de8c:	08013c48 	.word	0x08013c48
    u16_t left = len - pos;
 800de90:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800de92:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800de94:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4293      	cmp	r3, r2
 800de9c:	bf28      	it	cs
 800de9e:	4613      	movcs	r3, r2
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dea6:	b363      	cbz	r3, 800df02 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dea8:	fabb f38b 	clz	r3, fp
 800deac:	9500      	str	r5, [sp, #0]
 800deae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deb0:	2000      	movs	r0, #0
 800deb2:	095b      	lsrs	r3, r3, #5
 800deb4:	9302      	str	r3, [sp, #8]
 800deb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800debe:	f7ff fd9b 	bl	800d9f8 <tcp_pbuf_prealloc>
 800dec2:	4604      	mov	r4, r0
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d03b      	beq.n	800df40 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dec8:	8943      	ldrh	r3, [r0, #10]
 800deca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800decc:	4293      	cmp	r3, r2
 800dece:	d206      	bcs.n	800dede <tcp_write+0x32e>
 800ded0:	4b7b      	ldr	r3, [pc, #492]	; (800e0c0 <tcp_write+0x510>)
 800ded2:	f240 2241 	movw	r2, #577	; 0x241
 800ded6:	497b      	ldr	r1, [pc, #492]	; (800e0c4 <tcp_write+0x514>)
 800ded8:	487b      	ldr	r0, [pc, #492]	; (800e0c8 <tcp_write+0x518>)
 800deda:	f003 f861 	bl	8010fa0 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800dede:	9b08      	ldr	r3, [sp, #32]
 800dee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dee2:	eb03 0108 	add.w	r1, r3, r8
 800dee6:	6860      	ldr	r0, [r4, #4]
 800dee8:	f002 ff9b 	bl	8010e22 <memcpy>
    queuelen += pbuf_clen(p);
 800deec:	4620      	mov	r0, r4
 800deee:	f7fd fa73 	bl	800b3d8 <pbuf_clen>
 800def2:	9b06      	ldr	r3, [sp, #24]
 800def4:	4403      	add	r3, r0
 800def6:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800def8:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800defa:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800defc:	d949      	bls.n	800df92 <tcp_write+0x3e2>
      pbuf_free(p);
 800defe:	4620      	mov	r0, r4
 800df00:	e01c      	b.n	800df3c <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800df02:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800df06:	b133      	cbz	r3, 800df16 <tcp_write+0x366>
 800df08:	4b6d      	ldr	r3, [pc, #436]	; (800e0c0 <tcp_write+0x510>)
 800df0a:	f240 224b 	movw	r2, #587	; 0x24b
 800df0e:	496f      	ldr	r1, [pc, #444]	; (800e0cc <tcp_write+0x51c>)
 800df10:	486d      	ldr	r0, [pc, #436]	; (800e0c8 <tcp_write+0x518>)
 800df12:	f003 f845 	bl	8010fa0 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800df16:	2201      	movs	r2, #1
 800df18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df1a:	2000      	movs	r0, #0
 800df1c:	f7fd f910 	bl	800b140 <pbuf_alloc>
 800df20:	b170      	cbz	r0, 800df40 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800df22:	9a08      	ldr	r2, [sp, #32]
 800df24:	900d      	str	r0, [sp, #52]	; 0x34
 800df26:	4442      	add	r2, r8
 800df28:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df2a:	2200      	movs	r2, #0
 800df2c:	4611      	mov	r1, r2
 800df2e:	4610      	mov	r0, r2
 800df30:	f7fd f906 	bl	800b140 <pbuf_alloc>
 800df34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df36:	4604      	mov	r4, r0
 800df38:	bb38      	cbnz	r0, 800df8a <tcp_write+0x3da>
        pbuf_free(p2);
 800df3a:	4618      	mov	r0, r3
      pbuf_free(p);
 800df3c:	f7fd f896 	bl	800b06c <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800df40:	7eab      	ldrb	r3, [r5, #26]
 800df42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df46:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 800df48:	f1b9 0f00 	cmp.w	r9, #0
 800df4c:	d002      	beq.n	800df54 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 800df4e:	4648      	mov	r0, r9
 800df50:	f7fd f88c 	bl	800b06c <pbuf_free>
  if (queue != NULL) {
 800df54:	f1bb 0f00 	cmp.w	fp, #0
 800df58:	d002      	beq.n	800df60 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 800df5a:	4658      	mov	r0, fp
 800df5c:	f7fd fcea 	bl	800b934 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800df60:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800df64:	2b00      	cmp	r3, #0
 800df66:	f43f ae57 	beq.w	800dc18 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800df6a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f47f ae53 	bne.w	800dc18 <tcp_write+0x68>
 800df72:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800df74:	2b00      	cmp	r3, #0
 800df76:	f47f ae4f 	bne.w	800dc18 <tcp_write+0x68>
 800df7a:	4b51      	ldr	r3, [pc, #324]	; (800e0c0 <tcp_write+0x510>)
 800df7c:	f240 3202 	movw	r2, #770	; 0x302
 800df80:	4953      	ldr	r1, [pc, #332]	; (800e0d0 <tcp_write+0x520>)
 800df82:	4851      	ldr	r0, [pc, #324]	; (800e0c8 <tcp_write+0x518>)
 800df84:	f003 f80c 	bl	8010fa0 <iprintf>
 800df88:	e646      	b.n	800dc18 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 800df8a:	4619      	mov	r1, r3
 800df8c:	f7fd fa48 	bl	800b420 <pbuf_cat>
 800df90:	e7ac      	b.n	800deec <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800df92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800df94:	2200      	movs	r2, #0
 800df96:	4621      	mov	r1, r4
 800df98:	4628      	mov	r0, r5
 800df9a:	9200      	str	r2, [sp, #0]
 800df9c:	4443      	add	r3, r8
 800df9e:	f7ff fd65 	bl	800da6c <tcp_create_segment>
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0cb      	beq.n	800df40 <tcp_write+0x390>
    if (queue == NULL) {
 800dfa8:	f1bb 0f00 	cmp.w	fp, #0
 800dfac:	d010      	beq.n	800dfd0 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dfae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfb0:	b933      	cbnz	r3, 800dfc0 <tcp_write+0x410>
 800dfb2:	4b43      	ldr	r3, [pc, #268]	; (800e0c0 <tcp_write+0x510>)
 800dfb4:	f240 2285 	movw	r2, #645	; 0x285
 800dfb8:	4946      	ldr	r1, [pc, #280]	; (800e0d4 <tcp_write+0x524>)
 800dfba:	4843      	ldr	r0, [pc, #268]	; (800e0c8 <tcp_write+0x518>)
 800dfbc:	f002 fff0 	bl	8010fa0 <iprintf>
      prev_seg->next = seg;
 800dfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfc2:	601c      	str	r4, [r3, #0]
    pos += seglen;
 800dfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc6:	940b      	str	r4, [sp, #44]	; 0x2c
 800dfc8:	4498      	add	r8, r3
 800dfca:	fa1f f888 	uxth.w	r8, r8
 800dfce:	e6eb      	b.n	800dda8 <tcp_write+0x1f8>
 800dfd0:	4683      	mov	fp, r0
 800dfd2:	e7f7      	b.n	800dfc4 <tcp_write+0x414>
  if (oversize_used > 0) {
 800dfd4:	f04f 0a00 	mov.w	sl, #0
 800dfd8:	46d1      	mov	r9, sl
 800dfda:	e6e9      	b.n	800ddb0 <tcp_write+0x200>
      p->tot_len += oversize_used;
 800dfdc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800dfe0:	4433      	add	r3, r6
 800dfe2:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 800dfe6:	f8d8 3000 	ldr.w	r3, [r8]
 800dfea:	b96b      	cbnz	r3, 800e008 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800dfec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dff0:	4632      	mov	r2, r6
 800dff2:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 800dff6:	9908      	ldr	r1, [sp, #32]
 800dff8:	4418      	add	r0, r3
 800dffa:	f002 ff12 	bl	8010e22 <memcpy>
        p->len += oversize_used;
 800dffe:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e002:	4433      	add	r3, r6
 800e004:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e008:	f8d8 8000 	ldr.w	r8, [r8]
 800e00c:	e6d2      	b.n	800ddb4 <tcp_write+0x204>
  } else if (extendlen > 0) {
 800e00e:	f1ba 0f00 	cmp.w	sl, #0
 800e012:	d019      	beq.n	800e048 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e014:	b10f      	cbz	r7, 800e01a <tcp_write+0x46a>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	b933      	cbnz	r3, 800e028 <tcp_write+0x478>
 800e01a:	4b29      	ldr	r3, [pc, #164]	; (800e0c0 <tcp_write+0x510>)
 800e01c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800e020:	492d      	ldr	r1, [pc, #180]	; (800e0d8 <tcp_write+0x528>)
 800e022:	4829      	ldr	r0, [pc, #164]	; (800e0c8 <tcp_write+0x518>)
 800e024:	f002 ffbc 	bl	8010fa0 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	891a      	ldrh	r2, [r3, #8]
 800e02c:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800e02e:	4452      	add	r2, sl
 800e030:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e032:	b939      	cbnz	r1, 800e044 <tcp_write+0x494>
    p->len += extendlen;
 800e034:	895a      	ldrh	r2, [r3, #10]
 800e036:	4452      	add	r2, sl
 800e038:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e03a:	893b      	ldrh	r3, [r7, #8]
 800e03c:	449a      	add	sl, r3
 800e03e:	f8a7 a008 	strh.w	sl, [r7, #8]
 800e042:	e6d7      	b.n	800ddf4 <tcp_write+0x244>
      p->tot_len += extendlen;
 800e044:	460b      	mov	r3, r1
 800e046:	e7f0      	b.n	800e02a <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800e048:	2f00      	cmp	r7, #0
 800e04a:	f47f aed3 	bne.w	800ddf4 <tcp_write+0x244>
    pcb->unsent = queue;
 800e04e:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 800e052:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800e054:	9a05      	ldr	r2, [sp, #20]
 800e056:	4413      	add	r3, r2
 800e058:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 800e05a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800e05e:	1a9b      	subs	r3, r3, r2
 800e060:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800e064:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e068:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800e06c:	9b06      	ldr	r3, [sp, #24]
 800e06e:	b153      	cbz	r3, 800e086 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e070:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800e072:	b943      	cbnz	r3, 800e086 <tcp_write+0x4d6>
 800e074:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800e076:	b933      	cbnz	r3, 800e086 <tcp_write+0x4d6>
 800e078:	4b11      	ldr	r3, [pc, #68]	; (800e0c0 <tcp_write+0x510>)
 800e07a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800e07e:	4914      	ldr	r1, [pc, #80]	; (800e0d0 <tcp_write+0x520>)
 800e080:	4811      	ldr	r0, [pc, #68]	; (800e0c8 <tcp_write+0x518>)
 800e082:	f002 ff8d 	bl	8010fa0 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800e086:	b15c      	cbz	r4, 800e0a0 <tcp_write+0x4f0>
 800e088:	68e4      	ldr	r4, [r4, #12]
 800e08a:	b14c      	cbz	r4, 800e0a0 <tcp_write+0x4f0>
 800e08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e08e:	f013 0602 	ands.w	r6, r3, #2
 800e092:	d105      	bne.n	800e0a0 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e094:	89a5      	ldrh	r5, [r4, #12]
 800e096:	2008      	movs	r0, #8
 800e098:	f7fa fc4c 	bl	8008934 <lwip_htons>
 800e09c:	4328      	orrs	r0, r5
 800e09e:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e5a4      	b.n	800dbee <tcp_write+0x3e>
      p->tot_len += extendlen;
 800e0a4:	f04f 0900 	mov.w	r9, #0
 800e0a8:	e74a      	b.n	800df40 <tcp_write+0x390>
    return ERR_CONN;
 800e0aa:	f06f 000a 	mvn.w	r0, #10
 800e0ae:	e59e      	b.n	800dbee <tcp_write+0x3e>
  if (oversize_used > 0) {
 800e0b0:	2e00      	cmp	r6, #0
 800e0b2:	d18f      	bne.n	800dfd4 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 800e0b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e0b8:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800e0bc:	e69a      	b.n	800ddf4 <tcp_write+0x244>
 800e0be:	bf00      	nop
 800e0c0:	08013b0f 	.word	0x08013b0f
 800e0c4:	08013ca0 	.word	0x08013ca0
 800e0c8:	08011dd4 	.word	0x08011dd4
 800e0cc:	08013cde 	.word	0x08013cde
 800e0d0:	08013d6a 	.word	0x08013d6a
 800e0d4:	08013cec 	.word	0x08013cec
 800e0d8:	08013d35 	.word	0x08013d35

0800e0dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e0dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e0e0:	f011 0803 	ands.w	r8, r1, #3
{
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e0e8:	d106      	bne.n	800e0f8 <tcp_enqueue_flags+0x1c>
 800e0ea:	4b40      	ldr	r3, [pc, #256]	; (800e1ec <tcp_enqueue_flags+0x110>)
 800e0ec:	f240 321b 	movw	r2, #795	; 0x31b
 800e0f0:	493f      	ldr	r1, [pc, #252]	; (800e1f0 <tcp_enqueue_flags+0x114>)
 800e0f2:	4840      	ldr	r0, [pc, #256]	; (800e1f4 <tcp_enqueue_flags+0x118>)
 800e0f4:	f002 ff54 	bl	8010fa0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e0f8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	d90a      	bls.n	800e116 <tcp_enqueue_flags+0x3a>
 800e100:	07f1      	lsls	r1, r6, #31
 800e102:	d408      	bmi.n	800e116 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800e104:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pcb->flags |= TF_NAGLEMEMERR;
 800e10a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e10e:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800e110:	b003      	add	sp, #12
 800e112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e116:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e11a:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 800e11c:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e11e:	4610      	mov	r0, r2
 800e120:	bf15      	itete	ne
 800e122:	2704      	movne	r7, #4
 800e124:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 800e126:	f04f 0901 	movne.w	r9, #1
 800e12a:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e12e:	4639      	mov	r1, r7
 800e130:	f7fd f806 	bl	800b140 <pbuf_alloc>
 800e134:	4605      	mov	r5, r0
 800e136:	2800      	cmp	r0, #0
 800e138:	d0e4      	beq.n	800e104 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e13a:	8943      	ldrh	r3, [r0, #10]
 800e13c:	42bb      	cmp	r3, r7
 800e13e:	d206      	bcs.n	800e14e <tcp_enqueue_flags+0x72>
 800e140:	4b2a      	ldr	r3, [pc, #168]	; (800e1ec <tcp_enqueue_flags+0x110>)
 800e142:	f240 3241 	movw	r2, #833	; 0x341
 800e146:	492c      	ldr	r1, [pc, #176]	; (800e1f8 <tcp_enqueue_flags+0x11c>)
 800e148:	482a      	ldr	r0, [pc, #168]	; (800e1f4 <tcp_enqueue_flags+0x118>)
 800e14a:	f002 ff29 	bl	8010fa0 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e14e:	f8cd 9000 	str.w	r9, [sp]
 800e152:	4629      	mov	r1, r5
 800e154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e156:	4632      	mov	r2, r6
 800e158:	4620      	mov	r0, r4
 800e15a:	f7ff fc87 	bl	800da6c <tcp_create_segment>
 800e15e:	4605      	mov	r5, r0
 800e160:	2800      	cmp	r0, #0
 800e162:	d0cf      	beq.n	800e104 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e164:	68c3      	ldr	r3, [r0, #12]
 800e166:	079a      	lsls	r2, r3, #30
 800e168:	d006      	beq.n	800e178 <tcp_enqueue_flags+0x9c>
 800e16a:	4b20      	ldr	r3, [pc, #128]	; (800e1ec <tcp_enqueue_flags+0x110>)
 800e16c:	f240 3249 	movw	r2, #841	; 0x349
 800e170:	4922      	ldr	r1, [pc, #136]	; (800e1fc <tcp_enqueue_flags+0x120>)
 800e172:	4820      	ldr	r0, [pc, #128]	; (800e1f4 <tcp_enqueue_flags+0x118>)
 800e174:	f002 ff14 	bl	8010fa0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e178:	892b      	ldrh	r3, [r5, #8]
 800e17a:	b133      	cbz	r3, 800e18a <tcp_enqueue_flags+0xae>
 800e17c:	4b1b      	ldr	r3, [pc, #108]	; (800e1ec <tcp_enqueue_flags+0x110>)
 800e17e:	f240 324a 	movw	r2, #842	; 0x34a
 800e182:	491f      	ldr	r1, [pc, #124]	; (800e200 <tcp_enqueue_flags+0x124>)
 800e184:	481b      	ldr	r0, [pc, #108]	; (800e1f4 <tcp_enqueue_flags+0x118>)
 800e186:	f002 ff0b 	bl	8010fa0 <iprintf>
  if (pcb->unsent == NULL) {
 800e18a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e18c:	bb4b      	cbnz	r3, 800e1e2 <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 800e18e:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800e190:	2300      	movs	r3, #0
 800e192:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e196:	f1b8 0f00 	cmp.w	r8, #0
 800e19a:	d002      	beq.n	800e1a2 <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 800e19c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e19e:	3301      	adds	r3, #1
 800e1a0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800e1a2:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 800e1a4:	bf42      	ittt	mi
 800e1a6:	7ea3      	ldrbmi	r3, [r4, #26]
 800e1a8:	f043 0320 	orrmi.w	r3, r3, #32
 800e1ac:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e1ae:	6868      	ldr	r0, [r5, #4]
 800e1b0:	f7fd f912 	bl	800b3d8 <pbuf_clen>
 800e1b4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e1b8:	4418      	add	r0, r3
 800e1ba:	b280      	uxth	r0, r0
 800e1bc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d0a5      	beq.n	800e110 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e1c4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e1c6:	b948      	cbnz	r0, 800e1dc <tcp_enqueue_flags+0x100>
 800e1c8:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800e1ca:	2c00      	cmp	r4, #0
 800e1cc:	d1a0      	bne.n	800e110 <tcp_enqueue_flags+0x34>
 800e1ce:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <tcp_enqueue_flags+0x110>)
 800e1d0:	f240 326d 	movw	r2, #877	; 0x36d
 800e1d4:	490b      	ldr	r1, [pc, #44]	; (800e204 <tcp_enqueue_flags+0x128>)
 800e1d6:	4807      	ldr	r0, [pc, #28]	; (800e1f4 <tcp_enqueue_flags+0x118>)
 800e1d8:	f002 fee2 	bl	8010fa0 <iprintf>
  return ERR_OK;
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e797      	b.n	800e110 <tcp_enqueue_flags+0x34>
 800e1e0:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	2a00      	cmp	r2, #0
 800e1e6:	d1fb      	bne.n	800e1e0 <tcp_enqueue_flags+0x104>
    useg->next = seg;
 800e1e8:	601d      	str	r5, [r3, #0]
 800e1ea:	e7d1      	b.n	800e190 <tcp_enqueue_flags+0xb4>
 800e1ec:	08013b0f 	.word	0x08013b0f
 800e1f0:	080139ac 	.word	0x080139ac
 800e1f4:	08011dd4 	.word	0x08011dd4
 800e1f8:	08013a01 	.word	0x08013a01
 800e1fc:	08013a3a 	.word	0x08013a3a
 800e200:	08013a52 	.word	0x08013a52
 800e204:	08013a7c 	.word	0x08013a7c

0800e208 <tcp_send_fin>:
{
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800e20a:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800e20c:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800e20e:	b934      	cbnz	r4, 800e21e <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e210:	4628      	mov	r0, r5
 800e212:	2101      	movs	r1, #1
}
 800e214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e218:	f7ff bf60 	b.w	800e0dc <tcp_enqueue_flags>
 800e21c:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d1fb      	bne.n	800e21c <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e224:	68e3      	ldr	r3, [r4, #12]
 800e226:	8998      	ldrh	r0, [r3, #12]
 800e228:	f7fa fb84 	bl	8008934 <lwip_htons>
 800e22c:	f010 0707 	ands.w	r7, r0, #7
 800e230:	d1ee      	bne.n	800e210 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e232:	68e6      	ldr	r6, [r4, #12]
 800e234:	2001      	movs	r0, #1
 800e236:	89b4      	ldrh	r4, [r6, #12]
 800e238:	f7fa fb7c 	bl	8008934 <lwip_htons>
 800e23c:	4320      	orrs	r0, r4
 800e23e:	81b0      	strh	r0, [r6, #12]
}
 800e240:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 800e242:	7eab      	ldrb	r3, [r5, #26]
 800e244:	f043 0320 	orr.w	r3, r3, #32
 800e248:	76ab      	strb	r3, [r5, #26]
}
 800e24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e24c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e24c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e24e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e250:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e252:	f7fa fb72 	bl	800893a <lwip_htonl>
 800e256:	2100      	movs	r1, #0
 800e258:	4602      	mov	r2, r0
 800e25a:	4620      	mov	r0, r4
 800e25c:	f7ff fc6c 	bl	800db38 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e260:	4606      	mov	r6, r0
 800e262:	b940      	cbnz	r0, 800e276 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e264:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e266:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e26a:	f043 0303 	orr.w	r3, r3, #3
 800e26e:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800e270:	4628      	mov	r0, r5
 800e272:	b004      	add	sp, #16
 800e274:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e276:	1d25      	adds	r5, r4, #4
 800e278:	4628      	mov	r0, r5
 800e27a:	f7fb fda9 	bl	8009dd0 <ip4_route>
  if (netif == NULL) {
 800e27e:	b1a0      	cbz	r0, 800e2aa <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e280:	2206      	movs	r2, #6
 800e282:	9002      	str	r0, [sp, #8]
 800e284:	7aa3      	ldrb	r3, [r4, #10]
 800e286:	4621      	mov	r1, r4
 800e288:	9201      	str	r2, [sp, #4]
 800e28a:	4630      	mov	r0, r6
 800e28c:	7a62      	ldrb	r2, [r4, #9]
 800e28e:	9200      	str	r2, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	f7fb ff0f 	bl	800a0b4 <ip4_output_if>
 800e296:	4605      	mov	r5, r0
  pbuf_free(p);
 800e298:	4630      	mov	r0, r6
 800e29a:	f7fc fee7 	bl	800b06c <pbuf_free>
 800e29e:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 800e2a0:	b135      	cbz	r5, 800e2b0 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e2a2:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e2a6:	76a3      	strb	r3, [r4, #26]
 800e2a8:	e7e2      	b.n	800e270 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800e2aa:	f06f 0503 	mvn.w	r5, #3
 800e2ae:	e7f3      	b.n	800e298 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e2b0:	f023 0303 	bic.w	r3, r3, #3
 800e2b4:	e7f7      	b.n	800e2a6 <tcp_send_empty_ack+0x5a>
	...

0800e2b8 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e2b8:	7d03      	ldrb	r3, [r0, #20]
 800e2ba:	2b01      	cmp	r3, #1
{
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e2c4:	d106      	bne.n	800e2d4 <tcp_output+0x1c>
 800e2c6:	4ba5      	ldr	r3, [pc, #660]	; (800e55c <tcp_output+0x2a4>)
 800e2c8:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800e2cc:	49a4      	ldr	r1, [pc, #656]	; (800e560 <tcp_output+0x2a8>)
 800e2ce:	48a5      	ldr	r0, [pc, #660]	; (800e564 <tcp_output+0x2ac>)
 800e2d0:	f002 fe66 	bl	8010fa0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e2d4:	4ba4      	ldr	r3, [pc, #656]	; (800e568 <tcp_output+0x2b0>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	429c      	cmp	r4, r3
 800e2da:	d052      	beq.n	800e382 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e2dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e2e0:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 800e2e4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e2e6:	429f      	cmp	r7, r3
 800e2e8:	bf28      	it	cs
 800e2ea:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e2ec:	7ea3      	ldrb	r3, [r4, #26]
 800e2ee:	0799      	lsls	r1, r3, #30
 800e2f0:	d510      	bpl.n	800e314 <tcp_output+0x5c>
 800e2f2:	b92d      	cbnz	r5, 800e300 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800e2f4:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800e2f6:	b007      	add	sp, #28
 800e2f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800e2fc:	f7ff bfa6 	b.w	800e24c <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e300:	68eb      	ldr	r3, [r5, #12]
 800e302:	6858      	ldr	r0, [r3, #4]
 800e304:	f7fa fb19 	bl	800893a <lwip_htonl>
 800e308:	892b      	ldrh	r3, [r5, #8]
 800e30a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e30c:	1a9b      	subs	r3, r3, r2
 800e30e:	4418      	add	r0, r3
     (seg == NULL ||
 800e310:	4287      	cmp	r7, r0
 800e312:	d3ef      	bcc.n	800e2f4 <tcp_output+0x3c>
  useg = pcb->unacked;
 800e314:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800e316:	2e00      	cmp	r6, #0
 800e318:	d136      	bne.n	800e388 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e31a:	f104 0804 	add.w	r8, r4, #4
 800e31e:	4640      	mov	r0, r8
 800e320:	f7fb fd56 	bl	8009dd0 <ip4_route>
  if (netif == NULL) {
 800e324:	4681      	mov	r9, r0
 800e326:	2800      	cmp	r0, #0
 800e328:	f000 813c 	beq.w	800e5a4 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e32c:	b10c      	cbz	r4, 800e332 <tcp_output+0x7a>
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	b913      	cbnz	r3, 800e338 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e332:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e336:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 800e338:	b1d5      	cbz	r5, 800e370 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e33a:	68eb      	ldr	r3, [r5, #12]
 800e33c:	6858      	ldr	r0, [r3, #4]
 800e33e:	f7fa fafc 	bl	800893a <lwip_htonl>
 800e342:	892b      	ldrh	r3, [r5, #8]
 800e344:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e346:	1a9b      	subs	r3, r3, r2
 800e348:	4418      	add	r0, r3
  if (seg != NULL &&
 800e34a:	4287      	cmp	r7, r0
 800e34c:	d26f      	bcs.n	800e42e <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e34e:	2f00      	cmp	r7, #0
 800e350:	d06d      	beq.n	800e42e <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e352:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800e356:	429f      	cmp	r7, r3
 800e358:	d169      	bne.n	800e42e <tcp_output+0x176>
 800e35a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d166      	bne.n	800e42e <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800e360:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800e364:	b923      	cbnz	r3, 800e370 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800e366:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e36a:	2301      	movs	r3, #1
 800e36c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800e370:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e372:	b913      	cbnz	r3, 800e37a <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800e374:	2300      	movs	r3, #0
 800e376:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800e37a:	7ea3      	ldrb	r3, [r4, #26]
 800e37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e380:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800e382:	2000      	movs	r0, #0
 800e384:	e0e6      	b.n	800e554 <tcp_output+0x29c>
 800e386:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800e388:	6833      	ldr	r3, [r6, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1fb      	bne.n	800e386 <tcp_output+0xce>
 800e38e:	e7c4      	b.n	800e31a <tcp_output+0x62>
    pcb->unsent = seg->next;
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e394:	7d23      	ldrb	r3, [r4, #20]
 800e396:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e398:	bf1e      	ittt	ne
 800e39a:	7ea3      	ldrbne	r3, [r4, #26]
 800e39c:	f023 0303 	bicne.w	r3, r3, #3
 800e3a0:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e3a2:	68eb      	ldr	r3, [r5, #12]
 800e3a4:	6858      	ldr	r0, [r3, #4]
 800e3a6:	f7fa fac8 	bl	800893a <lwip_htonl>
 800e3aa:	68e9      	ldr	r1, [r5, #12]
 800e3ac:	4683      	mov	fp, r0
 800e3ae:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800e3b2:	8988      	ldrh	r0, [r1, #12]
 800e3b4:	f7fa fabe 	bl	8008934 <lwip_htons>
 800e3b8:	f010 0003 	ands.w	r0, r0, #3
 800e3bc:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 800e3c0:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e3c2:	bf18      	it	ne
 800e3c4:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 800e3c6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e3ca:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e3cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e3ce:	1a1b      	subs	r3, r3, r0
 800e3d0:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800e3d2:	bfb8      	it	lt
 800e3d4:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800e3d6:	8990      	ldrh	r0, [r2, #12]
 800e3d8:	f7fa faac 	bl	8008934 <lwip_htons>
 800e3dc:	f010 0003 	ands.w	r0, r0, #3
 800e3e0:	bf18      	it	ne
 800e3e2:	2001      	movne	r0, #1
 800e3e4:	eb10 0f0a 	cmn.w	r0, sl
 800e3e8:	f000 80d8 	beq.w	800e59c <tcp_output+0x2e4>
      seg->next = NULL;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e3f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e3f2:	b913      	cbnz	r3, 800e3fa <tcp_output+0x142>
        pcb->unacked = seg;
 800e3f4:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800e3f6:	462e      	mov	r6, r5
 800e3f8:	e016      	b.n	800e428 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e3fa:	68eb      	ldr	r3, [r5, #12]
 800e3fc:	6858      	ldr	r0, [r3, #4]
 800e3fe:	f7fa fa9c 	bl	800893a <lwip_htonl>
 800e402:	68f2      	ldr	r2, [r6, #12]
 800e404:	4682      	mov	sl, r0
 800e406:	6850      	ldr	r0, [r2, #4]
 800e408:	f7fa fa97 	bl	800893a <lwip_htonl>
 800e40c:	ebaa 0000 	sub.w	r0, sl, r0
 800e410:	2800      	cmp	r0, #0
 800e412:	f280 80c1 	bge.w	800e598 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e416:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	2a00      	cmp	r2, #0
 800e41e:	f040 80a9 	bne.w	800e574 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800e426:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800e428:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800e42a:	2d00      	cmp	r5, #0
 800e42c:	d0a2      	beq.n	800e374 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e42e:	68eb      	ldr	r3, [r5, #12]
 800e430:	6858      	ldr	r0, [r3, #4]
 800e432:	f7fa fa82 	bl	800893a <lwip_htonl>
 800e436:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e438:	1ac0      	subs	r0, r0, r3
 800e43a:	892b      	ldrh	r3, [r5, #8]
 800e43c:	4418      	add	r0, r3
  while (seg != NULL &&
 800e43e:	4287      	cmp	r7, r0
 800e440:	d396      	bcc.n	800e370 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800e442:	68eb      	ldr	r3, [r5, #12]
 800e444:	8998      	ldrh	r0, [r3, #12]
 800e446:	f7fa fa75 	bl	8008934 <lwip_htons>
 800e44a:	0742      	lsls	r2, r0, #29
 800e44c:	d506      	bpl.n	800e45c <tcp_output+0x1a4>
 800e44e:	4b43      	ldr	r3, [pc, #268]	; (800e55c <tcp_output+0x2a4>)
 800e450:	f240 4246 	movw	r2, #1094	; 0x446
 800e454:	4945      	ldr	r1, [pc, #276]	; (800e56c <tcp_output+0x2b4>)
 800e456:	4843      	ldr	r0, [pc, #268]	; (800e564 <tcp_output+0x2ac>)
 800e458:	f002 fda2 	bl	8010fa0 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e45c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e45e:	b19b      	cbz	r3, 800e488 <tcp_output+0x1d0>
 800e460:	7ea2      	ldrb	r2, [r4, #26]
 800e462:	f012 0f44 	tst.w	r2, #68	; 0x44
 800e466:	d10f      	bne.n	800e488 <tcp_output+0x1d0>
 800e468:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e46a:	b12b      	cbz	r3, 800e478 <tcp_output+0x1c0>
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	b959      	cbnz	r1, 800e488 <tcp_output+0x1d0>
 800e470:	8919      	ldrh	r1, [r3, #8]
 800e472:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e474:	4299      	cmp	r1, r3
 800e476:	d207      	bcs.n	800e488 <tcp_output+0x1d0>
 800e478:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e47c:	b123      	cbz	r3, 800e488 <tcp_output+0x1d0>
 800e47e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e482:	2b08      	cmp	r3, #8
 800e484:	f240 8091 	bls.w	800e5aa <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 800e488:	7d23      	ldrb	r3, [r4, #20]
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d00a      	beq.n	800e4a4 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e48e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e492:	2010      	movs	r0, #16
 800e494:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800e498:	f7fa fa4c 	bl	8008934 <lwip_htons>
 800e49c:	ea4b 0000 	orr.w	r0, fp, r0
 800e4a0:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e4a4:	686b      	ldr	r3, [r5, #4]
 800e4a6:	89db      	ldrh	r3, [r3, #14]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	f47f af71 	bne.w	800e390 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e4ae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4b4:	f7fa fa41 	bl	800893a <lwip_htonl>
 800e4b8:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4bc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e4be:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4c2:	f7fa fa37 	bl	8008934 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4ca:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4ce:	4413      	add	r3, r2
 800e4d0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e4d2:	7aab      	ldrb	r3, [r5, #10]
 800e4d4:	07db      	lsls	r3, r3, #31
 800e4d6:	d50c      	bpl.n	800e4f2 <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e4d8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e4dc:	4641      	mov	r1, r8
 800e4de:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e4e2:	f7fd ffc3 	bl	800c46c <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e4e6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800e4ea:	f7fa fa26 	bl	800893a <lwip_htonl>
 800e4ee:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e4f2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e4f6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800e4f8:	bfbc      	itt	lt
 800e4fa:	2300      	movlt	r3, #0
 800e4fc:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e500:	b93b      	cbnz	r3, 800e512 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800e502:	4b1b      	ldr	r3, [pc, #108]	; (800e570 <tcp_output+0x2b8>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e508:	68eb      	ldr	r3, [r5, #12]
 800e50a:	6858      	ldr	r0, [r3, #4]
 800e50c:	f7fa fa15 	bl	800893a <lwip_htonl>
 800e510:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e512:	6868      	ldr	r0, [r5, #4]
 800e514:	68ea      	ldr	r2, [r5, #12]
 800e516:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e518:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e51a:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800e51c:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e51e:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800e520:	1ac9      	subs	r1, r1, r3
 800e522:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800e524:	8901      	ldrh	r1, [r0, #8]
 800e526:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e528:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 800e52a:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	7413      	strb	r3, [r2, #16]
 800e530:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e532:	2206      	movs	r2, #6
 800e534:	7aa3      	ldrb	r3, [r4, #10]
 800e536:	9201      	str	r2, [sp, #4]
 800e538:	7a62      	ldrb	r2, [r4, #9]
 800e53a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e53e:	9200      	str	r2, [sp, #0]
 800e540:	4642      	mov	r2, r8
 800e542:	f7fb fdb7 	bl	800a0b4 <ip4_output_if>
    if (err != ERR_OK) {
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f af22 	beq.w	800e390 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 800e54c:	7ea3      	ldrb	r3, [r4, #26]
 800e54e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e552:	76a3      	strb	r3, [r4, #26]
}
 800e554:	b007      	add	sp, #28
 800e556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55a:	bf00      	nop
 800e55c:	08013b0f 	.word	0x08013b0f
 800e560:	08013aa4 	.word	0x08013aa4
 800e564:	08011dd4 	.word	0x08011dd4
 800e568:	2000bb44 	.word	0x2000bb44
 800e56c:	08013aca 	.word	0x08013aca
 800e570:	2000bb34 	.word	0x2000bb34
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e574:	68d2      	ldr	r2, [r2, #12]
 800e576:	9305      	str	r3, [sp, #20]
 800e578:	6850      	ldr	r0, [r2, #4]
 800e57a:	f7fa f9de 	bl	800893a <lwip_htonl>
 800e57e:	68e9      	ldr	r1, [r5, #12]
 800e580:	4682      	mov	sl, r0
 800e582:	6848      	ldr	r0, [r1, #4]
 800e584:	f7fa f9d9 	bl	800893a <lwip_htonl>
 800e588:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800e58c:	9b05      	ldr	r3, [sp, #20]
 800e58e:	2800      	cmp	r0, #0
 800e590:	f6bf af47 	bge.w	800e422 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	e740      	b.n	800e41a <tcp_output+0x162>
          useg->next = seg;
 800e598:	6035      	str	r5, [r6, #0]
 800e59a:	e72c      	b.n	800e3f6 <tcp_output+0x13e>
      tcp_seg_free(seg);
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7fd f9bb 	bl	800b918 <tcp_seg_free>
 800e5a2:	e741      	b.n	800e428 <tcp_output+0x170>
    return ERR_RTE;
 800e5a4:	f06f 0003 	mvn.w	r0, #3
 800e5a8:	e7d4      	b.n	800e554 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e5aa:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800e5ae:	f47f af6b 	bne.w	800e488 <tcp_output+0x1d0>
 800e5b2:	e6dd      	b.n	800e370 <tcp_output+0xb8>

0800e5b4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	b085      	sub	sp, #20
 800e5ba:	4681      	mov	r9, r0
 800e5bc:	460e      	mov	r6, r1
 800e5be:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e5c0:	2114      	movs	r1, #20
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2001      	movs	r0, #1
{
 800e5c6:	461f      	mov	r7, r3
 800e5c8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800e5cc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e5d0:	f7fc fdb6 	bl	800b140 <pbuf_alloc>
  if (p == NULL) {
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d03c      	beq.n	800e654 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e5da:	8943      	ldrh	r3, [r0, #10]
 800e5dc:	2b13      	cmp	r3, #19
 800e5de:	d806      	bhi.n	800e5ee <tcp_rst+0x3a>
 800e5e0:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <tcp_rst+0xa8>)
 800e5e2:	f240 524d 	movw	r2, #1357	; 0x54d
 800e5e6:	491e      	ldr	r1, [pc, #120]	; (800e660 <tcp_rst+0xac>)
 800e5e8:	481e      	ldr	r0, [pc, #120]	; (800e664 <tcp_rst+0xb0>)
 800e5ea:	f002 fcd9 	bl	8010fa0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5ee:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800e5f0:	4658      	mov	r0, fp
 800e5f2:	f7fa f99f 	bl	8008934 <lwip_htons>
 800e5f6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e5f8:	4650      	mov	r0, sl
 800e5fa:	f7fa f99b 	bl	8008934 <lwip_htons>
 800e5fe:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e600:	4648      	mov	r0, r9
 800e602:	f7fa f99a 	bl	800893a <lwip_htonl>
 800e606:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e608:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e60a:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 800e60c:	f7fa f995 	bl	800893a <lwip_htonl>
 800e610:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e612:	f245 0014 	movw	r0, #20500	; 0x5014
 800e616:	f7fa f98d 	bl	8008934 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e61a:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e61c:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e61e:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e620:	73a3      	strb	r3, [r4, #14]
 800e622:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 800e624:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e626:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 800e628:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800e62a:	74a6      	strb	r6, [r4, #18]
 800e62c:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 800e62e:	f7fb fbcf 	bl	8009dd0 <ip4_route>
  if (netif != NULL) {
 800e632:	b148      	cbz	r0, 800e648 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e634:	2306      	movs	r3, #6
 800e636:	9002      	str	r0, [sp, #8]
 800e638:	9600      	str	r6, [sp, #0]
 800e63a:	463a      	mov	r2, r7
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	4641      	mov	r1, r8
 800e640:	23ff      	movs	r3, #255	; 0xff
 800e642:	4628      	mov	r0, r5
 800e644:	f7fb fd36 	bl	800a0b4 <ip4_output_if>
  }
  pbuf_free(p);
 800e648:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e64a:	b005      	add	sp, #20
 800e64c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800e650:	f7fc bd0c 	b.w	800b06c <pbuf_free>
}
 800e654:	b005      	add	sp, #20
 800e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65a:	bf00      	nop
 800e65c:	08013b0f 	.word	0x08013b0f
 800e660:	08013ae1 	.word	0x08013ae1
 800e664:	08011dd4 	.word	0x08011dd4

0800e668 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e668:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800e66a:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800e66c:	b1aa      	cbz	r2, 800e69a <tcp_rexmit_rto+0x32>
 800e66e:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e670:	680b      	ldr	r3, [r1, #0]
 800e672:	b983      	cbnz	r3, 800e696 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e674:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800e676:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e678:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e67a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800e67e:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800e680:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800e682:	bf1c      	itt	ne
 800e684:	3301      	addne	r3, #1
 800e686:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e68a:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800e68c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 800e690:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 800e692:	f7ff be11 	b.w	800e2b8 <tcp_output>
 800e696:	4619      	mov	r1, r3
 800e698:	e7ea      	b.n	800e670 <tcp_rexmit_rto+0x8>
}
 800e69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e6a2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800e6a4:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800e6a6:	b1ad      	cbz	r5, 800e6d4 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800e6a8:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800e6aa:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 800e6ae:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 800e6b0:	6833      	ldr	r3, [r6, #0]
 800e6b2:	b983      	cbnz	r3, 800e6d6 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800e6b4:	6833      	ldr	r3, [r6, #0]
 800e6b6:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800e6b8:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e6ba:	682b      	ldr	r3, [r5, #0]
 800e6bc:	b90b      	cbnz	r3, 800e6c2 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e6be:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e6c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e6c6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800e6c8:	bf1c      	itt	ne
 800e6ca:	3301      	addne	r3, #1
 800e6cc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	6363      	str	r3, [r4, #52]	; 0x34
 800e6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	6858      	ldr	r0, [r3, #4]
 800e6da:	f7fa f92e 	bl	800893a <lwip_htonl>
 800e6de:	68eb      	ldr	r3, [r5, #12]
 800e6e0:	4607      	mov	r7, r0
 800e6e2:	6858      	ldr	r0, [r3, #4]
 800e6e4:	f7fa f929 	bl	800893a <lwip_htonl>
 800e6e8:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	dae2      	bge.n	800e6b4 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800e6ee:	6836      	ldr	r6, [r6, #0]
 800e6f0:	e7de      	b.n	800e6b0 <tcp_rexmit+0x10>

0800e6f2 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e6f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e6f8:	b30b      	cbz	r3, 800e73e <tcp_rexmit_fast+0x4c>
 800e6fa:	7e83      	ldrb	r3, [r0, #26]
 800e6fc:	075b      	lsls	r3, r3, #29
 800e6fe:	d41e      	bmi.n	800e73e <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e700:	f7ff ffce 	bl	800e6a0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e704:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800e708:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e70c:	4293      	cmp	r3, r2
 800e70e:	bf38      	it	cc
 800e710:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e712:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e714:	bf28      	it	cs
 800e716:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e718:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e71a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e71e:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e720:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 800e722:	bf38      	it	cc
 800e724:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e728:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800e72c:	4413      	add	r3, r2
 800e72e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e732:	7ea3      	ldrb	r3, [r4, #26]
 800e734:	f043 0304 	orr.w	r3, r3, #4
 800e738:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	8623      	strh	r3, [r4, #48]	; 0x30
 800e73e:	bd10      	pop	{r4, pc}

0800e740 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e742:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e744:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e746:	3801      	subs	r0, #1
 800e748:	f7fa f8f7 	bl	800893a <lwip_htonl>
 800e74c:	2100      	movs	r1, #0
 800e74e:	4602      	mov	r2, r0
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff f9f1 	bl	800db38 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e756:	4605      	mov	r5, r0
 800e758:	b1c8      	cbz	r0, 800e78e <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e75a:	1d26      	adds	r6, r4, #4
 800e75c:	4630      	mov	r0, r6
 800e75e:	f7fb fb37 	bl	8009dd0 <ip4_route>
  if (netif == NULL) {
 800e762:	b188      	cbz	r0, 800e788 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e764:	2100      	movs	r1, #0
 800e766:	2206      	movs	r2, #6
 800e768:	7aa3      	ldrb	r3, [r4, #10]
 800e76a:	9002      	str	r0, [sp, #8]
 800e76c:	4628      	mov	r0, r5
 800e76e:	e88d 0006 	stmia.w	sp, {r1, r2}
 800e772:	4621      	mov	r1, r4
 800e774:	4632      	mov	r2, r6
 800e776:	f7fb fc9d 	bl	800a0b4 <ip4_output_if>
 800e77a:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e77c:	4628      	mov	r0, r5
 800e77e:	f7fc fc75 	bl	800b06c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e782:	4620      	mov	r0, r4
 800e784:	b004      	add	sp, #16
 800e786:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800e788:	f06f 0403 	mvn.w	r4, #3
 800e78c:	e7f6      	b.n	800e77c <tcp_keepalive+0x3c>
    return ERR_MEM;
 800e78e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e792:	e7f6      	b.n	800e782 <tcp_keepalive+0x42>

0800e794 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e798:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800e79a:	4606      	mov	r6, r0

  if (seg == NULL) {
 800e79c:	b914      	cbnz	r4, 800e7a4 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800e79e:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800e7a0:	2c00      	cmp	r4, #0
 800e7a2:	d041      	beq.n	800e828 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7a4:	68e3      	ldr	r3, [r4, #12]
 800e7a6:	8998      	ldrh	r0, [r3, #12]
 800e7a8:	f7fa f8c4 	bl	8008934 <lwip_htons>
 800e7ac:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e7b0:	68e3      	ldr	r3, [r4, #12]
 800e7b2:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7b4:	bf18      	it	ne
 800e7b6:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e7b8:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7ba:	bf1c      	itt	ne
 800e7bc:	fab5 f585 	clzne	r5, r5
 800e7c0:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e7c2:	f085 0101 	eor.w	r1, r5, #1
 800e7c6:	f7ff f9b7 	bl	800db38 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e7ca:	4607      	mov	r7, r0
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d03d      	beq.n	800e84c <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e7d0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800e7d4:	b365      	cbz	r5, 800e830 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e7d6:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800e7da:	2011      	movs	r0, #17
 800e7dc:	f7fa f8aa 	bl	8008934 <lwip_htons>
 800e7e0:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800e7e4:	b2ad      	uxth	r5, r5
 800e7e6:	4328      	orrs	r0, r5
 800e7e8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e7ec:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e7ee:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e7f0:	6858      	ldr	r0, [r3, #4]
 800e7f2:	f7fa f8a2 	bl	800893a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e7f6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e7f8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e7fa:	1a1b      	subs	r3, r3, r0
 800e7fc:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800e7fe:	bfb8      	it	lt
 800e800:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e802:	4620      	mov	r0, r4
 800e804:	f7fb fae4 	bl	8009dd0 <ip4_route>
  if (netif == NULL) {
 800e808:	b1e8      	cbz	r0, 800e846 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e80a:	2100      	movs	r1, #0
 800e80c:	2206      	movs	r2, #6
 800e80e:	9002      	str	r0, [sp, #8]
 800e810:	4638      	mov	r0, r7
 800e812:	7ab3      	ldrb	r3, [r6, #10]
 800e814:	e88d 0006 	stmia.w	sp, {r1, r2}
 800e818:	4622      	mov	r2, r4
 800e81a:	4631      	mov	r1, r6
 800e81c:	f7fb fc4a 	bl	800a0b4 <ip4_output_if>
 800e820:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e822:	4638      	mov	r0, r7
 800e824:	f7fc fc22 	bl	800b06c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e828:	4620      	mov	r0, r4
 800e82a:	b004      	add	sp, #16
 800e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e830:	6860      	ldr	r0, [r4, #4]
 800e832:	f108 0114 	add.w	r1, r8, #20
 800e836:	8922      	ldrh	r2, [r4, #8]
 800e838:	8903      	ldrh	r3, [r0, #8]
 800e83a:	1a9b      	subs	r3, r3, r2
 800e83c:	2201      	movs	r2, #1
 800e83e:	b29b      	uxth	r3, r3
 800e840:	f7fc febc 	bl	800b5bc <pbuf_copy_partial>
 800e844:	e7d2      	b.n	800e7ec <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800e846:	f06f 0403 	mvn.w	r4, #3
 800e84a:	e7ea      	b.n	800e822 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 800e84c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e850:	e7ea      	b.n	800e828 <tcp_zero_window_probe+0x94>
	...

0800e854 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e858:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e85a:	200a      	movs	r0, #10
{
 800e85c:	460f      	mov	r7, r1
 800e85e:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e860:	f7fc fa62 	bl	800ad28 <memp_malloc>
  if (timeout == NULL) {
 800e864:	4604      	mov	r4, r0
 800e866:	b938      	cbnz	r0, 800e878 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e868:	4b1e      	ldr	r3, [pc, #120]	; (800e8e4 <sys_timeout+0x90>)
 800e86a:	22d4      	movs	r2, #212	; 0xd4
 800e86c:	491e      	ldr	r1, [pc, #120]	; (800e8e8 <sys_timeout+0x94>)
 800e86e:	481f      	ldr	r0, [pc, #124]	; (800e8ec <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800e870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e874:	f002 bb94 	b.w	8010fa0 <iprintf>
  now = sys_now();
 800e878:	f000 fdf6 	bl	800f468 <sys_now>
  if (next_timeout == NULL) {
 800e87c:	4a1c      	ldr	r2, [pc, #112]	; (800e8f0 <sys_timeout+0x9c>)
 800e87e:	491d      	ldr	r1, [pc, #116]	; (800e8f4 <sys_timeout+0xa0>)
 800e880:	6813      	ldr	r3, [r2, #0]
 800e882:	b95b      	cbnz	r3, 800e89c <sys_timeout+0x48>
    timeouts_last_time = now;
 800e884:	6008      	str	r0, [r1, #0]
    diff = 0;
 800e886:	4618      	mov	r0, r3
  timeout->next = NULL;
 800e888:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800e88a:	4428      	add	r0, r5
  timeout->h = handler;
 800e88c:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 800e88e:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 800e890:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800e892:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800e894:	b92b      	cbnz	r3, 800e8a2 <sys_timeout+0x4e>
    next_timeout = timeout;
 800e896:	6014      	str	r4, [r2, #0]
 800e898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800e89c:	6809      	ldr	r1, [r1, #0]
 800e89e:	1a40      	subs	r0, r0, r1
 800e8a0:	e7f2      	b.n	800e888 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	428d      	cmp	r5, r1
 800e8a6:	d217      	bcs.n	800e8d8 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800e8a8:	1b4d      	subs	r5, r1, r5
 800e8aa:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	e7f2      	b.n	800e896 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800e8b0:	684e      	ldr	r6, [r1, #4]
 800e8b2:	42b2      	cmp	r2, r6
 800e8b4:	d312      	bcc.n	800e8dc <sys_timeout+0x88>
 800e8b6:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800e8b8:	6841      	ldr	r1, [r0, #4]
 800e8ba:	6862      	ldr	r2, [r4, #4]
 800e8bc:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800e8be:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800e8c0:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	d1f4      	bne.n	800e8b0 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800e8c6:	4295      	cmp	r5, r2
 800e8c8:	d202      	bcs.n	800e8d0 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	441d      	add	r5, r3
 800e8ce:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800e8d0:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800e8d2:	6004      	str	r4, [r0, #0]
        break;
 800e8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	e7ed      	b.n	800e8b8 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800e8dc:	1ab2      	subs	r2, r6, r2
 800e8de:	604a      	str	r2, [r1, #4]
 800e8e0:	e7f6      	b.n	800e8d0 <sys_timeout+0x7c>
 800e8e2:	bf00      	nop
 800e8e4:	08013db0 	.word	0x08013db0
 800e8e8:	08013de4 	.word	0x08013de4
 800e8ec:	08011dd4 	.word	0x08011dd4
 800e8f0:	20008398 	.word	0x20008398
 800e8f4:	200083a0 	.word	0x200083a0

0800e8f8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e8f8:	4b08      	ldr	r3, [pc, #32]	; (800e91c <tcp_timer_needed+0x24>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	b962      	cbnz	r2, 800e918 <tcp_timer_needed+0x20>
 800e8fe:	4a08      	ldr	r2, [pc, #32]	; (800e920 <tcp_timer_needed+0x28>)
 800e900:	6812      	ldr	r2, [r2, #0]
 800e902:	b912      	cbnz	r2, 800e90a <tcp_timer_needed+0x12>
 800e904:	4a07      	ldr	r2, [pc, #28]	; (800e924 <tcp_timer_needed+0x2c>)
 800e906:	6812      	ldr	r2, [r2, #0]
 800e908:	b132      	cbz	r2, 800e918 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800e90a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e90c:	4906      	ldr	r1, [pc, #24]	; (800e928 <tcp_timer_needed+0x30>)
 800e90e:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800e910:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e912:	2200      	movs	r2, #0
 800e914:	f7ff bf9e 	b.w	800e854 <sys_timeout>
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	2000839c 	.word	0x2000839c
 800e920:	2000bb30 	.word	0x2000bb30
 800e924:	2000bb40 	.word	0x2000bb40
 800e928:	0800e92d 	.word	0x0800e92d

0800e92c <tcpip_tcp_timer>:
{
 800e92c:	b508      	push	{r3, lr}
  tcp_tmr();
 800e92e:	f7fd fc0f 	bl	800c150 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e932:	4b08      	ldr	r3, [pc, #32]	; (800e954 <tcpip_tcp_timer+0x28>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	b913      	cbnz	r3, 800e93e <tcpip_tcp_timer+0x12>
 800e938:	4b07      	ldr	r3, [pc, #28]	; (800e958 <tcpip_tcp_timer+0x2c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	b133      	cbz	r3, 800e94c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e93e:	2200      	movs	r2, #0
 800e940:	4906      	ldr	r1, [pc, #24]	; (800e95c <tcpip_tcp_timer+0x30>)
 800e942:	20fa      	movs	r0, #250	; 0xfa
}
 800e944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e948:	f7ff bf84 	b.w	800e854 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800e94c:	4a04      	ldr	r2, [pc, #16]	; (800e960 <tcpip_tcp_timer+0x34>)
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	bd08      	pop	{r3, pc}
 800e952:	bf00      	nop
 800e954:	2000bb30 	.word	0x2000bb30
 800e958:	2000bb40 	.word	0x2000bb40
 800e95c:	0800e92d 	.word	0x0800e92d
 800e960:	2000839c 	.word	0x2000839c

0800e964 <sys_timeouts_init>:
{
 800e964:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e966:	4d11      	ldr	r5, [pc, #68]	; (800e9ac <sys_timeouts_init+0x48>)
 800e968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e96c:	4c10      	ldr	r4, [pc, #64]	; (800e9b0 <sys_timeouts_init+0x4c>)
 800e96e:	f105 0208 	add.w	r2, r5, #8
 800e972:	4621      	mov	r1, r4
 800e974:	f7ff ff6e 	bl	800e854 <sys_timeout>
 800e978:	f105 0210 	add.w	r2, r5, #16
 800e97c:	4621      	mov	r1, r4
 800e97e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e982:	f7ff ff67 	bl	800e854 <sys_timeout>
 800e986:	f105 0218 	add.w	r2, r5, #24
 800e98a:	4621      	mov	r1, r4
 800e98c:	f64e 2060 	movw	r0, #60000	; 0xea60
 800e990:	f7ff ff60 	bl	800e854 <sys_timeout>
 800e994:	f105 0220 	add.w	r2, r5, #32
 800e998:	4621      	mov	r1, r4
 800e99a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e99e:	f7ff ff59 	bl	800e854 <sys_timeout>
  timeouts_last_time = sys_now();
 800e9a2:	f000 fd61 	bl	800f468 <sys_now>
 800e9a6:	4b03      	ldr	r3, [pc, #12]	; (800e9b4 <sys_timeouts_init+0x50>)
 800e9a8:	6018      	str	r0, [r3, #0]
 800e9aa:	bd38      	pop	{r3, r4, r5, pc}
 800e9ac:	08013d88 	.word	0x08013d88
 800e9b0:	0800e9b9 	.word	0x0800e9b9
 800e9b4:	200083a0 	.word	0x200083a0

0800e9b8 <cyclic_timer>:
{
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	4604      	mov	r4, r0
  cyclic->handler();
 800e9bc:	6843      	ldr	r3, [r0, #4]
 800e9be:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e9c0:	4903      	ldr	r1, [pc, #12]	; (800e9d0 <cyclic_timer+0x18>)
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	6820      	ldr	r0, [r4, #0]
}
 800e9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e9ca:	f7ff bf43 	b.w	800e854 <sys_timeout>
 800e9ce:	bf00      	nop
 800e9d0:	0800e9b9 	.word	0x0800e9b9

0800e9d4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800e9d8:	4d24      	ldr	r5, [pc, #144]	; (800ea6c <sys_timeouts_mbox_fetch+0x98>)
{
 800e9da:	4681      	mov	r9, r0
 800e9dc:	468a      	mov	sl, r1
  diff = sys_now() - timeouts_last_time;
 800e9de:	4c24      	ldr	r4, [pc, #144]	; (800ea70 <sys_timeouts_mbox_fetch+0x9c>)
 800e9e0:	462e      	mov	r6, r5
  if (!next_timeout) {
 800e9e2:	682a      	ldr	r2, [r5, #0]
 800e9e4:	b932      	cbnz	r2, 800e9f4 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e9e6:	4651      	mov	r1, sl
 800e9e8:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800e9ea:	b003      	add	sp, #12
 800e9ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e9f0:	f000 baa8 	b.w	800ef44 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800e9f4:	f000 fd38 	bl	800f468 <sys_now>
 800e9f8:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 800e9fa:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 800e9fc:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	4290      	cmp	r0, r2
 800ea02:	d928      	bls.n	800ea56 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 800ea04:	6833      	ldr	r3, [r6, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0eb      	beq.n	800e9e2 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 800ea0a:	f000 fd2d 	bl	800f468 <sys_now>
    diff = now - timeouts_last_time;
 800ea0e:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 800ea10:	4f18      	ldr	r7, [pc, #96]	; (800ea74 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 800ea12:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 800ea16:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ea18:	2900      	cmp	r1, #0
 800ea1a:	d0e2      	beq.n	800e9e2 <sys_timeouts_mbox_fetch+0xe>
 800ea1c:	684a      	ldr	r2, [r1, #4]
 800ea1e:	455a      	cmp	r2, fp
 800ea20:	d8df      	bhi.n	800e9e2 <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 800ea22:	6820      	ldr	r0, [r4, #0]
        diff -= tmptimeout->time;
 800ea24:	ebab 0b02 	sub.w	fp, fp, r2
        handler = tmptimeout->h;
 800ea28:	f8d1 8008 	ldr.w	r8, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800ea2c:	4410      	add	r0, r2
        arg = tmptimeout->arg;
 800ea2e:	68cb      	ldr	r3, [r1, #12]
        next_timeout = tmptimeout->next;
 800ea30:	680a      	ldr	r2, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800ea32:	6020      	str	r0, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ea34:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800ea36:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 800ea38:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ea3a:	f7fc f991 	bl	800ad60 <memp_free>
        if (handler != NULL) {
 800ea3e:	f1b8 0f00 	cmp.w	r8, #0
 800ea42:	d0e8      	beq.n	800ea16 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 800ea44:	4638      	mov	r0, r7
 800ea46:	f000 fb14 	bl	800f072 <sys_mutex_lock>
          handler(arg);
 800ea4a:	9801      	ldr	r0, [sp, #4]
 800ea4c:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 800ea4e:	4638      	mov	r0, r7
 800ea50:	f000 fb14 	bl	800f07c <sys_mutex_unlock>
 800ea54:	e7df      	b.n	800ea16 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800ea56:	1a12      	subs	r2, r2, r0
 800ea58:	d0d4      	beq.n	800ea04 <sys_timeouts_mbox_fetch+0x30>
 800ea5a:	4651      	mov	r1, sl
 800ea5c:	4648      	mov	r0, r9
 800ea5e:	f000 fa71 	bl	800ef44 <sys_arch_mbox_fetch>
 800ea62:	3001      	adds	r0, #1
 800ea64:	d0ce      	beq.n	800ea04 <sys_timeouts_mbox_fetch+0x30>
}
 800ea66:	b003      	add	sp, #12
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6c:	20008398 	.word	0x20008398
 800ea70:	200083a0 	.word	0x200083a0
 800ea74:	20008408 	.word	0x20008408

0800ea78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ea78:	4770      	bx	lr
	...

0800ea7c <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ea7c:	8943      	ldrh	r3, [r0, #10]
 800ea7e:	2b07      	cmp	r3, #7
{
 800ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea84:	4605      	mov	r5, r0
 800ea86:	b085      	sub	sp, #20
 800ea88:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800ea8a:	d805      	bhi.n	800ea98 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ea8c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ea8e:	b005      	add	sp, #20
 800ea90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ea94:	f7fc baea 	b.w	800b06c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea98:	4e3e      	ldr	r6, [pc, #248]	; (800eb94 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800ea9a:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea9c:	6831      	ldr	r1, [r6, #0]
 800ea9e:	6970      	ldr	r0, [r6, #20]
 800eaa0:	f7fb fb19 	bl	800a0d6 <ip4_addr_isbroadcast_u32>
 800eaa4:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800eaa6:	8820      	ldrh	r0, [r4, #0]
 800eaa8:	f7f9 ff44 	bl	8008934 <lwip_htons>
 800eaac:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800eaae:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 800eab0:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 800eab2:	f7f9 ff3f 	bl	8008934 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eab6:	4a38      	ldr	r2, [pc, #224]	; (800eb98 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 800eab8:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eaba:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eabc:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 800eabe:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eac0:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800eac4:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eac6:	4603      	mov	r3, r0
 800eac8:	9603      	str	r6, [sp, #12]
 800eaca:	b92b      	cbnz	r3, 800ead8 <udp_input+0x5c>
  if (pcb != NULL) {
 800eacc:	bb0c      	cbnz	r4, 800eb12 <udp_input+0x96>
  if (for_us) {
 800eace:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ead2:	428b      	cmp	r3, r1
 800ead4:	d1da      	bne.n	800ea8c <udp_input+0x10>
 800ead6:	e01c      	b.n	800eb12 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800ead8:	8a5a      	ldrh	r2, [r3, #18]
 800eada:	4552      	cmp	r2, sl
 800eadc:	d12b      	bne.n	800eb36 <udp_input+0xba>
 800eade:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800eae0:	b32f      	cbz	r7, 800eb2e <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eae2:	b13a      	cbz	r2, 800eaf4 <udp_input+0x78>
 800eae4:	1c4e      	adds	r6, r1, #1
 800eae6:	d005      	beq.n	800eaf4 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800eae8:	404a      	eors	r2, r1
 800eaea:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eaec:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800eaf0:	4216      	tst	r6, r2
 800eaf2:	d120      	bne.n	800eb36 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800eaf4:	7c1a      	ldrb	r2, [r3, #16]
 800eaf6:	0752      	lsls	r2, r2, #29
 800eaf8:	d402      	bmi.n	800eb00 <udp_input+0x84>
 800eafa:	2c00      	cmp	r4, #0
 800eafc:	bf08      	it	eq
 800eafe:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800eb00:	8a9a      	ldrh	r2, [r3, #20]
 800eb02:	4542      	cmp	r2, r8
 800eb04:	d117      	bne.n	800eb36 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb06:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eb08:	b9c2      	cbnz	r2, 800eb3c <udp_input+0xc0>
        if (prev != NULL) {
 800eb0a:	f1bc 0f00 	cmp.w	ip, #0
 800eb0e:	d118      	bne.n	800eb42 <udp_input+0xc6>
 800eb10:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800eb12:	f06f 0107 	mvn.w	r1, #7
 800eb16:	4628      	mov	r0, r5
 800eb18:	f7fc faa2 	bl	800b060 <pbuf_header>
 800eb1c:	b1c0      	cbz	r0, 800eb50 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800eb1e:	4b1f      	ldr	r3, [pc, #124]	; (800eb9c <udp_input+0x120>)
 800eb20:	f240 1255 	movw	r2, #341	; 0x155
 800eb24:	491e      	ldr	r1, [pc, #120]	; (800eba0 <udp_input+0x124>)
 800eb26:	481f      	ldr	r0, [pc, #124]	; (800eba4 <udp_input+0x128>)
 800eb28:	f002 fa3a 	bl	8010fa0 <iprintf>
 800eb2c:	e7ae      	b.n	800ea8c <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb2e:	2a00      	cmp	r2, #0
 800eb30:	d0e0      	beq.n	800eaf4 <udp_input+0x78>
 800eb32:	428a      	cmp	r2, r1
 800eb34:	d0de      	beq.n	800eaf4 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb36:	469c      	mov	ip, r3
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	e7c6      	b.n	800eaca <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb3c:	4572      	cmp	r2, lr
 800eb3e:	d1fa      	bne.n	800eb36 <udp_input+0xba>
 800eb40:	e7e3      	b.n	800eb0a <udp_input+0x8e>
          prev->next = pcb->next;
 800eb42:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 800eb44:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 800eb48:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 800eb4c:	60d8      	str	r0, [r3, #12]
 800eb4e:	e7df      	b.n	800eb10 <udp_input+0x94>
    if (pcb != NULL) {
 800eb50:	b164      	cbz	r4, 800eb6c <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800eb52:	69a6      	ldr	r6, [r4, #24]
 800eb54:	2e00      	cmp	r6, #0
 800eb56:	d099      	beq.n	800ea8c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eb58:	f8cd 8000 	str.w	r8, [sp]
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <udp_input+0x12c>)
 800eb60:	4621      	mov	r1, r4
 800eb62:	69e0      	ldr	r0, [r4, #28]
 800eb64:	47b0      	blx	r6
}
 800eb66:	b005      	add	sp, #20
 800eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eb6c:	2f00      	cmp	r7, #0
 800eb6e:	d18d      	bne.n	800ea8c <udp_input+0x10>
 800eb70:	9b03      	ldr	r3, [sp, #12]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb78:	2be0      	cmp	r3, #224	; 0xe0
 800eb7a:	d087      	beq.n	800ea8c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800eb7c:	9b03      	ldr	r3, [sp, #12]
 800eb7e:	4628      	mov	r0, r5
 800eb80:	8999      	ldrh	r1, [r3, #12]
 800eb82:	3108      	adds	r1, #8
 800eb84:	b209      	sxth	r1, r1
 800eb86:	f7fc fa6e 	bl	800b066 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800eb8a:	2103      	movs	r1, #3
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7fb f915 	bl	8009dbc <icmp_dest_unreach>
 800eb92:	e77b      	b.n	800ea8c <udp_input+0x10>
 800eb94:	2000840c 	.word	0x2000840c
 800eb98:	2000bb48 	.word	0x2000bb48
 800eb9c:	08013e21 	.word	0x08013e21
 800eba0:	08013e50 	.word	0x08013e50
 800eba4:	08011dd4 	.word	0x08011dd4
 800eba8:	2000841c 	.word	0x2000841c

0800ebac <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800ebac:	4b26      	ldr	r3, [pc, #152]	; (800ec48 <udp_bind+0x9c>)
{
 800ebae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800ebb2:	2900      	cmp	r1, #0
 800ebb4:	bf08      	it	eq
 800ebb6:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d040      	beq.n	800ec3e <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ebbc:	4e23      	ldr	r6, [pc, #140]	; (800ec4c <udp_bind+0xa0>)
 800ebbe:	f8d6 e000 	ldr.w	lr, [r6]
 800ebc2:	4675      	mov	r5, lr
 800ebc4:	b96d      	cbnz	r5, 800ebe2 <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800ebc6:	b192      	cbz	r2, 800ebee <udp_bind+0x42>
 800ebc8:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ebca:	b1fb      	cbz	r3, 800ec0c <udp_bind+0x60>
      if (pcb != ipcb) {
 800ebcc:	4283      	cmp	r3, r0
 800ebce:	d006      	beq.n	800ebde <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ebd0:	8a5c      	ldrh	r4, [r3, #18]
 800ebd2:	4294      	cmp	r4, r2
 800ebd4:	d103      	bne.n	800ebde <udp_bind+0x32>
 800ebd6:	681f      	ldr	r7, [r3, #0]
 800ebd8:	680c      	ldr	r4, [r1, #0]
 800ebda:	42a7      	cmp	r7, r4
 800ebdc:	d029      	beq.n	800ec32 <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	e7f3      	b.n	800ebca <udp_bind+0x1e>
    if (pcb == ipcb) {
 800ebe2:	4285      	cmp	r5, r0
 800ebe4:	d001      	beq.n	800ebea <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ebe6:	68ed      	ldr	r5, [r5, #12]
 800ebe8:	e7ec      	b.n	800ebc4 <udp_bind+0x18>
      rebind = 1;
 800ebea:	2501      	movs	r5, #1
 800ebec:	e7eb      	b.n	800ebc6 <udp_bind+0x1a>
 800ebee:	4b18      	ldr	r3, [pc, #96]	; (800ec50 <udp_bind+0xa4>)
  if (port == 0) {
 800ebf0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ebf4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800ebf8:	881a      	ldrh	r2, [r3, #0]
 800ebfa:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfc:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ebfe:	bf16      	itet	ne
 800ec00:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ec02:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ec06:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec08:	b957      	cbnz	r7, 800ec20 <udp_bind+0x74>
 800ec0a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ec0c:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800ec0e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ec10:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ec12:	b915      	cbnz	r5, 800ec1a <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ec14:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800ec18:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800ec20:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800ec24:	4590      	cmp	r8, r2
 800ec26:	d108      	bne.n	800ec3a <udp_bind+0x8e>
 800ec28:	3c01      	subs	r4, #1
 800ec2a:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ec2c:	2c00      	cmp	r4, #0
 800ec2e:	d1e4      	bne.n	800ebfa <udp_bind+0x4e>
 800ec30:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800ec32:	f06f 0007 	mvn.w	r0, #7
 800ec36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec3a:	68ff      	ldr	r7, [r7, #12]
 800ec3c:	e7e4      	b.n	800ec08 <udp_bind+0x5c>
    return ERR_VAL;
 800ec3e:	f06f 0005 	mvn.w	r0, #5
}
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec46:	bf00      	nop
 800ec48:	08012a38 	.word	0x08012a38
 800ec4c:	2000bb48 	.word	0x2000bb48
 800ec50:	2000002e 	.word	0x2000002e

0800ec54 <udp_sendto_if_src>:
{
 800ec54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec58:	460e      	mov	r6, r1
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	4690      	mov	r8, r2
 800ec5e:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ec60:	4607      	mov	r7, r0
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d050      	beq.n	800ed08 <udp_sendto_if_src+0xb4>
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	d04e      	beq.n	800ed08 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 800ec6a:	8a42      	ldrh	r2, [r0, #18]
 800ec6c:	2a00      	cmp	r2, #0
 800ec6e:	d033      	beq.n	800ecd8 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800ec70:	2108      	movs	r1, #8
 800ec72:	4630      	mov	r0, r6
 800ec74:	f7fc f9f4 	bl	800b060 <pbuf_header>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d137      	bne.n	800ecec <udp_sendto_if_src+0x98>
 800ec7c:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ec7e:	8963      	ldrh	r3, [r4, #10]
 800ec80:	2b07      	cmp	r3, #7
 800ec82:	d806      	bhi.n	800ec92 <udp_sendto_if_src+0x3e>
 800ec84:	4b23      	ldr	r3, [pc, #140]	; (800ed14 <udp_sendto_if_src+0xc0>)
 800ec86:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ec8a:	4923      	ldr	r1, [pc, #140]	; (800ed18 <udp_sendto_if_src+0xc4>)
 800ec8c:	4823      	ldr	r0, [pc, #140]	; (800ed1c <udp_sendto_if_src+0xc8>)
 800ec8e:	f002 f987 	bl	8010fa0 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800ec92:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ec94:	8a78      	ldrh	r0, [r7, #18]
 800ec96:	f7f9 fe4d 	bl	8008934 <lwip_htons>
 800ec9a:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ec9c:	4648      	mov	r0, r9
 800ec9e:	f7f9 fe49 	bl	8008934 <lwip_htons>
  udphdr->chksum = 0x0000;
 800eca2:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800eca4:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 800eca6:	71ab      	strb	r3, [r5, #6]
 800eca8:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800ecaa:	8920      	ldrh	r0, [r4, #8]
 800ecac:	f7f9 fe42 	bl	8008934 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ecb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800ecb2:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	7abb      	ldrb	r3, [r7, #10]
 800ecb8:	9202      	str	r2, [sp, #8]
 800ecba:	2211      	movs	r2, #17
 800ecbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ecbe:	9201      	str	r2, [sp, #4]
 800ecc0:	7a7a      	ldrb	r2, [r7, #9]
 800ecc2:	9200      	str	r2, [sp, #0]
 800ecc4:	4642      	mov	r2, r8
 800ecc6:	f7fb f97d 	bl	8009fc4 <ip4_output_if_src>
  if (q != p) {
 800ecca:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eccc:	4605      	mov	r5, r0
  if (q != p) {
 800ecce:	d009      	beq.n	800ece4 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f7fc f9cb 	bl	800b06c <pbuf_free>
 800ecd6:	e005      	b.n	800ece4 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ecd8:	4601      	mov	r1, r0
 800ecda:	f7ff ff67 	bl	800ebac <udp_bind>
    if (err != ERR_OK) {
 800ecde:	4605      	mov	r5, r0
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d0c5      	beq.n	800ec70 <udp_sendto_if_src+0x1c>
}
 800ece4:	4628      	mov	r0, r5
 800ece6:	b005      	add	sp, #20
 800ece8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ecec:	2200      	movs	r2, #0
 800ecee:	2108      	movs	r1, #8
 800ecf0:	2001      	movs	r0, #1
 800ecf2:	f7fc fa25 	bl	800b140 <pbuf_alloc>
    if (q == NULL) {
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	b148      	cbz	r0, 800ed0e <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800ecfa:	8933      	ldrh	r3, [r6, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d0be      	beq.n	800ec7e <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800ed00:	4631      	mov	r1, r6
 800ed02:	f7fc fbc7 	bl	800b494 <pbuf_chain>
 800ed06:	e7ba      	b.n	800ec7e <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 800ed08:	f06f 0505 	mvn.w	r5, #5
 800ed0c:	e7ea      	b.n	800ece4 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800ed0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ed12:	e7e7      	b.n	800ece4 <udp_sendto_if_src+0x90>
 800ed14:	08013e21 	.word	0x08013e21
 800ed18:	08013e64 	.word	0x08013e64
 800ed1c:	08011dd4 	.word	0x08011dd4

0800ed20 <udp_sendto_if>:
{
 800ed20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed22:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ed24:	b190      	cbz	r0, 800ed4c <udp_sendto_if+0x2c>
 800ed26:	b18a      	cbz	r2, 800ed4c <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed28:	6805      	ldr	r5, [r0, #0]
 800ed2a:	b11d      	cbz	r5, 800ed34 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ed2c:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed30:	2ee0      	cmp	r6, #224	; 0xe0
 800ed32:	d106      	bne.n	800ed42 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800ed34:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ed36:	e88d 0030 	stmia.w	sp, {r4, r5}
 800ed3a:	f7ff ff8b 	bl	800ec54 <udp_sendto_if_src>
}
 800ed3e:	b002      	add	sp, #8
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ed42:	6866      	ldr	r6, [r4, #4]
 800ed44:	42b5      	cmp	r5, r6
 800ed46:	d104      	bne.n	800ed52 <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed48:	4605      	mov	r5, r0
 800ed4a:	e7f4      	b.n	800ed36 <udp_sendto_if+0x16>
    return ERR_VAL;
 800ed4c:	f06f 0005 	mvn.w	r0, #5
 800ed50:	e7f5      	b.n	800ed3e <udp_sendto_if+0x1e>
      return ERR_RTE;
 800ed52:	f06f 0003 	mvn.w	r0, #3
 800ed56:	e7f2      	b.n	800ed3e <udp_sendto_if+0x1e>

0800ed58 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ed58:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800ed5a:	61c2      	str	r2, [r0, #28]
 800ed5c:	4770      	bx	lr
	...

0800ed60 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ed60:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <udp_remove+0x2c>)
{
 800ed62:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800ed64:	6813      	ldr	r3, [r2, #0]
 800ed66:	4283      	cmp	r3, r0
 800ed68:	d104      	bne.n	800ed74 <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ed6a:	68c3      	ldr	r3, [r0, #12]
 800ed6c:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ed6e:	2000      	movs	r0, #0
 800ed70:	f7fb bff6 	b.w	800ad60 <memp_free>
{
 800ed74:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d0f9      	beq.n	800ed6e <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d0f6      	beq.n	800ed6e <udp_remove+0xe>
 800ed80:	4299      	cmp	r1, r3
 800ed82:	d1f7      	bne.n	800ed74 <udp_remove+0x14>
        pcb2->next = pcb->next;
 800ed84:	68cb      	ldr	r3, [r1, #12]
 800ed86:	60d3      	str	r3, [r2, #12]
        break;
 800ed88:	e7f1      	b.n	800ed6e <udp_remove+0xe>
 800ed8a:	bf00      	nop
 800ed8c:	2000bb48 	.word	0x2000bb48

0800ed90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ed90:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ed92:	2000      	movs	r0, #0
 800ed94:	f7fb ffc8 	bl	800ad28 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ed98:	4604      	mov	r4, r0
 800ed9a:	b128      	cbz	r0, 800eda8 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ed9c:	2220      	movs	r2, #32
 800ed9e:	2100      	movs	r1, #0
 800eda0:	f002 f84a 	bl	8010e38 <memset>
    pcb->ttl = UDP_TTL;
 800eda4:	23ff      	movs	r3, #255	; 0xff
 800eda6:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800eda8:	4620      	mov	r0, r4
 800edaa:	bd10      	pop	{r4, pc}

0800edac <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 800edac:	f7ff bff0 	b.w	800ed90 <udp_new>

0800edb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800edb0:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800edb2:	b138      	cbz	r0, 800edc4 <udp_netif_ip_addr_changed+0x14>
 800edb4:	6803      	ldr	r3, [r0, #0]
 800edb6:	b12b      	cbz	r3, 800edc4 <udp_netif_ip_addr_changed+0x14>
 800edb8:	b121      	cbz	r1, 800edc4 <udp_netif_ip_addr_changed+0x14>
 800edba:	680b      	ldr	r3, [r1, #0]
 800edbc:	b113      	cbz	r3, 800edc4 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800edbe:	4b06      	ldr	r3, [pc, #24]	; (800edd8 <udp_netif_ip_addr_changed+0x28>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	b903      	cbnz	r3, 800edc6 <udp_netif_ip_addr_changed+0x16>
 800edc4:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800edc6:	681c      	ldr	r4, [r3, #0]
 800edc8:	6802      	ldr	r2, [r0, #0]
 800edca:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800edcc:	bf04      	itt	eq
 800edce:	680a      	ldreq	r2, [r1, #0]
 800edd0:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	e7f5      	b.n	800edc2 <udp_netif_ip_addr_changed+0x12>
 800edd6:	bf00      	nop
 800edd8:	2000bb48 	.word	0x2000bb48

0800eddc <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800eddc:	8943      	ldrh	r3, [r0, #10]
 800edde:	2b0e      	cmp	r3, #14
{
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	4604      	mov	r4, r0
 800ede4:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800ede6:	d914      	bls.n	800ee12 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ede8:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800edea:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800edec:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800edee:	07d9      	lsls	r1, r3, #31
 800edf0:	d50a      	bpl.n	800ee08 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d111      	bne.n	800ee1a <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800edf6:	7843      	ldrb	r3, [r0, #1]
 800edf8:	b933      	cbnz	r3, 800ee08 <ethernet_input+0x2c>
 800edfa:	7883      	ldrb	r3, [r0, #2]
 800edfc:	2b5e      	cmp	r3, #94	; 0x5e
 800edfe:	d103      	bne.n	800ee08 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ee00:	7b63      	ldrb	r3, [r4, #13]
 800ee02:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ee06:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ee08:	2e08      	cmp	r6, #8
 800ee0a:	d010      	beq.n	800ee2e <ethernet_input+0x52>
 800ee0c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ee10:	d01e      	beq.n	800ee50 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ee12:	4620      	mov	r0, r4
 800ee14:	f7fc f92a 	bl	800b06c <pbuf_free>
  return ERR_OK;
 800ee18:	e018      	b.n	800ee4c <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ee1a:	2206      	movs	r2, #6
 800ee1c:	4914      	ldr	r1, [pc, #80]	; (800ee70 <ethernet_input+0x94>)
 800ee1e:	f001 fff1 	bl	8010e04 <memcmp>
 800ee22:	2800      	cmp	r0, #0
 800ee24:	d1f0      	bne.n	800ee08 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800ee26:	7b63      	ldrb	r3, [r4, #13]
 800ee28:	f043 0308 	orr.w	r3, r3, #8
 800ee2c:	e7eb      	b.n	800ee06 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee2e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800ee32:	071a      	lsls	r2, r3, #28
 800ee34:	d5ed      	bpl.n	800ee12 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ee36:	f06f 010d 	mvn.w	r1, #13
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7fc f910 	bl	800b060 <pbuf_header>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d1e6      	bne.n	800ee12 <ethernet_input+0x36>
        ip4_input(p, netif);
 800ee44:	4629      	mov	r1, r5
 800ee46:	4620      	mov	r0, r4
 800ee48:	f7fa ffee 	bl	8009e28 <ip4_input>
}
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee50:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800ee54:	071b      	lsls	r3, r3, #28
 800ee56:	d5dc      	bpl.n	800ee12 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ee58:	f06f 010d 	mvn.w	r1, #13
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f7fc f8ff 	bl	800b060 <pbuf_header>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d1d5      	bne.n	800ee12 <ethernet_input+0x36>
        etharp_input(p, netif);
 800ee66:	4629      	mov	r1, r5
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f7fa fc47 	bl	80096fc <etharp_input>
      break;
 800ee6e:	e7ed      	b.n	800ee4c <ethernet_input+0x70>
 800ee70:	08013e92 	.word	0x08013e92

0800ee74 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	460d      	mov	r5, r1
 800ee7a:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee7c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800ee80:	4616      	mov	r6, r2
 800ee82:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee84:	f7f9 fd56 	bl	8008934 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee88:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee8a:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	f7fc f8e7 	bl	800b060 <pbuf_header>
 800ee92:	b9e0      	cbnz	r0, 800eece <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ee94:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800ee96:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	600b      	str	r3, [r1, #0]
 800ee9e:	88bb      	ldrh	r3, [r7, #4]
 800eea0:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800eea2:	6833      	ldr	r3, [r6, #0]
 800eea4:	f8c1 3006 	str.w	r3, [r1, #6]
 800eea8:	88b3      	ldrh	r3, [r6, #4]
 800eeaa:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eeac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eeb0:	2b06      	cmp	r3, #6
 800eeb2:	d006      	beq.n	800eec2 <ethernet_output+0x4e>
 800eeb4:	4b08      	ldr	r3, [pc, #32]	; (800eed8 <ethernet_output+0x64>)
 800eeb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800eeba:	4908      	ldr	r1, [pc, #32]	; (800eedc <ethernet_output+0x68>)
 800eebc:	4808      	ldr	r0, [pc, #32]	; (800eee0 <ethernet_output+0x6c>)
 800eebe:	f002 f86f 	bl	8010fa0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eec2:	69a3      	ldr	r3, [r4, #24]
 800eec4:	4629      	mov	r1, r5
 800eec6:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800eec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800eecc:	4718      	bx	r3
}
 800eece:	f06f 0001 	mvn.w	r0, #1
 800eed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed6:	bf00      	nop
 800eed8:	08013e98 	.word	0x08013e98
 800eedc:	08013ecd 	.word	0x08013ecd
 800eee0:	08011dd4 	.word	0x08011dd4

0800eee4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800eee4:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800eee6:	2304      	movs	r3, #4
{
 800eee8:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800eeea:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800eeec:	4668      	mov	r0, sp
 800eeee:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800eef0:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800eef2:	f7f6 fdbb 	bl	8005a6c <osMessageCreate>
 800eef6:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800eef8:	fab0 f080 	clz	r0, r0
 800eefc:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800eefe:	4240      	negs	r0, r0
 800ef00:	b002      	add	sp, #8
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800ef04:	b510      	push	{r4, lr}
 800ef06:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800ef08:	6800      	ldr	r0, [r0, #0]
 800ef0a:	f7f6 fe1f 	bl	8005b4c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800ef0e:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800ef10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osMessageDelete(*mbox);
 800ef14:	f7f6 be21 	b.w	8005b5a <osMessageDelete>

0800ef18 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ef1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef22:	4629      	mov	r1, r5
 800ef24:	6820      	ldr	r0, [r4, #0]
 800ef26:	f7f6 fda5 	bl	8005a74 <osMessagePut>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d1f7      	bne.n	800ef1e <sys_mbox_post+0x6>
}
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}

0800ef30 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ef30:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ef32:	2200      	movs	r2, #0
 800ef34:	6800      	ldr	r0, [r0, #0]
 800ef36:	f7f6 fd9d 	bl	8005a74 <osMessagePut>
 800ef3a:	3000      	adds	r0, #0
 800ef3c:	bf18      	it	ne
 800ef3e:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800ef40:	4240      	negs	r0, r0
 800ef42:	bd08      	pop	{r3, pc}

0800ef44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ef44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef46:	4617      	mov	r7, r2
 800ef48:	b085      	sub	sp, #20
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460d      	mov	r5, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800ef4e:	f7f6 fcd6 	bl	80058fe <osKernelSysTick>
 800ef52:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800ef54:	b177      	cbz	r7, 800ef74 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800ef56:	463a      	mov	r2, r7
 800ef58:	6831      	ldr	r1, [r6, #0]
 800ef5a:	a801      	add	r0, sp, #4
 800ef5c:	f7f6 fdb2 	bl	8005ac4 <osMessageGet>
    
    if(event.status == osEventMessage)
 800ef60:	9b01      	ldr	r3, [sp, #4]
 800ef62:	2b10      	cmp	r3, #16
 800ef64:	d10d      	bne.n	800ef82 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800ef66:	9b02      	ldr	r3, [sp, #8]
 800ef68:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800ef6a:	f7f6 fcc8 	bl	80058fe <osKernelSysTick>
 800ef6e:	1b00      	subs	r0, r0, r4
  }
}
 800ef70:	b005      	add	sp, #20
 800ef72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800ef74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef78:	6831      	ldr	r1, [r6, #0]
 800ef7a:	a801      	add	r0, sp, #4
 800ef7c:	f7f6 fda2 	bl	8005ac4 <osMessageGet>
 800ef80:	e7f1      	b.n	800ef66 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800ef82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef86:	e7f3      	b.n	800ef70 <sys_arch_mbox_fetch+0x2c>

0800ef88 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ef88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef8a:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	6801      	ldr	r1, [r0, #0]
 800ef90:	a801      	add	r0, sp, #4
 800ef92:	f7f6 fd97 	bl	8005ac4 <osMessageGet>
  
  if(event.status == osEventMessage)
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800ef9a:	bf05      	ittet	eq
 800ef9c:	9b02      	ldreq	r3, [sp, #8]
    return ERR_OK;
 800ef9e:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800efa0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 800efa4:	6023      	streq	r3, [r4, #0]
  }
}
 800efa6:	b004      	add	sp, #16
 800efa8:	bd10      	pop	{r4, pc}

0800efaa <sys_mbox_valid>:
 800efaa:	6800      	ldr	r0, [r0, #0]
 800efac:	3000      	adds	r0, #0
 800efae:	bf18      	it	ne
 800efb0:	2001      	movne	r0, #1
 800efb2:	4770      	bx	lr

0800efb4 <sys_mbox_set_invalid>:
 800efb4:	2300      	movs	r3, #0
 800efb6:	6003      	str	r3, [r0, #0]
 800efb8:	4770      	bx	lr

0800efba <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800efba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efbc:	4606      	mov	r6, r0
  osSemaphoreDef(SEM);
 800efbe:	2400      	movs	r4, #0
 800efc0:	a802      	add	r0, sp, #8
{
 800efc2:	460d      	mov	r5, r1

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800efc4:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800efc6:	f840 4d04 	str.w	r4, [r0, #-4]!
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800efca:	f7f6 fceb 	bl	80059a4 <osSemaphoreCreate>
 800efce:	6030      	str	r0, [r6, #0]
	
  if(*sem == NULL)
 800efd0:	b130      	cbz	r0, 800efe0 <sys_sem_new+0x26>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 800efd2:	b945      	cbnz	r5, 800efe6 <sys_sem_new+0x2c>
  {
    osSemaphoreWait(*sem,0);
 800efd4:	4629      	mov	r1, r5
 800efd6:	f7f6 fcfb 	bl	80059d0 <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800efda:	4628      	mov	r0, r5
}
 800efdc:	b002      	add	sp, #8
 800efde:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efe4:	e7fa      	b.n	800efdc <sys_sem_new+0x22>
	return ERR_OK;
 800efe6:	4620      	mov	r0, r4
 800efe8:	e7f8      	b.n	800efdc <sys_sem_new+0x22>

0800efea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800efea:	b570      	push	{r4, r5, r6, lr}
 800efec:	460e      	mov	r6, r1
 800efee:	4605      	mov	r5, r0
  uint32_t starttime = osKernelSysTick();
 800eff0:	f7f6 fc85 	bl	80058fe <osKernelSysTick>
 800eff4:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800eff6:	b146      	cbz	r6, 800f00a <sys_arch_sem_wait+0x20>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800eff8:	4631      	mov	r1, r6
 800effa:	6828      	ldr	r0, [r5, #0]
 800effc:	f7f6 fce8 	bl	80059d0 <osSemaphoreWait>
 800f000:	b958      	cbnz	r0, 800f01a <sys_arch_sem_wait+0x30>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800f002:	f7f6 fc7c 	bl	80058fe <osKernelSysTick>
 800f006:	1b00      	subs	r0, r0, r4
 800f008:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800f00a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f00e:	6828      	ldr	r0, [r5, #0]
 800f010:	f7f6 fcde 	bl	80059d0 <osSemaphoreWait>
 800f014:	2800      	cmp	r0, #0
 800f016:	d1f8      	bne.n	800f00a <sys_arch_sem_wait+0x20>
 800f018:	e7f3      	b.n	800f002 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800f01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 800f01e:	bd70      	pop	{r4, r5, r6, pc}

0800f020 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800f020:	6800      	ldr	r0, [r0, #0]
 800f022:	f7f6 bcfd 	b.w	8005a20 <osSemaphoreRelease>

0800f026 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	f7f6 bda1 	b.w	8005b6e <osSemaphoreDelete>

0800f02c <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800f02c:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;                                       
}
 800f02e:	3000      	adds	r0, #0
 800f030:	bf18      	it	ne
 800f032:	2001      	movne	r0, #1
 800f034:	4770      	bx	lr

0800f036 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800f036:	2300      	movs	r3, #0
 800f038:	6003      	str	r3, [r0, #0]
 800f03a:	4770      	bx	lr

0800f03c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800f03c:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800f03e:	4803      	ldr	r0, [pc, #12]	; (800f04c <sys_init+0x10>)
 800f040:	f7f6 fc84 	bl	800594c <osMutexCreate>
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <sys_init+0x14>)
 800f046:	6018      	str	r0, [r3, #0]
 800f048:	bd08      	pop	{r3, pc}
 800f04a:	bf00      	nop
 800f04c:	08013f04 	.word	0x08013f04
 800f050:	2000bb50 	.word	0x2000bb50

0800f054 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f054:	b513      	push	{r0, r1, r4, lr}
  
  osMutexDef(MUTEX);
 800f056:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f058:	4604      	mov	r4, r0
  osMutexDef(MUTEX);
 800f05a:	a802      	add	r0, sp, #8
 800f05c:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f060:	f7f6 fc74 	bl	800594c <osMutexCreate>
 800f064:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800f066:	fab0 f080 	clz	r0, r0
 800f06a:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800f06c:	4240      	negs	r0, r0
 800f06e:	b002      	add	sp, #8
 800f070:	bd10      	pop	{r4, pc}

0800f072 <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800f072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f076:	6800      	ldr	r0, [r0, #0]
 800f078:	f7f6 bc6c 	b.w	8005954 <osMutexWait>

0800f07c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f7f6 bcf3 	b.w	8005a68 <osMutexRelease>

0800f082 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f082:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f084:	9102      	str	r1, [sp, #8]
 800f086:	9908      	ldr	r1, [sp, #32]
 800f088:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 800f08a:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f08c:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f090:	2100      	movs	r1, #0
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	9104      	str	r1, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800f096:	4611      	mov	r1, r2
 800f098:	f7f6 fc38 	bl	800590c <osThreadCreate>
}
 800f09c:	b007      	add	sp, #28
 800f09e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f0a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f0a4:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f0a6:	4b04      	ldr	r3, [pc, #16]	; (800f0b8 <sys_arch_protect+0x14>)
 800f0a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f0ac:	6818      	ldr	r0, [r3, #0]
 800f0ae:	f7f6 fc51 	bl	8005954 <osMutexWait>
  return (sys_prot_t)1;
}
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	bd08      	pop	{r3, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000bb50 	.word	0x2000bb50

0800f0bc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f0bc:	4b01      	ldr	r3, [pc, #4]	; (800f0c4 <sys_arch_unprotect+0x8>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	f7f6 bcd2 	b.w	8005a68 <osMutexRelease>
 800f0c4:	2000bb50 	.word	0x2000bb50

0800f0c8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f0cc:	4a25      	ldr	r2, [pc, #148]	; (800f164 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800f0ce:	f04f 0800 	mov.w	r8, #0
{
 800f0d2:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f0d4:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f0d8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800f0da:	4647      	mov	r7, r8
 800f0dc:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f0de:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800f0e0:	b92c      	cbnz	r4, 800f0ee <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	481f      	ldr	r0, [pc, #124]	; (800f164 <low_level_output+0x9c>)
 800f0e6:	f7f1 ff0b 	bl	8000f00 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	e004      	b.n	800f0f8 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f0ee:	682a      	ldr	r2, [r5, #0]
 800f0f0:	2a00      	cmp	r2, #0
 800f0f2:	da11      	bge.n	800f118 <low_level_output+0x50>
        errval = ERR_USE;
 800f0f4:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f0f8:	9b00      	ldr	r3, [sp, #0]
 800f0fa:	f241 0214 	movw	r2, #4116	; 0x1014
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	5899      	ldr	r1, [r3, r2]
 800f102:	0689      	lsls	r1, r1, #26
 800f104:	d505      	bpl.n	800f112 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f106:	2120      	movs	r1, #32
 800f108:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f10a:	2100      	movs	r1, #0
 800f10c:	f241 0204 	movw	r2, #4100	; 0x1004
 800f110:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800f112:	b003      	add	sp, #12
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800f118:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f11c:	4646      	mov	r6, r8
      payloadoffset = 0;
 800f11e:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f122:	eb06 0809 	add.w	r8, r6, r9
 800f126:	1998      	adds	r0, r3, r6
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	45d8      	cmp	r8, fp
 800f12c:	d808      	bhi.n	800f140 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f12e:	464a      	mov	r2, r9
 800f130:	4451      	add	r1, sl
 800f132:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800f134:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f136:	f001 fe74 	bl	8010e22 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800f13a:	6824      	ldr	r4, [r4, #0]
 800f13c:	9b01      	ldr	r3, [sp, #4]
 800f13e:	e7cf      	b.n	800f0e0 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f140:	ebab 0606 	sub.w	r6, fp, r6
 800f144:	4451      	add	r1, sl
 800f146:	4632      	mov	r2, r6
 800f148:	f001 fe6b 	bl	8010e22 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f14c:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f14e:	682b      	ldr	r3, [r5, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	dbcf      	blt.n	800f0f4 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f154:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f156:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f158:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f15a:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800f15e:	2600      	movs	r6, #0
 800f160:	e7df      	b.n	800f122 <low_level_output+0x5a>
 800f162:	bf00      	nop
 800f164:	2000d424 	.word	0x2000d424

0800f168 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800f168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800f16e:	4c37      	ldr	r4, [pc, #220]	; (800f24c <ethernetif_input+0xe4>)
 800f170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f174:	6820      	ldr	r0, [r4, #0]
 800f176:	f7f6 fc2b 	bl	80059d0 <osSemaphoreWait>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d1f8      	bne.n	800f170 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800f17e:	4c34      	ldr	r4, [pc, #208]	; (800f250 <ethernetif_input+0xe8>)
 800f180:	4620      	mov	r0, r4
 800f182:	f7f1 ff2f 	bl	8000fe4 <HAL_ETH_GetReceivedFrame_IT>
 800f186:	4605      	mov	r5, r0
 800f188:	2800      	cmp	r0, #0
 800f18a:	d1f0      	bne.n	800f16e <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f18c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800f18e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f190:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800f192:	bb01      	cbnz	r1, 800f1d6 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 800f194:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f196:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f198:	2200      	movs	r2, #0
 800f19a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800f19c:	4282      	cmp	r2, r0
 800f19e:	d14d      	bne.n	800f23c <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 800f1a0:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800f1a2:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800f1a6:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	5899      	ldr	r1, [r3, r2]
 800f1ac:	0609      	lsls	r1, r1, #24
 800f1ae:	d505      	bpl.n	800f1bc <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f1b0:	2180      	movs	r1, #128	; 0x80
 800f1b2:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800f1b4:	f241 0208 	movw	r2, #4104	; 0x1008
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800f1bc:	2f00      	cmp	r7, #0
 800f1be:	d0d6      	beq.n	800f16e <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f1c0:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	4798      	blx	r3
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d0d7      	beq.n	800f17e <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	f7fb ff4c 	bl	800b06c <pbuf_free>
 800f1d4:	e7d3      	b.n	800f17e <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f1d6:	2203      	movs	r2, #3
 800f1d8:	2004      	movs	r0, #4
 800f1da:	f7fb ffb1 	bl	800b140 <pbuf_alloc>
  if (p != NULL)
 800f1de:	4607      	mov	r7, r0
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d0d7      	beq.n	800f194 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f1e4:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800f1e8:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800f1ea:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800f1ee:	462e      	mov	r6, r5
      payloadoffset = 0;
 800f1f0:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f1f4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f1f8:	18b5      	adds	r5, r6, r2
 800f1fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f1fe:	429d      	cmp	r5, r3
 800f200:	9b01      	ldr	r3, [sp, #4]
 800f202:	eb03 0106 	add.w	r1, r3, r6
 800f206:	d808      	bhi.n	800f21a <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800f208:	4448      	add	r0, r9
 800f20a:	f001 fe0a 	bl	8010e22 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800f20e:	f8d8 8000 	ldr.w	r8, [r8]
 800f212:	f1b8 0f00 	cmp.w	r8, #0
 800f216:	d1e8      	bne.n	800f1ea <ethernetif_input+0x82>
 800f218:	e7bd      	b.n	800f196 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f21a:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800f21e:	4448      	add	r0, r9
 800f220:	3604      	adds	r6, #4
 800f222:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800f224:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f226:	f001 fdfc 	bl	8010e22 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f22a:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f22e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800f232:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800f234:	f8db 3008 	ldr.w	r3, [fp, #8]
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	e7db      	b.n	800f1f4 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f23c:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f23e:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f240:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800f244:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	e7a8      	b.n	800f19c <ethernetif_input+0x34>
 800f24a:	bf00      	nop
 800f24c:	200083a4 	.word	0x200083a4
 800f250:	2000d424 	.word	0x2000d424

0800f254 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800f254:	6802      	ldr	r2, [r0, #0]
 800f256:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <HAL_ETH_MspInit+0xa0>)
 800f258:	429a      	cmp	r2, r3
{
 800f25a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25c:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800f25e:	d147      	bne.n	800f2f0 <HAL_ETH_MspInit+0x9c>
    __HAL_RCC_ETH_CLK_ENABLE();
 800f260:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f264:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f266:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f268:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800f26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f26c:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f26e:	a903      	add	r1, sp, #12
 800f270:	4821      	ldr	r0, [pc, #132]	; (800f2f8 <HAL_ETH_MspInit+0xa4>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800f272:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800f276:	631a      	str	r2, [r3, #48]	; 0x30
 800f278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f27a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800f27e:	9200      	str	r2, [sp, #0]
 800f280:	9a00      	ldr	r2, [sp, #0]
 800f282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f284:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f288:	631a      	str	r2, [r3, #48]	; 0x30
 800f28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f28c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800f290:	9201      	str	r2, [sp, #4]
 800f292:	9a01      	ldr	r2, [sp, #4]
 800f294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f296:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800f29a:	631a      	str	r2, [r3, #48]	; 0x30
 800f29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f29e:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 800f2a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2a4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2a6:	9606      	str	r6, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 800f2a8:	9302      	str	r3, [sp, #8]
 800f2aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800f2ac:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2b0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800f2b2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f2b4:	f7f2 f8be 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f2b8:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f2ba:	a903      	add	r1, sp, #12
 800f2bc:	480f      	ldr	r0, [pc, #60]	; (800f2fc <HAL_ETH_MspInit+0xa8>)
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f2be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2c0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2c2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2c4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2c6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f2c8:	f7f2 f8b4 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f2cc:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2ce:	a903      	add	r1, sp, #12
 800f2d0:	480b      	ldr	r0, [pc, #44]	; (800f300 <HAL_ETH_MspInit+0xac>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f2d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2d4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2d6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2d8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2da:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2dc:	f7f2 f8aa 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800f2e0:	203d      	movs	r0, #61	; 0x3d
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	2105      	movs	r1, #5
 800f2e6:	f7f1 faf1 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f2ea:	203d      	movs	r0, #61	; 0x3d
 800f2ec:	f7f1 fb26 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 800f2f0:	b009      	add	sp, #36	; 0x24
 800f2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f4:	40028000 	.word	0x40028000
 800f2f8:	40021800 	.word	0x40021800
 800f2fc:	40020800 	.word	0x40020800
 800f300:	40020000 	.word	0x40020000

0800f304 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800f304:	4b01      	ldr	r3, [pc, #4]	; (800f30c <HAL_ETH_RxCpltCallback+0x8>)
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	f7f6 bb8a 	b.w	8005a20 <osSemaphoreRelease>
 800f30c:	200083a4 	.word	0x200083a4

0800f310 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f310:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f312:	4604      	mov	r4, r0
{
 800f314:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f316:	b930      	cbnz	r0, 800f326 <ethernetif_init+0x16>
 800f318:	4b46      	ldr	r3, [pc, #280]	; (800f434 <ethernetif_init+0x124>)
 800f31a:	f240 223e 	movw	r2, #574	; 0x23e
 800f31e:	4946      	ldr	r1, [pc, #280]	; (800f438 <ethernetif_init+0x128>)
 800f320:	4846      	ldr	r0, [pc, #280]	; (800f43c <ethernetif_init+0x12c>)
 800f322:	f001 fe3d 	bl	8010fa0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f326:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800f328:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800f32a:	4d45      	ldr	r5, [pc, #276]	; (800f440 <ethernetif_init+0x130>)
  netif->name[0] = IFNAME0;
 800f32c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800f330:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800f332:	4a44      	ldr	r2, [pc, #272]	; (800f444 <ethernetif_init+0x134>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f334:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800f336:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f33a:	4b43      	ldr	r3, [pc, #268]	; (800f448 <ethernetif_init+0x138>)
  MACAddr[1] = 0x80;
 800f33c:	f88d 100d 	strb.w	r1, [sp, #13]
  MACAddr[2] = 0xE1;
 800f340:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800f342:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f344:	4b41      	ldr	r3, [pc, #260]	; (800f44c <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 800f346:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f348:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800f34a:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800f34c:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800f34e:	f88d 100e 	strb.w	r1, [sp, #14]
  heth.Init.MACAddr = &MACAddr[0];
 800f352:	a903      	add	r1, sp, #12
  uint32_t regvalue = 0;
 800f354:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800f356:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800f358:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[3] = 0x00;
 800f35c:	f88d 300f 	strb.w	r3, [sp, #15]
  MACAddr[4] = 0x00;
 800f360:	f88d 3010 	strb.w	r3, [sp, #16]
  MACAddr[5] = 0x00;
 800f364:	f88d 3011 	strb.w	r3, [sp, #17]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800f368:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f36a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f36e:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800f370:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800f372:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f374:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f376:	f7f1 ff25 	bl	80011c4 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800f37a:	b928      	cbnz	r0, 800f388 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f37c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f380:	f043 0304 	orr.w	r3, r3, #4
 800f384:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f388:	2304      	movs	r3, #4
 800f38a:	4a31      	ldr	r2, [pc, #196]	; (800f450 <ethernetif_init+0x140>)
 800f38c:	4931      	ldr	r1, [pc, #196]	; (800f454 <ethernetif_init+0x144>)
  osSemaphoreDef(SEM);
 800f38e:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f390:	482b      	ldr	r0, [pc, #172]	; (800f440 <ethernetif_init+0x130>)
 800f392:	f7f1 fd3b 	bl	8000e0c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800f396:	2304      	movs	r3, #4
 800f398:	4a2f      	ldr	r2, [pc, #188]	; (800f458 <ethernetif_init+0x148>)
 800f39a:	4930      	ldr	r1, [pc, #192]	; (800f45c <ethernetif_init+0x14c>)
 800f39c:	4828      	ldr	r0, [pc, #160]	; (800f440 <ethernetif_init+0x130>)
 800f39e:	f7f1 fd72 	bl	8000e86 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f3a2:	2306      	movs	r3, #6
  osSemaphoreDef(SEM);
 800f3a4:	a80a      	add	r0, sp, #40	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800f3a6:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f3a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f3ac:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f3ae:	ad05      	add	r5, sp, #20
 800f3b0:	4e2b      	ldr	r6, [pc, #172]	; (800f460 <ethernetif_init+0x150>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f3b2:	781a      	ldrb	r2, [r3, #0]
 800f3b4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f3b8:	785a      	ldrb	r2, [r3, #1]
 800f3ba:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f3be:	789a      	ldrb	r2, [r3, #2]
 800f3c0:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f3c4:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800f3c6:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f3ca:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f3ce:	791a      	ldrb	r2, [r3, #4]
 800f3d0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f3d4:	795b      	ldrb	r3, [r3, #5]
 800f3d6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800f3da:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800f3de:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f3e0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f3e4:	f043 030a 	orr.w	r3, r3, #10
 800f3e8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800f3ec:	f7f6 fada 	bl	80059a4 <osSemaphoreCreate>
 800f3f0:	4b1c      	ldr	r3, [pc, #112]	; (800f464 <ethernetif_init+0x154>)
 800f3f2:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f3f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f3f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f3f8:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800f3fa:	4621      	mov	r1, r4
 800f3fc:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f3fe:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800f400:	f7f6 fa84 	bl	800590c <osThreadCreate>
  HAL_ETH_Start(&heth);
 800f404:	480e      	ldr	r0, [pc, #56]	; (800f440 <ethernetif_init+0x130>)
 800f406:	f7f1 ffd7 	bl	80013b8 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800f40a:	aa01      	add	r2, sp, #4
 800f40c:	210b      	movs	r1, #11
 800f40e:	480c      	ldr	r0, [pc, #48]	; (800f440 <ethernetif_init+0x130>)
 800f410:	f7f1 fe67 	bl	80010e2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800f414:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f416:	210b      	movs	r1, #11
 800f418:	4809      	ldr	r0, [pc, #36]	; (800f440 <ethernetif_init+0x130>)
  regvalue |= (PHY_ISFR_INT4);
 800f41a:	f042 020b 	orr.w	r2, r2, #11
 800f41e:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f420:	f7f1 fe99 	bl	8001156 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800f424:	aa01      	add	r2, sp, #4
 800f426:	210b      	movs	r1, #11
 800f428:	4805      	ldr	r0, [pc, #20]	; (800f440 <ethernetif_init+0x130>)
 800f42a:	f7f1 fe5a 	bl	80010e2 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800f42e:	4638      	mov	r0, r7
 800f430:	b00b      	add	sp, #44	; 0x2c
 800f432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f434:	08013f08 	.word	0x08013f08
 800f438:	0801241f 	.word	0x0801241f
 800f43c:	08011dd4 	.word	0x08011dd4
 800f440:	2000d424 	.word	0x2000d424
 800f444:	40028000 	.word	0x40028000
 800f448:	08009ad1 	.word	0x08009ad1
 800f44c:	0800f0c9 	.word	0x0800f0c9
 800f450:	2000d46c 	.word	0x2000d46c
 800f454:	2000bb54 	.word	0x2000bb54
 800f458:	2000bbd4 	.word	0x2000bbd4
 800f45c:	2000d3a4 	.word	0x2000d3a4
 800f460:	08011ce0 	.word	0x08011ce0
 800f464:	200083a4 	.word	0x200083a4

0800f468 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800f468:	f7f1 b8c2 	b.w	80005f0 <HAL_GetTick>

0800f46c <vApplicationIdleHook>:
 800f46c:	4770      	bx	lr

0800f46e <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800f46e:	4770      	bx	lr

0800f470 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800f470:	4770      	bx	lr
	...

0800f474 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f476:	2100      	movs	r1, #0
  IP4_ADDR(&ipaddr, 192, 168, 1, 50);
  IP4_ADDR(&netmask, 255, 255, 255, 0);
  IP4_ADDR(&gw, 192, 168, 1, 1);

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f478:	4c14      	ldr	r4, [pc, #80]	; (800f4cc <MX_LWIP_Init+0x58>)
  tcpip_init( NULL, NULL );
 800f47a:	4608      	mov	r0, r1
 800f47c:	f7f9 fa1a 	bl	80088b4 <tcpip_init>
  IP4_ADDR(&ipaddr, 192, 168, 1, 50);
 800f480:	4913      	ldr	r1, [pc, #76]	; (800f4d0 <MX_LWIP_Init+0x5c>)
 800f482:	4b14      	ldr	r3, [pc, #80]	; (800f4d4 <MX_LWIP_Init+0x60>)
  IP4_ADDR(&netmask, 255, 255, 255, 0);
 800f484:	4a14      	ldr	r2, [pc, #80]	; (800f4d8 <MX_LWIP_Init+0x64>)
  IP4_ADDR(&ipaddr, 192, 168, 1, 50);
 800f486:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, 255, 255, 255, 0);
 800f488:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  IP4_ADDR(&gw, 192, 168, 1, 1);
 800f48c:	4813      	ldr	r0, [pc, #76]	; (800f4dc <MX_LWIP_Init+0x68>)
  IP4_ADDR(&netmask, 255, 255, 255, 0);
 800f48e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, 192, 168, 1, 1);
 800f490:	4b13      	ldr	r3, [pc, #76]	; (800f4e0 <MX_LWIP_Init+0x6c>)
 800f492:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f494:	4813      	ldr	r0, [pc, #76]	; (800f4e4 <MX_LWIP_Init+0x70>)
 800f496:	9002      	str	r0, [sp, #8]
 800f498:	4813      	ldr	r0, [pc, #76]	; (800f4e8 <MX_LWIP_Init+0x74>)
 800f49a:	9001      	str	r0, [sp, #4]
 800f49c:	2000      	movs	r0, #0
 800f49e:	9000      	str	r0, [sp, #0]
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f7fb fcbf 	bl	800ae24 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f7fb fcfa 	bl	800aea0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f4ac:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f4b0:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800f4b2:	075b      	lsls	r3, r3, #29
 800f4b4:	d504      	bpl.n	800f4c0 <MX_LWIP_Init+0x4c>
//  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f4b6:	b004      	add	sp, #16
 800f4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_set_up(&gnetif);
 800f4bc:	f7fb bcf6 	b.w	800aeac <netif_set_up>
}
 800f4c0:	b004      	add	sp, #16
 800f4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_set_down(&gnetif);
 800f4c6:	f7fb bd00 	b.w	800aeca <netif_set_down>
 800f4ca:	bf00      	nop
 800f4cc:	2000ec3c 	.word	0x2000ec3c
 800f4d0:	2000ec70 	.word	0x2000ec70
 800f4d4:	3201a8c0 	.word	0x3201a8c0
 800f4d8:	2000ec74 	.word	0x2000ec74
 800f4dc:	0101a8c0 	.word	0x0101a8c0
 800f4e0:	2000ec78 	.word	0x2000ec78
 800f4e4:	08008819 	.word	0x08008819
 800f4e8:	0800f311 	.word	0x0800f311

0800f4ec <tcpecho_thread>:
  err_t recv_err;

  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2010      	movs	r0, #16
{
 800f4f0:	b530      	push	{r4, r5, lr}
  conn = netconn_new(NETCONN_TCP);
 800f4f2:	4611      	mov	r1, r2
{
 800f4f4:	b087      	sub	sp, #28
  conn = netconn_new(NETCONN_TCP);
 800f4f6:	f7f7 ff7f 	bl	80073f8 <netconn_new_with_proto_and_callback>

  if (conn!=NULL)
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d03b      	beq.n	800f578 <tcpecho_thread+0x8c>
  {
    /* Bind connection to port number 8998. */
    err = netconn_bind(conn, NULL, 8998);
 800f500:	f242 3226 	movw	r2, #8998	; 0x2326
 800f504:	2100      	movs	r1, #0
 800f506:	f7f7 ffe9 	bl	80074dc <netconn_bind>

    if (err == ERR_OK)
 800f50a:	bb68      	cbnz	r0, 800f568 <tcpecho_thread+0x7c>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 800f50c:	21ff      	movs	r1, #255	; 0xff
 800f50e:	4628      	mov	r0, r5
 800f510:	f7f8 f808 	bl	8007524 <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 800f514:	a903      	add	r1, sp, #12
 800f516:	4628      	mov	r0, r5
 800f518:	f7f8 f822 	bl	8007560 <netconn_accept>

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 800f51c:	4604      	mov	r4, r0
 800f51e:	2800      	cmp	r0, #0
 800f520:	d1f8      	bne.n	800f514 <tcpecho_thread+0x28>

            }
            while (netbuf_next(buf) >= 0);

            netbuf_delete(buf);
						recv_err = netconn_recv(newconn, &buf);
 800f522:	a904      	add	r1, sp, #16
 800f524:	9803      	ldr	r0, [sp, #12]
 800f526:	f7f8 f86b 	bl	8007600 <netconn_recv>
					while ( recv_err == ERR_OK)
 800f52a:	b130      	cbz	r0, 800f53a <tcpecho_thread+0x4e>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800f52c:	9803      	ldr	r0, [sp, #12]
 800f52e:	f7f8 f901 	bl	8007734 <netconn_close>
          netconn_delete(newconn);
 800f532:	9803      	ldr	r0, [sp, #12]
 800f534:	f7f7 ffba 	bl	80074ac <netconn_delete>
 800f538:	e7ec      	b.n	800f514 <tcpecho_thread+0x28>
              netbuf_data(buf, &data, &len);
 800f53a:	f10d 020a 	add.w	r2, sp, #10
 800f53e:	a905      	add	r1, sp, #20
 800f540:	9804      	ldr	r0, [sp, #16]
 800f542:	f7f9 f8ab 	bl	800869c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 800f546:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f54a:	2301      	movs	r3, #1
 800f54c:	9905      	ldr	r1, [sp, #20]
 800f54e:	9400      	str	r4, [sp, #0]
 800f550:	9803      	ldr	r0, [sp, #12]
 800f552:	f7f8 f8a5 	bl	80076a0 <netconn_write_partly>
            while (netbuf_next(buf) >= 0);
 800f556:	9804      	ldr	r0, [sp, #16]
 800f558:	f7f9 f8cc 	bl	80086f4 <netbuf_next>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	daec      	bge.n	800f53a <tcpecho_thread+0x4e>
            netbuf_delete(buf);
 800f560:	9804      	ldr	r0, [sp, #16]
 800f562:	f7f9 f889 	bl	8008678 <netbuf_delete>
 800f566:	e7dc      	b.n	800f522 <tcpecho_thread+0x36>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800f568:	9803      	ldr	r0, [sp, #12]
 800f56a:	f7f7 ff9f 	bl	80074ac <netconn_delete>
      printf(" can not bind TCP netconn");
 800f56e:	4803      	ldr	r0, [pc, #12]	; (800f57c <tcpecho_thread+0x90>)
    }
  }
  else
  {
    printf("can not create TCP netconn");
 800f570:	f001 fd16 	bl	8010fa0 <iprintf>
  }
}
 800f574:	b007      	add	sp, #28
 800f576:	bd30      	pop	{r4, r5, pc}
    printf("can not create TCP netconn");
 800f578:	4801      	ldr	r0, [pc, #4]	; (800f580 <tcpecho_thread+0x94>)
 800f57a:	e7f9      	b.n	800f570 <tcpecho_thread+0x84>
 800f57c:	08013f3d 	.word	0x08013f3d
 800f580:	08013f57 	.word	0x08013f57

0800f584 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 800f584:	4b3d      	ldr	r3, [pc, #244]	; (800f67c <SystemClock_Config+0xf8>)
 800f586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800f58c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800f58e:	641a      	str	r2, [r3, #64]	; 0x40
{
 800f590:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 800f592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f594:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800f596:	2501      	movs	r5, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f598:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800f59a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5a2:	4b37      	ldr	r3, [pc, #220]	; (800f680 <SystemClock_Config+0xfc>)
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800f5aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f5ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5b0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f5b2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f5b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800f5bc:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f5be:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800f5c0:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5c2:	9301      	str	r3, [sp, #4]
 800f5c4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800f5c6:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 800f5c8:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 800f5ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800f5ce:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f5d0:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800f5d2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f5d4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800f5d6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f5d8:	f7f2 ff38 	bl	800244c <HAL_RCC_OscConfig>
 800f5dc:	b100      	cbz	r0, 800f5e0 <SystemClock_Config+0x5c>
 800f5de:	e7fe      	b.n	800f5de <SystemClock_Config+0x5a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800f5e0:	f7f2 fe7a 	bl	80022d8 <HAL_PWREx_EnableOverDrive>
 800f5e4:	b100      	cbz	r0, 800f5e8 <SystemClock_Config+0x64>
 800f5e6:	e7fe      	b.n	800f5e6 <SystemClock_Config+0x62>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f5e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f5ec:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f5ee:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800f5f0:	2106      	movs	r1, #6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f5f2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f5f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800f5f8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f5fa:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f5fc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f5fe:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800f600:	f7f3 f8e6 	bl	80027d0 <HAL_RCC_ClockConfig>
 800f604:	b100      	cbz	r0, 800f608 <SystemClock_Config+0x84>
 800f606:	e7fe      	b.n	800f606 <SystemClock_Config+0x82>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800f608:	4b1e      	ldr	r3, [pc, #120]	; (800f684 <SystemClock_Config+0x100>)
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800f60a:	9023      	str	r0, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800f60c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800f60e:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800f610:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800f612:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800f614:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800f618:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800f61a:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800f61c:	2305      	movs	r3, #5
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800f61e:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800f620:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800f622:	2303      	movs	r3, #3
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800f624:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800f626:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800f628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800f62c:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f62e:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800f630:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800f632:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800f636:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800f638:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800f63a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800f63e:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800f640:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f642:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800f644:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f646:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800f648:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f64a:	f7f3 f9a3 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800f64e:	4604      	mov	r4, r0
 800f650:	b100      	cbz	r0, 800f654 <SystemClock_Config+0xd0>
 800f652:	e7fe      	b.n	800f652 <SystemClock_Config+0xce>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f654:	f7f3 f95a 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800f658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f65c:	fbb0 f0f3 	udiv	r0, r0, r3
 800f660:	f7f1 f978 	bl	8000954 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f664:	2004      	movs	r0, #4
 800f666:	f7f1 f98b 	bl	8000980 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800f66a:	4622      	mov	r2, r4
 800f66c:	4631      	mov	r1, r6
 800f66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f672:	f7f1 f92b 	bl	80008cc <HAL_NVIC_SetPriority>
}
 800f676:	b034      	add	sp, #208	; 0xd0
 800f678:	bd70      	pop	{r4, r5, r6, pc}
 800f67a:	bf00      	nop
 800f67c:	40023800 	.word	0x40023800
 800f680:	40007000 	.word	0x40007000
 800f684:	01b14868 	.word	0x01b14868

0800f688 <main>:
{
 800f688:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800f68c:	b0a9      	sub	sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f68e:	2600      	movs	r6, #0
  HAL_Init();
 800f690:	f7f0 ff96 	bl	80005c0 <HAL_Init>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800f694:	f04f 0908 	mov.w	r9, #8
  SystemClock_Config();
 800f698:	f7ff ff74 	bl	800f584 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f69c:	4ba8      	ldr	r3, [pc, #672]	; (800f940 <main+0x2b8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800f69e:	2120      	movs	r1, #32
 800f6a0:	48a8      	ldr	r0, [pc, #672]	; (800f944 <main+0x2bc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f6a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f6a4:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6a8:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f6aa:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f6ae:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f6b2:	f04f 0b40 	mov.w	fp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f6b6:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f6b8:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f6bc:	631a      	str	r2, [r3, #48]	; 0x30
 800f6be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6c0:	f002 0210 	and.w	r2, r2, #16
 800f6c4:	9202      	str	r2, [sp, #8]
 800f6c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f6c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6ce:	631a      	str	r2, [r3, #48]	; 0x30
 800f6d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6d2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f6d6:	9203      	str	r2, [sp, #12]
 800f6d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f6da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6dc:	f042 0202 	orr.w	r2, r2, #2
 800f6e0:	631a      	str	r2, [r3, #48]	; 0x30
 800f6e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6e4:	f002 0202 	and.w	r2, r2, #2
 800f6e8:	9204      	str	r2, [sp, #16]
 800f6ea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f6ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6ee:	f042 0208 	orr.w	r2, r2, #8
 800f6f2:	631a      	str	r2, [r3, #48]	; 0x30
 800f6f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6f6:	f002 0208 	and.w	r2, r2, #8
 800f6fa:	9205      	str	r2, [sp, #20]
 800f6fc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f700:	f042 0204 	orr.w	r2, r2, #4
 800f704:	631a      	str	r2, [r3, #48]	; 0x30
 800f706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f708:	f002 0204 	and.w	r2, r2, #4
 800f70c:	9206      	str	r2, [sp, #24]
 800f70e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f712:	f042 0201 	orr.w	r2, r2, #1
 800f716:	631a      	str	r2, [r3, #48]	; 0x30
 800f718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f71a:	f002 0201 	and.w	r2, r2, #1
 800f71e:	9207      	str	r2, [sp, #28]
 800f720:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800f722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f728:	631a      	str	r2, [r3, #48]	; 0x30
 800f72a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f72c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800f730:	9208      	str	r2, [sp, #32]
 800f732:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800f734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f73a:	631a      	str	r2, [r3, #48]	; 0x30
 800f73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f73e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f742:	9209      	str	r2, [sp, #36]	; 0x24
 800f744:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800f746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f74c:	631a      	str	r2, [r3, #48]	; 0x30
 800f74e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f750:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800f754:	920a      	str	r2, [sp, #40]	; 0x28
 800f756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f75a:	f042 0220 	orr.w	r2, r2, #32
 800f75e:	631a      	str	r2, [r3, #48]	; 0x30
 800f760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f762:	f002 0220 	and.w	r2, r2, #32
 800f766:	920b      	str	r2, [sp, #44]	; 0x2c
 800f768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f76a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f76c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f770:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800f772:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f77a:	930c      	str	r3, [sp, #48]	; 0x30
 800f77c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800f77e:	f7f1 ff43 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800f782:	2200      	movs	r2, #0
 800f784:	210c      	movs	r1, #12
 800f786:	4870      	ldr	r0, [pc, #448]	; (800f948 <main+0x2c0>)
 800f788:	f7f1 ff3e 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800f78c:	2201      	movs	r2, #1
 800f78e:	2108      	movs	r1, #8
 800f790:	486e      	ldr	r0, [pc, #440]	; (800f94c <main+0x2c4>)
 800f792:	f7f1 ff39 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800f796:	2201      	movs	r2, #1
 800f798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f79c:	486a      	ldr	r0, [pc, #424]	; (800f948 <main+0x2c0>)
 800f79e:	f7f1 ff33 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f7a8:	4869      	ldr	r0, [pc, #420]	; (800f950 <main+0x2c8>)
 800f7aa:	f7f1 ff2d 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	21c8      	movs	r1, #200	; 0xc8
 800f7b2:	4868      	ldr	r0, [pc, #416]	; (800f954 <main+0x2cc>)
 800f7b4:	f7f1 ff28 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f7b8:	a91b      	add	r1, sp, #108	; 0x6c
 800f7ba:	4867      	ldr	r0, [pc, #412]	; (800f958 <main+0x2d0>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800f7bc:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7c0:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7c2:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f7c4:	f7f1 fe36 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7c8:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800f7ca:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7ce:	a91b      	add	r1, sp, #108	; 0x6c
 800f7d0:	4862      	ldr	r0, [pc, #392]	; (800f95c <main+0x2d4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7d2:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800f7d4:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f7d6:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7da:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7dc:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7de:	f7f1 fe29 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f7e2:	a91b      	add	r1, sp, #108	; 0x6c
 800f7e4:	485e      	ldr	r0, [pc, #376]	; (800f960 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f7e6:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7ea:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7ec:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f7ee:	f7f1 fe21 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f7f2:	4a5c      	ldr	r2, [pc, #368]	; (800f964 <main+0x2dc>)
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f7f4:	a91b      	add	r1, sp, #108	; 0x6c
 800f7f6:	4853      	ldr	r0, [pc, #332]	; (800f944 <main+0x2bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f7f8:	921c      	str	r2, [sp, #112]	; 0x70
 800f7fa:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f7fc:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f800:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f802:	f7f1 fe17 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f806:	2120      	movs	r1, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f808:	484e      	ldr	r0, [pc, #312]	; (800f944 <main+0x2bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f80a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f80c:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f80e:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f810:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f812:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f814:	f7f1 fe0e 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800f818:	f241 010c 	movw	r1, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f81c:	484a      	ldr	r0, [pc, #296]	; (800f948 <main+0x2c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f81e:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800f820:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f822:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f824:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f826:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f828:	f7f1 fe04 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f82c:	a91b      	add	r1, sp, #108	; 0x6c
 800f82e:	484e      	ldr	r0, [pc, #312]	; (800f968 <main+0x2e0>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f830:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f832:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f834:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f836:	f7f1 fdfd 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f83a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f83e:	a91b      	add	r1, sp, #108	; 0x6c
 800f840:	4842      	ldr	r0, [pc, #264]	; (800f94c <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f842:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f846:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f848:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f84a:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f84c:	f7f1 fdf2 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f850:	a91b      	add	r1, sp, #108	; 0x6c
 800f852:	483c      	ldr	r0, [pc, #240]	; (800f944 <main+0x2bc>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f854:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f858:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f85a:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f85c:	f7f1 fdea 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800f860:	f248 0104 	movw	r1, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f864:	483a      	ldr	r0, [pc, #232]	; (800f950 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f866:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800f868:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f86a:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f86c:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f86e:	f7f1 fde1 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f872:	a91b      	add	r1, sp, #108	; 0x6c
 800f874:	4836      	ldr	r0, [pc, #216]	; (800f950 <main+0x2c8>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f876:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f878:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87a:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f87c:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f87e:	f7f1 fdd9 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f882:	9a01      	ldr	r2, [sp, #4]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f884:	a91b      	add	r1, sp, #108	; 0x6c
 800f886:	4830      	ldr	r0, [pc, #192]	; (800f948 <main+0x2c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f888:	921c      	str	r2, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f88a:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f88c:	2704      	movs	r7, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f88e:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f890:	f7f1 fdd0 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f894:	2303      	movs	r3, #3
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f896:	a91b      	add	r1, sp, #108	; 0x6c
 800f898:	482d      	ldr	r0, [pc, #180]	; (800f950 <main+0x2c8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f89a:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f89c:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f8a0:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a6:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f8a8:	f7f1 fdc4 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800f8ac:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f8ae:	a91b      	add	r1, sp, #108	; 0x6c
 800f8b0:	4828      	ldr	r0, [pc, #160]	; (800f954 <main+0x2cc>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800f8b2:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f8b4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8b6:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8b8:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f8ba:	f7f1 fdbb 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800f8be:	2205      	movs	r2, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8c0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f8c2:	a91b      	add	r1, sp, #108	; 0x6c
 800f8c4:	4828      	ldr	r0, [pc, #160]	; (800f968 <main+0x2e0>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800f8c6:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8c8:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f8ca:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8ce:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8d0:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f8d2:	f7f1 fdaf 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f8d6:	a91b      	add	r1, sp, #108	; 0x6c
 800f8d8:	481e      	ldr	r0, [pc, #120]	; (800f954 <main+0x2cc>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f8da:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f8dc:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8de:	961d      	str	r6, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f8e0:	f7f1 fda8 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800f8e4:	2228      	movs	r2, #40	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8e6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8e8:	4820      	ldr	r0, [pc, #128]	; (800f96c <main+0x2e4>)
 800f8ea:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800f8ec:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f8ee:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f2:	951c      	str	r5, [sp, #112]	; 0x70
  hadc3.Instance = ADC3;
 800f8f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800f978 <main+0x2f0>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f8:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8fa:	931e      	str	r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8fc:	f7f1 fd9a 	bl	8001434 <HAL_GPIO_Init>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f900:	481b      	ldr	r0, [pc, #108]	; (800f970 <main+0x2e8>)
 800f902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800f906:	f8c8 6008 	str.w	r6, [r8, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800f90a:	f8c8 6010 	str.w	r6, [r8, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f90e:	f8c8 6018 	str.w	r6, [r8, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f912:	f8c8 6020 	str.w	r6, [r8, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f916:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f91a:	f8c8 600c 	str.w	r6, [r8, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f91e:	f8c8 401c 	str.w	r4, [r8, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800f922:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f926:	f8c8 4014 	str.w	r4, [r8, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800f92a:	e888 0005 	stmia.w	r8, {r0, r2}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f92e:	4a11      	ldr	r2, [pc, #68]	; (800f974 <main+0x2ec>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f930:	4640      	mov	r0, r8
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f932:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f936:	f7f0 fe73 	bl	8000620 <HAL_ADC_Init>
 800f93a:	b1f8      	cbz	r0, 800f97c <main+0x2f4>
 800f93c:	e7fe      	b.n	800f93c <main+0x2b4>
 800f93e:	bf00      	nop
 800f940:	40023800 	.word	0x40023800
 800f944:	40020c00 	.word	0x40020c00
 800f948:	40022000 	.word	0x40022000
 800f94c:	40022800 	.word	0x40022800
 800f950:	40021c00 	.word	0x40021c00
 800f954:	40021800 	.word	0x40021800
 800f958:	40021000 	.word	0x40021000
 800f95c:	40020400 	.word	0x40020400
 800f960:	40022400 	.word	0x40022400
 800f964:	10120000 	.word	0x10120000
 800f968:	40020800 	.word	0x40020800
 800f96c:	40020000 	.word	0x40020000
 800f970:	40012200 	.word	0x40012200
 800f974:	0f000001 	.word	0x0f000001
 800f978:	2000f0e4 	.word	0x2000f0e4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800f97c:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f97e:	a91b      	add	r1, sp, #108	; 0x6c
 800f980:	4640      	mov	r0, r8
  sConfig.Channel = ADC_CHANNEL_4;
 800f982:	971b      	str	r7, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800f984:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f986:	f7f0 feef 	bl	8000768 <HAL_ADC_ConfigChannel>
 800f98a:	b100      	cbz	r0, 800f98e <main+0x306>
 800f98c:	e7fe      	b.n	800f98c <main+0x304>
  hcrc.Instance = CRC;
 800f98e:	4b9d      	ldr	r3, [pc, #628]	; (800fc04 <main+0x57c>)
 800f990:	4a9d      	ldr	r2, [pc, #628]	; (800fc08 <main+0x580>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800f992:	7118      	strb	r0, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800f994:	7158      	strb	r0, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800f996:	6158      	str	r0, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800f998:	6198      	str	r0, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f99a:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 800f99c:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800f99e:	621c      	str	r4, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f9a0:	f7f0 fffa 	bl	8000998 <HAL_CRC_Init>
 800f9a4:	b100      	cbz	r0, 800f9a8 <main+0x320>
 800f9a6:	e7fe      	b.n	800f9a6 <main+0x31e>
  hdcmi.Instance = DCMI;
 800f9a8:	4b98      	ldr	r3, [pc, #608]	; (800fc0c <main+0x584>)
 800f9aa:	4a99      	ldr	r2, [pc, #612]	; (800fc10 <main+0x588>)
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800f9ac:	6058      	str	r0, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800f9ae:	6098      	str	r0, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800f9b0:	60d8      	str	r0, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800f9b2:	6118      	str	r0, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800f9b4:	6158      	str	r0, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800f9b6:	6198      	str	r0, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800f9b8:	6218      	str	r0, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800f9ba:	6258      	str	r0, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800f9bc:	6298      	str	r0, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800f9be:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800f9c0:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800f9c2:	4618      	mov	r0, r3
  hdcmi.Instance = DCMI;
 800f9c4:	601a      	str	r2, [r3, #0]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800f9c6:	f7f1 f847 	bl	8000a58 <HAL_DCMI_Init>
 800f9ca:	b100      	cbz	r0, 800f9ce <main+0x346>
 800f9cc:	e7fe      	b.n	800f9cc <main+0x344>
  hdma2d.Instance = DMA2D;
 800f9ce:	f8df 827c 	ldr.w	r8, [pc, #636]	; 800fc4c <main+0x5c4>
 800f9d2:	4b90      	ldr	r3, [pc, #576]	; (800fc14 <main+0x58c>)
  hdma2d.Init.Mode = DMA2D_M2M;
 800f9d4:	f8c8 0004 	str.w	r0, [r8, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800f9d8:	f8c8 0008 	str.w	r0, [r8, #8]
  hdma2d.Init.OutputOffset = 0;
 800f9dc:	f8c8 000c 	str.w	r0, [r8, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800f9e0:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800f9e4:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800f9e8:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800f9ec:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800f9f0:	4640      	mov	r0, r8
  hdma2d.Instance = DMA2D;
 800f9f2:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800f9f6:	f7f1 f875 	bl	8000ae4 <HAL_DMA2D_Init>
 800f9fa:	b100      	cbz	r0, 800f9fe <main+0x376>
 800f9fc:	e7fe      	b.n	800f9fc <main+0x374>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4640      	mov	r0, r8
 800fa02:	f7f1 f927 	bl	8000c54 <HAL_DMA2D_ConfigLayer>
 800fa06:	b100      	cbz	r0, 800fa0a <main+0x382>
 800fa08:	e7fe      	b.n	800fa08 <main+0x380>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800fa0a:	4b83      	ldr	r3, [pc, #524]	; (800fc18 <main+0x590>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800fa0c:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800fa0e:	4a83      	ldr	r2, [pc, #524]	; (800fc1c <main+0x594>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800fa10:	6058      	str	r0, [r3, #4]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800fa12:	601a      	str	r2, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800fa14:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800fa18:	6098      	str	r0, [r3, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800fa1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800fa1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800fa20:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800fa22:	621a      	str	r2, [r3, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800fa24:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800fa26:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800fa28:	4618      	mov	r0, r3
  SdramTiming.ExitSelfRefreshDelay = 7;
 800fa2a:	921c      	str	r2, [sp, #112]	; 0x70
  SdramTiming.RowCycleDelay = 7;
 800fa2c:	921e      	str	r2, [sp, #120]	; 0x78
  SdramTiming.WriteRecoveryTime = 3;
 800fa2e:	2203      	movs	r2, #3
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800fa30:	60df      	str	r7, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800fa32:	f8c3 9010 	str.w	r9, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800fa36:	f8c3 b014 	str.w	fp, [r3, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800fa3a:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  SdramTiming.LoadToActiveDelay = 2;
 800fa3e:	951b      	str	r5, [sp, #108]	; 0x6c
  SdramTiming.SelfRefreshTime = 4;
 800fa40:	971d      	str	r7, [sp, #116]	; 0x74
  SdramTiming.WriteRecoveryTime = 3;
 800fa42:	921f      	str	r2, [sp, #124]	; 0x7c
  SdramTiming.RPDelay = 2;
 800fa44:	9520      	str	r5, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 800fa46:	9521      	str	r5, [sp, #132]	; 0x84
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800fa48:	f7f3 fd9c 	bl	8003584 <HAL_SDRAM_Init>
 800fa4c:	b100      	cbz	r0, 800fa50 <main+0x3c8>
 800fa4e:	e7fe      	b.n	800fa4e <main+0x3c6>
  hi2c1.Instance = I2C1;
 800fa50:	4d73      	ldr	r5, [pc, #460]	; (800fc20 <main+0x598>)
  hi2c1.Init.Timing = 0x00C0EAFF;
 800fa52:	4b74      	ldr	r3, [pc, #464]	; (800fc24 <main+0x59c>)
 800fa54:	4e74      	ldr	r6, [pc, #464]	; (800fc28 <main+0x5a0>)
  hi2c1.Init.OwnAddress1 = 0;
 800fa56:	60a8      	str	r0, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fa58:	6128      	str	r0, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800fa5a:	6168      	str	r0, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800fa5c:	61a8      	str	r0, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fa5e:	61e8      	str	r0, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fa60:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800fa62:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa64:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800fa66:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800fa6a:	f7f2 fa13 	bl	8001e94 <HAL_I2C_Init>
 800fa6e:	4601      	mov	r1, r0
 800fa70:	b100      	cbz	r0, 800fa74 <main+0x3ec>
 800fa72:	e7fe      	b.n	800fa72 <main+0x3ea>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800fa74:	4628      	mov	r0, r5
 800fa76:	f7f2 fa5e 	bl	8001f36 <HAL_I2CEx_ConfigAnalogFilter>
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	b100      	cbz	r0, 800fa80 <main+0x3f8>
 800fa7e:	e7fe      	b.n	800fa7e <main+0x3f6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800fa80:	4628      	mov	r0, r5
 800fa82:	f7f2 fa7e 	bl	8001f82 <HAL_I2CEx_ConfigDigitalFilter>
 800fa86:	b100      	cbz	r0, 800fa8a <main+0x402>
 800fa88:	e7fe      	b.n	800fa88 <main+0x400>
  hi2c3.Instance = I2C3;
 800fa8a:	4c68      	ldr	r4, [pc, #416]	; (800fc2c <main+0x5a4>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa8c:	2501      	movs	r5, #1
  hi2c3.Instance = I2C3;
 800fa8e:	4b68      	ldr	r3, [pc, #416]	; (800fc30 <main+0x5a8>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800fa90:	4620      	mov	r0, r4
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fa92:	60e5      	str	r5, [r4, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800fa94:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c3.Init.OwnAddress1 = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	60a3      	str	r3, [r4, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fa9c:	6123      	str	r3, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800fa9e:	6163      	str	r3, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800faa0:	61a3      	str	r3, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800faa2:	61e3      	str	r3, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800faa4:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800faa6:	f7f2 f9f5 	bl	8001e94 <HAL_I2C_Init>
 800faaa:	4601      	mov	r1, r0
 800faac:	b100      	cbz	r0, 800fab0 <main+0x428>
 800faae:	e7fe      	b.n	800faae <main+0x426>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800fab0:	4620      	mov	r0, r4
 800fab2:	f7f2 fa40 	bl	8001f36 <HAL_I2CEx_ConfigAnalogFilter>
 800fab6:	4601      	mov	r1, r0
 800fab8:	b100      	cbz	r0, 800fabc <main+0x434>
 800faba:	e7fe      	b.n	800faba <main+0x432>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7f2 fa60 	bl	8001f82 <HAL_I2CEx_ConfigDigitalFilter>
 800fac2:	b100      	cbz	r0, 800fac6 <main+0x43e>
 800fac4:	e7fe      	b.n	800fac4 <main+0x43c>
  hltdc.Instance = LTDC;
 800fac6:	4c5b      	ldr	r4, [pc, #364]	; (800fc34 <main+0x5ac>)
 800fac8:	4b5b      	ldr	r3, [pc, #364]	; (800fc38 <main+0x5b0>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800faca:	6060      	str	r0, [r4, #4]
  hltdc.Instance = LTDC;
 800facc:	6023      	str	r3, [r4, #0]
  hltdc.Init.HorizontalSync = 40;
 800face:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800fad0:	60a0      	str	r0, [r4, #8]
  hltdc.Init.HorizontalSync = 40;
 800fad2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800fad4:	2309      	movs	r3, #9
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800fad6:	60e0      	str	r0, [r4, #12]
  hltdc.Init.VerticalSync = 9;
 800fad8:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800fada:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800fadc:	6120      	str	r0, [r4, #16]
  hltdc.Init.AccumulatedHBP = 53;
 800fade:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800fae0:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
 800fae2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 11;
 800fae6:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800fae8:	f240 2315 	movw	r3, #533	; 0x215
  hltdc.Init.Backcolor.Green = 0;
 800faec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hltdc.Init.AccumulatedActiveW = 533;
 800faf0:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800faf2:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.Backcolor.Red = 0;
 800faf6:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800fafa:	4620      	mov	r0, r4
  hltdc.Init.AccumulatedActiveH = 283;
 800fafc:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800fafe:	f240 2335 	movw	r3, #565	; 0x235
 800fb02:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800fb04:	f240 131d 	movw	r3, #285	; 0x11d
 800fb08:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800fb0a:	f7f2 fae5 	bl	80020d8 <HAL_LTDC_Init>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	b100      	cbz	r0, 800fb14 <main+0x48c>
 800fb12:	e7fe      	b.n	800fb12 <main+0x48a>
  pLayerCfg.WindowX0 = 0;
 800fb14:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.WindowX1 = 480;
 800fb16:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 800fb1a:	901d      	str	r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY1 = 272;
 800fb1c:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800fb20:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg.Alpha = 255;
 800fb22:	26ff      	movs	r6, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 800fb24:	9021      	str	r0, [sp, #132]	; 0x84
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800fb26:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 800fb2a:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800fb2c:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800fb2e:	2007      	movs	r0, #7
  pLayerCfg.ImageWidth = 480;
 800fb30:	9125      	str	r1, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800fb32:	a91b      	add	r1, sp, #108	; 0x6c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800fb34:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 800fb36:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  pLayerCfg.WindowY1 = 272;
 800fb3a:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.FBStartAdress = 0xC0000000;
 800fb3c:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800fb3e:	4620      	mov	r0, r4
  pLayerCfg.Alpha = 255;
 800fb40:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.ImageHeight = 272;
 800fb42:	9326      	str	r3, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Blue = 0;
 800fb44:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 800fb48:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 800fb4c:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800fb50:	f7f2 fb98 	bl	8002284 <HAL_LTDC_ConfigLayer>
 800fb54:	b100      	cbz	r0, 800fb58 <main+0x4d0>
 800fb56:	e7fe      	b.n	800fb56 <main+0x4ce>
  hqspi.Instance = QUADSPI;
 800fb58:	4b38      	ldr	r3, [pc, #224]	; (800fc3c <main+0x5b4>)
 800fb5a:	4a39      	ldr	r2, [pc, #228]	; (800fc40 <main+0x5b8>)
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800fb5c:	60d8      	str	r0, [r3, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800fb5e:	6158      	str	r0, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800fb60:	6198      	str	r0, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800fb62:	61d8      	str	r0, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800fb64:	6218      	str	r0, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800fb66:	4618      	mov	r0, r3
  hqspi.Init.FifoThreshold = 1;
 800fb68:	609d      	str	r5, [r3, #8]
  hqspi.Init.FlashSize = 1;
 800fb6a:	611d      	str	r5, [r3, #16]
  hqspi.Init.ClockPrescaler = 255;
 800fb6c:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800fb70:	f7f2 fc10 	bl	8002394 <HAL_QSPI_Init>
 800fb74:	b100      	cbz	r0, 800fb78 <main+0x4f0>
 800fb76:	e7fe      	b.n	800fb76 <main+0x4ee>
  hrtc.Instance = RTC;
 800fb78:	4c32      	ldr	r4, [pc, #200]	; (800fc44 <main+0x5bc>)
 800fb7a:	4b33      	ldr	r3, [pc, #204]	; (800fc48 <main+0x5c0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800fb7c:	6060      	str	r0, [r4, #4]
  hrtc.Instance = RTC;
 800fb7e:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 800fb80:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800fb82:	6120      	str	r0, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800fb84:	6160      	str	r0, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800fb86:	61a0      	str	r0, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800fb88:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 800fb8a:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 800fb8c:	60e6      	str	r6, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800fb8e:	f7f3 fa21 	bl	8002fd4 <HAL_RTC_Init>
 800fb92:	b100      	cbz	r0, 800fb96 <main+0x50e>
 800fb94:	e7fe      	b.n	800fb94 <main+0x50c>
  sTime.Hours = 0x0;
 800fb96:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800fb9a:	462a      	mov	r2, r5
  sTime.Minutes = 0x0;
 800fb9c:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800fba0:	a914      	add	r1, sp, #80	; 0x50
  sTime.Seconds = 0x0;
 800fba2:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fba6:	9018      	str	r0, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800fba8:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7f3 fabe 	bl	800312c <HAL_RTC_SetTime>
 800fbb0:	b100      	cbz	r0, 800fbb4 <main+0x52c>
 800fbb2:	e7fe      	b.n	800fbb2 <main+0x52a>
  sDate.Year = 0x0;
 800fbb4:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800fbb8:	462a      	mov	r2, r5
 800fbba:	a910      	add	r1, sp, #64	; 0x40
 800fbbc:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800fbbe:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 800fbc2:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 800fbc6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800fbca:	f7f3 fa50 	bl	800306e <HAL_RTC_SetDate>
 800fbce:	b100      	cbz	r0, 800fbd2 <main+0x54a>
 800fbd0:	e7fe      	b.n	800fbd0 <main+0x548>
  sAlarm.Alarm = RTC_ALARM_A;
 800fbd2:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 800fbd6:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 800fbda:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fbde:	462a      	mov	r2, r5
  sAlarm.AlarmTime.Seconds = 0x0;
 800fbe0:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fbe4:	a91b      	add	r1, sp, #108	; 0x6c
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800fbe6:	901c      	str	r0, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fbe8:	901f      	str	r0, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800fbea:	9020      	str	r0, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800fbec:	9021      	str	r0, [sp, #132]	; 0x84
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800fbee:	9022      	str	r0, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800fbf0:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fbf2:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 800fbf4:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 800fbf8:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fbfa:	f7f3 fb05 	bl	8003208 <HAL_RTC_SetAlarm>
 800fbfe:	b338      	cbz	r0, 800fc50 <main+0x5c8>
 800fc00:	e7fe      	b.n	800fc00 <main+0x578>
 800fc02:	bf00      	nop
 800fc04:	2000ef10 	.word	0x2000ef10
 800fc08:	40023000 	.word	0x40023000
 800fc0c:	2000f12c 	.word	0x2000f12c
 800fc10:	50050000 	.word	0x50050000
 800fc14:	4002b000 	.word	0x4002b000
 800fc18:	2000f37c 	.word	0x2000f37c
 800fc1c:	a0000140 	.word	0xa0000140
 800fc20:	2000eec4 	.word	0x2000eec4
 800fc24:	40005400 	.word	0x40005400
 800fc28:	00c0eaff 	.word	0x00c0eaff
 800fc2c:	2000ed04 	.word	0x2000ed04
 800fc30:	40005c00 	.word	0x40005c00
 800fc34:	2000f03c 	.word	0x2000f03c
 800fc38:	40016800 	.word	0x40016800
 800fc3c:	2000f3b0 	.word	0x2000f3b0
 800fc40:	a0001000 	.word	0xa0001000
 800fc44:	2000f1ec 	.word	0x2000f1ec
 800fc48:	40002800 	.word	0x40002800
 800fc4c:	2000f2bc 	.word	0x2000f2bc
  sAlarm.AlarmDateWeekDay = 0x1;
 800fc50:	2601      	movs	r6, #1
  sAlarm.Alarm = RTC_ALARM_B;
 800fc52:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fc56:	a91b      	add	r1, sp, #108	; 0x6c
 800fc58:	488d      	ldr	r0, [pc, #564]	; (800fe90 <main+0x808>)
 800fc5a:	4632      	mov	r2, r6
  sAlarm.AlarmDateWeekDay = 0x1;
 800fc5c:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_B;
 800fc60:	9525      	str	r5, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800fc62:	f7f3 fad1 	bl	8003208 <HAL_RTC_SetAlarm>
 800fc66:	4601      	mov	r1, r0
 800fc68:	b100      	cbz	r0, 800fc6c <main+0x5e4>
 800fc6a:	e7fe      	b.n	800fc6a <main+0x5e2>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800fc6c:	2202      	movs	r2, #2
 800fc6e:	4888      	ldr	r0, [pc, #544]	; (800fe90 <main+0x808>)
 800fc70:	f7f3 fb68 	bl	8003344 <HAL_RTCEx_SetTimeStamp>
 800fc74:	b100      	cbz	r0, 800fc78 <main+0x5f0>
 800fc76:	e7fe      	b.n	800fc76 <main+0x5ee>
  hsai_BlockA2.Instance = SAI2_Block_A;
 800fc78:	4b86      	ldr	r3, [pc, #536]	; (800fe94 <main+0x80c>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 800fc7a:	27c0      	movs	r7, #192	; 0xc0
  hsai_BlockA2.Instance = SAI2_Block_A;
 800fc7c:	4a86      	ldr	r2, [pc, #536]	; (800fe98 <main+0x810>)
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800fc7e:	2408      	movs	r4, #8
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800fc80:	6318      	str	r0, [r3, #48]	; 0x30
  hsai_BlockA2.Instance = SAI2_Block_A;
 800fc82:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800fc84:	4a85      	ldr	r2, [pc, #532]	; (800fe9c <main+0x814>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800fc86:	6058      	str	r0, [r3, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800fc88:	6398      	str	r0, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fc8a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800fc8c:	6098      	str	r0, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800fc8e:	6118      	str	r0, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800fc90:	6158      	str	r0, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800fc92:	6198      	str	r0, [r3, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800fc94:	60d8      	str	r0, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800fc96:	6258      	str	r0, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800fc98:	6298      	str	r0, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800fc9a:	62d8      	str	r0, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800fc9c:	6498      	str	r0, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fc9e:	64d8      	str	r0, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800fca0:	6518      	str	r0, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800fca2:	6558      	str	r0, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800fca4:	6598      	str	r0, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800fca6:	6618      	str	r0, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800fca8:	4618      	mov	r0, r3
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 800fcaa:	635f      	str	r7, [r3, #52]	; 0x34
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800fcac:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800fcae:	641c      	str	r4, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800fcb0:	645e      	str	r6, [r3, #68]	; 0x44
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800fcb2:	65de      	str	r6, [r3, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800fcb4:	f7f3 fb8c 	bl	80033d0 <HAL_SAI_Init>
 800fcb8:	b100      	cbz	r0, 800fcbc <main+0x634>
 800fcba:	e7fe      	b.n	800fcba <main+0x632>
  hsai_BlockB2.Instance = SAI2_Block_B;
 800fcbc:	4b78      	ldr	r3, [pc, #480]	; (800fea0 <main+0x818>)
 800fcbe:	4a79      	ldr	r2, [pc, #484]	; (800fea4 <main+0x81c>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800fcc0:	6318      	str	r0, [r3, #48]	; 0x30
  hsai_BlockB2.Instance = SAI2_Block_B;
 800fcc2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800fcc4:	2203      	movs	r2, #3
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800fcc6:	6398      	str	r0, [r3, #56]	; 0x38
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800fcc8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.FrameInit.FrameLength = 24;
 800fcca:	2218      	movs	r2, #24
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fccc:	63d8      	str	r0, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800fcce:	6118      	str	r0, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800fcd0:	6198      	str	r0, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800fcd2:	60d8      	str	r0, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800fcd4:	6258      	str	r0, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800fcd6:	6298      	str	r0, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800fcd8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800fcda:	6498      	str	r0, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fcdc:	64d8      	str	r0, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800fcde:	6518      	str	r0, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800fce0:	6558      	str	r0, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800fce2:	6598      	str	r0, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800fce4:	6618      	str	r0, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800fce6:	4618      	mov	r0, r3
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 800fce8:	635f      	str	r7, [r3, #52]	; 0x34
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800fcea:	609e      	str	r6, [r3, #8]
  hsai_BlockB2.FrameInit.FrameLength = 24;
 800fcec:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800fcee:	645e      	str	r6, [r3, #68]	; 0x44
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800fcf0:	65de      	str	r6, [r3, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800fcf2:	f7f3 fb6d 	bl	80033d0 <HAL_SAI_Init>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	b100      	cbz	r0, 800fcfc <main+0x674>
 800fcfa:	e7fe      	b.n	800fcfa <main+0x672>
  hsd1.Instance = SDMMC1;
 800fcfc:	4a6a      	ldr	r2, [pc, #424]	; (800fea8 <main+0x820>)
 800fcfe:	496b      	ldr	r1, [pc, #428]	; (800feac <main+0x824>)
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800fd00:	6090      	str	r0, [r2, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fd02:	60d0      	str	r0, [r2, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800fd04:	6110      	str	r0, [r2, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fd06:	6150      	str	r0, [r2, #20]
  hsd1.Init.ClockDiv = 0;
 800fd08:	6190      	str	r0, [r2, #24]
  hspdif.Instance = SPDIFRX;
 800fd0a:	4869      	ldr	r0, [pc, #420]	; (800feb0 <main+0x828>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800fd0c:	e882 000a 	stmia.w	r2, {r1, r3}
  hspdif.Instance = SPDIFRX;
 800fd10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800fd14:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800fd16:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800fd18:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800fd1a:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800fd1c:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800fd1e:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800fd20:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800fd22:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800fd24:	6283      	str	r3, [r0, #40]	; 0x28
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800fd26:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800fd2a:	f7f3 fc4b 	bl	80035c4 <HAL_SPDIFRX_Init>
 800fd2e:	b100      	cbz	r0, 800fd32 <main+0x6aa>
 800fd30:	e7fe      	b.n	800fd30 <main+0x6a8>
  hspi2.Instance = SPI2;
 800fd32:	4b60      	ldr	r3, [pc, #384]	; (800feb4 <main+0x82c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800fd34:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fd38:	495f      	ldr	r1, [pc, #380]	; (800feb8 <main+0x830>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800fd3a:	6098      	str	r0, [r3, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fd3c:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800fd3e:	6158      	str	r0, [r3, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fd40:	61d8      	str	r0, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fd42:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800fd44:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd46:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800fd48:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800fd4a:	4618      	mov	r0, r3
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800fd4c:	619d      	str	r5, [r3, #24]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800fd4e:	635c      	str	r4, [r3, #52]	; 0x34
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800fd50:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800fd54:	f44f 7240 	mov.w	r2, #768	; 0x300
 800fd58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CRCPolynomial = 7;
 800fd5a:	2207      	movs	r2, #7
 800fd5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800fd5e:	f7f3 fc68 	bl	8003632 <HAL_SPI_Init>
 800fd62:	b100      	cbz	r0, 800fd66 <main+0x6de>
 800fd64:	e7fe      	b.n	800fd64 <main+0x6dc>
  htim1.Instance = TIM1;
 800fd66:	4c55      	ldr	r4, [pc, #340]	; (800febc <main+0x834>)
 800fd68:	4b55      	ldr	r3, [pc, #340]	; (800fec0 <main+0x838>)
  htim1.Init.Prescaler = 0;
 800fd6a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd6c:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 800fd6e:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd70:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800fd72:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fd74:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fd76:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800fd78:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fd7a:	f7f3 fdf9 	bl	8003970 <HAL_TIM_Base_Init>
 800fd7e:	b100      	cbz	r0, 800fd82 <main+0x6fa>
 800fd80:	e7fe      	b.n	800fd80 <main+0x6f8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fd86:	a910      	add	r1, sp, #64	; 0x40
 800fd88:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd8a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fd8c:	f7f3 feea 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800fd90:	b100      	cbz	r0, 800fd94 <main+0x70c>
 800fd92:	e7fe      	b.n	800fd92 <main+0x70a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800fd94:	4620      	mov	r0, r4
 800fd96:	f7f3 fe05 	bl	80039a4 <HAL_TIM_PWM_Init>
 800fd9a:	b100      	cbz	r0, 800fd9e <main+0x716>
 800fd9c:	e7fe      	b.n	800fd9c <main+0x714>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd9e:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fda0:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800fda2:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fda4:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fda6:	4620      	mov	r0, r4
 800fda8:	f7f3 ffba 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800fdac:	b100      	cbz	r0, 800fdb0 <main+0x728>
 800fdae:	e7fe      	b.n	800fdae <main+0x726>
  sConfigOC.Pulse = 0;
 800fdb0:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fdb2:	2760      	movs	r7, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fdb4:	a914      	add	r1, sp, #80	; 0x50
 800fdb6:	4841      	ldr	r0, [pc, #260]	; (800febc <main+0x834>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fdb8:	9714      	str	r7, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 800fdba:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fdbc:	9216      	str	r2, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800fdbe:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fdc0:	9218      	str	r2, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800fdc2:	9219      	str	r2, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800fdc4:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fdc6:	f7f4 f815 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800fdca:	b100      	cbz	r0, 800fdce <main+0x746>
 800fdcc:	e7fe      	b.n	800fdcc <main+0x744>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800fdce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800fdd2:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800fdd4:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800fdd6:	a91b      	add	r1, sp, #108	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800fdd8:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800fdda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800fdde:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 800fde0:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800fde2:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800fde4:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800fde6:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 800fde8:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800fdea:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800fdec:	4833      	ldr	r0, [pc, #204]	; (800febc <main+0x834>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800fdee:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800fdf0:	f7f3 ffbc 	bl	8003d6c <HAL_TIMEx_ConfigBreakDeadTime>
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	b100      	cbz	r0, 800fdfa <main+0x772>
 800fdf8:	e7fe      	b.n	800fdf8 <main+0x770>
  htim2.Instance = TIM2;
 800fdfa:	4c32      	ldr	r4, [pc, #200]	; (800fec4 <main+0x83c>)
  HAL_TIM_MspPostInit(&htim1);
 800fdfc:	482f      	ldr	r0, [pc, #188]	; (800febc <main+0x834>)
 800fdfe:	f000 fc2d 	bl	801065c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800fe02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fe06:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe08:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0;
 800fe0a:	60e5      	str	r5, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe0c:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe0e:	61a5      	str	r5, [r4, #24]
  htim2.Init.Prescaler = 0;
 800fe10:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fe14:	f7f3 fdac 	bl	8003970 <HAL_TIM_Base_Init>
 800fe18:	b100      	cbz	r0, 800fe1c <main+0x794>
 800fe1a:	e7fe      	b.n	800fe1a <main+0x792>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe1c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fe20:	a914      	add	r1, sp, #80	; 0x50
 800fe22:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe24:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fe26:	f7f3 fe9d 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800fe2a:	b100      	cbz	r0, 800fe2e <main+0x7a6>
 800fe2c:	e7fe      	b.n	800fe2c <main+0x7a4>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7f3 fdb8 	bl	80039a4 <HAL_TIM_PWM_Init>
 800fe34:	b100      	cbz	r0, 800fe38 <main+0x7b0>
 800fe36:	e7fe      	b.n	800fe36 <main+0x7ae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe38:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fe3a:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe3c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f7f3 ff6e 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800fe44:	4602      	mov	r2, r0
 800fe46:	b100      	cbz	r0, 800fe4a <main+0x7c2>
 800fe48:	e7fe      	b.n	800fe48 <main+0x7c0>
  sConfigOC.Pulse = 0;
 800fe4a:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fe4c:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fe4e:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fe50:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fe52:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fe54:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fe56:	f7f3 ffcd 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800fe5a:	4605      	mov	r5, r0
 800fe5c:	b100      	cbz	r0, 800fe60 <main+0x7d8>
 800fe5e:	e7fe      	b.n	800fe5e <main+0x7d6>
  HAL_TIM_MspPostInit(&htim2);
 800fe60:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 800fe62:	4c19      	ldr	r4, [pc, #100]	; (800fec8 <main+0x840>)
  HAL_TIM_MspPostInit(&htim2);
 800fe64:	f000 fbfa 	bl	801065c <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800fe68:	4b18      	ldr	r3, [pc, #96]	; (800fecc <main+0x844>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800fe6a:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe6c:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 800fe6e:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe70:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe72:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 0;
 800fe74:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800fe78:	f7f3 fd7a 	bl	8003970 <HAL_TIM_Base_Init>
 800fe7c:	b100      	cbz	r0, 800fe80 <main+0x7f8>
 800fe7e:	e7fe      	b.n	800fe7e <main+0x7f6>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800fe80:	a914      	add	r1, sp, #80	; 0x50
 800fe82:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe84:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800fe86:	f7f3 fe6d 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800fe8a:	b308      	cbz	r0, 800fed0 <main+0x848>
 800fe8c:	e7fe      	b.n	800fe8c <main+0x804>
 800fe8e:	bf00      	nop
 800fe90:	2000f1ec 	.word	0x2000f1ec
 800fe94:	2000ee40 	.word	0x2000ee40
 800fe98:	40015c04 	.word	0x40015c04
 800fe9c:	0002ee00 	.word	0x0002ee00
 800fea0:	2000ec7c 	.word	0x2000ec7c
 800fea4:	40015c24 	.word	0x40015c24
 800fea8:	2000ef38 	.word	0x2000ef38
 800feac:	40012c00 	.word	0x40012c00
 800feb0:	2000edf4 	.word	0x2000edf4
 800feb4:	2000ed50 	.word	0x2000ed50
 800feb8:	40003800 	.word	0x40003800
 800febc:	2000f20c 	.word	0x2000f20c
 800fec0:	40010000 	.word	0x40010000
 800fec4:	2000f2fc 	.word	0x2000f2fc
 800fec8:	2000effc 	.word	0x2000effc
 800fecc:	40000400 	.word	0x40000400
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800fed0:	4620      	mov	r0, r4
 800fed2:	f7f3 fd67 	bl	80039a4 <HAL_TIM_PWM_Init>
 800fed6:	b100      	cbz	r0, 800feda <main+0x852>
 800fed8:	e7fe      	b.n	800fed8 <main+0x850>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800feda:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fedc:	a910      	add	r1, sp, #64	; 0x40
 800fede:	485c      	ldr	r0, [pc, #368]	; (8010050 <main+0x9c8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fee0:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fee2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fee4:	f7f3 ff1c 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800fee8:	4602      	mov	r2, r0
 800feea:	b100      	cbz	r0, 800feee <main+0x866>
 800feec:	e7fe      	b.n	800feec <main+0x864>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800feee:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 0;
 800fef0:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fef2:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fef4:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fef6:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fef8:	4855      	ldr	r0, [pc, #340]	; (8010050 <main+0x9c8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fefa:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fefc:	f7f3 ff7a 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800ff00:	4605      	mov	r5, r0
 800ff02:	b100      	cbz	r0, 800ff06 <main+0x87e>
 800ff04:	e7fe      	b.n	800ff04 <main+0x87c>
  htim5.Instance = TIM5;
 800ff06:	4c53      	ldr	r4, [pc, #332]	; (8010054 <main+0x9cc>)
  HAL_TIM_MspPostInit(&htim3);
 800ff08:	4851      	ldr	r0, [pc, #324]	; (8010050 <main+0x9c8>)
 800ff0a:	f000 fba7 	bl	801065c <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 800ff0e:	4b52      	ldr	r3, [pc, #328]	; (8010058 <main+0x9d0>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ff10:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff12:	60a5      	str	r5, [r4, #8]
  htim5.Init.Period = 0;
 800ff14:	60e5      	str	r5, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff16:	6125      	str	r5, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff18:	61a5      	str	r5, [r4, #24]
  htim5.Init.Prescaler = 0;
 800ff1a:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ff1e:	f7f3 fd27 	bl	8003970 <HAL_TIM_Base_Init>
 800ff22:	b100      	cbz	r0, 800ff26 <main+0x89e>
 800ff24:	e7fe      	b.n	800ff24 <main+0x89c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff26:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ff2a:	a914      	add	r1, sp, #80	; 0x50
 800ff2c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff2e:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ff30:	f7f3 fe18 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800ff34:	b100      	cbz	r0, 800ff38 <main+0x8b0>
 800ff36:	e7fe      	b.n	800ff36 <main+0x8ae>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f7f3 fd33 	bl	80039a4 <HAL_TIM_PWM_Init>
 800ff3e:	b100      	cbz	r0, 800ff42 <main+0x8ba>
 800ff40:	e7fe      	b.n	800ff40 <main+0x8b8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff42:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ff44:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff46:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f7f3 fee9 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800ff4e:	b100      	cbz	r0, 800ff52 <main+0x8ca>
 800ff50:	e7fe      	b.n	800ff50 <main+0x8c8>
  sConfigOC.Pulse = 0;
 800ff52:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ff54:	220c      	movs	r2, #12
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ff56:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ff58:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ff5a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ff5c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ff5e:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ff60:	f7f3 ff48 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800ff64:	4605      	mov	r5, r0
 800ff66:	b100      	cbz	r0, 800ff6a <main+0x8e2>
 800ff68:	e7fe      	b.n	800ff68 <main+0x8e0>
  HAL_TIM_MspPostInit(&htim5);
 800ff6a:	4620      	mov	r0, r4
  htim8.Instance = TIM8;
 800ff6c:	4c3b      	ldr	r4, [pc, #236]	; (801005c <main+0x9d4>)
  HAL_TIM_MspPostInit(&htim5);
 800ff6e:	f000 fb75 	bl	801065c <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 800ff72:	4b3b      	ldr	r3, [pc, #236]	; (8010060 <main+0x9d8>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800ff74:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff76:	60a5      	str	r5, [r4, #8]
  htim8.Init.Period = 0;
 800ff78:	60e5      	str	r5, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff7a:	6125      	str	r5, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 800ff7c:	6165      	str	r5, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff7e:	61a5      	str	r5, [r4, #24]
  htim8.Init.Prescaler = 0;
 800ff80:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800ff84:	f7f3 fcf4 	bl	8003970 <HAL_TIM_Base_Init>
 800ff88:	b100      	cbz	r0, 800ff8c <main+0x904>
 800ff8a:	e7fe      	b.n	800ff8a <main+0x902>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ff8c:	a91b      	add	r1, sp, #108	; 0x6c
 800ff8e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff90:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ff92:	f7f3 fde7 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800ff96:	b100      	cbz	r0, 800ff9a <main+0x912>
 800ff98:	e7fe      	b.n	800ff98 <main+0x910>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff9a:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ff9c:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ff9e:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ffa0:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7f3 febc 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800ffa8:	b100      	cbz	r0, 800ffac <main+0x924>
 800ffaa:	e7fe      	b.n	800ffaa <main+0x922>
  htim12.Instance = TIM12;
 800ffac:	4c2d      	ldr	r4, [pc, #180]	; (8010064 <main+0x9dc>)
 800ffae:	4b2e      	ldr	r3, [pc, #184]	; (8010068 <main+0x9e0>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ffb0:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 800ffb2:	6023      	str	r3, [r4, #0]
  htim12.Init.Prescaler = 0;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	6063      	str	r3, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ffb8:	60a3      	str	r3, [r4, #8]
  htim12.Init.Period = 0;
 800ffba:	60e3      	str	r3, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ffbc:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ffbe:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800ffc0:	f7f3 fcf0 	bl	80039a4 <HAL_TIM_PWM_Init>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	b100      	cbz	r0, 800ffca <main+0x942>
 800ffc8:	e7fe      	b.n	800ffc8 <main+0x940>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ffca:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800ffcc:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ffce:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ffd0:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ffd2:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ffd4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ffd6:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ffd8:	f7f3 ff0c 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800ffdc:	4605      	mov	r5, r0
 800ffde:	b100      	cbz	r0, 800ffe2 <main+0x95a>
 800ffe0:	e7fe      	b.n	800ffe0 <main+0x958>
  HAL_TIM_MspPostInit(&htim12);
 800ffe2:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 800ffe4:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 800ffe8:	f000 fb38 	bl	801065c <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ffec:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 800ffee:	481f      	ldr	r0, [pc, #124]	; (801006c <main+0x9e4>)
  huart1.Init.BaudRate = 115200;
 800fff0:	4b1f      	ldr	r3, [pc, #124]	; (8010070 <main+0x9e8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800fff2:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800fff4:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800fff6:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fff8:	6144      	str	r4, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fffa:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fffc:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fffe:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010000:	6245      	str	r5, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8010002:	e880 0048 	stmia.w	r0, {r3, r6}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010006:	f7f4 f96c 	bl	80042e2 <HAL_UART_Init>
 801000a:	b100      	cbz	r0, 801000e <main+0x986>
 801000c:	e7fe      	b.n	801000c <main+0x984>
  huart6.Instance = USART6;
 801000e:	4b19      	ldr	r3, [pc, #100]	; (8010074 <main+0x9ec>)
 8010010:	4a19      	ldr	r2, [pc, #100]	; (8010078 <main+0x9f0>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8010012:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8010014:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8010016:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010018:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801001a:	61d8      	str	r0, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801001c:	6218      	str	r0, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801001e:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8010020:	4618      	mov	r0, r3
  huart6.Init.Mode = UART_MODE_TX_RX;
 8010022:	615c      	str	r4, [r3, #20]
  huart6.Init.BaudRate = 115200;
 8010024:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8010028:	f7f4 f95b 	bl	80042e2 <HAL_UART_Init>
 801002c:	4606      	mov	r6, r0
 801002e:	b100      	cbz	r0, 8010032 <main+0x9aa>
 8010030:	e7fe      	b.n	8010030 <main+0x9a8>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8010032:	4d12      	ldr	r5, [pc, #72]	; (801007c <main+0x9f4>)
 8010034:	ac1b      	add	r4, sp, #108	; 0x6c
 8010036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801003a:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801003c:	4631      	mov	r1, r6
 801003e:	a81b      	add	r0, sp, #108	; 0x6c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8010040:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8010042:	f7f5 fc63 	bl	800590c <osThreadCreate>
 8010046:	4b0e      	ldr	r3, [pc, #56]	; (8010080 <main+0x9f8>)
 8010048:	6018      	str	r0, [r3, #0]
  osKernelStart();
 801004a:	f7f5 fc53 	bl	80058f4 <osKernelStart>
 801004e:	e7fe      	b.n	801004e <main+0x9c6>
 8010050:	2000effc 	.word	0x2000effc
 8010054:	2000efbc 	.word	0x2000efbc
 8010058:	40000c00 	.word	0x40000c00
 801005c:	2000edb4 	.word	0x2000edb4
 8010060:	40010400 	.word	0x40010400
 8010064:	2000f33c 	.word	0x2000f33c
 8010068:	40001800 	.word	0x40001800
 801006c:	2000f17c 	.word	0x2000f17c
 8010070:	40011000 	.word	0x40011000
 8010074:	2000f24c 	.word	0x2000f24c
 8010078:	40011400 	.word	0x40011400
 801007c:	08011cf4 	.word	0x08011cf4
 8010080:	2000ed00 	.word	0x2000ed00

08010084 <tcpecho_init>:
{
//  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
//  osThreadDef(cobaEcho, tcpecho_thread, osPriorityNormal, 0, 4096);
//  osThreadDef(netconnTask, tcpecho_thread, osPriorityNormal, 0, 4096);
//  netconnTask = osThreadCreate(osThread(cobaEcho), NULL);
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8010084:	2305      	movs	r3, #5
{
 8010086:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8010088:	2200      	movs	r2, #0
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	4904      	ldr	r1, [pc, #16]	; (80100a0 <tcpecho_init+0x1c>)
 801008e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010092:	4804      	ldr	r0, [pc, #16]	; (80100a4 <tcpecho_init+0x20>)
 8010094:	f7fe fff5 	bl	800f082 <sys_thread_new>
}
 8010098:	b003      	add	sp, #12
 801009a:	f85d fb04 	ldr.w	pc, [sp], #4
 801009e:	bf00      	nop
 80100a0:	0800f4ed 	.word	0x0800f4ed
 80100a4:	08013f2e 	.word	0x08013f2e

080100a8 <StartDefaultTask>:
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80100a8:	b508      	push	{r3, lr}
  /* init code for FATFS */
//  MX_FATFS_Init();

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80100aa:	f000 fd15 	bl	8010ad8 <MX_USB_HOST_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 80100ae:	f7ff f9e1 	bl	800f474 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
  tcpecho_init();
 80100b2:	f7ff ffe7 	bl	8010084 <tcpecho_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80100b6:	2001      	movs	r0, #1
 80100b8:	f7f5 fc40 	bl	800593c <osDelay>
 80100bc:	e7fb      	b.n	80100b6 <StartDefaultTask+0xe>
	...

080100c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80100c0:	6802      	ldr	r2, [r0, #0]
 80100c2:	4b03      	ldr	r3, [pc, #12]	; (80100d0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d101      	bne.n	80100cc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80100c8:	f7f0 ba86 	b.w	80005d8 <HAL_IncTick>
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	40001000 	.word	0x40001000

080100d4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80100d4:	e7fe      	b.n	80100d4 <_Error_Handler>
	...

080100d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80100d8:	4b21      	ldr	r3, [pc, #132]	; (8010160 <HAL_MspInit+0x88>)
{
 80100da:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80100dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80100de:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80100e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80100e4:	641a      	str	r2, [r3, #64]	; 0x40
 80100e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100e8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80100ec:	9200      	str	r2, [sp, #0]
 80100ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80100f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100f6:	645a      	str	r2, [r3, #68]	; 0x44
 80100f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100fe:	9301      	str	r3, [sp, #4]
 8010100:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010102:	f7f0 fbd1 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8010106:	2200      	movs	r2, #0
 8010108:	f06f 000b 	mvn.w	r0, #11
 801010c:	4611      	mov	r1, r2
 801010e:	f7f0 fbdd 	bl	80008cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8010112:	2200      	movs	r2, #0
 8010114:	f06f 000a 	mvn.w	r0, #10
 8010118:	4611      	mov	r1, r2
 801011a:	f7f0 fbd7 	bl	80008cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801011e:	2200      	movs	r2, #0
 8010120:	f06f 0009 	mvn.w	r0, #9
 8010124:	4611      	mov	r1, r2
 8010126:	f7f0 fbd1 	bl	80008cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801012a:	2200      	movs	r2, #0
 801012c:	f06f 0004 	mvn.w	r0, #4
 8010130:	4611      	mov	r1, r2
 8010132:	f7f0 fbcb 	bl	80008cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8010136:	2200      	movs	r2, #0
 8010138:	f06f 0003 	mvn.w	r0, #3
 801013c:	4611      	mov	r1, r2
 801013e:	f7f0 fbc5 	bl	80008cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010142:	2200      	movs	r2, #0
 8010144:	210f      	movs	r1, #15
 8010146:	f06f 0001 	mvn.w	r0, #1
 801014a:	f7f0 fbbf 	bl	80008cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801014e:	2200      	movs	r2, #0
 8010150:	210f      	movs	r1, #15
 8010152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010156:	f7f0 fbb9 	bl	80008cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801015a:	b003      	add	sp, #12
 801015c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010160:	40023800 	.word	0x40023800

08010164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8010164:	6802      	ldr	r2, [r0, #0]
 8010166:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <HAL_ADC_MspInit+0x4c>)
 8010168:	429a      	cmp	r2, r3
{
 801016a:	b530      	push	{r4, r5, lr}
 801016c:	b087      	sub	sp, #28
  if(hadc->Instance==ADC3)
 801016e:	d11d      	bne.n	80101ac <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8010170:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010174:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010176:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010178:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 801017a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801017c:	480d      	ldr	r0, [pc, #52]	; (80101b4 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 801017e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010182:	645a      	str	r2, [r3, #68]	; 0x44
 8010184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010186:	9502      	str	r5, [sp, #8]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8010188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801018c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC3_CLK_ENABLE();
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8010192:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8010196:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010198:	f7f1 f94c 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 801019c:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 801019e:	a901      	add	r1, sp, #4
 80101a0:	4805      	ldr	r0, [pc, #20]	; (80101b8 <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80101a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80101a4:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101a6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80101a8:	f7f1 f944 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80101ac:	b007      	add	sp, #28
 80101ae:	bd30      	pop	{r4, r5, pc}
 80101b0:	40012200 	.word	0x40012200
 80101b4:	40021400 	.word	0x40021400
 80101b8:	40020000 	.word	0x40020000

080101bc <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 80101bc:	6802      	ldr	r2, [r0, #0]
{
 80101be:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80101c0:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <HAL_CRC_MspInit+0x28>)
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d10b      	bne.n	80101de <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80101c6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80101ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80101d2:	631a      	str	r2, [r3, #48]	; 0x30
 80101d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80101da:	9301      	str	r3, [sp, #4]
 80101dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80101de:	b002      	add	sp, #8
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	40023000 	.word	0x40023000

080101e8 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdcmi->Instance==DCMI)
 80101e8:	6802      	ldr	r2, [r0, #0]
 80101ea:	4b24      	ldr	r3, [pc, #144]	; (801027c <HAL_DCMI_MspInit+0x94>)
 80101ec:	429a      	cmp	r2, r3
{
 80101ee:	b570      	push	{r4, r5, r6, lr}
 80101f0:	b086      	sub	sp, #24
  if(hdcmi->Instance==DCMI)
 80101f2:	d140      	bne.n	8010276 <HAL_DCMI_MspInit+0x8e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80101f4:	4b22      	ldr	r3, [pc, #136]	; (8010280 <HAL_DCMI_MspInit+0x98>)
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101f6:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101f8:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80101fa:	250d      	movs	r5, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 80101fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80101fe:	a901      	add	r1, sp, #4
 8010200:	4820      	ldr	r0, [pc, #128]	; (8010284 <HAL_DCMI_MspInit+0x9c>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8010202:	f042 0201 	orr.w	r2, r2, #1
 8010206:	635a      	str	r2, [r3, #52]	; 0x34
 8010208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801020a:	9602      	str	r6, [sp, #8]
    __HAL_RCC_DCMI_CLK_ENABLE();
 801020c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010210:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010212:	9404      	str	r4, [sp, #16]
    __HAL_RCC_DCMI_CLK_ENABLE();
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8010218:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801021a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 801021c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801021e:	f7f1 f909 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8010222:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8010224:	a901      	add	r1, sp, #4
 8010226:	4818      	ldr	r0, [pc, #96]	; (8010288 <HAL_DCMI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8010228:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801022a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801022e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8010230:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8010232:	f7f1 f8ff 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8010236:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 801023a:	a901      	add	r1, sp, #4
 801023c:	4813      	ldr	r0, [pc, #76]	; (801028c <HAL_DCMI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 801023e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010240:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010242:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010244:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8010246:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8010248:	f7f1 f8f4 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 801024c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010250:	a901      	add	r1, sp, #4
 8010252:	480f      	ldr	r0, [pc, #60]	; (8010290 <HAL_DCMI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8010254:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010256:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010258:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801025a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801025c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801025e:	f7f1 f8e9 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8010262:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010264:	a901      	add	r1, sp, #4
 8010266:	480b      	ldr	r0, [pc, #44]	; (8010294 <HAL_DCMI_MspInit+0xac>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8010268:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801026a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801026c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801026e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8010270:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010272:	f7f1 f8df 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8010276:	b006      	add	sp, #24
 8010278:	bd70      	pop	{r4, r5, r6, pc}
 801027a:	bf00      	nop
 801027c:	50050000 	.word	0x50050000
 8010280:	40023800 	.word	0x40023800
 8010284:	40021000 	.word	0x40021000
 8010288:	40020c00 	.word	0x40020c00
 801028c:	40021800 	.word	0x40021800
 8010290:	40021c00 	.word	0x40021c00
 8010294:	40020000 	.word	0x40020000

08010298 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8010298:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801029a:	4b0d      	ldr	r3, [pc, #52]	; (80102d0 <HAL_DMA2D_MspInit+0x38>)
 801029c:	6802      	ldr	r2, [r0, #0]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d112      	bne.n	80102c8 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80102a2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80102a6:	205a      	movs	r0, #90	; 0x5a
 80102a8:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80102aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80102b0:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80102b2:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80102b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80102be:	f7f0 fb05 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80102c2:	205a      	movs	r0, #90	; 0x5a
 80102c4:	f7f0 fb3a 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80102c8:	b003      	add	sp, #12
 80102ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80102ce:	bf00      	nop
 80102d0:	4002b000 	.word	0x4002b000

080102d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80102d4:	6803      	ldr	r3, [r0, #0]
 80102d6:	4a1f      	ldr	r2, [pc, #124]	; (8010354 <HAL_I2C_MspInit+0x80>)
 80102d8:	4293      	cmp	r3, r2
{
 80102da:	b500      	push	{lr}
 80102dc:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 80102de:	d11b      	bne.n	8010318 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80102e0:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102e4:	a903      	add	r1, sp, #12
 80102e6:	481c      	ldr	r0, [pc, #112]	; (8010358 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80102e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80102ea:	2312      	movs	r3, #18
 80102ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80102ee:	2301      	movs	r3, #1
 80102f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102f2:	2300      	movs	r3, #0
 80102f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80102f6:	2304      	movs	r3, #4
 80102f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102fa:	f7f1 f89b 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80102fe:	4b17      	ldr	r3, [pc, #92]	; (801035c <HAL_I2C_MspInit+0x88>)
 8010300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010302:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8010306:	641a      	str	r2, [r3, #64]	; 0x40
 8010308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801030a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801030e:	9301      	str	r3, [sp, #4]
 8010310:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8010312:	b009      	add	sp, #36	; 0x24
 8010314:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hi2c->Instance==I2C3)
 8010318:	4a11      	ldr	r2, [pc, #68]	; (8010360 <HAL_I2C_MspInit+0x8c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d1f9      	bne.n	8010312 <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 801031e:	f44f 73c0 	mov.w	r3, #384	; 0x180
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010322:	a903      	add	r1, sp, #12
 8010324:	480f      	ldr	r0, [pc, #60]	; (8010364 <HAL_I2C_MspInit+0x90>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8010326:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010328:	2312      	movs	r3, #18
 801032a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801032c:	2301      	movs	r3, #1
 801032e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010330:	2303      	movs	r3, #3
 8010332:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8010334:	2304      	movs	r3, #4
 8010336:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010338:	f7f1 f87c 	bl	8001434 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <HAL_I2C_MspInit+0x88>)
 801033e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010340:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010344:	641a      	str	r2, [r3, #64]	; 0x40
 8010346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801034c:	9302      	str	r3, [sp, #8]
 801034e:	9b02      	ldr	r3, [sp, #8]
}
 8010350:	e7df      	b.n	8010312 <HAL_I2C_MspInit+0x3e>
 8010352:	bf00      	nop
 8010354:	40005400 	.word	0x40005400
 8010358:	40020400 	.word	0x40020400
 801035c:	40023800 	.word	0x40023800
 8010360:	40005c00 	.word	0x40005c00
 8010364:	40021c00 	.word	0x40021c00

08010368 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8010368:	6802      	ldr	r2, [r0, #0]
 801036a:	4b29      	ldr	r3, [pc, #164]	; (8010410 <HAL_LTDC_MspInit+0xa8>)
 801036c:	429a      	cmp	r2, r3
{
 801036e:	b570      	push	{r4, r5, r6, lr}
 8010370:	b086      	sub	sp, #24
  if(hltdc->Instance==LTDC)
 8010372:	d14b      	bne.n	801040c <HAL_LTDC_MspInit+0xa4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8010374:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010378:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801037a:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801037c:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 801037e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8010380:	a901      	add	r1, sp, #4
 8010382:	4824      	ldr	r0, [pc, #144]	; (8010414 <HAL_LTDC_MspInit+0xac>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8010384:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010388:	645a      	str	r2, [r3, #68]	; 0x44
 801038a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801038c:	9502      	str	r5, [sp, #8]
    __HAL_RCC_LTDC_CLK_ENABLE();
 801038e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010392:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010394:	9404      	str	r4, [sp, #16]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 801039a:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801039c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 801039e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80103a0:	f7f1 f848 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80103a4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80103a8:	a901      	add	r1, sp, #4
 80103aa:	481b      	ldr	r0, [pc, #108]	; (8010418 <HAL_LTDC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80103ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103ae:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103b0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103b2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80103b4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80103b6:	f7f1 f83d 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80103ba:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80103bc:	a901      	add	r1, sp, #4
 80103be:	4817      	ldr	r0, [pc, #92]	; (801041c <HAL_LTDC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80103c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103c2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103c4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103c6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80103c8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80103ca:	f7f1 f833 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80103ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80103d2:	a901      	add	r1, sp, #4
 80103d4:	4812      	ldr	r0, [pc, #72]	; (8010420 <HAL_LTDC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80103d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80103d8:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103da:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80103dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103e0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80103e2:	f7f1 f827 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80103e6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80103ea:	a901      	add	r1, sp, #4
 80103ec:	480d      	ldr	r0, [pc, #52]	; (8010424 <HAL_LTDC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80103ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103f0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103f2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103f4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80103f6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80103f8:	f7f1 f81c 	bl	8001434 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80103fc:	2058      	movs	r0, #88	; 0x58
 80103fe:	4622      	mov	r2, r4
 8010400:	2105      	movs	r1, #5
 8010402:	f7f0 fa63 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8010406:	2058      	movs	r0, #88	; 0x58
 8010408:	f7f0 fa98 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801040c:	b006      	add	sp, #24
 801040e:	bd70      	pop	{r4, r5, r6, pc}
 8010410:	40016800 	.word	0x40016800
 8010414:	40021000 	.word	0x40021000
 8010418:	40022400 	.word	0x40022400
 801041c:	40022800 	.word	0x40022800
 8010420:	40021800 	.word	0x40021800
 8010424:	40022000 	.word	0x40022000

08010428 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hqspi->Instance==QUADSPI)
 8010428:	6802      	ldr	r2, [r0, #0]
 801042a:	4b23      	ldr	r3, [pc, #140]	; (80104b8 <HAL_QSPI_MspInit+0x90>)
 801042c:	429a      	cmp	r2, r3
{
 801042e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010432:	b086      	sub	sp, #24
  if(hqspi->Instance==QUADSPI)
 8010434:	d13d      	bne.n	80104b2 <HAL_QSPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010436:	4b21      	ldr	r3, [pc, #132]	; (80104bc <HAL_QSPI_MspInit+0x94>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8010438:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801043c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801043e:	2500      	movs	r5, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010442:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8010444:	2709      	movs	r7, #9
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8010446:	eb0d 0108 	add.w	r1, sp, r8
    __HAL_RCC_QSPI_CLK_ENABLE();
 801044a:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 801044e:	481c      	ldr	r0, [pc, #112]	; (80104c0 <HAL_QSPI_MspInit+0x98>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010450:	639a      	str	r2, [r3, #56]	; 0x38
 8010452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8010454:	f8cd 8004 	str.w	r8, [sp, #4]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010458:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801045c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801045e:	9503      	str	r5, [sp, #12]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010464:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8010466:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8010468:	f7f0 ffe4 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 801046c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801046e:	eb0d 0108 	add.w	r1, sp, r8
 8010472:	4814      	ldr	r0, [pc, #80]	; (80104c4 <HAL_QSPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8010474:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8010476:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010478:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 801047a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801047c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801047e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8010480:	f7f0 ffd8 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010484:	eb0d 0108 	add.w	r1, sp, r8
 8010488:	480e      	ldr	r0, [pc, #56]	; (80104c4 <HAL_QSPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801048a:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801048e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010490:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010492:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8010494:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010496:	f7f0 ffcd 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 801049a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801049e:	eb0d 0108 	add.w	r1, sp, r8
 80104a2:	4809      	ldr	r0, [pc, #36]	; (80104c8 <HAL_QSPI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80104a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104a6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104a8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104aa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80104ac:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80104ae:	f7f0 ffc1 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80104b2:	b006      	add	sp, #24
 80104b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b8:	a0001000 	.word	0xa0001000
 80104bc:	40023800 	.word	0x40023800
 80104c0:	40021000 	.word	0x40021000
 80104c4:	40020400 	.word	0x40020400
 80104c8:	40020c00 	.word	0x40020c00

080104cc <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80104cc:	6802      	ldr	r2, [r0, #0]
 80104ce:	4b04      	ldr	r3, [pc, #16]	; (80104e0 <HAL_RTC_MspInit+0x14>)
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d104      	bne.n	80104de <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80104d4:	4a03      	ldr	r2, [pc, #12]	; (80104e4 <HAL_RTC_MspInit+0x18>)
 80104d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80104d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104dc:	6713      	str	r3, [r2, #112]	; 0x70
 80104de:	4770      	bx	lr
 80104e0:	40002800 	.word	0x40002800
 80104e4:	40023800 	.word	0x40023800

080104e8 <HAL_SPDIFRX_MspInit>:
  }

}

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80104e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspdifrx->Instance==SPDIFRX)
 80104ea:	6803      	ldr	r3, [r0, #0]
 80104ec:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80104f0:	d117      	bne.n	8010522 <HAL_SPDIFRX_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80104f2:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80104f6:	a901      	add	r1, sp, #4
 80104f8:	480b      	ldr	r0, [pc, #44]	; (8010528 <HAL_SPDIFRX_MspInit+0x40>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80104fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010500:	641a      	str	r2, [r3, #64]	; 0x40
 8010502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 801050c:	2380      	movs	r3, #128	; 0x80
 801050e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010510:	2302      	movs	r3, #2
 8010512:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010514:	2300      	movs	r3, #0
 8010516:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010518:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 801051a:	2308      	movs	r3, #8
 801051c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 801051e:	f7f0 ff89 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8010522:	b007      	add	sp, #28
 8010524:	f85d fb04 	ldr.w	pc, [sp], #4
 8010528:	40020c00 	.word	0x40020c00

0801052c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 801052c:	6802      	ldr	r2, [r0, #0]
 801052e:	4b14      	ldr	r3, [pc, #80]	; (8010580 <HAL_SPI_MspInit+0x54>)
 8010530:	429a      	cmp	r2, r3
{
 8010532:	b570      	push	{r4, r5, r6, lr}
 8010534:	b086      	sub	sp, #24
  if(hspi->Instance==SPI2)
 8010536:	d121      	bne.n	801057c <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010538:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801053c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 801053e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010540:	2605      	movs	r6, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8010544:	a901      	add	r1, sp, #4
 8010546:	480f      	ldr	r0, [pc, #60]	; (8010584 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801054c:	641a      	str	r2, [r3, #64]	; 0x40
 801054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8010550:	9501      	str	r5, [sp, #4]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010556:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010558:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI2_CLK_ENABLE();
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801055e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010560:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8010562:	f7f0 ff67 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8010566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801056a:	a901      	add	r1, sp, #4
 801056c:	4806      	ldr	r0, [pc, #24]	; (8010588 <HAL_SPI_MspInit+0x5c>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801056e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010570:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010572:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010574:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010576:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010578:	f7f0 ff5c 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801057c:	b006      	add	sp, #24
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	40003800 	.word	0x40003800
 8010584:	40022000 	.word	0x40022000
 8010588:	40020400 	.word	0x40020400

0801058c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 801058c:	6803      	ldr	r3, [r0, #0]
{
 801058e:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8010590:	4a23      	ldr	r2, [pc, #140]	; (8010620 <HAL_TIM_Base_MspInit+0x94>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d10b      	bne.n	80105ae <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8010596:	4b23      	ldr	r3, [pc, #140]	; (8010624 <HAL_TIM_Base_MspInit+0x98>)
 8010598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801059a:	f042 0201 	orr.w	r2, r2, #1
 801059e:	645a      	str	r2, [r3, #68]	; 0x44
 80105a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105a2:	f003 0301 	and.w	r3, r3, #1
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80105aa:	b006      	add	sp, #24
 80105ac:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 80105ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105b2:	d10b      	bne.n	80105cc <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80105b4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80105b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105ba:	f042 0201 	orr.w	r2, r2, #1
 80105be:	641a      	str	r2, [r3, #64]	; 0x40
 80105c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c2:	f003 0301 	and.w	r3, r3, #1
 80105c6:	9302      	str	r3, [sp, #8]
 80105c8:	9b02      	ldr	r3, [sp, #8]
 80105ca:	e7ee      	b.n	80105aa <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 80105cc:	4a16      	ldr	r2, [pc, #88]	; (8010628 <HAL_TIM_Base_MspInit+0x9c>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d10a      	bne.n	80105e8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80105d2:	4b14      	ldr	r3, [pc, #80]	; (8010624 <HAL_TIM_Base_MspInit+0x98>)
 80105d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105d6:	f042 0202 	orr.w	r2, r2, #2
 80105da:	641a      	str	r2, [r3, #64]	; 0x40
 80105dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105de:	f003 0302 	and.w	r3, r3, #2
 80105e2:	9303      	str	r3, [sp, #12]
 80105e4:	9b03      	ldr	r3, [sp, #12]
 80105e6:	e7e0      	b.n	80105aa <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 80105e8:	4a10      	ldr	r2, [pc, #64]	; (801062c <HAL_TIM_Base_MspInit+0xa0>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d10a      	bne.n	8010604 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80105ee:	4b0d      	ldr	r3, [pc, #52]	; (8010624 <HAL_TIM_Base_MspInit+0x98>)
 80105f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105f2:	f042 0208 	orr.w	r2, r2, #8
 80105f6:	641a      	str	r2, [r3, #64]	; 0x40
 80105f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105fa:	f003 0308 	and.w	r3, r3, #8
 80105fe:	9304      	str	r3, [sp, #16]
 8010600:	9b04      	ldr	r3, [sp, #16]
 8010602:	e7d2      	b.n	80105aa <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8010604:	4a0a      	ldr	r2, [pc, #40]	; (8010630 <HAL_TIM_Base_MspInit+0xa4>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d1cf      	bne.n	80105aa <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801060a:	4b06      	ldr	r3, [pc, #24]	; (8010624 <HAL_TIM_Base_MspInit+0x98>)
 801060c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801060e:	f042 0202 	orr.w	r2, r2, #2
 8010612:	645a      	str	r2, [r3, #68]	; 0x44
 8010614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010616:	f003 0302 	and.w	r3, r3, #2
 801061a:	9305      	str	r3, [sp, #20]
 801061c:	9b05      	ldr	r3, [sp, #20]
}
 801061e:	e7c4      	b.n	80105aa <HAL_TIM_Base_MspInit+0x1e>
 8010620:	40010000 	.word	0x40010000
 8010624:	40023800 	.word	0x40023800
 8010628:	40000400 	.word	0x40000400
 801062c:	40000c00 	.word	0x40000c00
 8010630:	40010400 	.word	0x40010400

08010634 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 8010634:	6802      	ldr	r2, [r0, #0]
{
 8010636:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 8010638:	4b07      	ldr	r3, [pc, #28]	; (8010658 <HAL_TIM_PWM_MspInit+0x24>)
 801063a:	429a      	cmp	r2, r3
 801063c:	d10a      	bne.n	8010654 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 801063e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8010642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010648:	641a      	str	r2, [r3, #64]	; 0x40
 801064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8010654:	b002      	add	sp, #8
 8010656:	4770      	bx	lr
 8010658:	40001800 	.word	0x40001800

0801065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801065c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 801065e:	6803      	ldr	r3, [r0, #0]
 8010660:	4a22      	ldr	r2, [pc, #136]	; (80106ec <HAL_TIM_MspPostInit+0x90>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d110      	bne.n	8010688 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8010666:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 801066a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801066c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801066e:	a901      	add	r1, sp, #4
 8010670:	481f      	ldr	r0, [pc, #124]	; (80106f0 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010672:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010674:	2300      	movs	r3, #0
 8010676:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010678:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801067a:	2301      	movs	r3, #1
 801067c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 801067e:	f7f0 fed9 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8010682:	b007      	add	sp, #28
 8010684:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 8010688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801068c:	d102      	bne.n	8010694 <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 801068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010692:	e7ea      	b.n	801066a <HAL_TIM_MspPostInit+0xe>
  else if(htim->Instance==TIM3)
 8010694:	4a17      	ldr	r2, [pc, #92]	; (80106f4 <HAL_TIM_MspPostInit+0x98>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d10a      	bne.n	80106b0 <HAL_TIM_MspPostInit+0x54>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801069a:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801069c:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 801069e:	a901      	add	r1, sp, #4
 80106a0:	4815      	ldr	r0, [pc, #84]	; (80106f8 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80106a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106aa:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	e7e6      	b.n	801067e <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM5)
 80106b0:	4a12      	ldr	r2, [pc, #72]	; (80106fc <HAL_TIM_MspPostInit+0xa0>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d10a      	bne.n	80106cc <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80106b6:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106b8:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80106ba:	a901      	add	r1, sp, #4
 80106bc:	4810      	ldr	r0, [pc, #64]	; (8010700 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80106be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106c0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106c2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106c6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80106c8:	9305      	str	r3, [sp, #20]
 80106ca:	e7d8      	b.n	801067e <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM12)
 80106cc:	4a0d      	ldr	r2, [pc, #52]	; (8010704 <HAL_TIM_MspPostInit+0xa8>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d1d7      	bne.n	8010682 <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80106d2:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80106d4:	a901      	add	r1, sp, #4
 80106d6:	480c      	ldr	r0, [pc, #48]	; (8010708 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80106d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106da:	2302      	movs	r3, #2
 80106dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106de:	2300      	movs	r3, #0
 80106e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80106e4:	2309      	movs	r3, #9
 80106e6:	9305      	str	r3, [sp, #20]
 80106e8:	e7c9      	b.n	801067e <HAL_TIM_MspPostInit+0x22>
 80106ea:	bf00      	nop
 80106ec:	40010000 	.word	0x40010000
 80106f0:	40020000 	.word	0x40020000
 80106f4:	40000400 	.word	0x40000400
 80106f8:	40020400 	.word	0x40020400
 80106fc:	40000c00 	.word	0x40000c00
 8010700:	40022000 	.word	0x40022000
 8010704:	40001800 	.word	0x40001800
 8010708:	40021c00 	.word	0x40021c00

0801070c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 801070c:	6803      	ldr	r3, [r0, #0]
 801070e:	4a21      	ldr	r2, [pc, #132]	; (8010794 <HAL_UART_MspInit+0x88>)
 8010710:	4293      	cmp	r3, r2
{
 8010712:	b570      	push	{r4, r5, r6, lr}
 8010714:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8010716:	d123      	bne.n	8010760 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010718:	4b1f      	ldr	r3, [pc, #124]	; (8010798 <HAL_UART_MspInit+0x8c>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801071a:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801071c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801071e:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8010720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8010722:	a903      	add	r1, sp, #12
 8010724:	481d      	ldr	r0, [pc, #116]	; (801079c <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8010726:	f042 0210 	orr.w	r2, r2, #16
 801072a:	645a      	str	r2, [r3, #68]	; 0x44
 801072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801072e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8010730:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010734:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010736:	9406      	str	r4, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8010738:	9301      	str	r3, [sp, #4]
 801073a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 801073c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801073e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8010740:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8010742:	f7f0 fe77 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8010746:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 801074a:	a903      	add	r1, sp, #12
 801074c:	4814      	ldr	r0, [pc, #80]	; (80107a0 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 801074e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010750:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010752:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010754:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010756:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010758:	f7f0 fe6c 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 801075c:	b008      	add	sp, #32
 801075e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 8010760:	4a10      	ldr	r2, [pc, #64]	; (80107a4 <HAL_UART_MspInit+0x98>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d1fa      	bne.n	801075c <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART6_CLK_ENABLE();
 8010766:	4b0c      	ldr	r3, [pc, #48]	; (8010798 <HAL_UART_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010768:	a903      	add	r1, sp, #12
 801076a:	480f      	ldr	r0, [pc, #60]	; (80107a8 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 801076c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801076e:	f042 0220 	orr.w	r2, r2, #32
 8010772:	645a      	str	r2, [r3, #68]	; 0x44
 8010774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010776:	f003 0320 	and.w	r3, r3, #32
 801077a:	9302      	str	r3, [sp, #8]
 801077c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 801077e:	23c0      	movs	r3, #192	; 0xc0
 8010780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010782:	2302      	movs	r3, #2
 8010784:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010786:	2300      	movs	r3, #0
 8010788:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801078a:	2303      	movs	r3, #3
 801078c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801078e:	2308      	movs	r3, #8
 8010790:	9307      	str	r3, [sp, #28]
 8010792:	e7e1      	b.n	8010758 <HAL_UART_MspInit+0x4c>
 8010794:	40011000 	.word	0x40011000
 8010798:	40023800 	.word	0x40023800
 801079c:	40020400 	.word	0x40020400
 80107a0:	40020000 	.word	0x40020000
 80107a4:	40011400 	.word	0x40011400
 80107a8:	40020800 	.word	0x40020800

080107ac <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80107ac:	4b2b      	ldr	r3, [pc, #172]	; (801085c <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80107ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 80107b0:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80107b2:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 80107b4:	2c00      	cmp	r4, #0
 80107b6:	d14e      	bne.n	8010856 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 80107b8:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107ba:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107bc:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80107be:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 80107c0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80107c2:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80107c4:	4b26      	ldr	r3, [pc, #152]	; (8010860 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80107c6:	4827      	ldr	r0, [pc, #156]	; (8010864 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80107c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107ca:	f042 0201 	orr.w	r2, r2, #1
 80107ce:	639a      	str	r2, [r3, #56]	; 0x38
 80107d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107d2:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80107d4:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107da:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80107e0:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80107e4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80107e6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80107e8:	f7f0 fe24 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80107ec:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80107f0:	a901      	add	r1, sp, #4
 80107f2:	481d      	ldr	r0, [pc, #116]	; (8010868 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80107f4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107f6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107f8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107fa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80107fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80107fe:	f7f0 fe19 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8010802:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010806:	a901      	add	r1, sp, #4
 8010808:	4818      	ldr	r0, [pc, #96]	; (801086c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 801080a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801080c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801080e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010810:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010812:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010814:	f7f0 fe0e 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8010818:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801081c:	a901      	add	r1, sp, #4
 801081e:	4814      	ldr	r0, [pc, #80]	; (8010870 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8010820:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010822:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010824:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010826:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010828:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801082a:	f7f0 fe03 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 801082e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010830:	a901      	add	r1, sp, #4
 8010832:	4810      	ldr	r0, [pc, #64]	; (8010874 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8010834:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010836:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010838:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801083a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801083c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801083e:	f7f0 fdf9 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8010842:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8010844:	a901      	add	r1, sp, #4
 8010846:	480c      	ldr	r0, [pc, #48]	; (8010878 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8010848:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801084a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801084c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801084e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010850:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8010852:	f7f0 fdef 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8010856:	b007      	add	sp, #28
 8010858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801085a:	bf00      	nop
 801085c:	200083a8 	.word	0x200083a8
 8010860:	40023800 	.word	0x40023800
 8010864:	40021000 	.word	0x40021000
 8010868:	40021800 	.word	0x40021800
 801086c:	40020c00 	.word	0x40020c00
 8010870:	40021400 	.word	0x40021400
 8010874:	40021c00 	.word	0x40021c00
 8010878:	40020800 	.word	0x40020800

0801087c <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 801087c:	6802      	ldr	r2, [r0, #0]
 801087e:	4b22      	ldr	r3, [pc, #136]	; (8010908 <HAL_SAI_MspInit+0x8c>)
 8010880:	429a      	cmp	r2, r3
{
 8010882:	b510      	push	{r4, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8010888:	d11b      	bne.n	80108c2 <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 801088a:	4b20      	ldr	r3, [pc, #128]	; (801090c <HAL_SAI_MspInit+0x90>)
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	b94a      	cbnz	r2, 80108a4 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8010890:	491f      	ldr	r1, [pc, #124]	; (8010910 <HAL_SAI_MspInit+0x94>)
 8010892:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8010894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010898:	6448      	str	r0, [r1, #68]	; 0x44
 801089a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801089c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80108a0:	9101      	str	r1, [sp, #4]
 80108a2:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 80108a4:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80108a6:	a903      	add	r1, sp, #12
 80108a8:	481a      	ldr	r0, [pc, #104]	; (8010914 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 80108aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80108ac:	23f0      	movs	r3, #240	; 0xf0
 80108ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108b0:	2302      	movs	r3, #2
 80108b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80108ba:	230a      	movs	r3, #10
 80108bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80108be:	f7f0 fdb9 	bl	8001434 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80108c2:	6822      	ldr	r2, [r4, #0]
 80108c4:	4b14      	ldr	r3, [pc, #80]	; (8010918 <HAL_SAI_MspInit+0x9c>)
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d11c      	bne.n	8010904 <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <HAL_SAI_MspInit+0x90>)
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	b94a      	cbnz	r2, 80108e4 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80108d0:	490f      	ldr	r1, [pc, #60]	; (8010910 <HAL_SAI_MspInit+0x94>)
 80108d2:	6c48      	ldr	r0, [r1, #68]	; 0x44
 80108d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80108d8:	6448      	str	r0, [r1, #68]	; 0x44
 80108da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80108dc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80108e0:	9102      	str	r1, [sp, #8]
 80108e2:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 80108e4:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80108e6:	a903      	add	r1, sp, #12
 80108e8:	480c      	ldr	r0, [pc, #48]	; (801091c <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 80108ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80108ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108f2:	2302      	movs	r3, #2
 80108f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80108fc:	230a      	movs	r3, #10
 80108fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8010900:	f7f0 fd98 	bl	8001434 <HAL_GPIO_Init>

    }
}
 8010904:	b008      	add	sp, #32
 8010906:	bd10      	pop	{r4, pc}
 8010908:	40015c04 	.word	0x40015c04
 801090c:	200083ac 	.word	0x200083ac
 8010910:	40023800 	.word	0x40023800
 8010914:	40022000 	.word	0x40022000
 8010918:	40015c24 	.word	0x40015c24
 801091c:	40021800 	.word	0x40021800

08010920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010920:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8010922:	4601      	mov	r1, r0
{
 8010924:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8010926:	2200      	movs	r2, #0
 8010928:	2036      	movs	r0, #54	; 0x36
 801092a:	f7ef ffcf 	bl	80008cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 801092e:	2036      	movs	r0, #54	; 0x36
 8010930:	f7f0 f804 	bl	800093c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8010934:	4b14      	ldr	r3, [pc, #80]	; (8010988 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010936:	a901      	add	r1, sp, #4
 8010938:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 801093a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801093c:	4c13      	ldr	r4, [pc, #76]	; (801098c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 801093e:	f042 0210 	orr.w	r2, r2, #16
 8010942:	641a      	str	r2, [r3, #64]	; 0x40
 8010944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010946:	f003 0310 	and.w	r3, r3, #16
 801094a:	9302      	str	r3, [sp, #8]
 801094c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801094e:	f7f2 f803 	bl	8002958 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010952:	f7f1 ffe1 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8010956:	4b0e      	ldr	r3, [pc, #56]	; (8010990 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010958:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 801095a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801095c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8010960:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010962:	4b0c      	ldr	r3, [pc, #48]	; (8010994 <HAL_InitTick+0x74>)
 8010964:	fbb0 f0f3 	udiv	r0, r0, r3
 8010968:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 801096a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 801096c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801096e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8010970:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010972:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8010974:	f7f2 fffc 	bl	8003970 <HAL_TIM_Base_Init>
 8010978:	b920      	cbnz	r0, 8010984 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801097a:	4620      	mov	r0, r4
 801097c:	f7f2 fed1 	bl	8003722 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8010980:	b008      	add	sp, #32
 8010982:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8010984:	2001      	movs	r0, #1
 8010986:	e7fb      	b.n	8010980 <HAL_InitTick+0x60>
 8010988:	40023800 	.word	0x40023800
 801098c:	2000f3fc 	.word	0x2000f3fc
 8010990:	40001000 	.word	0x40001000
 8010994:	000f4240 	.word	0x000f4240

08010998 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8010998:	f7f5 b8ce 	b.w	8005b38 <osSystickHandler>

0801099c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801099c:	4801      	ldr	r0, [pc, #4]	; (80109a4 <TIM6_DAC_IRQHandler+0x8>)
 801099e:	f7f2 becf 	b.w	8003740 <HAL_TIM_IRQHandler>
 80109a2:	bf00      	nop
 80109a4:	2000f3fc 	.word	0x2000f3fc

080109a8 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80109a8:	4801      	ldr	r0, [pc, #4]	; (80109b0 <ETH_IRQHandler+0x8>)
 80109aa:	f7f0 bb62 	b.w	8001072 <HAL_ETH_IRQHandler>
 80109ae:	bf00      	nop
 80109b0:	2000d424 	.word	0x2000d424

080109b4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80109b4:	4801      	ldr	r0, [pc, #4]	; (80109bc <OTG_FS_IRQHandler+0x8>)
 80109b6:	f7f0 bf1d 	b.w	80017f4 <HAL_HCD_IRQHandler>
 80109ba:	bf00      	nop
 80109bc:	2000f810 	.word	0x2000f810

080109c0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80109c0:	4801      	ldr	r0, [pc, #4]	; (80109c8 <LTDC_IRQHandler+0x8>)
 80109c2:	f7f1 bbfc 	b.w	80021be <HAL_LTDC_IRQHandler>
 80109c6:	bf00      	nop
 80109c8:	2000f03c 	.word	0x2000f03c

080109cc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80109cc:	4801      	ldr	r0, [pc, #4]	; (80109d4 <DMA2D_IRQHandler+0x8>)
 80109ce:	f7f0 b8b7 	b.w	8000b40 <HAL_DMA2D_IRQHandler>
 80109d2:	bf00      	nop
 80109d4:	2000f2bc 	.word	0x2000f2bc

080109d8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80109d8:	4b0b      	ldr	r3, [pc, #44]	; (8010a08 <_sbrk+0x30>)
{
 80109da:	4602      	mov	r2, r0
	if (heap_end == 0)
 80109dc:	6819      	ldr	r1, [r3, #0]
 80109de:	b909      	cbnz	r1, 80109e4 <_sbrk+0xc>
		heap_end = &end;
 80109e0:	490a      	ldr	r1, [pc, #40]	; (8010a0c <_sbrk+0x34>)
 80109e2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80109e4:	490a      	ldr	r1, [pc, #40]	; (8010a10 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 80109e6:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80109e8:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 80109ea:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80109ec:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 80109ee:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 80109f2:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 80109f4:	bf83      	ittte	hi
 80109f6:	220c      	movhi	r2, #12
 80109f8:	4b06      	ldrhi	r3, [pc, #24]	; (8010a14 <_sbrk+0x3c>)
		return (caddr_t) -1;
 80109fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 80109fe:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8010a00:	bf88      	it	hi
 8010a02:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	200083b0 	.word	0x200083b0
 8010a0c:	2000fad0 	.word	0x2000fad0
 8010a10:	e000ed08 	.word	0xe000ed08
 8010a14:	2000bb4c 	.word	0x2000bb4c

08010a18 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	460e      	mov	r6, r1
 8010a1c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a1e:	460c      	mov	r4, r1
 8010a20:	1ba3      	subs	r3, r4, r6
 8010a22:	429d      	cmp	r5, r3
 8010a24:	dc01      	bgt.n	8010a2a <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 8010a26:	4628      	mov	r0, r5
 8010a28:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 8010a2a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a2e:	f3af 8000 	nop.w
 8010a32:	e7f5      	b.n	8010a20 <_write+0x8>

08010a34 <_close>:

int _close(int file)
{
	return -1;
}
 8010a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a38:	4770      	bx	lr

08010a3a <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8010a3e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8010a40:	604b      	str	r3, [r1, #4]
}
 8010a42:	4770      	bx	lr

08010a44 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8010a44:	2001      	movs	r0, #1
 8010a46:	4770      	bx	lr

08010a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4770      	bx	lr

08010a4c <_read>:

int _read(int file, char *ptr, int len)
{
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	460e      	mov	r6, r1
 8010a50:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a52:	460c      	mov	r4, r1
 8010a54:	1ba3      	subs	r3, r4, r6
 8010a56:	429d      	cmp	r5, r3
 8010a58:	dc01      	bgt.n	8010a5e <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8010a5e:	f3af 8000 	nop.w
 8010a62:	f804 0b01 	strb.w	r0, [r4], #1
 8010a66:	e7f5      	b.n	8010a54 <_read+0x8>

08010a68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a68:	490f      	ldr	r1, [pc, #60]	; (8010aa8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010a6a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a6c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8010a78:	4b0c      	ldr	r3, [pc, #48]	; (8010aac <SystemInit+0x44>)
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	f042 0201 	orr.w	r2, r2, #1
 8010a80:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8010a82:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8010a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010a8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010a90:	4a07      	ldr	r2, [pc, #28]	; (8010ab0 <SystemInit+0x48>)
 8010a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010a9a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010a9c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010aa2:	608b      	str	r3, [r1, #8]
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	e000ed00 	.word	0xe000ed00
 8010aac:	40023800 	.word	0x40023800
 8010ab0:	24003010 	.word	0x24003010

08010ab4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010ab4:	2904      	cmp	r1, #4
 8010ab6:	d00a      	beq.n	8010ace <USBH_UserProcess+0x1a>
 8010ab8:	2905      	cmp	r1, #5
 8010aba:	d004      	beq.n	8010ac6 <USBH_UserProcess+0x12>
 8010abc:	2902      	cmp	r1, #2
 8010abe:	d105      	bne.n	8010acc <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010ac0:	4b04      	ldr	r3, [pc, #16]	; (8010ad4 <USBH_UserProcess+0x20>)
 8010ac2:	7019      	strb	r1, [r3, #0]
  break;
 8010ac4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8010ac6:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010ac8:	4b02      	ldr	r3, [pc, #8]	; (8010ad4 <USBH_UserProcess+0x20>)
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	4770      	bx	lr
 8010ace:	2201      	movs	r2, #1
 8010ad0:	e7fa      	b.n	8010ac8 <USBH_UserProcess+0x14>
 8010ad2:	bf00      	nop
 8010ad4:	200083b4 	.word	0x200083b4

08010ad8 <MX_USB_HOST_Init>:
{
 8010ad8:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8010ada:	4c07      	ldr	r4, [pc, #28]	; (8010af8 <MX_USB_HOST_Init+0x20>)
 8010adc:	2201      	movs	r2, #1
 8010ade:	4907      	ldr	r1, [pc, #28]	; (8010afc <MX_USB_HOST_Init+0x24>)
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f7f4 f9f7 	bl	8004ed4 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	4905      	ldr	r1, [pc, #20]	; (8010b00 <MX_USB_HOST_Init+0x28>)
 8010aea:	f7f4 fa27 	bl	8004f3c <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8010aee:	4620      	mov	r0, r4
}
 8010af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8010af4:	f7f4 ba54 	b.w	8004fa0 <USBH_Start>
 8010af8:	2000f43c 	.word	0x2000f43c
 8010afc:	08010ab5 	.word	0x08010ab5
 8010b00:	20000004 	.word	0x20000004

08010b04 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8010b0a:	b510      	push	{r4, lr}
 8010b0c:	b088      	sub	sp, #32
  if(hcdHandle->Instance==USB_OTG_FS)
 8010b0e:	d129      	bne.n	8010b64 <HAL_HCD_MspInit+0x60>
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8010b10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b14:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b16:	a903      	add	r1, sp, #12
 8010b18:	4813      	ldr	r0, [pc, #76]	; (8010b68 <HAL_HCD_MspInit+0x64>)
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8010b1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b1c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b1e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b22:	2303      	movs	r3, #3
 8010b24:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010b26:	230a      	movs	r3, #10
 8010b28:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b2a:	f7f0 fc83 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b2e:	4b0f      	ldr	r3, [pc, #60]	; (8010b6c <HAL_HCD_MspInit+0x68>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b30:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010b34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8010b38:	6359      	str	r1, [r3, #52]	; 0x34
 8010b3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010b3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010b40:	9101      	str	r1, [sp, #4]
 8010b42:	9a01      	ldr	r2, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b44:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010b48:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8010b4c:	6459      	str	r1, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b4e:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b5a:	f7ef feb7 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b5e:	2043      	movs	r0, #67	; 0x43
 8010b60:	f7ef feec 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b64:	b008      	add	sp, #32
 8010b66:	bd10      	pop	{r4, pc}
 8010b68:	40020000 	.word	0x40020000
 8010b6c:	40023800 	.word	0x40023800

08010b70 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8010b70:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b74:	f7f4 bba7 	b.w	80052c6 <USBH_LL_IncTimer>

08010b78 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8010b78:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b7c:	f7f4 bbb9 	b.w	80052f2 <USBH_LL_Connect>

08010b80 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8010b80:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b84:	f7f4 bbd0 	b.w	8005328 <USBH_LL_Disconnect>

08010b88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010b88:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b8c:	f7f4 bbee 	b.w	800536c <USBH_LL_NotifyURBChange>

08010b90 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8010b90:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b94:	f7f4 bba5 	b.w	80052e2 <USBH_LL_PortEnabled>

08010b98 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8010b98:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8010b9c:	f7f4 bba5 	b.w	80052ea <USBH_LL_PortDisabled>

08010ba0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010ba0:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010ba2:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 8010ba6:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d11e      	bne.n	8010bea <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010bac:	4810      	ldr	r0, [pc, #64]	; (8010bf0 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010bb2:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010bb4:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010bb6:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 8010bb8:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010bbc:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010bbe:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 8010bc0:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010bc4:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010bc6:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010bc8:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010bca:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010bcc:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010bce:	f7f0 fd6b 	bl	80016a8 <HAL_HCD_Init>
 8010bd2:	b118      	cbz	r0, 8010bdc <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010bd4:	21ee      	movs	r1, #238	; 0xee
 8010bd6:	4807      	ldr	r0, [pc, #28]	; (8010bf4 <USBH_LL_Init+0x54>)
 8010bd8:	f7ff fa7c 	bl	80100d4 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010bdc:	4804      	ldr	r0, [pc, #16]	; (8010bf0 <USBH_LL_Init+0x50>)
 8010bde:	f7f1 f953 	bl	8001e88 <HAL_HCD_GetCurrentFrame>
 8010be2:	4601      	mov	r1, r0
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7f4 fb6b 	bl	80052c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8010bea:	2000      	movs	r0, #0
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	bf00      	nop
 8010bf0:	2000f810 	.word	0x2000f810
 8010bf4:	08013f91 	.word	0x08013f91

08010bf8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010bf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8010bfa:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010bfe:	f7f1 f90d 	bl	8001e1c <HAL_HCD_Start>
 8010c02:	2803      	cmp	r0, #3
 8010c04:	bf9a      	itte	ls
 8010c06:	4b02      	ldrls	r3, [pc, #8]	; (8010c10 <USBH_LL_Start+0x18>)
 8010c08:	5c18      	ldrbls	r0, [r3, r0]
 8010c0a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010c0c:	bd08      	pop	{r3, pc}
 8010c0e:	bf00      	nop
 8010c10:	08013f8d 	.word	0x08013f8d

08010c14 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010c14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8010c16:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010c1a:	f7f1 f915 	bl	8001e48 <HAL_HCD_Stop>
 8010c1e:	2803      	cmp	r0, #3
 8010c20:	bf9a      	itte	ls
 8010c22:	4b02      	ldrls	r3, [pc, #8]	; (8010c2c <USBH_LL_Stop+0x18>)
 8010c24:	5c18      	ldrbls	r0, [r3, r0]
 8010c26:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010c28:	bd08      	pop	{r3, pc}
 8010c2a:	bf00      	nop
 8010c2c:	08013f8d 	.word	0x08013f8d

08010c30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010c30:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010c32:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010c36:	f7f1 f92a 	bl	8001e8e <HAL_HCD_GetCurrentSpeed>
 8010c3a:	2802      	cmp	r0, #2
 8010c3c:	bf9a      	itte	ls
 8010c3e:	4b02      	ldrls	r3, [pc, #8]	; (8010c48 <USBH_LL_GetSpeed+0x18>)
 8010c40:	5c18      	ldrbls	r0, [r3, r0]
 8010c42:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8010c44:	bd08      	pop	{r3, pc}
 8010c46:	bf00      	nop
 8010c48:	08013f8a 	.word	0x08013f8a

08010c4c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010c4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010c4e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010c52:	f7f1 f90b 	bl	8001e6c <HAL_HCD_ResetPort>
 8010c56:	2803      	cmp	r0, #3
 8010c58:	bf9a      	itte	ls
 8010c5a:	4b02      	ldrls	r3, [pc, #8]	; (8010c64 <USBH_LL_ResetPort+0x18>)
 8010c5c:	5c18      	ldrbls	r0, [r3, r0]
 8010c5e:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010c60:	bd08      	pop	{r3, pc}
 8010c62:	bf00      	nop
 8010c64:	08013f8d 	.word	0x08013f8d

08010c68 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c68:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010c6c:	f7f1 b907 	b.w	8001e7e <HAL_HCD_HC_GetXferCount>

08010c70 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c72:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8010c76:	9402      	str	r4, [sp, #8]
 8010c78:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8010c7c:	9401      	str	r4, [sp, #4]
 8010c7e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010c82:	9400      	str	r4, [sp, #0]
 8010c84:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010c88:	f7f0 fcc3 	bl	8001612 <HAL_HCD_HC_Init>
 8010c8c:	2803      	cmp	r0, #3
 8010c8e:	bf96      	itet	ls
 8010c90:	4b02      	ldrls	r3, [pc, #8]	; (8010c9c <USBH_LL_OpenPipe+0x2c>)
 8010c92:	2002      	movhi	r0, #2
 8010c94:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010c96:	b004      	add	sp, #16
 8010c98:	bd10      	pop	{r4, pc}
 8010c9a:	bf00      	nop
 8010c9c:	08013f8d 	.word	0x08013f8d

08010ca0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ca0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ca2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010ca6:	f7f0 fced 	bl	8001684 <HAL_HCD_HC_Halt>
 8010caa:	2803      	cmp	r0, #3
 8010cac:	bf9a      	itte	ls
 8010cae:	4b02      	ldrls	r3, [pc, #8]	; (8010cb8 <USBH_LL_ClosePipe+0x18>)
 8010cb0:	5c18      	ldrbls	r0, [r3, r0]
 8010cb2:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010cb4:	bd08      	pop	{r3, pc}
 8010cb6:	bf00      	nop
 8010cb8:	08013f8d 	.word	0x08013f8d

08010cbc <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010cbe:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010cc2:	9403      	str	r4, [sp, #12]
 8010cc4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8010cc8:	9402      	str	r4, [sp, #8]
 8010cca:	9c07      	ldr	r4, [sp, #28]
 8010ccc:	9401      	str	r4, [sp, #4]
 8010cce:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010cd2:	9400      	str	r4, [sp, #0]
 8010cd4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010cd8:	f7f0 fd2a 	bl	8001730 <HAL_HCD_HC_SubmitRequest>
 8010cdc:	2803      	cmp	r0, #3
 8010cde:	bf96      	itet	ls
 8010ce0:	4b02      	ldrls	r3, [pc, #8]	; (8010cec <USBH_LL_SubmitURB+0x30>)
 8010ce2:	2002      	movhi	r0, #2
 8010ce4:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8010ce6:	b004      	add	sp, #16
 8010ce8:	bd10      	pop	{r4, pc}
 8010cea:	bf00      	nop
 8010cec:	08013f8d 	.word	0x08013f8d

08010cf0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010cf0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8010cf4:	f7f1 b8bd 	b.w	8001e72 <HAL_HCD_HC_GetURBState>

08010cf8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010cf8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8010cfa:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d102      	bne.n	8010d08 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8010d02:	4608      	mov	r0, r1
 8010d04:	f000 f816 	bl	8010d34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d08:	20c8      	movs	r0, #200	; 0xc8
 8010d0a:	f7ef fc77 	bl	80005fc <HAL_Delay>
  return USBH_OK;
}
 8010d0e:	2000      	movs	r0, #0
 8010d10:	bd08      	pop	{r3, pc}

08010d12 <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8010d12:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 8010d14:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
  if(pHandle->hc[pipe].ep_is_in)
 8010d18:	fb03 0101 	mla	r1, r3, r1, r0
 8010d1c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8010d20:	b11b      	cbz	r3, 8010d2a <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010d22:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8010d26:	2000      	movs	r0, #0
 8010d28:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8010d2a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8010d2e:	e7fa      	b.n	8010d26 <USBH_LL_SetToggle+0x14>

08010d30 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8010d30:	f7ef bc64 	b.w	80005fc <HAL_Delay>

08010d34 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8010d34:	fab0 f280 	clz	r2, r0
 8010d38:	2120      	movs	r1, #32
 8010d3a:	4802      	ldr	r0, [pc, #8]	; (8010d44 <MX_DriverVbusFS+0x10>)
 8010d3c:	0952      	lsrs	r2, r2, #5
 8010d3e:	f7f0 bc63 	b.w	8001608 <HAL_GPIO_WritePin>
 8010d42:	bf00      	nop
 8010d44:	40020c00 	.word	0x40020c00

08010d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010d4e:	e003      	b.n	8010d58 <LoopCopyDataInit>

08010d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010d50:	4b0c      	ldr	r3, [pc, #48]	; (8010d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010d56:	3104      	adds	r1, #4

08010d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010d58:	480b      	ldr	r0, [pc, #44]	; (8010d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010d5a:	4b0c      	ldr	r3, [pc, #48]	; (8010d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010d60:	d3f6      	bcc.n	8010d50 <CopyDataInit>
  ldr  r2, =_sbss
 8010d62:	4a0b      	ldr	r2, [pc, #44]	; (8010d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010d64:	e002      	b.n	8010d6c <LoopFillZerobss>

08010d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010d68:	f842 3b04 	str.w	r3, [r2], #4

08010d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010d6c:	4b09      	ldr	r3, [pc, #36]	; (8010d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010d70:	d3f9      	bcc.n	8010d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010d72:	f7ff fe79 	bl	8010a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010d76:	f000 f811 	bl	8010d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d7a:	f7fe fc85 	bl	800f688 <main>
  bx  lr    
 8010d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010d80:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8010d84:	0801404c 	.word	0x0801404c
  ldr  r0, =_sdata
 8010d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010d8c:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8010d90:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8010d94:	2000fad0 	.word	0x2000fad0

08010d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010d98:	e7fe      	b.n	8010d98 <ADC_IRQHandler>
	...

08010d9c <__libc_init_array>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	4e0d      	ldr	r6, [pc, #52]	; (8010dd4 <__libc_init_array+0x38>)
 8010da0:	4c0d      	ldr	r4, [pc, #52]	; (8010dd8 <__libc_init_array+0x3c>)
 8010da2:	1ba4      	subs	r4, r4, r6
 8010da4:	10a4      	asrs	r4, r4, #2
 8010da6:	2500      	movs	r5, #0
 8010da8:	42a5      	cmp	r5, r4
 8010daa:	d109      	bne.n	8010dc0 <__libc_init_array+0x24>
 8010dac:	4e0b      	ldr	r6, [pc, #44]	; (8010ddc <__libc_init_array+0x40>)
 8010dae:	4c0c      	ldr	r4, [pc, #48]	; (8010de0 <__libc_init_array+0x44>)
 8010db0:	f000 ff7c 	bl	8011cac <_init>
 8010db4:	1ba4      	subs	r4, r4, r6
 8010db6:	10a4      	asrs	r4, r4, #2
 8010db8:	2500      	movs	r5, #0
 8010dba:	42a5      	cmp	r5, r4
 8010dbc:	d105      	bne.n	8010dca <__libc_init_array+0x2e>
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}
 8010dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010dc4:	4798      	blx	r3
 8010dc6:	3501      	adds	r5, #1
 8010dc8:	e7ee      	b.n	8010da8 <__libc_init_array+0xc>
 8010dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010dce:	4798      	blx	r3
 8010dd0:	3501      	adds	r5, #1
 8010dd2:	e7f2      	b.n	8010dba <__libc_init_array+0x1e>
 8010dd4:	08014044 	.word	0x08014044
 8010dd8:	08014044 	.word	0x08014044
 8010ddc:	08014044 	.word	0x08014044
 8010de0:	08014048 	.word	0x08014048

08010de4 <malloc>:
 8010de4:	4b02      	ldr	r3, [pc, #8]	; (8010df0 <malloc+0xc>)
 8010de6:	4601      	mov	r1, r0
 8010de8:	6818      	ldr	r0, [r3, #0]
 8010dea:	f000 b87b 	b.w	8010ee4 <_malloc_r>
 8010dee:	bf00      	nop
 8010df0:	20000034 	.word	0x20000034

08010df4 <free>:
 8010df4:	4b02      	ldr	r3, [pc, #8]	; (8010e00 <free+0xc>)
 8010df6:	4601      	mov	r1, r0
 8010df8:	6818      	ldr	r0, [r3, #0]
 8010dfa:	f000 b825 	b.w	8010e48 <_free_r>
 8010dfe:	bf00      	nop
 8010e00:	20000034 	.word	0x20000034

08010e04 <memcmp>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	3901      	subs	r1, #1
 8010e08:	4402      	add	r2, r0
 8010e0a:	4290      	cmp	r0, r2
 8010e0c:	d101      	bne.n	8010e12 <memcmp+0xe>
 8010e0e:	2000      	movs	r0, #0
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010e16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010e1a:	42a3      	cmp	r3, r4
 8010e1c:	d0f5      	beq.n	8010e0a <memcmp+0x6>
 8010e1e:	1b18      	subs	r0, r3, r4
 8010e20:	bd10      	pop	{r4, pc}

08010e22 <memcpy>:
 8010e22:	b510      	push	{r4, lr}
 8010e24:	1e43      	subs	r3, r0, #1
 8010e26:	440a      	add	r2, r1
 8010e28:	4291      	cmp	r1, r2
 8010e2a:	d100      	bne.n	8010e2e <memcpy+0xc>
 8010e2c:	bd10      	pop	{r4, pc}
 8010e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e36:	e7f7      	b.n	8010e28 <memcpy+0x6>

08010e38 <memset>:
 8010e38:	4402      	add	r2, r0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d100      	bne.n	8010e42 <memset+0xa>
 8010e40:	4770      	bx	lr
 8010e42:	f803 1b01 	strb.w	r1, [r3], #1
 8010e46:	e7f9      	b.n	8010e3c <memset+0x4>

08010e48 <_free_r>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	d045      	beq.n	8010edc <_free_r+0x94>
 8010e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e54:	1f0c      	subs	r4, r1, #4
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	bfb8      	it	lt
 8010e5a:	18e4      	addlt	r4, r4, r3
 8010e5c:	f000 f9cc 	bl	80111f8 <__malloc_lock>
 8010e60:	4a1f      	ldr	r2, [pc, #124]	; (8010ee0 <_free_r+0x98>)
 8010e62:	6813      	ldr	r3, [r2, #0]
 8010e64:	4610      	mov	r0, r2
 8010e66:	b933      	cbnz	r3, 8010e76 <_free_r+0x2e>
 8010e68:	6063      	str	r3, [r4, #4]
 8010e6a:	6014      	str	r4, [r2, #0]
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e72:	f000 b9c2 	b.w	80111fa <__malloc_unlock>
 8010e76:	42a3      	cmp	r3, r4
 8010e78:	d90c      	bls.n	8010e94 <_free_r+0x4c>
 8010e7a:	6821      	ldr	r1, [r4, #0]
 8010e7c:	1862      	adds	r2, r4, r1
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	bf04      	itt	eq
 8010e82:	681a      	ldreq	r2, [r3, #0]
 8010e84:	685b      	ldreq	r3, [r3, #4]
 8010e86:	6063      	str	r3, [r4, #4]
 8010e88:	bf04      	itt	eq
 8010e8a:	1852      	addeq	r2, r2, r1
 8010e8c:	6022      	streq	r2, [r4, #0]
 8010e8e:	6004      	str	r4, [r0, #0]
 8010e90:	e7ec      	b.n	8010e6c <_free_r+0x24>
 8010e92:	4613      	mov	r3, r2
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	b10a      	cbz	r2, 8010e9c <_free_r+0x54>
 8010e98:	42a2      	cmp	r2, r4
 8010e9a:	d9fa      	bls.n	8010e92 <_free_r+0x4a>
 8010e9c:	6819      	ldr	r1, [r3, #0]
 8010e9e:	1858      	adds	r0, r3, r1
 8010ea0:	42a0      	cmp	r0, r4
 8010ea2:	d10b      	bne.n	8010ebc <_free_r+0x74>
 8010ea4:	6820      	ldr	r0, [r4, #0]
 8010ea6:	4401      	add	r1, r0
 8010ea8:	1858      	adds	r0, r3, r1
 8010eaa:	4282      	cmp	r2, r0
 8010eac:	6019      	str	r1, [r3, #0]
 8010eae:	d1dd      	bne.n	8010e6c <_free_r+0x24>
 8010eb0:	6810      	ldr	r0, [r2, #0]
 8010eb2:	6852      	ldr	r2, [r2, #4]
 8010eb4:	605a      	str	r2, [r3, #4]
 8010eb6:	4401      	add	r1, r0
 8010eb8:	6019      	str	r1, [r3, #0]
 8010eba:	e7d7      	b.n	8010e6c <_free_r+0x24>
 8010ebc:	d902      	bls.n	8010ec4 <_free_r+0x7c>
 8010ebe:	230c      	movs	r3, #12
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	e7d3      	b.n	8010e6c <_free_r+0x24>
 8010ec4:	6820      	ldr	r0, [r4, #0]
 8010ec6:	1821      	adds	r1, r4, r0
 8010ec8:	428a      	cmp	r2, r1
 8010eca:	bf04      	itt	eq
 8010ecc:	6811      	ldreq	r1, [r2, #0]
 8010ece:	6852      	ldreq	r2, [r2, #4]
 8010ed0:	6062      	str	r2, [r4, #4]
 8010ed2:	bf04      	itt	eq
 8010ed4:	1809      	addeq	r1, r1, r0
 8010ed6:	6021      	streq	r1, [r4, #0]
 8010ed8:	605c      	str	r4, [r3, #4]
 8010eda:	e7c7      	b.n	8010e6c <_free_r+0x24>
 8010edc:	bd38      	pop	{r3, r4, r5, pc}
 8010ede:	bf00      	nop
 8010ee0:	200083b8 	.word	0x200083b8

08010ee4 <_malloc_r>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	1ccd      	adds	r5, r1, #3
 8010ee8:	f025 0503 	bic.w	r5, r5, #3
 8010eec:	3508      	adds	r5, #8
 8010eee:	2d0c      	cmp	r5, #12
 8010ef0:	bf38      	it	cc
 8010ef2:	250c      	movcc	r5, #12
 8010ef4:	2d00      	cmp	r5, #0
 8010ef6:	4606      	mov	r6, r0
 8010ef8:	db01      	blt.n	8010efe <_malloc_r+0x1a>
 8010efa:	42a9      	cmp	r1, r5
 8010efc:	d903      	bls.n	8010f06 <_malloc_r+0x22>
 8010efe:	230c      	movs	r3, #12
 8010f00:	6033      	str	r3, [r6, #0]
 8010f02:	2000      	movs	r0, #0
 8010f04:	bd70      	pop	{r4, r5, r6, pc}
 8010f06:	f000 f977 	bl	80111f8 <__malloc_lock>
 8010f0a:	4a23      	ldr	r2, [pc, #140]	; (8010f98 <_malloc_r+0xb4>)
 8010f0c:	6814      	ldr	r4, [r2, #0]
 8010f0e:	4621      	mov	r1, r4
 8010f10:	b991      	cbnz	r1, 8010f38 <_malloc_r+0x54>
 8010f12:	4c22      	ldr	r4, [pc, #136]	; (8010f9c <_malloc_r+0xb8>)
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	b91b      	cbnz	r3, 8010f20 <_malloc_r+0x3c>
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f000 f893 	bl	8011044 <_sbrk_r>
 8010f1e:	6020      	str	r0, [r4, #0]
 8010f20:	4629      	mov	r1, r5
 8010f22:	4630      	mov	r0, r6
 8010f24:	f000 f88e 	bl	8011044 <_sbrk_r>
 8010f28:	1c43      	adds	r3, r0, #1
 8010f2a:	d126      	bne.n	8010f7a <_malloc_r+0x96>
 8010f2c:	230c      	movs	r3, #12
 8010f2e:	6033      	str	r3, [r6, #0]
 8010f30:	4630      	mov	r0, r6
 8010f32:	f000 f962 	bl	80111fa <__malloc_unlock>
 8010f36:	e7e4      	b.n	8010f02 <_malloc_r+0x1e>
 8010f38:	680b      	ldr	r3, [r1, #0]
 8010f3a:	1b5b      	subs	r3, r3, r5
 8010f3c:	d41a      	bmi.n	8010f74 <_malloc_r+0x90>
 8010f3e:	2b0b      	cmp	r3, #11
 8010f40:	d90f      	bls.n	8010f62 <_malloc_r+0x7e>
 8010f42:	600b      	str	r3, [r1, #0]
 8010f44:	50cd      	str	r5, [r1, r3]
 8010f46:	18cc      	adds	r4, r1, r3
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 f956 	bl	80111fa <__malloc_unlock>
 8010f4e:	f104 000b 	add.w	r0, r4, #11
 8010f52:	1d23      	adds	r3, r4, #4
 8010f54:	f020 0007 	bic.w	r0, r0, #7
 8010f58:	1ac3      	subs	r3, r0, r3
 8010f5a:	d01b      	beq.n	8010f94 <_malloc_r+0xb0>
 8010f5c:	425a      	negs	r2, r3
 8010f5e:	50e2      	str	r2, [r4, r3]
 8010f60:	bd70      	pop	{r4, r5, r6, pc}
 8010f62:	428c      	cmp	r4, r1
 8010f64:	bf0d      	iteet	eq
 8010f66:	6863      	ldreq	r3, [r4, #4]
 8010f68:	684b      	ldrne	r3, [r1, #4]
 8010f6a:	6063      	strne	r3, [r4, #4]
 8010f6c:	6013      	streq	r3, [r2, #0]
 8010f6e:	bf18      	it	ne
 8010f70:	460c      	movne	r4, r1
 8010f72:	e7e9      	b.n	8010f48 <_malloc_r+0x64>
 8010f74:	460c      	mov	r4, r1
 8010f76:	6849      	ldr	r1, [r1, #4]
 8010f78:	e7ca      	b.n	8010f10 <_malloc_r+0x2c>
 8010f7a:	1cc4      	adds	r4, r0, #3
 8010f7c:	f024 0403 	bic.w	r4, r4, #3
 8010f80:	42a0      	cmp	r0, r4
 8010f82:	d005      	beq.n	8010f90 <_malloc_r+0xac>
 8010f84:	1a21      	subs	r1, r4, r0
 8010f86:	4630      	mov	r0, r6
 8010f88:	f000 f85c 	bl	8011044 <_sbrk_r>
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	d0cd      	beq.n	8010f2c <_malloc_r+0x48>
 8010f90:	6025      	str	r5, [r4, #0]
 8010f92:	e7d9      	b.n	8010f48 <_malloc_r+0x64>
 8010f94:	bd70      	pop	{r4, r5, r6, pc}
 8010f96:	bf00      	nop
 8010f98:	200083b8 	.word	0x200083b8
 8010f9c:	200083bc 	.word	0x200083bc

08010fa0 <iprintf>:
 8010fa0:	b40f      	push	{r0, r1, r2, r3}
 8010fa2:	4b0a      	ldr	r3, [pc, #40]	; (8010fcc <iprintf+0x2c>)
 8010fa4:	b513      	push	{r0, r1, r4, lr}
 8010fa6:	681c      	ldr	r4, [r3, #0]
 8010fa8:	b124      	cbz	r4, 8010fb4 <iprintf+0x14>
 8010faa:	69a3      	ldr	r3, [r4, #24]
 8010fac:	b913      	cbnz	r3, 8010fb4 <iprintf+0x14>
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 f898 	bl	80110e4 <__sinit>
 8010fb4:	ab05      	add	r3, sp, #20
 8010fb6:	9a04      	ldr	r2, [sp, #16]
 8010fb8:	68a1      	ldr	r1, [r4, #8]
 8010fba:	9301      	str	r3, [sp, #4]
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f000 f947 	bl	8011250 <_vfiprintf_r>
 8010fc2:	b002      	add	sp, #8
 8010fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fc8:	b004      	add	sp, #16
 8010fca:	4770      	bx	lr
 8010fcc:	20000034 	.word	0x20000034

08010fd0 <rand>:
 8010fd0:	4b19      	ldr	r3, [pc, #100]	; (8011038 <rand+0x68>)
 8010fd2:	b510      	push	{r4, lr}
 8010fd4:	681c      	ldr	r4, [r3, #0]
 8010fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fd8:	b9d3      	cbnz	r3, 8011010 <rand+0x40>
 8010fda:	2018      	movs	r0, #24
 8010fdc:	f7ff ff02 	bl	8010de4 <malloc>
 8010fe0:	f243 330e 	movw	r3, #13070	; 0x330e
 8010fe4:	63a0      	str	r0, [r4, #56]	; 0x38
 8010fe6:	8003      	strh	r3, [r0, #0]
 8010fe8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010fec:	8043      	strh	r3, [r0, #2]
 8010fee:	f241 2334 	movw	r3, #4660	; 0x1234
 8010ff2:	8083      	strh	r3, [r0, #4]
 8010ff4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010ff8:	80c3      	strh	r3, [r0, #6]
 8010ffa:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010ffe:	8103      	strh	r3, [r0, #8]
 8011000:	2305      	movs	r3, #5
 8011002:	8143      	strh	r3, [r0, #10]
 8011004:	230b      	movs	r3, #11
 8011006:	8183      	strh	r3, [r0, #12]
 8011008:	2201      	movs	r2, #1
 801100a:	2300      	movs	r3, #0
 801100c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011010:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011012:	480a      	ldr	r0, [pc, #40]	; (801103c <rand+0x6c>)
 8011014:	690a      	ldr	r2, [r1, #16]
 8011016:	694b      	ldr	r3, [r1, #20]
 8011018:	4c09      	ldr	r4, [pc, #36]	; (8011040 <rand+0x70>)
 801101a:	4350      	muls	r0, r2
 801101c:	fb04 0003 	mla	r0, r4, r3, r0
 8011020:	fba2 2304 	umull	r2, r3, r2, r4
 8011024:	3201      	adds	r2, #1
 8011026:	4403      	add	r3, r0
 8011028:	f143 0300 	adc.w	r3, r3, #0
 801102c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011030:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011034:	bd10      	pop	{r4, pc}
 8011036:	bf00      	nop
 8011038:	20000034 	.word	0x20000034
 801103c:	5851f42d 	.word	0x5851f42d
 8011040:	4c957f2d 	.word	0x4c957f2d

08011044 <_sbrk_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4c06      	ldr	r4, [pc, #24]	; (8011060 <_sbrk_r+0x1c>)
 8011048:	2300      	movs	r3, #0
 801104a:	4605      	mov	r5, r0
 801104c:	4608      	mov	r0, r1
 801104e:	6023      	str	r3, [r4, #0]
 8011050:	f7ff fcc2 	bl	80109d8 <_sbrk>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_sbrk_r+0x1a>
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	b103      	cbz	r3, 801105e <_sbrk_r+0x1a>
 801105c:	602b      	str	r3, [r5, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	2000bb4c 	.word	0x2000bb4c

08011064 <_cleanup_r>:
 8011064:	4901      	ldr	r1, [pc, #4]	; (801106c <_cleanup_r+0x8>)
 8011066:	f000 b8a9 	b.w	80111bc <_fwalk_reent>
 801106a:	bf00      	nop
 801106c:	08011b05 	.word	0x08011b05

08011070 <std.isra.0>:
 8011070:	2300      	movs	r3, #0
 8011072:	b510      	push	{r4, lr}
 8011074:	4604      	mov	r4, r0
 8011076:	6003      	str	r3, [r0, #0]
 8011078:	6043      	str	r3, [r0, #4]
 801107a:	6083      	str	r3, [r0, #8]
 801107c:	8181      	strh	r1, [r0, #12]
 801107e:	6643      	str	r3, [r0, #100]	; 0x64
 8011080:	81c2      	strh	r2, [r0, #14]
 8011082:	6103      	str	r3, [r0, #16]
 8011084:	6143      	str	r3, [r0, #20]
 8011086:	6183      	str	r3, [r0, #24]
 8011088:	4619      	mov	r1, r3
 801108a:	2208      	movs	r2, #8
 801108c:	305c      	adds	r0, #92	; 0x5c
 801108e:	f7ff fed3 	bl	8010e38 <memset>
 8011092:	4b05      	ldr	r3, [pc, #20]	; (80110a8 <std.isra.0+0x38>)
 8011094:	6263      	str	r3, [r4, #36]	; 0x24
 8011096:	4b05      	ldr	r3, [pc, #20]	; (80110ac <std.isra.0+0x3c>)
 8011098:	62a3      	str	r3, [r4, #40]	; 0x28
 801109a:	4b05      	ldr	r3, [pc, #20]	; (80110b0 <std.isra.0+0x40>)
 801109c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801109e:	4b05      	ldr	r3, [pc, #20]	; (80110b4 <std.isra.0+0x44>)
 80110a0:	6224      	str	r4, [r4, #32]
 80110a2:	6323      	str	r3, [r4, #48]	; 0x30
 80110a4:	bd10      	pop	{r4, pc}
 80110a6:	bf00      	nop
 80110a8:	080117a9 	.word	0x080117a9
 80110ac:	080117cb 	.word	0x080117cb
 80110b0:	08011803 	.word	0x08011803
 80110b4:	08011827 	.word	0x08011827

080110b8 <__sfmoreglue>:
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	1e4a      	subs	r2, r1, #1
 80110bc:	2568      	movs	r5, #104	; 0x68
 80110be:	4355      	muls	r5, r2
 80110c0:	460e      	mov	r6, r1
 80110c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110c6:	f7ff ff0d 	bl	8010ee4 <_malloc_r>
 80110ca:	4604      	mov	r4, r0
 80110cc:	b140      	cbz	r0, 80110e0 <__sfmoreglue+0x28>
 80110ce:	2100      	movs	r1, #0
 80110d0:	e880 0042 	stmia.w	r0, {r1, r6}
 80110d4:	300c      	adds	r0, #12
 80110d6:	60a0      	str	r0, [r4, #8]
 80110d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110dc:	f7ff feac 	bl	8010e38 <memset>
 80110e0:	4620      	mov	r0, r4
 80110e2:	bd70      	pop	{r4, r5, r6, pc}

080110e4 <__sinit>:
 80110e4:	6983      	ldr	r3, [r0, #24]
 80110e6:	b510      	push	{r4, lr}
 80110e8:	4604      	mov	r4, r0
 80110ea:	bb33      	cbnz	r3, 801113a <__sinit+0x56>
 80110ec:	6483      	str	r3, [r0, #72]	; 0x48
 80110ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 80110f0:	6503      	str	r3, [r0, #80]	; 0x50
 80110f2:	4b12      	ldr	r3, [pc, #72]	; (801113c <__sinit+0x58>)
 80110f4:	4a12      	ldr	r2, [pc, #72]	; (8011140 <__sinit+0x5c>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	6282      	str	r2, [r0, #40]	; 0x28
 80110fa:	4298      	cmp	r0, r3
 80110fc:	bf04      	itt	eq
 80110fe:	2301      	moveq	r3, #1
 8011100:	6183      	streq	r3, [r0, #24]
 8011102:	f000 f81f 	bl	8011144 <__sfp>
 8011106:	6060      	str	r0, [r4, #4]
 8011108:	4620      	mov	r0, r4
 801110a:	f000 f81b 	bl	8011144 <__sfp>
 801110e:	60a0      	str	r0, [r4, #8]
 8011110:	4620      	mov	r0, r4
 8011112:	f000 f817 	bl	8011144 <__sfp>
 8011116:	2200      	movs	r2, #0
 8011118:	60e0      	str	r0, [r4, #12]
 801111a:	2104      	movs	r1, #4
 801111c:	6860      	ldr	r0, [r4, #4]
 801111e:	f7ff ffa7 	bl	8011070 <std.isra.0>
 8011122:	2201      	movs	r2, #1
 8011124:	2109      	movs	r1, #9
 8011126:	68a0      	ldr	r0, [r4, #8]
 8011128:	f7ff ffa2 	bl	8011070 <std.isra.0>
 801112c:	2202      	movs	r2, #2
 801112e:	2112      	movs	r1, #18
 8011130:	68e0      	ldr	r0, [r4, #12]
 8011132:	f7ff ff9d 	bl	8011070 <std.isra.0>
 8011136:	2301      	movs	r3, #1
 8011138:	61a3      	str	r3, [r4, #24]
 801113a:	bd10      	pop	{r4, pc}
 801113c:	08014004 	.word	0x08014004
 8011140:	08011065 	.word	0x08011065

08011144 <__sfp>:
 8011144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011146:	4b1c      	ldr	r3, [pc, #112]	; (80111b8 <__sfp+0x74>)
 8011148:	681e      	ldr	r6, [r3, #0]
 801114a:	69b3      	ldr	r3, [r6, #24]
 801114c:	4607      	mov	r7, r0
 801114e:	b913      	cbnz	r3, 8011156 <__sfp+0x12>
 8011150:	4630      	mov	r0, r6
 8011152:	f7ff ffc7 	bl	80110e4 <__sinit>
 8011156:	3648      	adds	r6, #72	; 0x48
 8011158:	68b4      	ldr	r4, [r6, #8]
 801115a:	6873      	ldr	r3, [r6, #4]
 801115c:	3b01      	subs	r3, #1
 801115e:	d503      	bpl.n	8011168 <__sfp+0x24>
 8011160:	6833      	ldr	r3, [r6, #0]
 8011162:	b133      	cbz	r3, 8011172 <__sfp+0x2e>
 8011164:	6836      	ldr	r6, [r6, #0]
 8011166:	e7f7      	b.n	8011158 <__sfp+0x14>
 8011168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801116c:	b16d      	cbz	r5, 801118a <__sfp+0x46>
 801116e:	3468      	adds	r4, #104	; 0x68
 8011170:	e7f4      	b.n	801115c <__sfp+0x18>
 8011172:	2104      	movs	r1, #4
 8011174:	4638      	mov	r0, r7
 8011176:	f7ff ff9f 	bl	80110b8 <__sfmoreglue>
 801117a:	6030      	str	r0, [r6, #0]
 801117c:	2800      	cmp	r0, #0
 801117e:	d1f1      	bne.n	8011164 <__sfp+0x20>
 8011180:	230c      	movs	r3, #12
 8011182:	603b      	str	r3, [r7, #0]
 8011184:	4604      	mov	r4, r0
 8011186:	4620      	mov	r0, r4
 8011188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801118e:	81e3      	strh	r3, [r4, #14]
 8011190:	2301      	movs	r3, #1
 8011192:	81a3      	strh	r3, [r4, #12]
 8011194:	6665      	str	r5, [r4, #100]	; 0x64
 8011196:	6025      	str	r5, [r4, #0]
 8011198:	60a5      	str	r5, [r4, #8]
 801119a:	6065      	str	r5, [r4, #4]
 801119c:	6125      	str	r5, [r4, #16]
 801119e:	6165      	str	r5, [r4, #20]
 80111a0:	61a5      	str	r5, [r4, #24]
 80111a2:	2208      	movs	r2, #8
 80111a4:	4629      	mov	r1, r5
 80111a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111aa:	f7ff fe45 	bl	8010e38 <memset>
 80111ae:	6365      	str	r5, [r4, #52]	; 0x34
 80111b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80111b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80111b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80111b6:	e7e6      	b.n	8011186 <__sfp+0x42>
 80111b8:	08014004 	.word	0x08014004

080111bc <_fwalk_reent>:
 80111bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c0:	4680      	mov	r8, r0
 80111c2:	4689      	mov	r9, r1
 80111c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111c8:	2600      	movs	r6, #0
 80111ca:	b914      	cbnz	r4, 80111d2 <_fwalk_reent+0x16>
 80111cc:	4630      	mov	r0, r6
 80111ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d2:	68a5      	ldr	r5, [r4, #8]
 80111d4:	6867      	ldr	r7, [r4, #4]
 80111d6:	3f01      	subs	r7, #1
 80111d8:	d501      	bpl.n	80111de <_fwalk_reent+0x22>
 80111da:	6824      	ldr	r4, [r4, #0]
 80111dc:	e7f5      	b.n	80111ca <_fwalk_reent+0xe>
 80111de:	89ab      	ldrh	r3, [r5, #12]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d907      	bls.n	80111f4 <_fwalk_reent+0x38>
 80111e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111e8:	3301      	adds	r3, #1
 80111ea:	d003      	beq.n	80111f4 <_fwalk_reent+0x38>
 80111ec:	4629      	mov	r1, r5
 80111ee:	4640      	mov	r0, r8
 80111f0:	47c8      	blx	r9
 80111f2:	4306      	orrs	r6, r0
 80111f4:	3568      	adds	r5, #104	; 0x68
 80111f6:	e7ee      	b.n	80111d6 <_fwalk_reent+0x1a>

080111f8 <__malloc_lock>:
 80111f8:	4770      	bx	lr

080111fa <__malloc_unlock>:
 80111fa:	4770      	bx	lr

080111fc <__sfputc_r>:
 80111fc:	6893      	ldr	r3, [r2, #8]
 80111fe:	3b01      	subs	r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	b410      	push	{r4}
 8011204:	6093      	str	r3, [r2, #8]
 8011206:	da09      	bge.n	801121c <__sfputc_r+0x20>
 8011208:	6994      	ldr	r4, [r2, #24]
 801120a:	42a3      	cmp	r3, r4
 801120c:	db02      	blt.n	8011214 <__sfputc_r+0x18>
 801120e:	b2cb      	uxtb	r3, r1
 8011210:	2b0a      	cmp	r3, #10
 8011212:	d103      	bne.n	801121c <__sfputc_r+0x20>
 8011214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011218:	f000 bb0a 	b.w	8011830 <__swbuf_r>
 801121c:	6813      	ldr	r3, [r2, #0]
 801121e:	1c58      	adds	r0, r3, #1
 8011220:	6010      	str	r0, [r2, #0]
 8011222:	7019      	strb	r1, [r3, #0]
 8011224:	b2c8      	uxtb	r0, r1
 8011226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801122a:	4770      	bx	lr

0801122c <__sfputs_r>:
 801122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122e:	4606      	mov	r6, r0
 8011230:	460f      	mov	r7, r1
 8011232:	4614      	mov	r4, r2
 8011234:	18d5      	adds	r5, r2, r3
 8011236:	42ac      	cmp	r4, r5
 8011238:	d101      	bne.n	801123e <__sfputs_r+0x12>
 801123a:	2000      	movs	r0, #0
 801123c:	e007      	b.n	801124e <__sfputs_r+0x22>
 801123e:	463a      	mov	r2, r7
 8011240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011244:	4630      	mov	r0, r6
 8011246:	f7ff ffd9 	bl	80111fc <__sfputc_r>
 801124a:	1c43      	adds	r3, r0, #1
 801124c:	d1f3      	bne.n	8011236 <__sfputs_r+0xa>
 801124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011250 <_vfiprintf_r>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	b09d      	sub	sp, #116	; 0x74
 8011256:	460c      	mov	r4, r1
 8011258:	4617      	mov	r7, r2
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	4606      	mov	r6, r0
 801125e:	b118      	cbz	r0, 8011268 <_vfiprintf_r+0x18>
 8011260:	6983      	ldr	r3, [r0, #24]
 8011262:	b90b      	cbnz	r3, 8011268 <_vfiprintf_r+0x18>
 8011264:	f7ff ff3e 	bl	80110e4 <__sinit>
 8011268:	4b7c      	ldr	r3, [pc, #496]	; (801145c <_vfiprintf_r+0x20c>)
 801126a:	429c      	cmp	r4, r3
 801126c:	d157      	bne.n	801131e <_vfiprintf_r+0xce>
 801126e:	6874      	ldr	r4, [r6, #4]
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	0718      	lsls	r0, r3, #28
 8011274:	d55d      	bpl.n	8011332 <_vfiprintf_r+0xe2>
 8011276:	6923      	ldr	r3, [r4, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d05a      	beq.n	8011332 <_vfiprintf_r+0xe2>
 801127c:	2300      	movs	r3, #0
 801127e:	9309      	str	r3, [sp, #36]	; 0x24
 8011280:	2320      	movs	r3, #32
 8011282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011286:	2330      	movs	r3, #48	; 0x30
 8011288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801128c:	f04f 0b01 	mov.w	fp, #1
 8011290:	46b8      	mov	r8, r7
 8011292:	4645      	mov	r5, r8
 8011294:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011298:	2b00      	cmp	r3, #0
 801129a:	d155      	bne.n	8011348 <_vfiprintf_r+0xf8>
 801129c:	ebb8 0a07 	subs.w	sl, r8, r7
 80112a0:	d00b      	beq.n	80112ba <_vfiprintf_r+0x6a>
 80112a2:	4653      	mov	r3, sl
 80112a4:	463a      	mov	r2, r7
 80112a6:	4621      	mov	r1, r4
 80112a8:	4630      	mov	r0, r6
 80112aa:	f7ff ffbf 	bl	801122c <__sfputs_r>
 80112ae:	3001      	adds	r0, #1
 80112b0:	f000 80c4 	beq.w	801143c <_vfiprintf_r+0x1ec>
 80112b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b6:	4453      	add	r3, sl
 80112b8:	9309      	str	r3, [sp, #36]	; 0x24
 80112ba:	f898 3000 	ldrb.w	r3, [r8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 80bc 	beq.w	801143c <_vfiprintf_r+0x1ec>
 80112c4:	2300      	movs	r3, #0
 80112c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112ca:	9304      	str	r3, [sp, #16]
 80112cc:	9307      	str	r3, [sp, #28]
 80112ce:	9205      	str	r2, [sp, #20]
 80112d0:	9306      	str	r3, [sp, #24]
 80112d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112d6:	931a      	str	r3, [sp, #104]	; 0x68
 80112d8:	2205      	movs	r2, #5
 80112da:	7829      	ldrb	r1, [r5, #0]
 80112dc:	4860      	ldr	r0, [pc, #384]	; (8011460 <_vfiprintf_r+0x210>)
 80112de:	f7ee ff97 	bl	8000210 <memchr>
 80112e2:	f105 0801 	add.w	r8, r5, #1
 80112e6:	9b04      	ldr	r3, [sp, #16]
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d131      	bne.n	8011350 <_vfiprintf_r+0x100>
 80112ec:	06d9      	lsls	r1, r3, #27
 80112ee:	bf44      	itt	mi
 80112f0:	2220      	movmi	r2, #32
 80112f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80112f6:	071a      	lsls	r2, r3, #28
 80112f8:	bf44      	itt	mi
 80112fa:	222b      	movmi	r2, #43	; 0x2b
 80112fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011300:	782a      	ldrb	r2, [r5, #0]
 8011302:	2a2a      	cmp	r2, #42	; 0x2a
 8011304:	d02c      	beq.n	8011360 <_vfiprintf_r+0x110>
 8011306:	9a07      	ldr	r2, [sp, #28]
 8011308:	2100      	movs	r1, #0
 801130a:	200a      	movs	r0, #10
 801130c:	46a8      	mov	r8, r5
 801130e:	3501      	adds	r5, #1
 8011310:	f898 3000 	ldrb.w	r3, [r8]
 8011314:	3b30      	subs	r3, #48	; 0x30
 8011316:	2b09      	cmp	r3, #9
 8011318:	d96d      	bls.n	80113f6 <_vfiprintf_r+0x1a6>
 801131a:	b371      	cbz	r1, 801137a <_vfiprintf_r+0x12a>
 801131c:	e026      	b.n	801136c <_vfiprintf_r+0x11c>
 801131e:	4b51      	ldr	r3, [pc, #324]	; (8011464 <_vfiprintf_r+0x214>)
 8011320:	429c      	cmp	r4, r3
 8011322:	d101      	bne.n	8011328 <_vfiprintf_r+0xd8>
 8011324:	68b4      	ldr	r4, [r6, #8]
 8011326:	e7a3      	b.n	8011270 <_vfiprintf_r+0x20>
 8011328:	4b4f      	ldr	r3, [pc, #316]	; (8011468 <_vfiprintf_r+0x218>)
 801132a:	429c      	cmp	r4, r3
 801132c:	bf08      	it	eq
 801132e:	68f4      	ldreq	r4, [r6, #12]
 8011330:	e79e      	b.n	8011270 <_vfiprintf_r+0x20>
 8011332:	4621      	mov	r1, r4
 8011334:	4630      	mov	r0, r6
 8011336:	f000 fadf 	bl	80118f8 <__swsetup_r>
 801133a:	2800      	cmp	r0, #0
 801133c:	d09e      	beq.n	801127c <_vfiprintf_r+0x2c>
 801133e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011342:	b01d      	add	sp, #116	; 0x74
 8011344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011348:	2b25      	cmp	r3, #37	; 0x25
 801134a:	d0a7      	beq.n	801129c <_vfiprintf_r+0x4c>
 801134c:	46a8      	mov	r8, r5
 801134e:	e7a0      	b.n	8011292 <_vfiprintf_r+0x42>
 8011350:	4a43      	ldr	r2, [pc, #268]	; (8011460 <_vfiprintf_r+0x210>)
 8011352:	1a80      	subs	r0, r0, r2
 8011354:	fa0b f000 	lsl.w	r0, fp, r0
 8011358:	4318      	orrs	r0, r3
 801135a:	9004      	str	r0, [sp, #16]
 801135c:	4645      	mov	r5, r8
 801135e:	e7bb      	b.n	80112d8 <_vfiprintf_r+0x88>
 8011360:	9a03      	ldr	r2, [sp, #12]
 8011362:	1d11      	adds	r1, r2, #4
 8011364:	6812      	ldr	r2, [r2, #0]
 8011366:	9103      	str	r1, [sp, #12]
 8011368:	2a00      	cmp	r2, #0
 801136a:	db01      	blt.n	8011370 <_vfiprintf_r+0x120>
 801136c:	9207      	str	r2, [sp, #28]
 801136e:	e004      	b.n	801137a <_vfiprintf_r+0x12a>
 8011370:	4252      	negs	r2, r2
 8011372:	f043 0302 	orr.w	r3, r3, #2
 8011376:	9207      	str	r2, [sp, #28]
 8011378:	9304      	str	r3, [sp, #16]
 801137a:	f898 3000 	ldrb.w	r3, [r8]
 801137e:	2b2e      	cmp	r3, #46	; 0x2e
 8011380:	d110      	bne.n	80113a4 <_vfiprintf_r+0x154>
 8011382:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011386:	2b2a      	cmp	r3, #42	; 0x2a
 8011388:	f108 0101 	add.w	r1, r8, #1
 801138c:	d137      	bne.n	80113fe <_vfiprintf_r+0x1ae>
 801138e:	9b03      	ldr	r3, [sp, #12]
 8011390:	1d1a      	adds	r2, r3, #4
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	9203      	str	r2, [sp, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	bfb8      	it	lt
 801139a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801139e:	f108 0802 	add.w	r8, r8, #2
 80113a2:	9305      	str	r3, [sp, #20]
 80113a4:	4d31      	ldr	r5, [pc, #196]	; (801146c <_vfiprintf_r+0x21c>)
 80113a6:	f898 1000 	ldrb.w	r1, [r8]
 80113aa:	2203      	movs	r2, #3
 80113ac:	4628      	mov	r0, r5
 80113ae:	f7ee ff2f 	bl	8000210 <memchr>
 80113b2:	b140      	cbz	r0, 80113c6 <_vfiprintf_r+0x176>
 80113b4:	2340      	movs	r3, #64	; 0x40
 80113b6:	1b40      	subs	r0, r0, r5
 80113b8:	fa03 f000 	lsl.w	r0, r3, r0
 80113bc:	9b04      	ldr	r3, [sp, #16]
 80113be:	4303      	orrs	r3, r0
 80113c0:	9304      	str	r3, [sp, #16]
 80113c2:	f108 0801 	add.w	r8, r8, #1
 80113c6:	f898 1000 	ldrb.w	r1, [r8]
 80113ca:	4829      	ldr	r0, [pc, #164]	; (8011470 <_vfiprintf_r+0x220>)
 80113cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113d0:	2206      	movs	r2, #6
 80113d2:	f108 0701 	add.w	r7, r8, #1
 80113d6:	f7ee ff1b 	bl	8000210 <memchr>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d034      	beq.n	8011448 <_vfiprintf_r+0x1f8>
 80113de:	4b25      	ldr	r3, [pc, #148]	; (8011474 <_vfiprintf_r+0x224>)
 80113e0:	bb03      	cbnz	r3, 8011424 <_vfiprintf_r+0x1d4>
 80113e2:	9b03      	ldr	r3, [sp, #12]
 80113e4:	3307      	adds	r3, #7
 80113e6:	f023 0307 	bic.w	r3, r3, #7
 80113ea:	3308      	adds	r3, #8
 80113ec:	9303      	str	r3, [sp, #12]
 80113ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f0:	444b      	add	r3, r9
 80113f2:	9309      	str	r3, [sp, #36]	; 0x24
 80113f4:	e74c      	b.n	8011290 <_vfiprintf_r+0x40>
 80113f6:	fb00 3202 	mla	r2, r0, r2, r3
 80113fa:	2101      	movs	r1, #1
 80113fc:	e786      	b.n	801130c <_vfiprintf_r+0xbc>
 80113fe:	2300      	movs	r3, #0
 8011400:	9305      	str	r3, [sp, #20]
 8011402:	4618      	mov	r0, r3
 8011404:	250a      	movs	r5, #10
 8011406:	4688      	mov	r8, r1
 8011408:	3101      	adds	r1, #1
 801140a:	f898 2000 	ldrb.w	r2, [r8]
 801140e:	3a30      	subs	r2, #48	; 0x30
 8011410:	2a09      	cmp	r2, #9
 8011412:	d903      	bls.n	801141c <_vfiprintf_r+0x1cc>
 8011414:	2b00      	cmp	r3, #0
 8011416:	d0c5      	beq.n	80113a4 <_vfiprintf_r+0x154>
 8011418:	9005      	str	r0, [sp, #20]
 801141a:	e7c3      	b.n	80113a4 <_vfiprintf_r+0x154>
 801141c:	fb05 2000 	mla	r0, r5, r0, r2
 8011420:	2301      	movs	r3, #1
 8011422:	e7f0      	b.n	8011406 <_vfiprintf_r+0x1b6>
 8011424:	ab03      	add	r3, sp, #12
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	4622      	mov	r2, r4
 801142a:	4b13      	ldr	r3, [pc, #76]	; (8011478 <_vfiprintf_r+0x228>)
 801142c:	a904      	add	r1, sp, #16
 801142e:	4630      	mov	r0, r6
 8011430:	f3af 8000 	nop.w
 8011434:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011438:	4681      	mov	r9, r0
 801143a:	d1d8      	bne.n	80113ee <_vfiprintf_r+0x19e>
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	065b      	lsls	r3, r3, #25
 8011440:	f53f af7d 	bmi.w	801133e <_vfiprintf_r+0xee>
 8011444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011446:	e77c      	b.n	8011342 <_vfiprintf_r+0xf2>
 8011448:	ab03      	add	r3, sp, #12
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	4622      	mov	r2, r4
 801144e:	4b0a      	ldr	r3, [pc, #40]	; (8011478 <_vfiprintf_r+0x228>)
 8011450:	a904      	add	r1, sp, #16
 8011452:	4630      	mov	r0, r6
 8011454:	f000 f888 	bl	8011568 <_printf_i>
 8011458:	e7ec      	b.n	8011434 <_vfiprintf_r+0x1e4>
 801145a:	bf00      	nop
 801145c:	08013fc4 	.word	0x08013fc4
 8011460:	08014008 	.word	0x08014008
 8011464:	08013fe4 	.word	0x08013fe4
 8011468:	08013fa4 	.word	0x08013fa4
 801146c:	0801400e 	.word	0x0801400e
 8011470:	08014012 	.word	0x08014012
 8011474:	00000000 	.word	0x00000000
 8011478:	0801122d 	.word	0x0801122d

0801147c <_printf_common>:
 801147c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011480:	4691      	mov	r9, r2
 8011482:	461f      	mov	r7, r3
 8011484:	688a      	ldr	r2, [r1, #8]
 8011486:	690b      	ldr	r3, [r1, #16]
 8011488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801148c:	4293      	cmp	r3, r2
 801148e:	bfb8      	it	lt
 8011490:	4613      	movlt	r3, r2
 8011492:	f8c9 3000 	str.w	r3, [r9]
 8011496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801149a:	4606      	mov	r6, r0
 801149c:	460c      	mov	r4, r1
 801149e:	b112      	cbz	r2, 80114a6 <_printf_common+0x2a>
 80114a0:	3301      	adds	r3, #1
 80114a2:	f8c9 3000 	str.w	r3, [r9]
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	0699      	lsls	r1, r3, #26
 80114aa:	bf42      	ittt	mi
 80114ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80114b0:	3302      	addmi	r3, #2
 80114b2:	f8c9 3000 	strmi.w	r3, [r9]
 80114b6:	6825      	ldr	r5, [r4, #0]
 80114b8:	f015 0506 	ands.w	r5, r5, #6
 80114bc:	d107      	bne.n	80114ce <_printf_common+0x52>
 80114be:	f104 0a19 	add.w	sl, r4, #25
 80114c2:	68e3      	ldr	r3, [r4, #12]
 80114c4:	f8d9 2000 	ldr.w	r2, [r9]
 80114c8:	1a9b      	subs	r3, r3, r2
 80114ca:	429d      	cmp	r5, r3
 80114cc:	db29      	blt.n	8011522 <_printf_common+0xa6>
 80114ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80114d2:	6822      	ldr	r2, [r4, #0]
 80114d4:	3300      	adds	r3, #0
 80114d6:	bf18      	it	ne
 80114d8:	2301      	movne	r3, #1
 80114da:	0692      	lsls	r2, r2, #26
 80114dc:	d42e      	bmi.n	801153c <_printf_common+0xc0>
 80114de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114e2:	4639      	mov	r1, r7
 80114e4:	4630      	mov	r0, r6
 80114e6:	47c0      	blx	r8
 80114e8:	3001      	adds	r0, #1
 80114ea:	d021      	beq.n	8011530 <_printf_common+0xb4>
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	68e5      	ldr	r5, [r4, #12]
 80114f0:	f8d9 2000 	ldr.w	r2, [r9]
 80114f4:	f003 0306 	and.w	r3, r3, #6
 80114f8:	2b04      	cmp	r3, #4
 80114fa:	bf08      	it	eq
 80114fc:	1aad      	subeq	r5, r5, r2
 80114fe:	68a3      	ldr	r3, [r4, #8]
 8011500:	6922      	ldr	r2, [r4, #16]
 8011502:	bf0c      	ite	eq
 8011504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011508:	2500      	movne	r5, #0
 801150a:	4293      	cmp	r3, r2
 801150c:	bfc4      	itt	gt
 801150e:	1a9b      	subgt	r3, r3, r2
 8011510:	18ed      	addgt	r5, r5, r3
 8011512:	f04f 0900 	mov.w	r9, #0
 8011516:	341a      	adds	r4, #26
 8011518:	454d      	cmp	r5, r9
 801151a:	d11b      	bne.n	8011554 <_printf_common+0xd8>
 801151c:	2000      	movs	r0, #0
 801151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011522:	2301      	movs	r3, #1
 8011524:	4652      	mov	r2, sl
 8011526:	4639      	mov	r1, r7
 8011528:	4630      	mov	r0, r6
 801152a:	47c0      	blx	r8
 801152c:	3001      	adds	r0, #1
 801152e:	d103      	bne.n	8011538 <_printf_common+0xbc>
 8011530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011538:	3501      	adds	r5, #1
 801153a:	e7c2      	b.n	80114c2 <_printf_common+0x46>
 801153c:	18e1      	adds	r1, r4, r3
 801153e:	1c5a      	adds	r2, r3, #1
 8011540:	2030      	movs	r0, #48	; 0x30
 8011542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011546:	4422      	add	r2, r4
 8011548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801154c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011550:	3302      	adds	r3, #2
 8011552:	e7c4      	b.n	80114de <_printf_common+0x62>
 8011554:	2301      	movs	r3, #1
 8011556:	4622      	mov	r2, r4
 8011558:	4639      	mov	r1, r7
 801155a:	4630      	mov	r0, r6
 801155c:	47c0      	blx	r8
 801155e:	3001      	adds	r0, #1
 8011560:	d0e6      	beq.n	8011530 <_printf_common+0xb4>
 8011562:	f109 0901 	add.w	r9, r9, #1
 8011566:	e7d7      	b.n	8011518 <_printf_common+0x9c>

08011568 <_printf_i>:
 8011568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801156c:	4617      	mov	r7, r2
 801156e:	7e0a      	ldrb	r2, [r1, #24]
 8011570:	b085      	sub	sp, #20
 8011572:	2a6e      	cmp	r2, #110	; 0x6e
 8011574:	4698      	mov	r8, r3
 8011576:	4606      	mov	r6, r0
 8011578:	460c      	mov	r4, r1
 801157a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801157c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8011580:	f000 80bc 	beq.w	80116fc <_printf_i+0x194>
 8011584:	d81a      	bhi.n	80115bc <_printf_i+0x54>
 8011586:	2a63      	cmp	r2, #99	; 0x63
 8011588:	d02e      	beq.n	80115e8 <_printf_i+0x80>
 801158a:	d80a      	bhi.n	80115a2 <_printf_i+0x3a>
 801158c:	2a00      	cmp	r2, #0
 801158e:	f000 80c8 	beq.w	8011722 <_printf_i+0x1ba>
 8011592:	2a58      	cmp	r2, #88	; 0x58
 8011594:	f000 808a 	beq.w	80116ac <_printf_i+0x144>
 8011598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801159c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80115a0:	e02a      	b.n	80115f8 <_printf_i+0x90>
 80115a2:	2a64      	cmp	r2, #100	; 0x64
 80115a4:	d001      	beq.n	80115aa <_printf_i+0x42>
 80115a6:	2a69      	cmp	r2, #105	; 0x69
 80115a8:	d1f6      	bne.n	8011598 <_printf_i+0x30>
 80115aa:	6821      	ldr	r1, [r4, #0]
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80115b2:	d023      	beq.n	80115fc <_printf_i+0x94>
 80115b4:	1d11      	adds	r1, r2, #4
 80115b6:	6019      	str	r1, [r3, #0]
 80115b8:	6813      	ldr	r3, [r2, #0]
 80115ba:	e027      	b.n	801160c <_printf_i+0xa4>
 80115bc:	2a73      	cmp	r2, #115	; 0x73
 80115be:	f000 80b4 	beq.w	801172a <_printf_i+0x1c2>
 80115c2:	d808      	bhi.n	80115d6 <_printf_i+0x6e>
 80115c4:	2a6f      	cmp	r2, #111	; 0x6f
 80115c6:	d02a      	beq.n	801161e <_printf_i+0xb6>
 80115c8:	2a70      	cmp	r2, #112	; 0x70
 80115ca:	d1e5      	bne.n	8011598 <_printf_i+0x30>
 80115cc:	680a      	ldr	r2, [r1, #0]
 80115ce:	f042 0220 	orr.w	r2, r2, #32
 80115d2:	600a      	str	r2, [r1, #0]
 80115d4:	e003      	b.n	80115de <_printf_i+0x76>
 80115d6:	2a75      	cmp	r2, #117	; 0x75
 80115d8:	d021      	beq.n	801161e <_printf_i+0xb6>
 80115da:	2a78      	cmp	r2, #120	; 0x78
 80115dc:	d1dc      	bne.n	8011598 <_printf_i+0x30>
 80115de:	2278      	movs	r2, #120	; 0x78
 80115e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80115e4:	496e      	ldr	r1, [pc, #440]	; (80117a0 <_printf_i+0x238>)
 80115e6:	e064      	b.n	80116b2 <_printf_i+0x14a>
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80115ee:	1d11      	adds	r1, r2, #4
 80115f0:	6019      	str	r1, [r3, #0]
 80115f2:	6813      	ldr	r3, [r2, #0]
 80115f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115f8:	2301      	movs	r3, #1
 80115fa:	e0a3      	b.n	8011744 <_printf_i+0x1dc>
 80115fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8011600:	f102 0104 	add.w	r1, r2, #4
 8011604:	6019      	str	r1, [r3, #0]
 8011606:	d0d7      	beq.n	80115b8 <_printf_i+0x50>
 8011608:	f9b2 3000 	ldrsh.w	r3, [r2]
 801160c:	2b00      	cmp	r3, #0
 801160e:	da03      	bge.n	8011618 <_printf_i+0xb0>
 8011610:	222d      	movs	r2, #45	; 0x2d
 8011612:	425b      	negs	r3, r3
 8011614:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011618:	4962      	ldr	r1, [pc, #392]	; (80117a4 <_printf_i+0x23c>)
 801161a:	220a      	movs	r2, #10
 801161c:	e017      	b.n	801164e <_printf_i+0xe6>
 801161e:	6820      	ldr	r0, [r4, #0]
 8011620:	6819      	ldr	r1, [r3, #0]
 8011622:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011626:	d003      	beq.n	8011630 <_printf_i+0xc8>
 8011628:	1d08      	adds	r0, r1, #4
 801162a:	6018      	str	r0, [r3, #0]
 801162c:	680b      	ldr	r3, [r1, #0]
 801162e:	e006      	b.n	801163e <_printf_i+0xd6>
 8011630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011634:	f101 0004 	add.w	r0, r1, #4
 8011638:	6018      	str	r0, [r3, #0]
 801163a:	d0f7      	beq.n	801162c <_printf_i+0xc4>
 801163c:	880b      	ldrh	r3, [r1, #0]
 801163e:	4959      	ldr	r1, [pc, #356]	; (80117a4 <_printf_i+0x23c>)
 8011640:	2a6f      	cmp	r2, #111	; 0x6f
 8011642:	bf14      	ite	ne
 8011644:	220a      	movne	r2, #10
 8011646:	2208      	moveq	r2, #8
 8011648:	2000      	movs	r0, #0
 801164a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801164e:	6865      	ldr	r5, [r4, #4]
 8011650:	60a5      	str	r5, [r4, #8]
 8011652:	2d00      	cmp	r5, #0
 8011654:	f2c0 809c 	blt.w	8011790 <_printf_i+0x228>
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	f020 0004 	bic.w	r0, r0, #4
 801165e:	6020      	str	r0, [r4, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d13f      	bne.n	80116e4 <_printf_i+0x17c>
 8011664:	2d00      	cmp	r5, #0
 8011666:	f040 8095 	bne.w	8011794 <_printf_i+0x22c>
 801166a:	4675      	mov	r5, lr
 801166c:	2a08      	cmp	r2, #8
 801166e:	d10b      	bne.n	8011688 <_printf_i+0x120>
 8011670:	6823      	ldr	r3, [r4, #0]
 8011672:	07da      	lsls	r2, r3, #31
 8011674:	d508      	bpl.n	8011688 <_printf_i+0x120>
 8011676:	6923      	ldr	r3, [r4, #16]
 8011678:	6862      	ldr	r2, [r4, #4]
 801167a:	429a      	cmp	r2, r3
 801167c:	bfde      	ittt	le
 801167e:	2330      	movle	r3, #48	; 0x30
 8011680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011684:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011688:	ebae 0305 	sub.w	r3, lr, r5
 801168c:	6123      	str	r3, [r4, #16]
 801168e:	f8cd 8000 	str.w	r8, [sp]
 8011692:	463b      	mov	r3, r7
 8011694:	aa03      	add	r2, sp, #12
 8011696:	4621      	mov	r1, r4
 8011698:	4630      	mov	r0, r6
 801169a:	f7ff feef 	bl	801147c <_printf_common>
 801169e:	3001      	adds	r0, #1
 80116a0:	d155      	bne.n	801174e <_printf_i+0x1e6>
 80116a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116a6:	b005      	add	sp, #20
 80116a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80116b0:	493c      	ldr	r1, [pc, #240]	; (80117a4 <_printf_i+0x23c>)
 80116b2:	6822      	ldr	r2, [r4, #0]
 80116b4:	6818      	ldr	r0, [r3, #0]
 80116b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80116ba:	f100 0504 	add.w	r5, r0, #4
 80116be:	601d      	str	r5, [r3, #0]
 80116c0:	d001      	beq.n	80116c6 <_printf_i+0x15e>
 80116c2:	6803      	ldr	r3, [r0, #0]
 80116c4:	e002      	b.n	80116cc <_printf_i+0x164>
 80116c6:	0655      	lsls	r5, r2, #25
 80116c8:	d5fb      	bpl.n	80116c2 <_printf_i+0x15a>
 80116ca:	8803      	ldrh	r3, [r0, #0]
 80116cc:	07d0      	lsls	r0, r2, #31
 80116ce:	bf44      	itt	mi
 80116d0:	f042 0220 	orrmi.w	r2, r2, #32
 80116d4:	6022      	strmi	r2, [r4, #0]
 80116d6:	b91b      	cbnz	r3, 80116e0 <_printf_i+0x178>
 80116d8:	6822      	ldr	r2, [r4, #0]
 80116da:	f022 0220 	bic.w	r2, r2, #32
 80116de:	6022      	str	r2, [r4, #0]
 80116e0:	2210      	movs	r2, #16
 80116e2:	e7b1      	b.n	8011648 <_printf_i+0xe0>
 80116e4:	4675      	mov	r5, lr
 80116e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80116ea:	fb02 3310 	mls	r3, r2, r0, r3
 80116ee:	5ccb      	ldrb	r3, [r1, r3]
 80116f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80116f4:	4603      	mov	r3, r0
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d1f5      	bne.n	80116e6 <_printf_i+0x17e>
 80116fa:	e7b7      	b.n	801166c <_printf_i+0x104>
 80116fc:	6808      	ldr	r0, [r1, #0]
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	6949      	ldr	r1, [r1, #20]
 8011702:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011706:	d004      	beq.n	8011712 <_printf_i+0x1aa>
 8011708:	1d10      	adds	r0, r2, #4
 801170a:	6018      	str	r0, [r3, #0]
 801170c:	6813      	ldr	r3, [r2, #0]
 801170e:	6019      	str	r1, [r3, #0]
 8011710:	e007      	b.n	8011722 <_printf_i+0x1ba>
 8011712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011716:	f102 0004 	add.w	r0, r2, #4
 801171a:	6018      	str	r0, [r3, #0]
 801171c:	6813      	ldr	r3, [r2, #0]
 801171e:	d0f6      	beq.n	801170e <_printf_i+0x1a6>
 8011720:	8019      	strh	r1, [r3, #0]
 8011722:	2300      	movs	r3, #0
 8011724:	6123      	str	r3, [r4, #16]
 8011726:	4675      	mov	r5, lr
 8011728:	e7b1      	b.n	801168e <_printf_i+0x126>
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	1d11      	adds	r1, r2, #4
 801172e:	6019      	str	r1, [r3, #0]
 8011730:	6815      	ldr	r5, [r2, #0]
 8011732:	6862      	ldr	r2, [r4, #4]
 8011734:	2100      	movs	r1, #0
 8011736:	4628      	mov	r0, r5
 8011738:	f7ee fd6a 	bl	8000210 <memchr>
 801173c:	b108      	cbz	r0, 8011742 <_printf_i+0x1da>
 801173e:	1b40      	subs	r0, r0, r5
 8011740:	6060      	str	r0, [r4, #4]
 8011742:	6863      	ldr	r3, [r4, #4]
 8011744:	6123      	str	r3, [r4, #16]
 8011746:	2300      	movs	r3, #0
 8011748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801174c:	e79f      	b.n	801168e <_printf_i+0x126>
 801174e:	6923      	ldr	r3, [r4, #16]
 8011750:	462a      	mov	r2, r5
 8011752:	4639      	mov	r1, r7
 8011754:	4630      	mov	r0, r6
 8011756:	47c0      	blx	r8
 8011758:	3001      	adds	r0, #1
 801175a:	d0a2      	beq.n	80116a2 <_printf_i+0x13a>
 801175c:	6823      	ldr	r3, [r4, #0]
 801175e:	079b      	lsls	r3, r3, #30
 8011760:	d507      	bpl.n	8011772 <_printf_i+0x20a>
 8011762:	2500      	movs	r5, #0
 8011764:	f104 0919 	add.w	r9, r4, #25
 8011768:	68e3      	ldr	r3, [r4, #12]
 801176a:	9a03      	ldr	r2, [sp, #12]
 801176c:	1a9b      	subs	r3, r3, r2
 801176e:	429d      	cmp	r5, r3
 8011770:	db05      	blt.n	801177e <_printf_i+0x216>
 8011772:	68e0      	ldr	r0, [r4, #12]
 8011774:	9b03      	ldr	r3, [sp, #12]
 8011776:	4298      	cmp	r0, r3
 8011778:	bfb8      	it	lt
 801177a:	4618      	movlt	r0, r3
 801177c:	e793      	b.n	80116a6 <_printf_i+0x13e>
 801177e:	2301      	movs	r3, #1
 8011780:	464a      	mov	r2, r9
 8011782:	4639      	mov	r1, r7
 8011784:	4630      	mov	r0, r6
 8011786:	47c0      	blx	r8
 8011788:	3001      	adds	r0, #1
 801178a:	d08a      	beq.n	80116a2 <_printf_i+0x13a>
 801178c:	3501      	adds	r5, #1
 801178e:	e7eb      	b.n	8011768 <_printf_i+0x200>
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1a7      	bne.n	80116e4 <_printf_i+0x17c>
 8011794:	780b      	ldrb	r3, [r1, #0]
 8011796:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801179a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801179e:	e765      	b.n	801166c <_printf_i+0x104>
 80117a0:	0801402a 	.word	0x0801402a
 80117a4:	08014019 	.word	0x08014019

080117a8 <__sread>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	460c      	mov	r4, r1
 80117ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b0:	f000 fa48 	bl	8011c44 <_read_r>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	bfab      	itete	ge
 80117b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117ba:	89a3      	ldrhlt	r3, [r4, #12]
 80117bc:	181b      	addge	r3, r3, r0
 80117be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117c2:	bfac      	ite	ge
 80117c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117c6:	81a3      	strhlt	r3, [r4, #12]
 80117c8:	bd10      	pop	{r4, pc}

080117ca <__swrite>:
 80117ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ce:	461f      	mov	r7, r3
 80117d0:	898b      	ldrh	r3, [r1, #12]
 80117d2:	05db      	lsls	r3, r3, #23
 80117d4:	4605      	mov	r5, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	4616      	mov	r6, r2
 80117da:	d505      	bpl.n	80117e8 <__swrite+0x1e>
 80117dc:	2302      	movs	r3, #2
 80117de:	2200      	movs	r2, #0
 80117e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e4:	f000 f9b8 	bl	8011b58 <_lseek_r>
 80117e8:	89a3      	ldrh	r3, [r4, #12]
 80117ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117f2:	81a3      	strh	r3, [r4, #12]
 80117f4:	4632      	mov	r2, r6
 80117f6:	463b      	mov	r3, r7
 80117f8:	4628      	mov	r0, r5
 80117fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117fe:	f000 b869 	b.w	80118d4 <_write_r>

08011802 <__sseek>:
 8011802:	b510      	push	{r4, lr}
 8011804:	460c      	mov	r4, r1
 8011806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180a:	f000 f9a5 	bl	8011b58 <_lseek_r>
 801180e:	1c43      	adds	r3, r0, #1
 8011810:	89a3      	ldrh	r3, [r4, #12]
 8011812:	bf15      	itete	ne
 8011814:	6560      	strne	r0, [r4, #84]	; 0x54
 8011816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801181a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801181e:	81a3      	strheq	r3, [r4, #12]
 8011820:	bf18      	it	ne
 8011822:	81a3      	strhne	r3, [r4, #12]
 8011824:	bd10      	pop	{r4, pc}

08011826 <__sclose>:
 8011826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801182a:	f000 b8d3 	b.w	80119d4 <_close_r>
	...

08011830 <__swbuf_r>:
 8011830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011832:	460e      	mov	r6, r1
 8011834:	4614      	mov	r4, r2
 8011836:	4605      	mov	r5, r0
 8011838:	b118      	cbz	r0, 8011842 <__swbuf_r+0x12>
 801183a:	6983      	ldr	r3, [r0, #24]
 801183c:	b90b      	cbnz	r3, 8011842 <__swbuf_r+0x12>
 801183e:	f7ff fc51 	bl	80110e4 <__sinit>
 8011842:	4b21      	ldr	r3, [pc, #132]	; (80118c8 <__swbuf_r+0x98>)
 8011844:	429c      	cmp	r4, r3
 8011846:	d12a      	bne.n	801189e <__swbuf_r+0x6e>
 8011848:	686c      	ldr	r4, [r5, #4]
 801184a:	69a3      	ldr	r3, [r4, #24]
 801184c:	60a3      	str	r3, [r4, #8]
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	071a      	lsls	r2, r3, #28
 8011852:	d52e      	bpl.n	80118b2 <__swbuf_r+0x82>
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	b363      	cbz	r3, 80118b2 <__swbuf_r+0x82>
 8011858:	6923      	ldr	r3, [r4, #16]
 801185a:	6820      	ldr	r0, [r4, #0]
 801185c:	1ac0      	subs	r0, r0, r3
 801185e:	6963      	ldr	r3, [r4, #20]
 8011860:	b2f6      	uxtb	r6, r6
 8011862:	4298      	cmp	r0, r3
 8011864:	4637      	mov	r7, r6
 8011866:	db04      	blt.n	8011872 <__swbuf_r+0x42>
 8011868:	4621      	mov	r1, r4
 801186a:	4628      	mov	r0, r5
 801186c:	f000 f94a 	bl	8011b04 <_fflush_r>
 8011870:	bb28      	cbnz	r0, 80118be <__swbuf_r+0x8e>
 8011872:	68a3      	ldr	r3, [r4, #8]
 8011874:	3b01      	subs	r3, #1
 8011876:	60a3      	str	r3, [r4, #8]
 8011878:	6823      	ldr	r3, [r4, #0]
 801187a:	1c5a      	adds	r2, r3, #1
 801187c:	6022      	str	r2, [r4, #0]
 801187e:	701e      	strb	r6, [r3, #0]
 8011880:	6963      	ldr	r3, [r4, #20]
 8011882:	3001      	adds	r0, #1
 8011884:	4298      	cmp	r0, r3
 8011886:	d004      	beq.n	8011892 <__swbuf_r+0x62>
 8011888:	89a3      	ldrh	r3, [r4, #12]
 801188a:	07db      	lsls	r3, r3, #31
 801188c:	d519      	bpl.n	80118c2 <__swbuf_r+0x92>
 801188e:	2e0a      	cmp	r6, #10
 8011890:	d117      	bne.n	80118c2 <__swbuf_r+0x92>
 8011892:	4621      	mov	r1, r4
 8011894:	4628      	mov	r0, r5
 8011896:	f000 f935 	bl	8011b04 <_fflush_r>
 801189a:	b190      	cbz	r0, 80118c2 <__swbuf_r+0x92>
 801189c:	e00f      	b.n	80118be <__swbuf_r+0x8e>
 801189e:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <__swbuf_r+0x9c>)
 80118a0:	429c      	cmp	r4, r3
 80118a2:	d101      	bne.n	80118a8 <__swbuf_r+0x78>
 80118a4:	68ac      	ldr	r4, [r5, #8]
 80118a6:	e7d0      	b.n	801184a <__swbuf_r+0x1a>
 80118a8:	4b09      	ldr	r3, [pc, #36]	; (80118d0 <__swbuf_r+0xa0>)
 80118aa:	429c      	cmp	r4, r3
 80118ac:	bf08      	it	eq
 80118ae:	68ec      	ldreq	r4, [r5, #12]
 80118b0:	e7cb      	b.n	801184a <__swbuf_r+0x1a>
 80118b2:	4621      	mov	r1, r4
 80118b4:	4628      	mov	r0, r5
 80118b6:	f000 f81f 	bl	80118f8 <__swsetup_r>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d0cc      	beq.n	8011858 <__swbuf_r+0x28>
 80118be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80118c2:	4638      	mov	r0, r7
 80118c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	08013fc4 	.word	0x08013fc4
 80118cc:	08013fe4 	.word	0x08013fe4
 80118d0:	08013fa4 	.word	0x08013fa4

080118d4 <_write_r>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	4c07      	ldr	r4, [pc, #28]	; (80118f4 <_write_r+0x20>)
 80118d8:	4605      	mov	r5, r0
 80118da:	4608      	mov	r0, r1
 80118dc:	4611      	mov	r1, r2
 80118de:	2200      	movs	r2, #0
 80118e0:	6022      	str	r2, [r4, #0]
 80118e2:	461a      	mov	r2, r3
 80118e4:	f7ff f898 	bl	8010a18 <_write>
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d102      	bne.n	80118f2 <_write_r+0x1e>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	b103      	cbz	r3, 80118f2 <_write_r+0x1e>
 80118f0:	602b      	str	r3, [r5, #0]
 80118f2:	bd38      	pop	{r3, r4, r5, pc}
 80118f4:	2000bb4c 	.word	0x2000bb4c

080118f8 <__swsetup_r>:
 80118f8:	4b32      	ldr	r3, [pc, #200]	; (80119c4 <__swsetup_r+0xcc>)
 80118fa:	b570      	push	{r4, r5, r6, lr}
 80118fc:	681d      	ldr	r5, [r3, #0]
 80118fe:	4606      	mov	r6, r0
 8011900:	460c      	mov	r4, r1
 8011902:	b125      	cbz	r5, 801190e <__swsetup_r+0x16>
 8011904:	69ab      	ldr	r3, [r5, #24]
 8011906:	b913      	cbnz	r3, 801190e <__swsetup_r+0x16>
 8011908:	4628      	mov	r0, r5
 801190a:	f7ff fbeb 	bl	80110e4 <__sinit>
 801190e:	4b2e      	ldr	r3, [pc, #184]	; (80119c8 <__swsetup_r+0xd0>)
 8011910:	429c      	cmp	r4, r3
 8011912:	d10f      	bne.n	8011934 <__swsetup_r+0x3c>
 8011914:	686c      	ldr	r4, [r5, #4]
 8011916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801191a:	b29a      	uxth	r2, r3
 801191c:	0715      	lsls	r5, r2, #28
 801191e:	d42c      	bmi.n	801197a <__swsetup_r+0x82>
 8011920:	06d0      	lsls	r0, r2, #27
 8011922:	d411      	bmi.n	8011948 <__swsetup_r+0x50>
 8011924:	2209      	movs	r2, #9
 8011926:	6032      	str	r2, [r6, #0]
 8011928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801192c:	81a3      	strh	r3, [r4, #12]
 801192e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	4b25      	ldr	r3, [pc, #148]	; (80119cc <__swsetup_r+0xd4>)
 8011936:	429c      	cmp	r4, r3
 8011938:	d101      	bne.n	801193e <__swsetup_r+0x46>
 801193a:	68ac      	ldr	r4, [r5, #8]
 801193c:	e7eb      	b.n	8011916 <__swsetup_r+0x1e>
 801193e:	4b24      	ldr	r3, [pc, #144]	; (80119d0 <__swsetup_r+0xd8>)
 8011940:	429c      	cmp	r4, r3
 8011942:	bf08      	it	eq
 8011944:	68ec      	ldreq	r4, [r5, #12]
 8011946:	e7e6      	b.n	8011916 <__swsetup_r+0x1e>
 8011948:	0751      	lsls	r1, r2, #29
 801194a:	d512      	bpl.n	8011972 <__swsetup_r+0x7a>
 801194c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801194e:	b141      	cbz	r1, 8011962 <__swsetup_r+0x6a>
 8011950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011954:	4299      	cmp	r1, r3
 8011956:	d002      	beq.n	801195e <__swsetup_r+0x66>
 8011958:	4630      	mov	r0, r6
 801195a:	f7ff fa75 	bl	8010e48 <_free_r>
 801195e:	2300      	movs	r3, #0
 8011960:	6363      	str	r3, [r4, #52]	; 0x34
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011968:	81a3      	strh	r3, [r4, #12]
 801196a:	2300      	movs	r3, #0
 801196c:	6063      	str	r3, [r4, #4]
 801196e:	6923      	ldr	r3, [r4, #16]
 8011970:	6023      	str	r3, [r4, #0]
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	f043 0308 	orr.w	r3, r3, #8
 8011978:	81a3      	strh	r3, [r4, #12]
 801197a:	6923      	ldr	r3, [r4, #16]
 801197c:	b94b      	cbnz	r3, 8011992 <__swsetup_r+0x9a>
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011988:	d003      	beq.n	8011992 <__swsetup_r+0x9a>
 801198a:	4621      	mov	r1, r4
 801198c:	4630      	mov	r0, r6
 801198e:	f000 f919 	bl	8011bc4 <__smakebuf_r>
 8011992:	89a2      	ldrh	r2, [r4, #12]
 8011994:	f012 0301 	ands.w	r3, r2, #1
 8011998:	d00c      	beq.n	80119b4 <__swsetup_r+0xbc>
 801199a:	2300      	movs	r3, #0
 801199c:	60a3      	str	r3, [r4, #8]
 801199e:	6963      	ldr	r3, [r4, #20]
 80119a0:	425b      	negs	r3, r3
 80119a2:	61a3      	str	r3, [r4, #24]
 80119a4:	6923      	ldr	r3, [r4, #16]
 80119a6:	b953      	cbnz	r3, 80119be <__swsetup_r+0xc6>
 80119a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80119b0:	d1ba      	bne.n	8011928 <__swsetup_r+0x30>
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
 80119b4:	0792      	lsls	r2, r2, #30
 80119b6:	bf58      	it	pl
 80119b8:	6963      	ldrpl	r3, [r4, #20]
 80119ba:	60a3      	str	r3, [r4, #8]
 80119bc:	e7f2      	b.n	80119a4 <__swsetup_r+0xac>
 80119be:	2000      	movs	r0, #0
 80119c0:	e7f7      	b.n	80119b2 <__swsetup_r+0xba>
 80119c2:	bf00      	nop
 80119c4:	20000034 	.word	0x20000034
 80119c8:	08013fc4 	.word	0x08013fc4
 80119cc:	08013fe4 	.word	0x08013fe4
 80119d0:	08013fa4 	.word	0x08013fa4

080119d4 <_close_r>:
 80119d4:	b538      	push	{r3, r4, r5, lr}
 80119d6:	4c06      	ldr	r4, [pc, #24]	; (80119f0 <_close_r+0x1c>)
 80119d8:	2300      	movs	r3, #0
 80119da:	4605      	mov	r5, r0
 80119dc:	4608      	mov	r0, r1
 80119de:	6023      	str	r3, [r4, #0]
 80119e0:	f7ff f828 	bl	8010a34 <_close>
 80119e4:	1c43      	adds	r3, r0, #1
 80119e6:	d102      	bne.n	80119ee <_close_r+0x1a>
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	b103      	cbz	r3, 80119ee <_close_r+0x1a>
 80119ec:	602b      	str	r3, [r5, #0]
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
 80119f0:	2000bb4c 	.word	0x2000bb4c

080119f4 <__sflush_r>:
 80119f4:	898a      	ldrh	r2, [r1, #12]
 80119f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fa:	4605      	mov	r5, r0
 80119fc:	0710      	lsls	r0, r2, #28
 80119fe:	460c      	mov	r4, r1
 8011a00:	d45a      	bmi.n	8011ab8 <__sflush_r+0xc4>
 8011a02:	684b      	ldr	r3, [r1, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dc05      	bgt.n	8011a14 <__sflush_r+0x20>
 8011a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	dc02      	bgt.n	8011a14 <__sflush_r+0x20>
 8011a0e:	2000      	movs	r0, #0
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a16:	2e00      	cmp	r6, #0
 8011a18:	d0f9      	beq.n	8011a0e <__sflush_r+0x1a>
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a20:	682f      	ldr	r7, [r5, #0]
 8011a22:	602b      	str	r3, [r5, #0]
 8011a24:	d033      	beq.n	8011a8e <__sflush_r+0x9a>
 8011a26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a28:	89a3      	ldrh	r3, [r4, #12]
 8011a2a:	075a      	lsls	r2, r3, #29
 8011a2c:	d505      	bpl.n	8011a3a <__sflush_r+0x46>
 8011a2e:	6863      	ldr	r3, [r4, #4]
 8011a30:	1ac0      	subs	r0, r0, r3
 8011a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a34:	b10b      	cbz	r3, 8011a3a <__sflush_r+0x46>
 8011a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a38:	1ac0      	subs	r0, r0, r3
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a40:	6a21      	ldr	r1, [r4, #32]
 8011a42:	4628      	mov	r0, r5
 8011a44:	47b0      	blx	r6
 8011a46:	1c43      	adds	r3, r0, #1
 8011a48:	89a3      	ldrh	r3, [r4, #12]
 8011a4a:	d106      	bne.n	8011a5a <__sflush_r+0x66>
 8011a4c:	6829      	ldr	r1, [r5, #0]
 8011a4e:	291d      	cmp	r1, #29
 8011a50:	d84b      	bhi.n	8011aea <__sflush_r+0xf6>
 8011a52:	4a2b      	ldr	r2, [pc, #172]	; (8011b00 <__sflush_r+0x10c>)
 8011a54:	40ca      	lsrs	r2, r1
 8011a56:	07d6      	lsls	r6, r2, #31
 8011a58:	d547      	bpl.n	8011aea <__sflush_r+0xf6>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	6062      	str	r2, [r4, #4]
 8011a5e:	04d9      	lsls	r1, r3, #19
 8011a60:	6922      	ldr	r2, [r4, #16]
 8011a62:	6022      	str	r2, [r4, #0]
 8011a64:	d504      	bpl.n	8011a70 <__sflush_r+0x7c>
 8011a66:	1c42      	adds	r2, r0, #1
 8011a68:	d101      	bne.n	8011a6e <__sflush_r+0x7a>
 8011a6a:	682b      	ldr	r3, [r5, #0]
 8011a6c:	b903      	cbnz	r3, 8011a70 <__sflush_r+0x7c>
 8011a6e:	6560      	str	r0, [r4, #84]	; 0x54
 8011a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a72:	602f      	str	r7, [r5, #0]
 8011a74:	2900      	cmp	r1, #0
 8011a76:	d0ca      	beq.n	8011a0e <__sflush_r+0x1a>
 8011a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a7c:	4299      	cmp	r1, r3
 8011a7e:	d002      	beq.n	8011a86 <__sflush_r+0x92>
 8011a80:	4628      	mov	r0, r5
 8011a82:	f7ff f9e1 	bl	8010e48 <_free_r>
 8011a86:	2000      	movs	r0, #0
 8011a88:	6360      	str	r0, [r4, #52]	; 0x34
 8011a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8e:	6a21      	ldr	r1, [r4, #32]
 8011a90:	2301      	movs	r3, #1
 8011a92:	4628      	mov	r0, r5
 8011a94:	47b0      	blx	r6
 8011a96:	1c41      	adds	r1, r0, #1
 8011a98:	d1c6      	bne.n	8011a28 <__sflush_r+0x34>
 8011a9a:	682b      	ldr	r3, [r5, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d0c3      	beq.n	8011a28 <__sflush_r+0x34>
 8011aa0:	2b1d      	cmp	r3, #29
 8011aa2:	d001      	beq.n	8011aa8 <__sflush_r+0xb4>
 8011aa4:	2b16      	cmp	r3, #22
 8011aa6:	d101      	bne.n	8011aac <__sflush_r+0xb8>
 8011aa8:	602f      	str	r7, [r5, #0]
 8011aaa:	e7b0      	b.n	8011a0e <__sflush_r+0x1a>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab2:	81a3      	strh	r3, [r4, #12]
 8011ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab8:	690f      	ldr	r7, [r1, #16]
 8011aba:	2f00      	cmp	r7, #0
 8011abc:	d0a7      	beq.n	8011a0e <__sflush_r+0x1a>
 8011abe:	0793      	lsls	r3, r2, #30
 8011ac0:	680e      	ldr	r6, [r1, #0]
 8011ac2:	bf08      	it	eq
 8011ac4:	694b      	ldreq	r3, [r1, #20]
 8011ac6:	600f      	str	r7, [r1, #0]
 8011ac8:	bf18      	it	ne
 8011aca:	2300      	movne	r3, #0
 8011acc:	eba6 0807 	sub.w	r8, r6, r7
 8011ad0:	608b      	str	r3, [r1, #8]
 8011ad2:	f1b8 0f00 	cmp.w	r8, #0
 8011ad6:	dd9a      	ble.n	8011a0e <__sflush_r+0x1a>
 8011ad8:	4643      	mov	r3, r8
 8011ada:	463a      	mov	r2, r7
 8011adc:	6a21      	ldr	r1, [r4, #32]
 8011ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b0      	blx	r6
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	dc07      	bgt.n	8011af8 <__sflush_r+0x104>
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af8:	4407      	add	r7, r0
 8011afa:	eba8 0800 	sub.w	r8, r8, r0
 8011afe:	e7e8      	b.n	8011ad2 <__sflush_r+0xde>
 8011b00:	20400001 	.word	0x20400001

08011b04 <_fflush_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	690b      	ldr	r3, [r1, #16]
 8011b08:	4605      	mov	r5, r0
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	b1db      	cbz	r3, 8011b46 <_fflush_r+0x42>
 8011b0e:	b118      	cbz	r0, 8011b18 <_fflush_r+0x14>
 8011b10:	6983      	ldr	r3, [r0, #24]
 8011b12:	b90b      	cbnz	r3, 8011b18 <_fflush_r+0x14>
 8011b14:	f7ff fae6 	bl	80110e4 <__sinit>
 8011b18:	4b0c      	ldr	r3, [pc, #48]	; (8011b4c <_fflush_r+0x48>)
 8011b1a:	429c      	cmp	r4, r3
 8011b1c:	d109      	bne.n	8011b32 <_fflush_r+0x2e>
 8011b1e:	686c      	ldr	r4, [r5, #4]
 8011b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b24:	b17b      	cbz	r3, 8011b46 <_fflush_r+0x42>
 8011b26:	4621      	mov	r1, r4
 8011b28:	4628      	mov	r0, r5
 8011b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b2e:	f7ff bf61 	b.w	80119f4 <__sflush_r>
 8011b32:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <_fflush_r+0x4c>)
 8011b34:	429c      	cmp	r4, r3
 8011b36:	d101      	bne.n	8011b3c <_fflush_r+0x38>
 8011b38:	68ac      	ldr	r4, [r5, #8]
 8011b3a:	e7f1      	b.n	8011b20 <_fflush_r+0x1c>
 8011b3c:	4b05      	ldr	r3, [pc, #20]	; (8011b54 <_fflush_r+0x50>)
 8011b3e:	429c      	cmp	r4, r3
 8011b40:	bf08      	it	eq
 8011b42:	68ec      	ldreq	r4, [r5, #12]
 8011b44:	e7ec      	b.n	8011b20 <_fflush_r+0x1c>
 8011b46:	2000      	movs	r0, #0
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	bf00      	nop
 8011b4c:	08013fc4 	.word	0x08013fc4
 8011b50:	08013fe4 	.word	0x08013fe4
 8011b54:	08013fa4 	.word	0x08013fa4

08011b58 <_lseek_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4c07      	ldr	r4, [pc, #28]	; (8011b78 <_lseek_r+0x20>)
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4611      	mov	r1, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	6022      	str	r2, [r4, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f7fe ff6e 	bl	8010a48 <_lseek>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_lseek_r+0x1e>
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_lseek_r+0x1e>
 8011b74:	602b      	str	r3, [r5, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	2000bb4c 	.word	0x2000bb4c

08011b7c <__swhatbuf_r>:
 8011b7c:	b570      	push	{r4, r5, r6, lr}
 8011b7e:	460e      	mov	r6, r1
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	2900      	cmp	r1, #0
 8011b86:	b090      	sub	sp, #64	; 0x40
 8011b88:	4614      	mov	r4, r2
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	da07      	bge.n	8011b9e <__swhatbuf_r+0x22>
 8011b8e:	2300      	movs	r3, #0
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	89b3      	ldrh	r3, [r6, #12]
 8011b94:	061a      	lsls	r2, r3, #24
 8011b96:	d410      	bmi.n	8011bba <__swhatbuf_r+0x3e>
 8011b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b9c:	e00e      	b.n	8011bbc <__swhatbuf_r+0x40>
 8011b9e:	aa01      	add	r2, sp, #4
 8011ba0:	f000 f862 	bl	8011c68 <_fstat_r>
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	dbf2      	blt.n	8011b8e <__swhatbuf_r+0x12>
 8011ba8:	9a02      	ldr	r2, [sp, #8]
 8011baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bb2:	425a      	negs	r2, r3
 8011bb4:	415a      	adcs	r2, r3
 8011bb6:	602a      	str	r2, [r5, #0]
 8011bb8:	e7ee      	b.n	8011b98 <__swhatbuf_r+0x1c>
 8011bba:	2340      	movs	r3, #64	; 0x40
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	6023      	str	r3, [r4, #0]
 8011bc0:	b010      	add	sp, #64	; 0x40
 8011bc2:	bd70      	pop	{r4, r5, r6, pc}

08011bc4 <__smakebuf_r>:
 8011bc4:	898b      	ldrh	r3, [r1, #12]
 8011bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bc8:	079d      	lsls	r5, r3, #30
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460c      	mov	r4, r1
 8011bce:	d507      	bpl.n	8011be0 <__smakebuf_r+0x1c>
 8011bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	6123      	str	r3, [r4, #16]
 8011bd8:	2301      	movs	r3, #1
 8011bda:	6163      	str	r3, [r4, #20]
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd70      	pop	{r4, r5, r6, pc}
 8011be0:	ab01      	add	r3, sp, #4
 8011be2:	466a      	mov	r2, sp
 8011be4:	f7ff ffca 	bl	8011b7c <__swhatbuf_r>
 8011be8:	9900      	ldr	r1, [sp, #0]
 8011bea:	4605      	mov	r5, r0
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7ff f979 	bl	8010ee4 <_malloc_r>
 8011bf2:	b948      	cbnz	r0, 8011c08 <__smakebuf_r+0x44>
 8011bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bf8:	059a      	lsls	r2, r3, #22
 8011bfa:	d4ef      	bmi.n	8011bdc <__smakebuf_r+0x18>
 8011bfc:	f023 0303 	bic.w	r3, r3, #3
 8011c00:	f043 0302 	orr.w	r3, r3, #2
 8011c04:	81a3      	strh	r3, [r4, #12]
 8011c06:	e7e3      	b.n	8011bd0 <__smakebuf_r+0xc>
 8011c08:	4b0d      	ldr	r3, [pc, #52]	; (8011c40 <__smakebuf_r+0x7c>)
 8011c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	6020      	str	r0, [r4, #0]
 8011c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c14:	81a3      	strh	r3, [r4, #12]
 8011c16:	9b00      	ldr	r3, [sp, #0]
 8011c18:	6163      	str	r3, [r4, #20]
 8011c1a:	9b01      	ldr	r3, [sp, #4]
 8011c1c:	6120      	str	r0, [r4, #16]
 8011c1e:	b15b      	cbz	r3, 8011c38 <__smakebuf_r+0x74>
 8011c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c24:	4630      	mov	r0, r6
 8011c26:	f000 f831 	bl	8011c8c <_isatty_r>
 8011c2a:	b128      	cbz	r0, 8011c38 <__smakebuf_r+0x74>
 8011c2c:	89a3      	ldrh	r3, [r4, #12]
 8011c2e:	f023 0303 	bic.w	r3, r3, #3
 8011c32:	f043 0301 	orr.w	r3, r3, #1
 8011c36:	81a3      	strh	r3, [r4, #12]
 8011c38:	89a3      	ldrh	r3, [r4, #12]
 8011c3a:	431d      	orrs	r5, r3
 8011c3c:	81a5      	strh	r5, [r4, #12]
 8011c3e:	e7cd      	b.n	8011bdc <__smakebuf_r+0x18>
 8011c40:	08011065 	.word	0x08011065

08011c44 <_read_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4c07      	ldr	r4, [pc, #28]	; (8011c64 <_read_r+0x20>)
 8011c48:	4605      	mov	r5, r0
 8011c4a:	4608      	mov	r0, r1
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	6022      	str	r2, [r4, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	f7fe fefa 	bl	8010a4c <_read>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_read_r+0x1e>
 8011c5c:	6823      	ldr	r3, [r4, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_read_r+0x1e>
 8011c60:	602b      	str	r3, [r5, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	2000bb4c 	.word	0x2000bb4c

08011c68 <_fstat_r>:
 8011c68:	b538      	push	{r3, r4, r5, lr}
 8011c6a:	4c07      	ldr	r4, [pc, #28]	; (8011c88 <_fstat_r+0x20>)
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	4605      	mov	r5, r0
 8011c70:	4608      	mov	r0, r1
 8011c72:	4611      	mov	r1, r2
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	f7fe fee0 	bl	8010a3a <_fstat>
 8011c7a:	1c43      	adds	r3, r0, #1
 8011c7c:	d102      	bne.n	8011c84 <_fstat_r+0x1c>
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	b103      	cbz	r3, 8011c84 <_fstat_r+0x1c>
 8011c82:	602b      	str	r3, [r5, #0]
 8011c84:	bd38      	pop	{r3, r4, r5, pc}
 8011c86:	bf00      	nop
 8011c88:	2000bb4c 	.word	0x2000bb4c

08011c8c <_isatty_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4c06      	ldr	r4, [pc, #24]	; (8011ca8 <_isatty_r+0x1c>)
 8011c90:	2300      	movs	r3, #0
 8011c92:	4605      	mov	r5, r0
 8011c94:	4608      	mov	r0, r1
 8011c96:	6023      	str	r3, [r4, #0]
 8011c98:	f7fe fed4 	bl	8010a44 <_isatty>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	d102      	bne.n	8011ca6 <_isatty_r+0x1a>
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	b103      	cbz	r3, 8011ca6 <_isatty_r+0x1a>
 8011ca4:	602b      	str	r3, [r5, #0]
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	2000bb4c 	.word	0x2000bb4c

08011cac <_init>:
 8011cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cae:	bf00      	nop
 8011cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cb2:	bc08      	pop	{r3}
 8011cb4:	469e      	mov	lr, r3
 8011cb6:	4770      	bx	lr

08011cb8 <_fini>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	bf00      	nop
 8011cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cbe:	bc08      	pop	{r3}
 8011cc0:	469e      	mov	lr, r3
 8011cc2:	4770      	bx	lr
